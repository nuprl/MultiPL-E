name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong,\
  \ -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong,\
  \ -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_\
    \ == 0).length\n        val onesZeros = ones + zeros\n        val onesZero = onesZeros\
    \ / 2\n        val onesZeroMinusOne = onesZero - 1\n        val onesZeroMinusOneMinusOne\
    \ = onesZeroMinusOne - 1\n        val onesZeroMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ onesZeroMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n   \
    \     val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = ones", "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros\
    \ = arr.filter(_ % 2 == 1).toList\n        val onesZeros = ones + zeros\n    \
    \    val onesZeros_sorted = onesZeros.sortBy(x => x.toString.toInt)\n        val\
    \ onesZeros_sorted_sorted = onesZeros_sorted.sortBy(x => x.toString.toInt)\n \
    \       val onesZeros_sorted_sorted_sorted = onesZeros_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted.sortBy(x => x.toString.toInt)\n    \
    \    val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x => x.toString.toInt)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        ", "        val ones = arr.filter(_ == 1).size\n\
    \        val zeros = arr.filter(_ == 0).size\n        val onesZeros = ones + zeros\n\
    \        val onesZerosList = onesZeros.toList\n        val onesZerosListSorted\
    \ = onesZerosList.toList.sortBy(_ / onesZerosListSorted.last)\n        val onesZerosListSortedReversed\
    \ = onesZerosListSorted.reverse\n        val onesZerosListSortedReversedSorted\
    \ = onesZerosListSortedReversed.sortBy(_ / onesZerosListSortedReversed.last)\n\
    \        val onesZerosListSortedReversedSortedList = onesZerosListSortedReversedSorted.toList\n\
    \        val onesZerosListSortedReversedSortedListSorted = onesZerosListSortedReversedSortedList.sortBy(_\
    \ / onesZerosListSortedReversedSortedList.last)\n        val onesZerosListSortedReversedSortedListSortedList\
    \ = onesZerosListSortedReversedSortedListSorted.toList\n        val onesZerosListSortedReversedSortedListSortedListSorted\
    \ = onesZerosListSortedReversedSortedListSortedList.toList.sortBy(_ / onesZerosListSortedReversedSortedListSortedList.last)\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedList = onesZerosListSortedReversedSortedListSortedListSortedList.toList\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedListSorted =\
    \ onesZerosListSortedReversedSortedListSortedListSortedListSorted.toList.sortBy(_\
    \ / onesZerosListSortedReversedSortedListSortedListSortedList.last)\n        val\
    \ onesZerosListSortedReversedSortedListSortedListSortedListSortedList = onesZerosListSortedReversedSortedListSortedListSortedListSortedListSorted.toList\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedListSortedListSorted\
    \ = onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSorted.toList\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSorted\
    \ = onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSortedListSorted.toList\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSortedListSorted\
    \ = onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSortedListSortedListSorted.to",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val maxOnes = arr.max\n        val maxZeros = arr.min\n\
    \        val maxOnesDecimal = maxOnes.toString.toInt\n        val maxZerosDecimal\
    \ = maxZeros.toString.toInt\n        val maxDecimal = math.max(maxOnesDecimal,\
    \ maxZerosDecimal)\n        val onesDecimal = ones.toString.toInt\n        val\
    \ zerosDecimal = zeros.toString.toInt\n        val decimal = math.max(onesDecimal,\
    \ zerosDecimal)\n        val decimalDecimal = decimal.toString.toInt\n       \
    \ val decimalDecimalDecimal = math.pow(10, decimalDecimal)\n        val decimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimal)\n        val decimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimal)\n        val decimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimal)\n        val decimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimal)\n        val\
    \ decimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(10,\
    \ decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n  \
    \      val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(10,\
    \ decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(_\
    \ % 2 == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n      \
    \  val onesCount = ones.map(x => x.toLong).sum\n        val zerosCount = zeros.map(x\
    \ => x.toLong).sum\n        val onesDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimalDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(x => x.to",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimal", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / ones\n\
    \        val zerosDecimal = zerosCount / zeros\n        val onesDecimalDecimal\
    \ = onesDecimal / onesDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ / zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal /\
    \ onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimal", "        val ones = arr.filter(_ == 1).length\n    \
    \    val zeros = arr.filter(_ == 0).length\n        val onesZeros = ones + zeros\n\
    \        val onesZeros_sorted = arr.sortBy(_ - onesZeros)\n        val onesZeros_sorted_reversed\
    \ = onesZeros_sorted.reverse\n        val onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted = onesZeros_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_ - onesZeros)\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_", "  \
    \      val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x)).sum\n        val\
    \ onesDecimal = ones.map(x => x.toString.toInt).sum\n        val zerosDecimal\
    \ = zeros.map(x => x.toString.toInt).sum\n        val onesDecimalCount = ones.map(x\
    \ => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_\
    \ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesZeros = arr.count(_ == 1 && _ == 0)\n        val onesOnes\
    \ = arr.count(_ == 1 && _ == 1)\n        val onesZeroOnes = arr.count(_ == 1 &&\
    \ _ == 0 && _ == 1)\n        val onesOnesOnes = arr.count(_ == 1 && _ == 1 &&\
    \ _ == 1)\n        val onesZeroOnesOnes = arr.count(_ == 1 && _ == 0 && _ == 1\
    \ && _ == 1)\n        val onesOnesOnesOnes = arr.count(_ == 1 && _ == 1 && _ ==\
    \ 1 && _ == 1)\n        val onesZeroOnesOnesOnes = arr.count(_ == 1 && _ == 0\
    \ && _ == 1 && _ == 1 && _ == 1)\n        val onesOnesOnesOnesOnes = arr.count(_\
    \ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1)\n        val onesZeroOnesOnesOnesOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 1 && _ == 1 && _ == 1)\n    \
    \    val onesOnesOnesOnesOnesOnes = arr.count(_ == 1 && _ == 1 && _ == 1 && _\
    \ == 1 && _ == 1 && _ == 1)\n        val onesZeroOnesOnesOnesOnesOnes = arr.count(_\
    \ == 1 && _ == 0 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1)\n        val\
    \ onesOnesOnesOnesOnesOnesOnes = arr.count(_ == 1 && _ == 1 && _ == 1 && _ ==\
    \ 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1)\n        val onesZeroOnesOnesOnesOnesOnesOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ ==\
    \ 1 && _ == 1 && _ == 1)\n        val onesOnesOnesOnesOnesOnesOnesOnes = arr.count(_\
    \ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 &&\
    \ _ == 1 && _ == 1)\n        val onesZeroOnesOnesOnesOnesOnesOnesOnes = arr.count(_\
    \ == 1 && _ == 0 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 &&\
    \ _ == 1 && _ == 1 && _ == 1 && _ == 1)\n        val onesOnesOnes", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimal", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.size\n        val zerosDecimal\
    \ = zerosCount / arr.size\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        ", "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros\
    \ = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x => x.toLong).sum\n\
    \        val zerosCount = zeros.map(x => x.toLong).sum\n        val onesDecimal\
    \ = onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / 10\n        val zerosDecimalDecimal\
    \ = zerosDecimal / 10\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / 10\n  \
    \      val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimal", "        val ones = arr.count(_ == 1)\n    \
    \    val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n\
    \        val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal ",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ", "        val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_\
    \ == 0).toList\n        val onesCount = ones.count(_ == 1)\n        val zerosCount\
    \ = zeros.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n  \
    \      val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", " \
    \       val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n\
    \        val onesArr = arr.filter(_ == 1)\n        val zerosArr = arr.filter(_\
    \ == 0)\n        val onesCount = onesArr.size\n        val zerosCount = zerosArr.size\n\
    \        val onesArr = onesArr.sortBy(x => (onesCount - onesArr.indexOf(x)), Ordering[Long].reverse)\n\
    \        val zerosArr = zerosArr.sortBy(x => (zerosCount - zerosArr.indexOf(x)),\
    \ Ordering[Long].reverse)\n        val onesArr = onesArr.sortBy(x => (onesCount\
    \ - onesArr.indexOf(x)), Ordering[Long].reverse)\n        val zerosArr = zerosArr.sortBy(x\
    \ => (zerosCount - zerosArr.indexOf(x)), Ordering[Long].reverse)\n        onesArr::zerosArr",
  "        val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_\
    \ == 0).length\n        val onesZeros = ones + zeros\n        val onesZeroDec\
    \ = onesZeros / 10\n        val zeroDec = zeros / 10\n        val onesZeroDecDec\
    \ = onesZeroDec / 10\n        val zeroDecDec = zeroDec / 10\n        val onesZeroDecDecDec\
    \ = onesZeroDecDec / 10\n        val zeroDecDecDec = zeroDecDec / 10\n       \
    \ val onesZeroDecDecDecDec = onesZeroDecDecDec / 10\n        val zeroDecDecDecDec\
    \ = zeroDecDecDec / 10\n        val onesZeroDecDecDecDecDec = onesZeroDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDec = zeroDecDecDecDec / 10\n        val onesZeroDecDecDecDecDecDec\
    \ = onesZeroDecDecDecDecDec / 10\n        val zeroDecDecDecDecDecDec = zeroDecDecDecDecDec\
    \ / 10\n        val onesZeroDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDec = zeroDecDecDecDecDecDec / 10\n\
    \        val onesZeroDecDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDecDec = zeroDecDecDecDecDecDecDec /\
    \ 10\n        val onesZeroDecDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDecDecDec = zeroDecDecDecDecDecDecDecDec\
    \ / 10\n        val onesZeroDecDecDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDecDecDecDec = zeroDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val onesZeroDecDecDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDecDecDecDec = zeroDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val onesZeroDecDecDecDecDecDecDecDecDecDec = onesZeroDec", " \
    \       val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(x => x.toString.toInt).sum\n\
    \        val zerosCount = zeros.map(x => x.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / ones.size\n        val zerosDecimal = zerosCount / zeros.size\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe", "      \
    \  val ones = arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x\
    \ => x == 0l.toLong)\n        val onesCount = ones.map(x => 1l.toLong).sum\n \
    \       val zerosCount = zeros.map(x => 0l.toLong).sum\n        val onesDecimal\
    \ = onesCount / 2l.toLong\n        val zerosDecimal = zerosCount / 2l.toLong\n\
    \        val onesDecimalDecimal = onesDecimal / 2l.toLong\n        val zerosDecimalDecimal\
    \ = zerosDecimal / 2l.toLong\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 2l.toLong\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ 2l.toLong\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimal", "        val ones = arr.filter(_ % 2 == 0).length\n\
    \        val zeros = arr.filter(_ % 2 == 1).length\n        val maxOnes = arr.filter(_\
    \ % 2 == 0).max\n        val maxZeros = arr.filter(_ % 2 == 1).max\n        val\
    \ maxOnesDecimal = maxOnes.toString.toInt\n        val maxZerosDecimal = maxZeros.toString.toInt\n\
    \        val maxOnesDecimalDecimal = maxOnesDecimal / 10\n        val maxZerosDecimalDecimal\
    \ = maxZerosDecimal / 10\n        val maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal\
    \ / 10\n        val maxZerosDecimalDecimalDecimal = maxZerosDecimalDecimal / 10\n\
    \        val maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal\
    \ / 10\n        val maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal\
    \ / 10\n        val maxOnesDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimal\
    \ / 10\n        val maxZerosDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimal\
    \ / 10\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n     \
    \   val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecim",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimal", "        val ones = arr.count(_ == 1)\n    \
    \    val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n\
    \        val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount\
    \ / arr.size\n        val zerosDecimal = zerosCount / arr.size\n        val onesDecimalDecimal\
    \ = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal / zeros\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal", "        val ones = arr.filter(_ == 1l.toLong)\n        val\
    \ zeros = arr.filter(_ == 0l.toLong)\n        val onesCount = ones.count()\n \
    \       val zerosCount = zeros.count()\n        val onesDecimal = onesCount.toDouble\
    \ / arr.size\n        val zerosDecimal = zerosCount.toDouble / arr.size\n    \
    \    val onesDecimalInt = onesDecimal.toInt\n        val zerosDecimalInt = zerosDecimal.toInt\n\
    \        val onesDecimalLong = onesDecimal.toLong\n        val zerosDecimalLong\
    \ = zerosDecimal.toLong\n        val onesDecimalFloat = onesDecimal.toFloat\n\
    \        val zerosDecimalFloat = zerosDecimal.toFloat\n        val onesDecimalDouble\
    \ = onesDecimal.toDouble\n        val zerosDecimalDouble = zerosDecimal.toDouble\n\
    \        val onesDecimalLongDouble = onesDecimal.toLongDouble\n        val zerosDecimalLongDouble\
    \ = zerosDecimal.toLongDouble\n        val onesDecimalFloatDouble = onesDecimal.toFloatDouble\n\
    \        val zerosDecimalFloatDouble = zerosDecimal.toFloatDouble\n        val\
    \ onesDecimalLongFloat = onesDecimal.toLongFloat\n        val zerosDecimalLongFloat\
    \ = zerosDecimal.toLongFloat\n        val onesDecimalLongDouble = onesDecimal.toLongDouble\n\
    \        val zerosDecimalLongDouble = zerosDecimal.toLongDouble\n        val onesDecimalFloatLong\
    \ = onesDecimal.toFloatLong\n        val zerosDecimalFloatLong = zerosDecimal.toFloatLong\n\
    \        val onesDecimalLongFloat = onesDecimal.toLongFloat\n        val zerosDecimalLongFloat\
    \ = zerosDecimal.toLongFloat\n        val onesDecimalLongDouble = onesDecimal.toLongDouble\n\
    \        val zerosDecimalLongDouble = zerosDecimal.toLongDouble\n        val onesDecimalFloatLong\
    \ = onesDecimal.toFloatLong\n        val zerosDecimalFloatLong = zerosDecimal.toFloatLong\n\
    \        val onesDecimalLongFloat = onesDecimal.toLongFloat\n        val zerosDecimalLongFloat\
    \ = zerosDecimal.toLongFloat\n        val onesDecimalLongDouble = onesDecimal.toLongDouble\n\
    \        val zerosDecimalLongDouble = zerosDecimal.toLongDouble\n        val onesDecimalFloatLong\
    \ = onesDecimal.toFloatLong\n        val zerosDecimalFloatLong = zerosDecimal.toFloatLong\n\
    \        val onesDecimalLongFloat = onesDecimal.toLongFloat\n        val zerosDecimalLongFloat\
    \ = zerosDecimal.toLongFloat\n        val onesDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArray = arr.map(x\
    \ => if (x == 1) 1 else 0)\n        val zerosArray = arr.map(x => if (x == 0)\
    \ 0 else 1)\n        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength - zerosArrayLength\n\
    \        val zerosArrayLength = zerosArrayLength - onesArrayLength\n        val\
    \ onesArrayLength = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength\
    \ / 2\n        val onesArrayLength = onesArrayLength.toInt\n        val zerosArrayLength\
    \ = zerosArrayLength.toInt\n        val onesArray = onesArray.sortWith(_ < _)\n\
    \        val zerosArray = zerosArray.sortWith(_ < _)\n        val onesArray =\
    \ onesArray.sortWith(_ < _)\n        val zerosArray = zerosArray.sortWith(_ <\
    \ _)\n        val onesArray = onesArray.sortWith(_ < _)\n        val zerosArray\
    \ = zerosArray.sortWith(_ < _)\n        val onesArray = onesArray.sortWith(_ <\
    \ _)\n        val zerosArray = zerosArray.sortWith(_ < _)\n        val onesArray\
    \ = onesArray.sortWith(_ < _)\n        val zerosArray = zerosArray.sortWith(_\
    \ < _)\n        val onesArray = onesArray.sortWith(_ < _)\n        val zerosArray\
    \ = zerosArray.sortWith(_ < _)\n        val onesArray = onesArray.sortWith(_ <\
    \ _)\n        val zerosArray = zerosArray.sortWith(_ < _)\n        val onesArray\
    \ = onesArray.sortWith(_ < _)\n        val zerosArray = zerosArray.sortWith(_\
    \ < _)\n        val onesArray = onesArray.sortWith(_ < _)\n        val zerosArray\
    \ = zerosArray.sortWith(_ < _)\n        val onesArray = onesArray.sortWith(_ <\
    \ _)\n        val zerosArray = zerosArray.sortWith(_ < _)\n        val onesArray\
    \ = onesArray.sortWith(_ < _)\n        val zerosArray = zerosArray.sortWith(_\
    \ < _)\n        val onesArray = onesArray.sortWith(_ < _)\n        val zerosArray\
    \ = zerosArray.sortWith(_ < _)\n        val ones", "        val ones = arr.filter(_\
    \ % 2 == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n      \
    \  val onesCount = ones.map(x => x.toLong).sum\n        val zerosCount = zeros.map(x\
    \ => x.toLong).sum\n        val onesDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimal", "        val ones = arr.filter(_ == 1).toList\n   \
    \     val zeros = arr.filter(_ == 0).toList\n        val onesCount = ones.map(_.toLong).sum\n\
    \        val zerosCount = zeros.map(_.toLong).sum\n        val onesDecimal = ones.map(_.toLong).map(_.toInt).sum\n\
    \        val zerosDecimal = zeros.map(_.toLong).map(_.toInt).sum\n        val\
    \ onesDecimalDecimal = ones.map(_.toLong).map(_.toLong).sum\n        val zerosDecimalDecimal\
    \ = zeros.map(_.toLong).map(_.toLong).sum\n        val onesDecimalDecimalDecimal\
    \ = ones.map(_.toLong).map(_.toLong).map(_.toLong).sum\n        val zerosDecimalDecimalDecimal\
    \ = zeros.map(_.toLong).map(_.toLong).map(_.toLong).sum\n        val onesDecimalDecimalDecimalDecimal\
    \ = ones.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n       \
    \ val zerosDecimalDecimalDecimalDecimal = zeros.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = ones.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zeros.map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(_.toLong).map(_.",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.count(_ == 1)\n        val zerosCount\
    \ = zeros.count(_ == 0)\n        val onesDecimal = onesCount.toDouble / arr.size\n\
    \        val zerosDecimal = zerosCount.toDouble / arr.size\n        val onesDecimalDecimal\
    \ = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toDouble\
    \ / arr.size\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toDouble\
    \ / arr.size\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / arr.size\n     \
    \   val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / arr.size\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / arr.size\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / arr.size\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / arr.size\n\
    \        val onesDecimal", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n     \
    \   val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount /\
    \ arr.size\n        val zerosDecimal = zerosCount / arr.size\n        val onesDecimalDecimal\
    \ = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal / zeros\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n  \
    \      val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal", "        val ones = arr.filter(_ % 2 == 0).length\n\
    \        val zeros = arr.filter(_ % 2 == 1).length\n        val onesArr = arr.filter(_\
    \ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr = arr.filter(_ % 2 ==\
    \ 1).sortBy(_ % 2).reverse\n        val onesArr2 = onesArr.filter(_ % 2 == 0).sortBy(_\
    \ % 2).reverse\n        val zerosArr2 = zerosArr.filter(_ % 2 == 1).sortBy(_ %\
    \ 2).reverse\n        val onesArr3 = onesArr2.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr3 = zerosArr2.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n\
    \        val onesArr4 = onesArr3.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n  \
    \      val zerosArr4 = zerosArr3.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n  \
    \      val onesArr5 = onesArr4.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n    \
    \    val zerosArr5 = zerosArr4.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n    \
    \    val onesArr6 = onesArr5.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n      \
    \  val zerosArr6 = zerosArr5.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n      \
    \  val onesArr7 = onesArr6.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val\
    \ zerosArr7 = zerosArr6.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n        val\
    \ onesArr8 = onesArr7.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr8\
    \ = zerosArr7.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr9 =\
    \ onesArr8.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr9 = zerosArr8.filter(_\
    \ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr10 = onesArr9.filter(_ %\
    \ 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr10 = zerosArr9.filter(_ %\
    \ 2 == 1).sortBy(_ % 2).reverse\n        val onesArr11 = onesArr10.filter(_ %\
    \ 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr11 = zerosArr10.filter(_\
    \ % 2 == 1).sortBy(_ % 2).reverse\n        val onesArr12 = onesArr11.filter(_\
    \ % 2 == 0).sortBy(_ % 2).reverse\n        val zerosArr12 = zerosArr11.filter",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = ones / onesCount\n        val zerosDecimal\
    \ = zeros / zerosCount\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArray = arr.map(x => (x % 2) == 0).sorted\n        val\
    \ zerosArray = arr.map(x => (x % 2) == 1).sorted\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength / 2\n        val zerosArrayLength =\
    \ zerosArrayLength / 2\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zerosArrayLength = zerosArrayLength + onesArrayLength\n        val\
    \ onesArray = onesArray.toList\n        val zerosArray = zerosArray.toList\n \
    \       val onesArrayLength = onesArray.length\n        val zerosArrayLength =\
    \ zerosArray.length\n        val onesArrayLength = onesArrayLength / 2\n     \
    \   val zerosArrayLength = zerosArrayLength / 2\n        val onesArrayLength =\
    \ onesArrayLength + zerosArrayLength\n        val zerosArrayLength = zerosArrayLength\
    \ + onesArrayLength\n        val onesArray = onesArray.toList\n        val zerosArray\
    \ = zerosArray.toList\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ / 2\n        val zerosArrayLength = zerosArrayLength / 2\n        val onesArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val zerosArrayLength = zerosArrayLength\
    \ + onesArrayLength\n        val onesArray = onesArray.toList\n        val zerosArray\
    \ = zerosArray.toList\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ / 2\n        val zerosArrayLength = zerosArrayLength / 2\n        val onesArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val zerosArrayLength = zerosArrayLength\
    \ + onesArrayLength\n        val onesArray = onesArray.toList\n        val zerosArray\
    \ = zerosArray.toList\n        val onesArrayLength = onesArray.length\n      \
    \  val zerosArrayLength = zerosArray.length\n        val onesArrayLength = onesArrayLength\
    \ / 2\n        val zerosArrayLength = zerosArrayLength / 2\n        val onesArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val zerosArrayLength = zerosArrayLength\
    \ + onesArrayLength\n        val onesArray = ", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / ones\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimal", "        val ones = arr.filter(x => x == 1).toList\n\
    \        val zeros = arr.filter(x => x == 0).toList\n        val onesCount = ones.map(x\
    \ => 1l).sum\n        val zerosCount = zeros.map(x => 1l).sum\n        val onesDecimal\
    \ = ones.map(x => x.toString.toDouble).sum\n        val zerosDecimal = zeros.map(x\
    \ => x.toString.toDouble).sum\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n \
    \       val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n    \
    \    val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n     \
    \   val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n        val\
    \ zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount\
    \ = ones.map(x => x.toString.toDouble).count\n        val zerosDecimalCount =\
    \ zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toDouble).count\n        val zerosDecimalCount = zeros.map(x =>\
    \ x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n \
    \       val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n    \
    \    val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n     \
    \   val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n        val\
    \ zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount\
    \ = ones.map(x => x.toString.toDouble).count\n        val zerosDecimalCount =\
    \ zeros.map(x => x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toDouble).count\n        val zerosDecimalCount = zeros.map(x =>\
    \ x.toString.toDouble).count\n        val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n\
    \        val zerosDecimalCount = zeros.map(x => x.toString.toDouble).count\n \
    \       val onesDecimalCount = ones.map(x => x.toString.toDouble).count\n    \
    \    val zerosDecimalCount = zeros.map(", "        val ones = arr.filter(_ ==\
    \ 1).toList\n        val zeros = arr.filter(_ == 0).toList\n        val onesCount\
    \ = ones.size\n        val zerosCount = zeros.size\n        val onesDecimal =\
    \ onesCount.toDouble / onesCount.toDouble\n        val zerosDecimal = zerosCount.toDouble\
    \ / zerosCount.toDouble\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal.toDouble / onesDecimalDecimal.toDouble\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal.toDouble / zerosDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal.toDouble / onesDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal.toDouble\
    \ / zerosDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal.toDouble / onesDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosDecimalDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones\
    \ = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n\
    \        val onesCount = ones.map(x => x.toLong).sum\n        val zerosCount =\
    \ zeros.map(x => x.toLong).sum\n        val onesDecimal = ones.map(x => x.toLong).map(x\
    \ => x.toString.toDouble).sum\n        val zerosDecimal = zeros.map(x => x.toLong).map(x\
    \ => x.toString.toDouble).sum\n        val onesDecimalDecimal = onesDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimal = zerosDecimal.toString.toDouble\n        val\
    \ onesDecimalDecimalDecimal = onesDecimalDecimal.toString.toDouble\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal.toString.toDouble\n       \
    \ val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(x\
    \ => x.toInt == 1)\n        val zeros = arr.filter(x => x.toInt == 0)\n      \
    \  val onesCount = ones.map(x => x.toInt).sum\n        val zerosCount = zeros.map(x\
    \ => x.toInt).sum\n        val onesDecimal = onesCount / arr.length\n        val\
    \ zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal\
    \ / 10\n        val zerosDecimalDecimal = zerosDecimal / 10\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val ones", "        val ones = arr.filter(_ == 1).length\n   \
    \     val zeros = arr.filter(_ == 0).length\n        val onesZeros = ones + zeros\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n        val onesZeros = onesZero % 2\n\
    \        val onesZero = onesZeros / 2\n", "        val ones = arr.filter(_ % 2\
    \ == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n        val\
    \ onesZeros = ones + zeros\n        val onesZeros_sorted = onesZeros.sortBy(_\
    \ % 10)\n        val onesZeros_sorted_sorted = onesZeros_sorted.sortBy(_ % 2)\n\
    \        val onesZeros_sorted_sorted_sorted = onesZeros_sorted_sorted.sortBy(_\
    \ / 2)\n        val onesZeros_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted.sortBy(_\
    \ / 10)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted.sortBy(_\
    \ / 100)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / 1000)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_ / 10000)\n  \
    \      val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted =\
    \ onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_ / 100000)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / 1000000)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / 10000000)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / 100000000)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / 1000000000)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / 10000000000)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(_\
    \ / 100000000000)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
  "        val ones = arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x\
    \ => x == 0l.toLong)\n        val onesCount = ones.map(x => 1l.toLong).sum\n \
    \       val zerosCount = zeros.map(x => 0l.toLong).sum\n        val onesDecimal\
    \ = onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / 10\n        val zerosDecimalDecimal\
    \ = zerosDecimal / 10\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / 10\n  \
    \      val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal", "       \
    \ val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n      \
    \  val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ ==\
    \ 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_\
    \ == 0).length\n        val onesZeros = ones + zeros\n        val onesZero = onesZeros\
    \ / 2\n        val onesZeroMinusOne = onesZero - 1\n        val onesZeroMinusOneMinusOne\
    \ = onesZeroMinusOne - 1\n        val onesZeroMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ onesZeroMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n   \
    \     val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = ones", "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros\
    \ = arr.filter(_ % 2 == 1).length\n        val onesZeros = arr.filter(_ % 2 ==\
    \ 0).filter(_ % 2 == 1).length\n        val onesOnes = arr.filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).length\n        val onesZeroOnes = arr.filter(_ % 2 == 0).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).length\n        val onesOnesOnes = arr.filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesZeroOnesOnes\
    \ = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).length\n        val onesOnesOnesOnes = arr.filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesZeroOnesOnesOnes\
    \ = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).filter(_ % 2 == 1).length\n        val onesOnesOnesOnesOnes = arr.filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).length\n        val onesZeroOnesOnesOnesOnes = arr.filter(_ % 2 ==\
    \ 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 1).length\n        val onesOnesOnesOnesOnesOnes = arr.filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_\
    \ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).length\n        val onesZeroOnesOnesOnesOnesOnes\
    \ = arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2\
    \ == 1).length\n        val onesOnesOnesOnesOnesOnesOnes = arr.filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 == 1).filter(_ % 2 ==\
    \ 1).filter(_ % 2 == 1).length\n        val onesZeroOnesOnesOnesOnesOnesOnes =\
    \ arr.filter(_ % 2 == 0).filter(_ % 2 == 1).filter(_", '        arr.sortWith(compare)',
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x)).sum\n        val\
    \ onesZeros = ones.zip(zeros)\n        val onesZeroCount = onesZeros.map(x =>\
    \ x._2).sum\n        val onesZeroZeros = onesZeros.map(x => x._1)\n        val\
    \ onesZeroZeroCount = onesZeroZeros.map(x => x._2).sum\n        val onesZeroZeroZeros\
    \ = onesZeroZeros.map(x => x._1)\n        val onesZeroZeroZeroCount = onesZeroZeroZeros.map(x\
    \ => x._2).sum\n        val onesZeroZeroZeroZeros = onesZeroZeroZeros.map(x =>\
    \ x._1)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x =>\
    \ x._2).sum\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros.map(x\
    \ => x._1)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x\
    \ => x._2).sum\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros.map(x\
    \ => x._1)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x\
    \ => x._2).sum\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros.map(x\
    \ => x._1)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x\
    \ => x._2).sum\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros.map(x\
    \ => x._1)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x\
    \ => x._2).sum\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros.map(x\
    \ => x._1)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZeroZeros.map(x\
    \ => x._2).sum\n        val onesZeroZeroZeroZeroZeros = onesZeroZeroZeroZeros.map(x\
    \ => x._1)\n        val onesZeroZeroZeroZeroCount = onesZeroZeroZero", "     \
    \   val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_ ==\
    \ 0).length\n        val onesCount = arr.filter(_ == 1).map(_.toLong).sum\n  \
    \      val zerosCount = arr.filter(_ == 0).map(_.toLong).sum\n        val onesDecimal\
    \ = onesCount / ones\n        val zerosDecimal = zerosCount / zeros\n        val\
    \ onesDecimalDecimal = onesDecimal / onesDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zeros", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal ",
  "        val ones = arr.filter(_ % 2 == 0).size\n        val zeros = arr.filter(_\
    \ % 2 == 1).size\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_.toString.toInt)\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_.toString.toInt)\n    \
    \    val onesArr2 = onesArr.sortBy(_.toString.toInt)\n        val zerosArr2 =\
    \ zerosArr.sortBy(_.toString.toInt)\n        val onesArr3 = onesArr2.sortBy(_.toString.toInt)\n\
    \        val zerosArr3 = zerosArr2.sortBy(_.toString.toInt)\n        val onesArr4\
    \ = onesArr3.sortBy(_.toString.toInt)\n        val zerosArr4 = zerosArr3.sortBy(_.toString.toInt)\n\
    \        val onesArr5 = onesArr4.sortBy(_.toString.toInt)\n        val zerosArr5\
    \ = zerosArr4.sortBy(_.toString.toInt)\n        val onesArr6 = onesArr5.sortBy(_.toString.toInt)\n\
    \        val zerosArr6 = zerosArr5.sortBy(_.toString.toInt)\n        val onesArr7\
    \ = onesArr6.sortBy(_.toString.toInt)\n        val zerosArr7 = zerosArr6.sortBy(_.toString.toInt)\n\
    \        val onesArr8 = onesArr7.sortBy(_.toString.toInt)\n        val zerosArr8\
    \ = zerosArr7.sortBy(_.toString.toInt)\n        val onesArr9 = onesArr8.sortBy(_.toString.toInt)\n\
    \        val zerosArr9 = zerosArr8.sortBy(_.toString.toInt)\n        val onesArr10\
    \ = onesArr9.sortBy(_.toString.toInt)\n        val zerosArr10 = zerosArr9.sortBy(_.toString.toInt)\n\
    \        val onesArr11 = onesArr10.sortBy(_.toString.toInt)\n        val zerosArr11\
    \ = zerosArr10.sortBy(_.toString.toInt)\n        val onesArr12 = onesArr11.sortBy(_.toString.toInt)\n\
    \        val zerosArr12 = zerosArr11.sortBy(_.toString.toInt)\n        val onesArr13\
    \ = onesArr12.sortBy(_.toString.toInt)\n        val zerosArr13 = zerosArr12.sortBy(_.toString.toInt)\n\
    \        val onesArr14 = onesArr13.sortBy(", '        arr.sortWith(compare)',
  "        val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_\
    \ == 0).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n     \
    \   val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / ones.length\n        val zerosDecimal = zerosCount / zeros.length\n\
    \        val onesDecimalDecimal = onesDecimal / onesDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimal", "        val ones = arr.count(_ == 1)\n        val zeros =\
    \ arr.count(_ == 0)\n        val onesZeros = ones + zeros\n        val onesZero\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZeros\
    \ = onesZeros / 2\n        val onesZeros = onesZero / 2\n        val onesZero\
    \ = onesZero % 2\n        val onesZeros = onesZeros % 2\n        val onesZero",
  '        arr.sortWith(compare)', "        val ones = arr.filter(x => x == 1).toList\n\
    \        val zeros = arr.filter(x => x == 0).toList\n        val onesCount = ones.map(x\
    \ => ones.count(_ == x)).sum\n        val zerosCount = zeros.map(x => zeros.count(_\
    \ == x)).sum\n        val onesDecimal = ones.map(x => x.toString.toInt).sum\n\
    \        val zerosDecimal = zeros.map(x => x.toString.toInt).sum\n        val\
    \ onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal", "      \
    \  val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n     \
    \   val onesZeros = ones + zeros\n        val onesZeros_sorted = arr.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted2 = onesZeros_sorted.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted3 = onesZeros_sorted2.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted4 = onesZeros_sorted3.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted5 = onesZeros_sorted4.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted6 = onesZeros_sorted5.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted7 = onesZeros_sorted6.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted8 = onesZeros_sorted7.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted9 = onesZeros_sorted8.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted10 = onesZeros_sorted9.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted11 = onesZeros_sorted10.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted12 = onesZeros_sorted11.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted13 = onesZeros_sorted12.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted14 = onesZeros_sorted13.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted15 = onesZeros_sorted14.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted16 = onesZeros_sorted15.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted17 = onesZeros_sorted16.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted18 = onesZeros_sorted17.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted19 = onesZeros_sorted18.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted20 = onesZeros_sorted19.sortBy(x\
    \ => (onesZeros - x))", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal *\
    \ 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal * 10\n    \
    \    val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal *\
    \ 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => 1l).sum\n        val\
    \ zerosCount = zeros.map(x => 0l).sum\n        val onesDecimal = ones.map(x =>\
    \ x.toString.toDouble).sum\n        val zerosDecimal = zeros.map(x => x.toString.toDouble).sum\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zeros", "        val ones = arr.filter(x => x % 2 ==\
    \ 0).toList\n        val zeros = arr.filter(x => x % 2 == 1).toList\n        val\
    \ onesCount = ones.map(x => x.toLong).sum\n        val zerosCount = zeros.map(x\
    \ => x.toLong).sum\n        val onesDecimal = ones.map(x => x.toLong).map(x =>\
    \ x.toDouble).sum\n        val zerosDecimal = zeros.map(x => x.toLong).map(x =>\
    \ x.toDouble).sum\n        val onesDecimalDecimal = ones.map(x => x.toLong).map(x\
    \ => x.toDouble).map(x => x.toDouble).sum\n        val zerosDecimalDecimal = zeros.map(x\
    \ => x.toLong).map(x => x.toDouble).map(x => x.toDouble).sum\n        val onesDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toDouble).map(x => x.toDouble).map(x =>\
    \ x.toDouble).sum\n        val zerosDecimalDecimalDecimal = zeros.map(x => x.toLong).map(x\
    \ => x.toDouble).map(x => x.toDouble).map(x => x.toDouble).sum\n        val onesDecimalDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toDouble).map(x => x.toDouble).map(x =>\
    \ x.toDouble).map(x => x.toDouble).sum\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zeros.map(x => x.toLong).map(x => x.toDouble).map(x => x.toDouble).map(x =>\
    \ x.toDouble).map(x => x.toDouble).sum\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toDouble).map(x => x.toDouble).map(x =>\
    \ x.toDouble).map(x => x.toDouble).map(x => x.toDouble).sum\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zeros.map(x => x.toLong).map(x => x.toDouble).map(x => x.toDouble).map(x =>\
    \ x.toDouble).map(x => x.toDouble).map(x => x.toDouble).sum\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toDouble).map(x => x.toDouble).map(x =>\
    \ x.toDouble).map(x => x.toDouble).map(x => x.toDouble).map(x => x.toDouble).sum",
  "        val ones = arr.filter(x => x == 1l).toList\n        val zeros = arr.filter(x\
    \ => x == 0l).toList\n        val onesCount = ones.map(x => 1l).sum\n        val\
    \ zerosCount = zeros.map(x => 0l).sum\n        val onesDecimal = ones.map(x =>\
    \ x.toString.toInt).sum\n        val zerosDecimal = zeros.map(x => x.toString.toInt).sum\n\
    \        val onesDecimalCount = ones.map(x => x.toString.toInt).count\n      \
    \  val zerosDecimalCount = zeros.map(x => x.toString.toInt).count\n        val\
    \ onesDecimalCount = ones.map(x => x.toString.toInt).count\n        val zerosDecimalCount\
    \ = zeros.map(x => x.toString.toInt).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toInt).count\n        val zerosDecimalCount = zeros.map(x => x.toString.toInt).count\n\
    \        val onesDecimalCount = ones.map(x => x.toString.toInt).count\n      \
    \  val zerosDecimalCount = zeros.map(x => x.toString.toInt).count\n        val\
    \ onesDecimalCount = ones.map(x => x.toString.toInt).count\n        val zerosDecimalCount\
    \ = zeros.map(x => x.toString.toInt).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toInt).count\n        val zerosDecimalCount = zeros.map(x => x.toString.toInt).count\n\
    \        val onesDecimalCount = ones.map(x => x.toString.toInt).count\n      \
    \  val zerosDecimalCount = zeros.map(x => x.toString.toInt).count\n        val\
    \ onesDecimalCount = ones.map(x => x.toString.toInt).count\n        val zerosDecimalCount\
    \ = zeros.map(x => x.toString.toInt).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toInt).count\n        val zerosDecimalCount = zeros.map(x => x.toString.toInt).count\n\
    \        val onesDecimalCount = ones.map(x => x.toString.toInt).count\n      \
    \  val zerosDecimalCount = zeros.map(x => x.toString.toInt).count\n        val\
    \ onesDecimalCount = ones.map(x => x.toString.toInt).count\n        val zerosDecimalCount\
    \ = zeros.map(x => x.toString.toInt).count\n        val onesDecimalCount = ones.map(x\
    \ => x.toString.toInt).count\n        val zerosDecimalCount = zer", "        val\
    \ ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_ == 0).length\n\
    \        val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val\
    \ zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val onesArr2\
    \ = onesArr.sortBy(_.toString.toInt)\n        val zerosArr2 = zerosArr.sortBy(_.toString.toInt)\n\
    \        val onesArr3 = onesArr2.sortBy(_.toString.toInt)\n        val zerosArr3\
    \ = zerosArr2.sortBy(_.toString.toInt)\n        val onesArr4 = onesArr3.sortBy(_.toString.toInt)\n\
    \        val zerosArr4 = zerosArr3.sortBy(_.toString.toInt)\n        val onesArr5\
    \ = onesArr4.sortBy(_.toString.toInt)\n        val zerosArr5 = zerosArr4.sortBy(_.toString.toInt)\n\
    \        val onesArr6 = onesArr5.sortBy(_.toString.toInt)\n        val zerosArr6\
    \ = zerosArr5.sortBy(_.toString.toInt)\n        val onesArr7 = onesArr6.sortBy(_.toString.toInt)\n\
    \        val zerosArr7 = zerosArr6.sortBy(_.toString.toInt)\n        val onesArr8\
    \ = onesArr7.sortBy(_.toString.toInt)\n        val zerosArr8 = zerosArr7.sortBy(_.toString.toInt)\n\
    \        val onesArr9 = onesArr8.sortBy(_.toString.toInt)\n        val zerosArr9\
    \ = zerosArr8.sortBy(_.toString.toInt)\n        val onesArr10 = onesArr9.sortBy(_.toString.toInt)\n\
    \        val zerosArr10 = zerosArr9.sortBy(_.toString.toInt)\n        val onesArr11\
    \ = onesArr10.sortBy(_.toString.toInt)\n        val zerosArr11 = zerosArr10.sortBy(_.toString.toInt)\n\
    \        val onesArr12 = onesArr11.sortBy(_.toString.toInt)\n        val zerosArr12\
    \ = zerosArr11.sortBy(_.toString.toInt)\n        val onesArr13 = onesArr12.sortBy(_.toString.toInt)\n\
    \        val zerosArr13 = zerosArr12.sortBy(_.toString.toInt)\n        val onesArr14\
    \ = onesArr13.sortBy(_.toString.to", "        val ones = arr.filter(_ == 1).length\n\
    \        val zeros = arr.filter(_ == 0).length\n        val maxOnes = arr.filter(_\
    \ == 1).max\n        val maxZeros = arr.filter(_ == 0).max\n        val maxOnesDecimal\
    \ = maxOnes.toString.toInt\n        val maxZerosDecimal = maxZeros.toString.toInt\n\
    \        val maxOnesDecimalDecimal = maxOnesDecimal.toString.toInt\n        val\
    \ maxZerosDecimalDecimal = maxZerosDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimal.toString.toInt\n        val maxZerosDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimal.toString.toInt\n        val maxZerosDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimal.toString.toInt\n        val maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimal.toString.toInt\n        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n       \
    \ val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n  \
    \      val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n \
    \       val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val max", "        val ones = arr.filter(x => x % 2l.toLong == 0l.toLong)\n\
    \        val zeros = arr.filter(x => x % 2l.toLong != 0l.toLong)\n        val\
    \ onesCount = ones.map(x => x.toLong).sum\n        val zerosCount = zeros.map(x\
    \ => x.toLong).sum\n        val onesDecimal = onesCount / 2l.toLong\n        val\
    \ zerosDecimal = zerosCount / 2l.toLong\n        val onesDecimalDecimal = onesDecimal\
    \ / 2l.toLong\n        val zerosDecimalDecimal = zerosDecimal / 2l.toLong\n  \
    \      val onesDecimalDecimalDecimal = onesDecimalDecimal / 2l.toLong\n      \
    \  val zerosDecimalDecimalDecimal = zerosDecimalDecimal / 2l.toLong\n        val\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 2l.toLong\n \
    \       val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal / 2l.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / 2l.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2l.toLong\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2l.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2l.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal", "        val ones = arr.filter(_ % 2 == 0).toList\n\
    \        val zeros = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x\
    \ => x.toLong).count(_ == 1)\n        val zerosCount = zeros.map(x => x.toLong).count(_\
    \ == 0)\n        val onesDecimal = ones.map(x => x.toLong).map(x => x.toInt).sum\n\
    \        val zerosDecimal = zeros.map(x => x.toLong).map(x => x.toInt).sum\n \
    \       val onesDecimalDecimal = ones.map(x => x.toLong).map(x => x.toInt).map(x\
    \ => x.toLong).sum\n        val zerosDecimalDecimal = zeros.map(x => x.toLong).map(x\
    \ => x.toInt).map(x => x.toLong).sum\n        val onesDecimalDecimalDecimal =\
    \ ones.map(x => x.toLong).map(x => x.toInt).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val zerosDecimalDecimalDecimal = zeros.map(x => x.toLong).map(x => x.toInt).map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val onesDecimalDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toInt).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val zerosDecimalDecimalDecimalDecimal = zeros.map(x\
    \ => x.toLong).map(x => x.toInt).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).sum\n        val onesDecimalDecimalDecimalDecimalDecimal = ones.map(x\
    \ => x.toLong).map(x => x.toInt).map(x => x.toLong).map(x => x.toLong).map(x =>\
    \ x.toLong).map(x => x.toLong).sum\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zeros.map(x => x.toLong).map(x => x.toInt).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toInt).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ ones / onesCount\n        val zerosDecimal = zeros / zerosCount\n        val\
    \ onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.filter(x => x == 1l.toLong).length\n     \
    \   val zeros = arr.filter(x => x == 0l.toLong).length\n        val onesZeros\
    \ = ones + zeros\n        val onesZeros_sorted = arr.sortBy(x => (onesZeros -\
    \ x))\n        val onesZeros_sorted_reversed = onesZeros_sorted.reverse\n    \
    \    val onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed =\
    \ onesZeros_sorted_reversed_sorted.reverse\n        val onesZeros_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros - x))\n \
    \       val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros\
    \ - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.",
  "        val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_\
    \ == 0).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n     \
    \   val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalInt = onesDecimalString.toInt\n\
    \        val zerosDecimalInt = zerosDecimalString.toInt\n        val onesDecimalDecimal\
    \ = onesDecimalInt * 10\n        val zerosDecimalDecimal = zerosDecimalInt * 10\n\
    \        val onesDecimalDecimalString = onesDecimalDecimal.toString\n        val\
    \ zerosDecimalDecimalString = zerosDecimalDecimal.toString\n        val onesDecimalDecimalInt\
    \ = onesDecimalDecimalString.toInt\n        val zerosDecimalDecimalInt = zerosDecimalDecimalString.toInt\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimalInt * 10\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimalInt * 10\n        val onesDecimalDecimalDecimalString\
    \ = onesDecimalDecimalDecimal.toString\n        val zerosDecimalDecimalDecimalString\
    \ = zerosDecimalDecimalDecimal.toString\n        val onesDecimalDecimalDecimalInt\
    \ = onesDecimalDecimalDecimalString.toInt\n        val zerosDecimalDecimalDecimalInt\
    \ = zerosDecimalDecimalDecimalString.toInt\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalInt * 10\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalInt * 10\n        val onesDecimalDecimalDecimalDecimalString\
    \ = onesDecimalDecimalDecimalDecimal.toString\n        val zerosDecimalDecimalDecimalDecimalString\
    \ = zerosDecimalDecimalDecimalDecimal.toString\n        val onesDecimalDecimalDecimalDecimalInt\
    \ = onesDecimalDecimalDecimalDecimalString.toInt\n        val zerosDecimalDecimalDecimalDecimalInt\
    \ = zerosDecimalDecimalDecimalDecimalString.toInt\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalInt * 10\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalInt * 10\n        val onesDecimalDecimalDecimalDecimalDecimalString\
    \ = onesDecimalDecimalDecimalDecimalDecimal.toString\n        val zerosDecimalDecimalDecimalDecimalString\
    \ = zerosDecimalDecimalDecimalDecimal.toString\n        val onesDecimalDecimalDecimalDecimalDecimalInt\
    \ = onesDecimalDecimalDecimalDecimalString.toInt\n        val zerosDecimalDecimalDecimalDecimalInt\
    \ = zerosDecimalDecimalDecimalDecimalString.toInt\n        val ones", "      \
    \  val ones = arr.filter(_ == 1l)\n        val zeros = arr.filter(_ == 0l)\n \
    \       val onesCount = ones.count(_ == 1l)\n        val zerosCount = zeros.count(_\
    \ == 0l)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "        val\
    \ ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 ==\
    \ 1).length\n        val onesZeros = ones + zeros\n        val onesZeros_arr =\
    \ arr.map(x => (x % 2 == 0 ? 1 : 0, x))\n        val onesZeros_arr2 = onesZeros_arr.sortBy(_._1).map(x\
    \ => x._2)\n        val onesZeros_arr3 = onesZeros_arr2.sortBy(_._2).map(x =>\
    \ x._1)\n        val onesZeros_arr4 = onesZeros_arr3.sortBy(_._1).map(x => x._2)\n\
    \        val onesZeros_arr5 = onesZeros_arr4.sortBy(_._2).map(x => x._1)\n   \
    \     val onesZeros_arr6 = onesZeros_arr5.sortBy(_._1).map(x => x._2)\n      \
    \  val onesZeros_arr7 = onesZeros_arr6.sortBy(_._2).map(x => x._1)\n        val\
    \ onesZeros_arr8 = onesZeros_arr7.sortBy(_._2).map(x => x._2)\n        val onesZeros_arr9\
    \ = onesZeros_arr8.sortBy(_._2).map(x => x._1)\n        val onesZeros_arr10 =\
    \ onesZeros_arr9.sortBy(_._2).map(x => x._2)\n        val onesZeros_arr11 = onesZeros_arr10.sortBy(_._2).map(x\
    \ => x._1)\n        val onesZeros_arr12 = onesZeros_arr11.sortBy(_._2).map(x =>\
    \ x._2)\n        val onesZeros_arr13 = onesZeros_arr12.sortBy(_._2).map(x => x._1)\n\
    \        val onesZeros_arr14 = onesZeros_arr13.sortBy(_._2).map(x => x._2)\n \
    \       val onesZeros_arr15 = onesZeros_arr14.sortBy(_._2).map(x => x._1)\n  \
    \      val onesZeros_arr16 = onesZeros_arr15.sortBy(_._2).map(x => x._2)\n   \
    \     val onesZeros_arr17 = onesZeros_arr16.sortBy(_._2).map(x => x._1)\n    \
    \    val onesZeros_arr18 = onesZeros_arr17.sortBy(_._2).map(x => x._2)\n     \
    \   val onesZeros_arr19 = onesZero", "        val ones = arr.count(_ == 1)\n \
    \       val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n\
    \        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val\
    \ onesZeros = ones + zeros\n        val onesZeroArr = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr2 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr3\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr4 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr5 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr6\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr7 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr8 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr9\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr10 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr11 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr12\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr13 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr14 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr15\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr16 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr17 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr18\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr19 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr20 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr21\
    \ = onesZeros.sortBy(", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesZeros = ones + zeros\n        val onesZeros_sorted\
    \ = arr.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted_reversed =\
    \ onesZeros_sorted.reverse\n        val onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed =\
    \ onesZeros_sorted_reversed_sorted.reverse\n        val onesZeros_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros - x))\n \
    \       val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros\
    \ - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesZeros = ones + zeros\n        val onesZeros_arr\
    \ = arr.map(x => (x % 2 == 0 ? 1 : 0, x))\n        val onesZeros_sorted = onesZeros_arr.sortBy(_._1).map(_._2)\n\
    \        val onesZeros_sorted_arr = onesZeros_sorted.map(x => x.toLong)\n    \
    \    val onesZeros_sorted_sorted = onesZeros_sorted_arr.sortBy(_ % 2 == 0).map(_._1)\n\
    \        val onesZeros_sorted_sorted_arr = onesZeros_sorted_sorted.map(x => x.toLong)\n\
    \        val onesZeros_sorted_sorted_sorted = onesZeros_sorted_sorted_arr.sortBy(_\
    \ % 2 == 1).map(_._1)\n        val onesZeros_sorted_sorted_sorted_arr = onesZeros_sorted_sorted_sorted.map(x\
    \ => x.toLong)\n        val onesZeros_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_arr.sortBy(_._1).map(_._2)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_arr = onesZeros_sorted_sorted_sorted_sorted.map(x\
    \ => x.toLong)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_arr.sortBy(_\
    \ % 2 == 0).map(_._1)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_arr\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted.map(x => x.toLong)\n \
    \       val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted_arr.sortBy(_\
    \ % 2 == 1).map(_._1)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_arr\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(x => x.toLong)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_arr.sortBy(_._1).map(_._2)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_arr =\
    \ onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(x => x.toLong)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_arr.sortBy(_\
    \ % 2 == 0).map(_._1)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x)).sum\n        val\
    \ onesDecimal = onesCount / arr.length\n        val zerosDecimal = zerosCount\
    \ / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimal", "        val ones = arr.count(_ == 1)\n   \
    \     val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n\
    \        val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.filter(x => x.toInt == 1).size\n        val zeros = arr.filter(x\
    \ => x.toInt == 0).size\n        val onesZeros = ones + zeros\n        val onesZerosList\
    \ = onesZeros.toList.sortWith(_ < _)\n        val onesZeros = onesZerosList.toList\n\
    \        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros = onesZeros.sortWith(_\
    \ < _)\n        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros\
    \ = onesZeros.sortWith(_ < _)\n        val onesZeros = onesZeros.sortWith(_ <\
    \ _)\n        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros\
    \ = onesZeros.sortWith(_ < _)\n        val onesZeros = onesZeros.sortWith(_ <\
    \ _)\n        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros\
    \ = onesZeros.sortWith(_ < _)\n        val onesZeros = onesZeros.sortWith(_ <\
    \ _)\n        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros\
    \ = onesZeros.sortWith(_ < _)\n        val onesZeros = onesZeros.sortWith(_ <\
    \ _)\n        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros\
    \ = onesZeros.sortWith(_ < _)\n        val onesZeros = onesZeros.sortWith(_ <\
    \ _)\n        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros\
    \ = onesZeros.sortWith(_ < _)\n        val onesZeros = onesZeros.sortWith(_ <\
    \ _)\n        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros\
    \ = onesZeros.sortWith(_ < _)\n        val onesZeros = onesZeros.sortWith(_ <\
    \ _)\n        val onesZeros = onesZeros.sortWith(_ < _)\n        val onesZeros\
    \ = ", "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros =\
    \ arr.filter(_ % 2 == 1).length\n        val maxOnes = arr.max\n        val maxZeros\
    \ = arr.min\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(x => x.toLong)\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(x => x.toLong)\n       \
    \ val maxOnesArr = onesArr.max\n        val maxZerosArr = zerosArr.min\n     \
    \   val maxOnesZeros = maxOnes - maxZeros\n        val maxOnesOnes = maxZeros\
    \ - maxOnes\n        val maxOnesZeroArr = onesArr.filter(_ % 2 == 0).sortBy(x\
    \ => x.toLong).max\n        val maxOnesOneArr = zerosArr.filter(_ % 2 == 1).sortBy(x\
    \ => x.toLong).min\n        val maxOnesZeroZeroArr = onesArr.filter(_ % 2 == 0).sortBy(x\
    \ => x.toLong).filter(_ % 2 == 0).sortBy(x => x.toLong).max\n        val maxOnesOneOneArr\
    \ = zerosArr.filter(_ % 2 == 1).sortBy(x => x.toLong).filter(_ % 2 == 1).sortBy(x\
    \ => x.toLong).min\n        val maxOnesZeroOneArr = onesArr.filter(_ % 2 == 0).sortBy(x\
    \ => x.toLong).filter(_ % 2 == 1).sortBy(x => x.toLong).max\n        val maxOnesOneZeroArr\
    \ = zerosArr.filter(_ % 2 == 1).sortBy(x => x.toLong).filter(_ % 2 == 0).sortBy(x\
    \ => x.toLong).min\n        val maxOnesZeroZeroArr = onesArr.filter(_ % 2 == 0).sortBy(x\
    \ => x.toLong).filter(_ % 2 == 1).sortBy(x => x.toLong).max\n        val maxOnesOneOneZeroArr\
    \ = zerosArr.filter(_ % 2 == 1).sortBy(x => x.toLong).filter(_ % 2 == 0).sortBy(x\
    \ => x.toLong).min\n        val maxOnesZeroOneZeroArr = onesArr.filter(_ % 2 ==\
    \ 0).sortBy(x => x.toLong).filter(_ % 2 == 1).sortBy(x => x.toLong).max\n    \
    \    val maxOnesOneZeroZeroArr = zerosArr.filter(_ % 2 == 1).sortBy(x => x.toLong).filter(_\
    \ % 2 == 0).sortBy(x => x.to", "        val ones = arr.filter(x => x == 1l.toLong)\n\
    \        val zeros = arr.filter(x => x == 0l.toLong)\n        val onesCount =\
    \ ones.count\n        val zerosCount = zeros.count\n        val onesDecimal =\
    \ ones.map(_.toString.toDouble).sum\n        val zerosDecimal = zeros.map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = arr.count(_ == 1 && _ == 0)\n        val onesOnes = arr.count(_\
    \ == 1 && _ == 1)\n        val onesZeroOnes = arr.count(_ == 1 && _ == 0 && _\
    \ == 1)\n        val onesOnesOnes = arr.count(_ == 1 && _ == 1 && _ == 1)\n  \
    \      val onesZeroOnesOnes = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 1)\n\
    \        val onesOnesZeroOnesOnes = arr.count(_ == 1 && _ == 1 && _ == 0 && _\
    \ == 1)\n        val onesZeroOnesOnesOnes = arr.count(_ == 1 && _ == 0 && _ ==\
    \ 1 && _ == 1)\n        val onesOnesZeroOnesZeroOnes = arr.count(_ == 1 && _ ==\
    \ 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes = arr.count(_ ==\
    \ 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes = arr.count(_\
    \ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes =\
    \ arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && _ == 0)\n        val onesZeroOnesOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 0)\n        val onesOnesZeroOnesZeroOnes\
    \ = arr.count(_ == 1 && _ == 1 && _ == 0 && ", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n \
    \       val onesDecSorted = onesDec.takeWhile(_ < ones)\n        val zerosDecSorted\
    \ = zerosDec.takeWhile(_ < zeros)\n        val onesDecSortedSorted: Seq[Long]\
    \ = onesDecSorted.take(ones)\n        val zerosDecSortedSorted: Seq[Long] = zerosDecSorted.take(zeros)\n\
    \        val onesDecSortedSortedSorted: Seq[Long] = onesDecSortedSorted.takeWhile(_\
    \ < onesDecSortedSorted)\n        val zerosDecSortedSortedSorted: Seq[Long] =\
    \ zerosDecSortedSorted.takeWhile(_ < zerosDecSortedSorted)\n        val onesDecSortedSortedSortedSorted:\
    \ Seq[Long] = onesDecSortedSortedSorted.takeWhile(_ < onesDecSortedSortedSortedSorted)\n\
    \        val zerosDecSortedSortedSortedSorted: Seq[Long] = zerosDecSortedSortedSorted.takeWhile(_\
    \ < zerosDecSortedSortedSortedSorted)\n        val onesDecSortedSortedSortedSortedSorted:\
    \ Seq[Long] = onesDecSortedSortedSortedSorted.takeWhile(_ < onesDecSortedSortedSortedSortedSorted)\n\
    \        val zerosDecSortedSortedSortedSortedSorted: Seq[Long] = zerosDecSortedSortedSortedSorted.takeWhile(_\
    \ < zerosDecSortedSortedSortedSortedSortedSorted)\n        val onesDecSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = onesDecSortedSortedSortedSortedSortedSorted.takeWhile(_ < onesDecSortedSortedSortedSortedSortedSortedSortedSorted)\n\
    \        val zerosDecSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = zerosDecSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ < zerosDecSortedSortedSortedSortedSortedSortedSortedSorted)\n        val onesDecSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Long] = onesDecSortedSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ < onesDecSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted)\n   \
    \     val zerosDecSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = zerosDecSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.takeWhile(_\
    \ < zerosDecSortedSortedSortedSortedSorted", '        arr.sortWith((x, y) => if
    (x == 0) y else x)', "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesArray = arr.map(x => if (x == 1) 1 else\
    \ 0).sorted\n        val zerosArray = arr.map(x => if (x == 0) 0 else 1).sorted\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zeroArrayLength = onesArrayLength - zerosArrayLength\n        val\
    \ onesArray = onesArray.take(onesArrayLength)\n        val zerosArray = zerosArray.take(zerosArrayLength)\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zeroArrayLength = onesArrayLength - zerosArrayLength\n        val\
    \ onesArray = onesArray.take(onesArrayLength)\n        val zerosArray = zerosArray.take(zerosArrayLength)\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zeroArrayLength = onesArrayLength - zerosArrayLength\n        val\
    \ onesArray = onesArray.take(onesArrayLength)\n        val zerosArray = zerosArray.take(zerosArrayLength)\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zeroArrayLength = onesArrayLength - zerosArrayLength\n        val\
    \ onesArray = onesArray.take(onesArrayLength)\n        val zerosArray = zerosArray.take(zerosArrayLength)\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zeroArrayLength = onesArrayLength - zerosArrayLength\n        val\
    \ onesArray = onesArray.take(onesArrayLength)\n        val zerosArray = zerosArray.take(zerosArrayLength)\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zeroArrayLength = onesArrayLength - zerosArrayLength\n        val\
    \ onesArray = onesArray.take", "        val ones = arr.filter(x => x % 2l.toLong\
    \ == 0l.toLong).length\n        val zeros = arr.filter(x => x % 2l.toLong != 0l.toLong).length\n\
    \        val onesArr = arr.filter(x => x % 2l.toLong == 0l.toLong).toList\n  \
    \      val zerosArr = arr.filter(x => x % 2l.toLong != 0l.toLong).toList\n   \
    \     val onesSortedArr = onesArr.sortBy(x => x.toString.toInt)\n        val zerosSortedArr\
    \ = zerosArr.sortBy(x => x.toString.toInt)\n        val onesSortedSortedArr =\
    \ onesSortedArr.sortBy(x => x.toString.toInt)\n        val zerosSortedSortedArr\
    \ = zerosSortedArr.sortBy(x => x.toString.toInt)\n        val onesSortedSortedSortedArr\
    \ = onesSortedSortedArr.sortBy(x => x.toString.toInt)\n        val zerosSortedSortedSortedArr\
    \ = zerosSortedSortedArr.sortBy(x => x.toString.toInt)\n        val onesSortedSortedSortedSortedArr\
    \ = onesSortedSortedSortedArr.sortBy(x => x.toString.toInt)\n        val zerosSortedSortedSortedSortedArr\
    \ = zerosSortedSortedSortedArr.sortBy(x => x.toString.toInt)\n        val onesSortedSortedSortedSortedSortedArr\
    \ = onesSortedSortedSortedSortedArr.sortBy(x => x.toString.toInt)\n        val\
    \ zerosSortedSortedSortedSortedSortedArr = zerosSortedSortedSortedSortedArr.sortBy(x\
    \ => x.toString.toInt)\n        val onesSortedSortedSortedSortedSortedSortedArr\
    \ = onesSortedSortedSortedSortedSortedSortedArr.sortBy(x => x.toString.toInt)\n\
    \        val zerosSortedSortedSortedSortedSortedSortedArr = zerosSortedSortedSortedSortedSortedArr.sortBy(x\
    \ => x.toString.toInt)\n        val onesSortedSortedSortedSortedSortedSortedSortedArr\
    \ = onesSortedSortedSortedSortedSortedSortedSortedArr.sortBy(x => x.toString.toInt)\n\
    \        val zerosSortedSortedSortedSortedSortedSortedSortedArr = zerosSortedSortedSortedSortedSortedSortedArr.sortBy(x\
    \ => x.toString.toInt)\n        val onesSortedSortedSortedSortedSortedSortedSortedSortedArr\
    \ = onesSortedSortedSortedSortedSortedSortedSortedSortedArr.sortBy(x => x.toString.toInt)\n\
    \        val zerosSorted", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n     \
    \   val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount /\
    \ arr.size\n        val zerosDecimal = zerosCount / arr.size\n        val onesDecimalDecimal\
    \ = onesDecimal / zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ / onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal /\
    \ zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones", "        val ones = arr.filter(x => x == 1l.toLong)\n        val zeros\
    \ = arr.filter(x => x == 0l.toLong)\n        val onesCount = ones.map(x => 1l.toLong).sum\n\
    \        val zerosCount = zeros.map(x => 0l.toLong).sum\n        val onesDecimal\
    \ = ones.map(x => x.toLong).sum / onesCount\n        val zerosDecimal = zeros.map(x\
    \ => x.toLong).sum / zerosCount\n        val onesDecimalDecimal = onesDecimal\
    \ + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal.toLong / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toLong / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toLong\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toLong\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toLong\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toLong\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toLong\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toLong\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toLong\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal", "        val ones = arr.filter(_ == 1).toList\n\
    \        val zeros = arr.filter(_ == 0).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n\
    \        val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = ones.map(_.toString.toInt).map(_.toString.toInt).sum\n        val zerosDecimal\
    \ = zeros.map(_.toString.toInt).map(_.toString.toInt).sum\n        val onesDecimalDecimal\
    \ = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(",
  "        val ones = arr.filter(_ == 1l)\n        val zeros = arr.filter(_ == 0l)\n\
    \        val onesCount = ones.count(_ == 1l)\n        val zerosCount = zeros.count(_\
    \ == 0l)\n        val onesDecimal = onesCount.toDouble / arr.length\n        val\
    \ zerosDecimal = zerosCount.toDouble / arr.length\n        val onesDecimalInt\
    \ = onesDecimal.toInt\n        val zerosDecimalInt = zerosDecimal.toInt\n    \
    \    val onesDecimalLong = onesDecimal.toLong\n        val zerosDecimalLong =\
    \ zerosDecimal.toLong\n        val onesDecimalFloat = onesDecimal.toFloat\n  \
    \      val zerosDecimalFloat = zerosDecimal.toFloat\n        val onesDecimalDouble\
    \ = onesDecimal.toDouble\n        val zerosDecimalDouble = zerosDecimal.toDouble\n\
    \        val onesDecimalDecimal = onesDecimal.toDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal.toDecimal\n        val onesDecimalDecimalInt = onesDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalInt = zerosDecimalDecimal.toInt\n        val onesDecimalDecimalLong\
    \ = onesDecimalDecimal.toLong\n        val zerosDecimalDecimalLong = zerosDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalFloat = onesDecimalDecimal.toFloat\n        val\
    \ zerosDecimalDecimalFloat = zerosDecimalDecimal.toFloat\n        val onesDecimalDecimalDouble\
    \ = onesDecimalDecimal.toDouble\n        val zerosDecimalDecimalDouble = zerosDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal.toDecimal\n      \
    \  val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toDecimal\n        val\
    \ onesDecimalDecimalDecimalInt = onesDecimalDecimalDecimal.toInt\n        val\
    \ zerosDecimalDecimalDecimalInt = zerosDecimalDecimalDecimal.toInt\n        val\
    \ onesDecimalDecimalDecimalLong = onesDecimalDecimalDecimal.toLong\n        val\
    \ zerosDecimalDecimalDecimalLong = zerosDecimalDecimalDecimal.toLong\n       \
    \ val onesDecimalDecimalDecimalFloat = onesDecimalDecimalDecimal.toFloat\n   \
    \     val zerosDecimalDecimalDecimalFloat = zerosDecimalDecimalDecimal.toFloat\n\
    \        val onesDecimalDecimalDecimalDouble = onesDecimalDecimalDecimal.toDouble\n\
    \        val zerosDecimalDecimalDecimalDouble = zerosDecimalDecimalDecimal.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal.toDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal.toDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalInt = onesDecimalDecimal", "    \
    \    val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.count(x => x == 1).toLong\n\
    \        val zerosCount = zeros.count(x => x == 0).toLong\n        val onesDecimal\
    \ = ones.count(x => x == 1).toLong / onesCount\n        val zerosDecimal = zeros.count(x\
    \ => x == 0).toLong / zerosCount\n        val onesDecimalDecimal = onesDecimal\
    \ / onesCount\n        val zerosDecimalDecimal = zerosDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n     \
    \   val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n      \
    \  val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val ", "        val ones = arr.filter(_ % 2 == 0).toList\n\
    \        val zeros = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x\
    \ => x.toLong).sum\n        val zerosCount = zeros.map(x => x.toLong).sum\n  \
    \      val onesDecimal = onesCount / arr.length\n        val zerosDecimal = zerosCount\
    \ / arr.length\n        val onesDecimalDecimal = onesDecimal / 10\n        val\
    \ zerosDecimalDecimal = zerosDecimal / 10\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimal", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros\
    \ = ones + zeros\n        val onesZeroSum = onesZeros * ones\n        val onesZeroSum2\
    \ = onesZeroSum * onesZeroSum\n        val onesZeroSum3 = onesZeroSum2 * onesZeroSum\n\
    \        val onesZeroSum4 = onesZeroSum3 * onesZeroSum\n        val onesZeroSum5\
    \ = onesZeroSum4 * onesZeroSum\n        val onesZeroSum6 = onesZeroSum5 * onesZeroSum\n\
    \        val onesZeroSum7 = onesZeroSum6 * onesZeroSum\n        val onesZeroSum8\
    \ = onesZeroSum7 * onesZeroSum\n        val onesZeroSum9 = onesZeroSum8 * onesZeroSum\n\
    \        val onesZeroSum10 = onesZeroSum9 * onesZeroSum\n        val onesZeroSum11\
    \ = onesZeroSum10 * onesZeroSum\n        val onesZeroSum12 = onesZeroSum11 * onesZeroSum\n\
    \        val onesZeroSum13 = onesZeroSum12 * onesZeroSum\n        val onesZeroSum14\
    \ = onesZeroSum13 * onesZeroSum\n        val onesZeroSum15 = onesZeroSum14 * onesZeroSum\n\
    \        val onesZeroSum16 = onesZeroSum15 * onesZeroSum\n        val onesZeroSum17\
    \ = onesZeroSum16 * onesZeroSum\n        val onesZeroSum18 = onesZeroSum17 * onesZeroSum\n\
    \        val onesZeroSum19 = onesZeroSum18 * onesZeroSum\n        val onesZeroSum20\
    \ = onesZeroSum19 * onesZeroSum\n        val onesZeroSum21 = onesZeroSum20 * onesZeroSum\n\
    \        val onesZeroSum22 = onesZeroSum21 * onesZeroSum\n        val onesZeroSum23\
    \ = onesZeroSum22 * onesZeroSum\n        val onesZeroSum24 = onesZeroSum23 * onesZeroSum\n\
    \        val onesZeroSum25 = onesZeroSum24 * onesZeroSum\n        val onesZeroSum26\
    \ = onesZeroSum25 * onesZeroSum\n        val onesZeroSum27 = onesZero", "    \
    \    val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n   \
    \     val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.size\n        val zerosDecimal\
    \ = zerosCount / arr.size\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", '        arr.sortWith(compare)',
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = ones / onesCount\n        val zerosDecimal\
    \ = zeros / zerosCount\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n \
    \       val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val\
    \ onesZeros = ones + zeros\n        val onesZeroArr = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr2 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr3\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr4 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr5 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr6\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr7 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr8 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr9\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr10 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr11 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr12\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr13 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr14 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr15\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr16 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr17 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr18\
    \ = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr19 = onesZeros.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr20 = onesZeros.sortBy(_.toString.toInt)\n        val onesZeroArr21\
    \ = onesZeros.sortBy(", '        arr.sortWith((x, y) => if (x == 0) y else x)',
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimal", "        val ones = arr.filter(_ == 1l.toLong)\n  \
    \      val zeros = arr.filter(_ == 0l.toLong)\n        val onesCount = ones.count\n\
    \        val zerosCount = zeros.count\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe",
  "        val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_\
    \ == 0).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n     \
    \   val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimal", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesArray = arr.filter(_ == 1).map(_.toLong).toArray\n\
    \        val zerosArray = arr.filter(_ == 0).map(_.toLong).toArray\n        val\
    \ onesArrayLength = onesArray.length\n        val zerosArrayLength = zerosArray.length\n\
    \        val onesArrayLength = onesArrayLength / 2\n        val zerosArrayLength\
    \ = zerosArrayLength / 2\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zerosArrayLength = zerosArrayLength + onesArrayLength\n        val\
    \ onesArrayLength = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength\
    \ / 2\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n    \
    \    val zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n        val zerosArrayLength = zerosArrayLength / 2\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = zerosArrayLength + onesArrayLength\n        val onesArrayLength\
    \ = onesArrayLength / 2\n", '        arr.sortWith(compare)', "        val ones\
    \ = arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x => x ==\
    \ 0l.toLong)\n        val onesCount = ones.count()\n        val zerosCount = zeros.count()\n\
    \        val onesDecimal = onesCount / 2\n        val zerosDecimal = zerosCount\
    \ / 2\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val\
    \ zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimal", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val twos = arr.filter(_ % 2 == 1).length\n       \
    \ val decimals = arr.filter(_ % 1 == 0).length\n        val sorted = arr.sortBy(x\
    \ => (ones - x % ones, twos - x % twos, decimals - x % decimals))\n        sorted.toList",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n        val\
    \ zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val onesZeros\
    \ = ones + zeros\n        val onesZeroArr = onesZeros.toList.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr2 = onesZeros.toList.sortBy(_.toString.toInt)\n      \
    \  val onesZeroArr3 = onesZeros.toList.sortBy(_.toString.toInt)\n        val onesZeroArr4\
    \ = onesZeros.toList.sortBy(_.toString.toInt)\n        val onesZeroArr5 = onesZeros.toList.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr6 = onesZeros.toList.sortBy(_.toString.toInt)\n      \
    \  val onesZeroArr7 = onesZeros.toList.sortBy(_.toString.toInt)\n        val onesZeroArr8\
    \ = onesZeros.toList.sortBy(_.toString.toInt)\n        val onesZeroArr9 = onesZeros.toList.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr10 = onesZeros.toList.sortBy(_.toString.toInt)\n     \
    \   val onesZeroArr11 = onesZeros.toList.sortBy(_.toString.toInt)\n        val\
    \ onesZeroArr12 = onesZeros.toList.sortBy(_.toString.toInt)\n        val onesZeroArr13\
    \ = onesZeros.toList.sortBy(_.toString.toInt)\n        val onesZeroArr14 = onesZeros.toList.sortBy(_.toString.toInt)\n\
    \        val onesZeroArr15 = onesZeros.toList.sortBy(_.toString.toInt)\n     \
    \   val onesZeroArr16 = onesZeros.toList.sortBy(_.toString.toInt)\n        val\
    \ onesZeroArr17 = onesZeros.toList.sortBy(_.toString.toInt)\n        val onesZeroArr18\
    \ = onesZeros.toList.sortBy(_.toString.toInt)\n        val onesZeroArr19 = onesZeros.toList.sortBy(_.toString.toInt)",
  "        val ones = arr.filter(_ == 1l)\n        val zeros = arr.filter(_ == 0l)\n\
    \        val onesCount = ones.count()\n        val zerosCount = zeros.count()\n\
    \        val maxOnesCount = onesCount + zerosCount\n        val maxZeroCount =\
    \ zerosCount + onesCount\n        val maxCount = maxOnesCount + maxZeroCount\n\
    \        val onesArray = ones.toArray\n        val zerosArray = zeros.toArray\n\
    \        val onesArrayLength = onesArray.length\n        val zerosArrayLength\
    \ = zerosArray.length\n        val onesArrayCopy = onesArray.clone()\n       \
    \ val zerosArrayCopy = zerosArray.clone()\n        val onesArrayCopyLength = onesArrayCopy.length\n\
    \        val zerosArrayCopyLength = zerosArrayCopy.length\n        val onesArrayCopyCopy\
    \ = onesArrayCopy.clone()\n        val zerosArrayCopyCopy = zerosArrayCopy.clone()\n\
    \        val onesArrayCopyCopyLength = onesArrayCopyCopy.length\n        val zerosArrayCopyCopyLength\
    \ = zerosArrayCopyCopy.length\n        val onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n\
    \        val zerosArrayCopyCopyLength = zerosArrayCopyCopy.length\n        val\
    \ onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n        val zerosArrayCopyCopyLength\
    \ = zerosArrayCopyCopy.length\n        val onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n\
    \        val zerosArrayCopyCopyLength = zerosArrayCopyCopy.length\n        val\
    \ onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n        val zerosArrayCopyCopyLength\
    \ = zerosArrayCopyCopy.length\n        val onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n\
    \        val zerosArrayCopyCopyLength = zerosArrayCopyCopy.length\n        val\
    \ onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n        val zerosArrayCopyCopyLength\
    \ = zerosArrayCopyCopy.length\n        val onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n\
    \        val zerosArrayCopyCopyLength = zerosArrayCopyCopy.length\n        val\
    \ onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n        val zerosArrayCopyCopyLength\
    \ = zerosArrayCopyCopy.length\n        val onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n\
    \        val zerosArrayCopyCopyLength = zerosArrayCopyCopy.length\n        val\
    \ onesArrayCopyCopyCopyLength = onesArrayCopyCopy.length\n        val zerosArrayCopyCopyLength\
    \ = zerosArrayCopyCopy.length\n        val ones", "        val ones = arr.filter(_\
    \ == 1).toList\n        val zeros = arr.filter(_ == 0).toList\n        val onesCount\
    \ = ones.count\n        val zerosCount = zeros.count\n        val onesDecimal\
    \ = ones.map(_.toString.toDouble).sum\n        val zerosDecimal = zeros.map(_.toString.toDouble).sum\n\
    \        val onesDecimalInt = onesDecimal.toInt\n        val zerosDecimalInt =\
    \ zerosDecimal.toInt\n        val onesDecimalInt = onesDecimalInt.toLong\n   \
    \     val zerosDecimalInt = zerosDecimalInt.toLong\n        val onesDecimalInt\
    \ = onesDecimalInt.toInt\n        val zerosDecimalInt = zerosDecimalInt.toInt\n\
    \        val onesDecimalInt = onesDecimalInt.toLong\n        val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n        val onesDecimalInt = onesDecimalInt.toInt\n\
    \        val zerosDecimalInt = zerosDecimalInt.toInt\n        val onesDecimalInt\
    \ = onesDecimalInt.toLong\n        val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \        val onesDecimalInt = onesDecimalInt.toInt\n        val zerosDecimalInt\
    \ = zerosDecimalInt.toInt\n        val onesDecimalInt = onesDecimalInt.toLong\n\
    \        val zerosDecimalInt = zerosDecimalInt.toLong\n        val onesDecimalInt\
    \ = onesDecimalInt.toInt\n        val zerosDecimalInt = zerosDecimalInt.toInt\n\
    \        val onesDecimalInt = onesDecimalInt.toLong\n        val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n        val onesDecimalInt = onesDecimalInt.toInt\n\
    \        val zerosDecimalInt = zerosDecimalInt.toInt\n        val onesDecimalInt\
    \ = onesDecimalInt.toLong\n        val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \        val onesDecimalInt = onesDecimalInt.toInt\n        val zerosDecimalInt\
    \ = zerosDecimalInt.toInt\n        val onesDecimalInt = onesDecimalInt.toLong\n\
    \        val zerosDecimalInt = zerosDecimalInt.toLong\n        val onesDecimalInt\
    \ = onesDecimalInt.toInt\n        val zerosDecimalInt = zerosDecimalInt.toInt\n\
    \        val onesDecimalInt = onesDecimalInt.toLong\n        val zerosDecimalInt\
    \ = zerosDecimalInt.", "        val ones = arr.filter(_ == 1l.toLong)\n      \
    \  val zeros = arr.filter(_ == 0l.toLong)\n        val onesCount = ones.count\n\
    \        val zerosCount = zeros.count\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ / onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal /\
    \ zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecim",
  "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesZeros = ones + zeros\n        val onesZeroCount\
    \ = onesZeros.map(x => x.toLong).count(_ > 0).toLong\n        val onesZeroCountSorted\
    \ = onesZeroCount.sortBy(x => x.toLong)\n        val onesZeroCountSortedSorted:\
    \ Seq[Long] = onesZeroCountSorted.toSeq.sortBy(x => x.toLong)\n        val onesZeroCountSortedSortedSorted:\
    \ Seq[Long] = onesZeroCountSortedSorted.toSeq.sortBy(x => x.toLong)\n        val\
    \ onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.sortBy(x\
    \ => x.toLong)\n        val onesZeroCountSortedSortedSorted: Seq[Long] = onesZeroCountSortedSortedSorted.toSeq.",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesArr = arr.filter(_ == 1)\n        val zerosArr = arr.filter(_\
    \ == 0)\n        val onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n\
    \        val onesSum = onesArr.sum\n        val zerosSum = zerosArr.sum\n    \
    \    val onesSumArr = onesArr.map(_.toLong)\n        val zerosSumArr = zerosArr.map(_.toLong)\n\
    \        val onesSumCount = onesSumArr.length\n        val zerosSumCount = zerosSumArr.length\n\
    \        val onesSumArr = onesSumArr.sortBy(_ - onesSum)\n        val zerosSumArr\
    \ = zerosSumArr.sortBy(_ - zerosSum)\n        val onesSumCount = onesSumArr.length\n\
    \        val zerosSumCount = zerosSumArr.length\n        val onesSumArr = onesSumArr.sortBy(_\
    \ - onesSum)\n        val zerosSumArr = zerosSumArr.sortBy(_ - zerosSum)\n   \
    \     val onesSumCount = onesSumArr.length\n        val zerosSumCount = zerosSumArr.length\n\
    \        val onesSumArr = onesSumArr.sortBy(_ - onesSum)\n        val zerosSumArr\
    \ = zerosSumArr.sortBy(_ - zerosSum)\n        val onesSumCount = onesSumArr.length\n\
    \        val zerosSumCount = zerosSumArr.length\n        val onesSumArr = onesSumArr.sortBy(_\
    \ - onesSum)\n        val zerosSumArr = zerosSumArr.sortBy(_ - zerosSum)\n   \
    \     val onesSumCount = onesSumArr.length\n        val zerosSumCount = zerosSumArr.length\n\
    \        val onesSumArr = onesSumArr.sortBy(_ - onesSum)\n        val zerosSumArr\
    \ = zerosSumArr.sortBy(_ - zerosSum)\n        val onesSumCount = onesSumArr.length\n\
    \        val zerosSumCount = zerosSumArr.length\n        val onesSumArr = onesSumArr.sortBy(_\
    \ - onesSum)\n        val zerosSumArr = zerosSumArr.sortBy(_ - zerosSum)\n   \
    \     val onesSumCount = onesSumArr.length\n        val zerosSum", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x)).max\n        val\
    \ onesDecimal = ones.map(x => x.toString.toDouble).max\n        val zerosDecimal\
    \ = zeros.map(x => x.toString.toDouble).max\n        val onesDecimalCount = ones.map(x\
    \ => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_\
    \ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).max\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).max\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).max\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).max\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).max\n        val onesDecimalCount\
    \ = ones.map(", "        val ones = arr.filter(x => x == 1l.toLong)\n        val\
    \ zeros = arr.filter(x => x == 0l.toLong)\n        val onesCount = ones.count()\n\
    \        val zerosCount = zeros.count()\n        val onesDecimal = ones.map(x\
    \ => x.toString.toDouble).sum\n        val zerosDecimal = zeros.map(x => x.toString.toDouble).sum\n\
    \        val onesDecimalDecimal = onesDecimal.toString.toDouble\n        val zerosDecimalDecimal\
    \ = zerosDecimal.toString.toDouble\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toDouble\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ == 1l)\n        val zeros = arr.filter(_ == 0l)\n\
    \        val onesCount = ones.count(_ == 1l)\n        val zerosCount = zeros.count(_\
    \ == 0l)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.filter(x => x.toInt == 1)\n        val zeros = arr.filter(x\
    \ => x.toInt == 0)\n        val onesCount = ones.map(x => x.toInt).sum\n     \
    \   val zerosCount = zeros.map(x => x.toInt).sum\n        val onesDecimal = onesCount\
    \ / ones.length\n        val zerosDecimal = zerosCount / zeros.length\n      \
    \  val onesDecimalDecimal = onesDecimal / onesDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecim",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = ones + zeros\n        val onesZeroArray = Array.ofDim[Long](onesZeros)\n\
    \        val onesZeroArrayCopy = onesZeroArray.clone()\n        val onesZeroArrayCopySorted\
    \ = onesZeroArrayCopy.sortWith(_ < _)\n        val onesZeroArraySortedCopy = onesZeroArrayCopySorted.clone()\n\
    \        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val onesZeroArraySortedCopySorted = onesZeroArraySortedCopy.sortWith(_\
    \ < _)\n        val ", "        val ones = arr.filter(_ % 2 == 0).toList\n   \
    \     val zeros = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x\
    \ => x.toLong).sum\n        val zerosCount = zeros.map(x => x.toLong).sum\n  \
    \      val onesDecimal = onesCount / 2\n        val zerosDecimal = zerosCount\
    \ / 2\n        val onesDecimalDecimal = onesDecimal / 2\n        val zerosDecimalDecimal\
    \ = zerosDecimal / 2\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / 2\n    \
    \    val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 2\n  \
    \      val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal / 2\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimal", "        val ones = arr.filter(x => x == 1l.toLong)\n      \
    \  val zeros = arr.filter(x => x == 0l.toLong)\n        val onesCount = ones.count\n\
    \        val zerosCount = zeros.count\n        val onesDecimal = onesCount / 2\n\
    \        val zerosDecimal = zerosCount / 2\n        val onesDecimalDecimal = onesDecimal\
    \ / 2\n        val zerosDecimalDecimal = zerosDecimal / 2\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 2\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros = ones +\
    \ zeros\n        val onesZeros_sorted = arr.sortBy(x => (onesZeros - x))\n   \
    \     val onesZeros_sorted_reversed = onesZeros_sorted.reverse\n        val onesZeros_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed.sortBy(x => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted.reverse\n        val onesZeros_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros - x))\n \
    \       val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        onesZeros_sorted_reversed_sorted_reversed_sorted_reversed", "       \
    \ val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_ == 0).toList\n\
    \        val onesCount = ones.size\n        val zerosCount = zeros.size\n    \
    \    val onesDecimal = onesCount.toDouble / onesCount.toDouble\n        val zerosDecimal\
    \ = zerosCount.toDouble / zerosCount.toDouble\n        val onesDecimalString =\
    \ onesDecimal.toString\n        val zerosDecimalString = zerosDecimal.toString\n\
    \        val onesDecimalString = onesDecimalString.toUpperCase\n        val zerosDecimalString\
    \ = zerosDecimalString.toUpperCase\n        val onesDecimalString = onesDecimalString.replace(\"\
    .\", \"\")\n        val zerosDecimalString = zerosDecimalString.replace(\".\"\
    , \"\")\n        val onesDecimalString = onesDecimalString.replace(\"-\", \"\"\
    )\n        val zerosDecimalString = zerosDecimalString.replace(\"-\", \"\")\n\
    \        val onesDecimalString = onesDecimalString.replace(\"+\", \"\")\n    \
    \    val zerosDecimalString = zerosDecimalString.replace(\"+\", \"\")\n      \
    \  val onesDecimalString = onesDecimalString.replace(\"E\", \"\")\n        val\
    \ zerosDecimalString = zerosDecimalString.replace(\"E\", \"\")\n        val onesDecimalString\
    \ = onesDecimalString.replace(\"+\", \"\")\n        val zerosDecimalString = zerosDecimalString.replace(\"\
    +\", \"\")\n        val onesDecimalString = onesDecimalString.replace(\"E\", \"\
    \")\n        val zerosDecimalString = zerosDecimalString.replace(\"E\", \"\")\n\
    \        val onesDecimalString = onesDecimalString.replace(\"+\", \"\")\n    \
    \    val zerosDecimalString = zerosDecimalString.replace(\"+\", \"\")\n      \
    \  val onesDecimalString = onesDecimalString.replace(\"E\", \"\")\n        val\
    \ zerosDecimalString = zerosDecimalString.replace(\"E\", \"\")\n        val onesDecimalString\
    \ = onesDecimalString.replace(\"+\", \"\")\n        val zerosDecimalString = zerosDecimalString.replace(\"\
    +\", \"\")\n        val onesDecimalString = onesDecimalString.replace(\"E\", \"\
    \")\n        val zerosDecimalString = zerosDecimalString.replace(\"E\", \"\")\n\
    \        val onesDecimalString = onesDecimalString.replace(\"+\", \"\")\n    \
    \    val zerosDecimalString = zerosDecimalString.replace(\"+\", \"\")\n      \
    \  val onesDecimalString = onesDecimalString.replace(\"E\", \"\")\n        val\
    \ zerosDecimalString = zerosDecimalString.replace(\"E\", \"\")\n        val onesDecimalString\
    \ = onesDecimalString.replace(\"+\", \"\")\n        val zerosDecimalString = zerosDecimalString.replace(\"\
    +\", \"\")\n        val onesDecimalString = onesDecimalString.replace(\"E\", \"\
    \")\n        val zerosDecimalString = zerosDecimalString.replace(\"E\", \"\")\n\
    \        val onesDecimalString = onesDecimalString.replace(\"+\", \"\")\n    \
    \    val zerosDecimalString = zerosDecimalString.replace(\"+\", \"\")\n", "  \
    \      val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(x => x.toLong).sum\n    \
    \    val zerosCount = zeros.map(x => x.toLong).sum\n        val onesDecimal =\
    \ onesCount / 2\n        val zerosDecimal = zerosCount / 2\n        val onesDecimalDecimal\
    \ = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toDouble\
    \ / 2\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toDouble /\
    \ 2\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / 2\n        val ", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.size\n\
    \        val zerosDecimal = zerosCount / arr.size\n        val onesDecimalDecimal\
    \ = onesDecimal / ones\n        val zerosDecimalDecimal = zerosDecimal / zeros\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesZeros = ones + zeros\n        val onesZeros_arr\
    \ = arr.map(x => (x % 2 == 0 ? 1 : 0, x))\n        val onesZeros_sorted = onesZeros_arr.sortBy(_._1).map(x\
    \ => x._2)\n        val onesZeros_sorted_arr = onesZeros_sorted.map(x => x.toLong)\n\
    \        val onesZeros_sorted_sorted = onesZeros_sorted_arr.sortBy(_ % 2 == 0).map(x\
    \ => x.toLong)\n        val onesZeros_sorted_sorted_arr = onesZeros_sorted_sorted.map(x\
    \ => x.toLong)\n        val onesZeros_sorted_sorted_sorted = onesZeros_sorted_sorted_arr.sortBy(_\
    \ % 2 == 1).map(x => x.toLong)\n        val onesZeros_sorted_sorted_sorted_arr\
    \ = onesZeros_sorted_sorted_sorted.map(x => x.toLong)\n        val onesZeros_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_arr.sortBy(_ % 2 == 0).map(x => x.toLong)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_arr = onesZeros_sorted_sorted_sorted_sorted.map(x\
    \ => x.toLong)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_arr.sortBy(_\
    \ % 2 == 1).map(x => x.toLong)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_arr\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted.map(x => x.toLong)\n        val\
    \ onesZeros_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted_arr.sortBy(_\
    \ % 2 == 0).map(x => x.toLong)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_arr\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted.map(x => x.toLong)\n \
    \       val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_arr.sortBy(_\
    \ % 2 == 1).map(x => x.toLong)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_arr\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted.map(x => x.toLong)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_arr.sortBy(_\
    \ % 2 == 0).map(x => x.to", "        val ones = arr.count(_ == 1)\n        val\
    \ zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n\
    \        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val\
    \ onesZeros = ones + zeros\n        val onesZeroArr = onesZeros.map(_.toString.toInt).sortBy(_\
    \ < _)\n        val onesZeroArr2 = onesZeros.map(_.toString.toInt).sortBy(_ >\
    \ _)\n        val onesZeroArr3 = onesZeros.map(_.toString.toInt).sortBy(_ == _)\n\
    \        val onesZeroArr4 = onesZeros.map(_.toString.toInt).sortBy(_ != _)\n \
    \       val onesZeroArr5 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr6 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr7 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr8 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr9 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr10 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr11 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr12 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr13 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr14 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr15 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)\n\
    \        val onesZeroArr16 = onesZeros.map(_.toString.toInt).sortBy(_.toString.toInt)",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  '        arr.sortWith(compare)', "        val ones = arr.count(_ == 1)\n       \
    \ val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n\
    \        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val\
    \ onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n     \
    \   val onesSum = onesArr.sum\n        val zerosSum = zerosArr.sum\n        val\
    \ onesMax = onesArr.max\n        val zerosMax = zerosArr.max\n        val onesMin\
    \ = onesArr.min\n        val zerosMin = zerosArr.min\n        val onesAvg = onesArr.sum\
    \ / onesCount\n        val zerosAvg = zerosArr.sum / zerosCount\n        val onesDev\
    \ = onesArr.map(x => (x - onesAvg) * (x - onesAvg)).sum / onesCount\n        val\
    \ zerosDev = zerosArr.map(x => (x - zerosAvg) * (x - zerosAvg)).sum / zerosCount\n\
    \        val onesDeviation = onesArr.map(x => (x - onesAvg) * (x - onesAvg)).sum\
    \ / onesCount / onesCount / onesCount / onesCount / onesCount\n        val zerosDeviation\
    \ = zerosArr.map(x => (x - zerosAvg) * (x - zerosAvg)).sum / zerosCount / zerosCount\
    \ / zerosCount / zerosCount / zerosCount\n        val onesVariance = onesArr.map(x\
    \ => (x - onesAvg) * (x - onesAvg)).sum / onesCount / onesCount / onesCount /\
    \ onesCount / onesCount / onesCount\n        val zerosVariance = zerosArr.map(x\
    \ => (x - zerosAvg) * (x - zerosAvg)).sum / zerosCount / zerosCount / zerosCount\
    \ / zerosCount / zerosCount / zerosCount\n        val onesStdDev = onesArr.map(x\
    \ => (x - onesAvg) * (x - onesAvg)).sum / onesCount / onesCount / onesCount /\
    \ onesCount / onesCount / onesCount / onesCount\n        val zerosStdDev = zerosArr.map(x\
    \ => (x - zerosAvg) * (x - zerosAvg)).sum / zerosCount / zerosCount / zerosCount\
    \ / zerosCount / zerosCount / zerosCount / zerosCount\n        val onesVarianceDeviation\
    \ = onesArr.map(x ", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.size\n\
    \        val zerosDecimal = zerosCount / arr.size\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal ",
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => 1l).sum\n        val\
    \ zerosCount = zeros.map(x => 0l).sum\n        val onesDecimal = ones.map(x =>\
    \ x.toString.toDouble).sum\n        val zerosDecimal = zeros.map(x => x.toString.toDouble).sum\n\
    \        val onesDecimalInt = ones.map(x => x.toString.toInt).sum\n        val\
    \ zerosDecimalInt = zeros.map(x => x.toString.toInt).sum\n        val onesDecimalLong\
    \ = ones.map(x => x.toString.toLong).sum\n        val zerosDecimalLong = zeros.map(x\
    \ => x.toString.toLong).sum\n        val onesDecimalFloat = ones.map(x => x.toString.toFloat).sum\n\
    \        val zerosDecimalFloat = zeros.map(x => x.toString.toFloat).sum\n    \
    \    val onesDecimalDouble = ones.map(x => x.toString.toDouble).sum\n        val\
    \ zerosDecimalDouble = zeros.map(x => x.toString.toDouble).sum\n        val onesDecimalBigDecimal\
    \ = ones.map(x => x.toString.toBigDecimal).sum\n        val zerosDecimalBigDecimal\
    \ = zeros.map(x => x.toString.toBigDecimal).sum\n        val onesDecimalDecimal\
    \ = ones.map(x => x.toString.toDecimal).sum\n        val zerosDecimalDecimal =\
    \ zeros.map(x => x.toString.toDecimal).sum\n        val onesDecimalBigInt = ones.map(x\
    \ => x.toString.toBigInt).sum\n        val zerosDecimalBigInt = zeros.map(x =>\
    \ x.toString.toBigInt).sum\n        val onesDecimalBigLong = ones.map(x => x.toString.toBigLong).sum\n\
    \        val zerosDecimalBigLong = zeros.map(x => x.toString.toBigLong).sum\n\
    \        val onesDecimalBigFloat = ones.map(x => x.toString.toBigFloat).sum\n\
    \        val zerosDecimalBigFloat = zeros.map(x => x.toString.toBigFloat).sum\n\
    \        val onesDecimalBigDouble = ones.map(x => x.toString.toBigDouble).sum\n\
    \        val zerosDecimalBigDouble = zeros.map(x => x.toString.toBigDouble).sum\n\
    \        val onesDecimalBigDecimal = ones.map(x => x.toString.toBigDecimal).sum\n\
    \        ", "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros\
    \ = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(_.toLong).sum\n\
    \        val zerosCount = zeros.map(_.toLong).sum\n        val onesDecimal = onesCount\
    \ / ones.size\n        val zerosDecimal = zerosCount / zeros.size\n        val\
    \ onesDecimalDecimal = onesDecimal / onesDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal", "        val ones = arr.count(_ == 1)\n\
    \        val zeros = arr.count(_ == 0)\n        val onesDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n \
    \       val onesDecSorted = onesDec.take(ones)\n        val zerosDecSorted = zerosDec.take(zeros)\n\
    \        val onesDecSortedSorted: Seq[Long] = onesDecSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSorted: Seq[Long] = zerosDecSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSorted: Seq[Long] = onesDecSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSorted: Seq[Long] = zerosDecSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSorted: Seq[Long] = onesDecSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSorted: Seq[Long] = zerosDecSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSortedSorted: Seq[Long] = onesDecSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSortedSorted: Seq[Long] = zerosDecSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSortedSortedSorted: Seq[Long] = onesDecSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSortedSortedSorted: Seq[Long] = zerosDecSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = onesDecSortedSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = zerosDecSortedSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = onesDecSortedSortedSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = zerosDec", "        val ones = arr.filter(_ == 1).toList\n        val zeros\
    \ = arr.filter(_ == 0).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n\
    \        val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / ones.length\n        val zerosDecimal = zerosCount / zeros.length\n\
    \        val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalInt = onesDecimalString.toInt\n\
    \        val zerosDecimalInt = zerosDecimalString.toInt\n        val onesDecimalDecimal\
    \ = onesDecimalInt * 10 + onesDecimal\n        val zerosDecimalDecimal = zerosDecimalInt\
    \ * 10 + zerosDecimal\n        val onesDecimalDecimalString = onesDecimalDecimal.toString\n\
    \        val zerosDecimalDecimalString = zerosDecimalDecimal.toString\n      \
    \  val onesDecimalDecimalInt = onesDecimalDecimalString.toInt\n        val zerosDecimalDecimalInt\
    \ = zerosDecimalDecimalString.toInt\n        val onesDecimalDecimalDecimal = onesDecimalDecimalInt\
    \ * 10 + onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimalInt\
    \ * 10 + zerosDecimalDecimal\n        val onesDecimalDecimalDecimalString = onesDecimalDecimalDecimal.toString\n\
    \        val zerosDecimalDecimalDecimalString = zerosDecimalDecimalDecimal.toString\n\
    \        val onesDecimalDecimalDecimalInt = onesDecimalDecimalDecimalString.toInt\n\
    \        val zerosDecimalDecimalDecimalInt = zerosDecimalDecimalDecimalString.toInt\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalInt *\
    \ 10 + onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalInt * 10 + zerosDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalString = onesDecimalDecimalDecimalDecimal.toString\n\
    \        val zerosDecimalDecimalDecimalDecimalString = zerosDecimalDecimalDecimalDecimalString.toString\n\
    \        val onesDecimalDecimalDecimalDecimalInt = onesDecimalDecimalDecimalDecimalString.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalInt = zerosDecimalDecimalDecimalDecimalString.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalInt\
    \ * 10 + onesDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalInt * 10 + zerosDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalString = onesDecimalDecimalDecimalDecimal.toString\n\
    \        val zerosDecimalDecimalDecimalDecimalString = zerosDecimalDecimalDecimalDecimalString.toString\n\
    \        val one", "        val ones = arr.filter(x => x % 2 == 0).toList\n  \
    \      val zeros = arr.filter(x => x % 2 == 1).toList\n        val onesCount =\
    \ ones.map(x => x.toLong).count(_ == 1)\n        val zerosCount = zeros.map(x\
    \ => x.toLong).count(_ == 0)\n        val onesDecimal = ones.map(x => x.toLong).map(x\
    \ => x.toString.toDouble).sum\n        val zerosDecimal = zeros.map(x => x.toLong).map(x\
    \ => x.toString.toDouble).sum\n        val onesDecimalDecimal = onesDecimal /\
    \ onesCount\n        val zerosDecimalDecimal = zerosDecimal / zerosCount\n   \
    \     val onesDecimalDecimalDecimal = onesDecimalDecimal / zerosCount\n      \
    \  val zerosDecimalDecimalDecimal = zerosDecimalDecimal / onesCount\n        val\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / zerosCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(_\
    \ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 == 1).length\n      \
    \  val onesArray = arr.filter(_ % 2 == 0).map(_.toLong).toArray\n        val zerosArray\
    \ = arr.filter(_ % 2 == 1).map(_.toLong).toArray\n        val onesArrayLength\
    \ = onesArray.length\n        val zerosArrayLength = zerosArray.length\n     \
    \   val onesArrayLength = onesArrayLength / 2\n        val zerosArrayLength =\
    \ zerosArrayLength / 2\n        val onesArrayLength = onesArrayLength * onesArrayLength\n\
    \        val zerosArrayLength = zerosArrayLength * zerosArrayLength\n        val\
    \ onesArrayLength = onesArrayLength + zerosArrayLength\n        val zerosArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val zerosArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = onesArrayLength + zerosArrayLength\n        val onesArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val zerosArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zerosArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ onesArrayLength = onesArrayLength + zerosArrayLength\n        val zerosArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val zerosArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = onesArrayLength + zerosArrayLength\n        val onesArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val zerosArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val onesArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val zerosArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ onesArrayLength = onesArrayLength + zerosArrayLength\n        val zerosArrayLength\
    \ = onesArrayLength + zerosArrayLength\n        val onesArrayLength = onesArrayLength\
    \ + zerosArrayLength\n        val zerosArrayLength = onesArrayLength + zerosArrayLength\n\
    \        val onesArrayLength = onesArrayLength + zerosArrayLength\n        val\
    \ zerosArrayLength = onesArrayLength + zerosArrayLength\n        ", "        val\
    \ ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_ % 2 ==\
    \ 1).length\n        val onesZeros = ones + zeros\n        val onesZerosInv =\
    \ onesZeros / arr.length\n        val onesZerosInv2 = onesZeros / 2\n        val\
    \ onesZerosInv3 = onesZeros / 3\n        val onesZerosInv4 = onesZeros / 4\n \
    \       val onesZerosInv5 = onesZeros / 5\n        val onesZerosInv6 = onesZeros\
    \ / 6\n        val onesZerosInv7 = onesZeros / 7\n        val onesZerosInv8 =\
    \ onesZeros / 8\n        val onesZerosInv9 = onesZeros / 9\n        val onesZerosInv10\
    \ = onesZeros / 10\n        val onesZerosInv11 = onesZeros / 11\n        val onesZerosInv12\
    \ = onesZeros / 12\n        val onesZerosInv13 = onesZeros / 13\n        val onesZerosInv14\
    \ = onesZeros / 14\n        val onesZerosInv15 = onesZeros / 15\n        val onesZerosInv16\
    \ = onesZeros / 16\n        val onesZerosInv17 = onesZeros / 17\n        val onesZerosInv18\
    \ = onesZeros / 18\n        val onesZerosInv19 = onesZeros / 19\n        val onesZerosInv20\
    \ = onesZeros / 20\n        val onesZerosInv21 = onesZeros / 21\n        val onesZerosInv22\
    \ = onesZeros / 22\n        val onesZerosInv23 = onesZeros / 23\n        val onesZerosInv24\
    \ = onesZeros / 24\n        val onesZerosInv25 = onesZeros / 25\n        val onesZerosInv26\
    \ = onesZeros / 26\n        val onesZerosInv27 = onesZeros / 27\n        val onesZerosInv28\
    \ = onesZeros / 28\n        val onesZerosInv29 = onesZeros / 29\n        val onesZerosInv30\
    \ = onesZeros / 30\n        val onesZerosInv31 = onesZeros / 31\n        val onesZerosInv32\
    \ = onesZeros / 32\n        val onesZerosInv33 = onesZeros / 33", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val ", '        arr.sortWith((a, b) => a.toLong > b.toLong)',
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = ones / onesCount\n        val zerosDecimal\
    \ = zeros / zerosCount\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        ", "        val ones = arr.filter(_ == 1).length\n   \
    \     val zeros = arr.filter(_ == 0).length\n        val onesArr = arr.filter(_\
    \ == 1).sortBy(_.toString.toInt)\n        val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n\
    \        val onesArr2 = onesArr.sortBy(_.toString.toInt)\n        val zerosArr2\
    \ = zerosArr.sortBy(_.toString.toInt)\n        val onesArr3 = onesArr2.sortBy(_.toString.toInt)\n\
    \        val zerosArr3 = zerosArr2.sortBy(_.toString.toInt)\n        val onesArr4\
    \ = onesArr3.sortBy(_.toString.toInt)\n        val zerosArr4 = zerosArr3.sortBy(_.toString.toInt)\n\
    \        val onesArr5 = onesArr4.sortBy(_.toString.toInt)\n        val zerosArr5\
    \ = zerosArr4.sortBy(_.toString.toInt)\n        val onesArr6 = onesArr5.sortBy(_.toString.toInt)\n\
    \        val zerosArr6 = zerosArr5.sortBy(_.toString.toInt)\n        val onesArr7\
    \ = onesArr6.sortBy(_.toString.toInt)\n        val zerosArr7 = zerosArr6.sortBy(_.toString.toInt)\n\
    \        val onesArr8 = onesArr7.sortBy(_.toString.toInt)\n        val zerosArr8\
    \ = zerosArr7.sortBy(_.toString.toInt)\n        val onesArr9 = onesArr8.sortBy(_.toString.toInt)\n\
    \        val zerosArr9 = zerosArr8.sortBy(_.toString.toInt)\n        val onesArr10\
    \ = onesArr9.sortBy(_.toString.toInt)\n        val zerosArr10 = zerosArr9.sortBy(_.toString.toInt)\n\
    \        val onesArr11 = onesArr10.sortBy(_.toString.toInt)\n        val zerosArr11\
    \ = zerosArr10.sortBy(_.toString.toInt)\n        val onesArr12 = onesArr11.sortBy(_.toString.toInt)\n\
    \        val zerosArr12 = zerosArr11.sortBy(_.toString.toInt)\n        val onesArr13\
    \ = onesArr12.sortBy(_.toString.toInt)\n        val zerosArr13 = zerosArr12.sortBy(_.toString.toInt)\n\
    \        val onesArr14 = onesArr13.sortBy(_.toString.to", "        val ones =\
    \ arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x => x == 0l.toLong)\n\
    \        val onesCount = ones.map(x => 1l.toLong).sum\n        val zerosCount\
    \ = zeros.map(x => 0l.toLong).sum\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(_ == 1l)\n        val zeros = arr.filter(_ == 0l)\n\
    \        val onesCount = ones.count(_ == 1l)\n        val zerosCount = zeros.count(_\
    \ == 0l)\n        val onesDecimal = onesCount.toDouble / ones.length\n       \
    \ val zerosDecimal = zerosCount.toDouble / zeros.length\n        val onesDecimalDecimal\
    \ = onesDecimal.toDouble / onesDecimal\n        val zerosDecimalDecimal = zerosDecimal.toDouble\
    \ / zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal.toDouble\
    \ / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toDouble\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal.toDouble\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal.toDouble / zerosDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toDouble\
    \ / onesDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal.toDouble / zerosDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal.toDouble / zerosDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n", " \
    \       val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n \
    \       val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = ones.map(_.toString.toInt).map(_.toString.toInt).sum\n        val zerosDecimal\
    \ = zeros.map(_.toString.toInt).map(_.toString.toInt).sum\n        val onesDecimalDecimal\
    \ = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.to",
  "        val ones = arr.filter(_ == 1l)\n        val zeros = arr.filter(_ == 0l)\n\
    \        val onesCount = ones.map(_.toLong).sum\n        val zerosCount = zeros.map(_.toLong).sum\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / 10\n\
    \        val zerosDecimalDecimal = zerosDecimal / 10\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal", '        arr.sortWith((x, y) => x.toLong == y.toLong
    ? x.toLong - y.toLong : x.toLong - y.toLong)', "        val ones = arr.filter(x\
    \ => x == 1l.toLong)\n        val zeros = arr.filter(x => x == 0l.toLong)\n  \
    \      val onesCount = ones.count(_ == 1l.toLong)\n        val zerosCount = zeros.count(_\
    \ == 0l.toLong)\n        val onesDecimal = onesCount / arr.length\n        val\
    \ zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal\
    \ + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal * 10\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal * 10\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal * 10\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal * 10\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n     \
    \   val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal *\
    \ 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n     \
    \   val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "        val\
    \ ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_ == 0).toList\n\
    \        val onesCount = ones.count\n        val zerosCount = zeros.count\n  \
    \      val onesDecimal = onesCount / arr.length\n        val zerosDecimal = zerosCount\
    \ / arr.length\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal * arr.length\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal * arr.length\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal * arr.length\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal * arr.length\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal * arr.length\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal * arr.length\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal * arr.length\n     \
    \   val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * arr.length\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * arr.length\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimal * arr.length\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * arr.length\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * arr.length\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * arr.length\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * arr.length\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * arr.length\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * arr.length\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * arr.length\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * arr.length\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "        val ones\
    \ = arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x => x ==\
    \ 0l.toLong)\n        val onesCount = ones.map(x => 1l.toLong).sum\n        val\
    \ zerosCount = zeros.map(x => 0l.toLong).sum\n        val onesDecimal = ones.map(x\
    \ => x.toLong).sum / onesCount\n        val zerosDecimal = zeros.map(x => x.toLong).sum\
    \ / zerosCount\n        val onesDecimalDecimal = onesDecimal + zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal + zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal + onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal + zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal +\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ + onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal + zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal + onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal * 10\n  \
    \      val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = ones + zeros\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val onesZeros = onesZero % 2\n        val onesZero = onesZeros / 2\n \
    \       val ", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val ", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n\
    \        val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ", "        val ones = arr.filter(x => x == 1l.toLong)\n        val zeros\
    \ = arr.filter(x => x == 0l.toLong)\n        val onesCount = ones.map(x => 1l.toLong).sum\n\
    \        val zerosCount = zeros.map(x => 0l.toLong).sum\n        val onesDecimal\
    \ = ones.map(x => x.toLong).sum / onesCount\n        val zerosDecimal = zeros.map(x\
    \ => x.toLong).sum / zerosCount\n        val onesDecimalDecimal = onesDecimal\
    \ + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal.toDouble / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal.toDouble / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal.toDouble\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.to",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal", "        val ones = arr.filter(x => x == 1l.toLong)\n      \
    \  val zeros = arr.filter(x => x == 0l.toLong)\n        val onesCount = ones.map(x\
    \ => 1l.toLong).sum\n        val zerosCount = zeros.map(x => 0l.toLong).sum\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = ones + zeros\n        val onesZeroSum = onesZeros * (onesZeros\
    \ - 1) / 2\n        val onesZeroSum2 = onesZeroSum * (onesZeroSum - 1) / 2\n \
    \       val onesZeroSum3 = onesZeroSum2 * (onesZeroSum2 - 1) / 2\n        val\
    \ onesZeroSum4 = onesZeroSum3 * (onesZeroSum3 - 1) / 2\n        val onesZeroSum5\
    \ = onesZeroSum4 * (onesZeroSum4 - 1) / 2\n        val onesZeroSum6 = onesZeroSum5\
    \ * (onesZeroSum5 - 1) / 2\n        val onesZeroSum7 = onesZeroSum6 * (onesZeroSum6\
    \ - 1) / 2\n        val onesZeroSum8 = onesZeroSum7 * (onesZeroSum7 - 1) / 2\n\
    \        val onesZeroSum9 = onesZeroSum8 * (onesZeroSum8 - 1) / 2\n        val\
    \ onesZeroSum10 = onesZeroSum9 * (onesZeroSum9 - 1) / 2\n        val onesZeroSum11\
    \ = onesZeroSum10 * (onesZeroSum10 - 1) / 2\n        val onesZeroSum12 = onesZeroSum11\
    \ * (onesZeroSum11 - 1) / 2\n        val onesZeroSum13 = onesZeroSum12 * (onesZeroSum12\
    \ - 1) / 2\n        val onesZeroSum14 = onesZeroSum13 * (onesZeroSum13 - 1) /\
    \ 2\n        val onesZeroSum15 = onesZeroSum14 * (onesZeroSum14 - 1) / 2\n   \
    \     val onesZeroSum16 = onesZeroSum15 * (onesZeroSum15 - 1) / 2\n        val\
    \ onesZeroSum17 = onesZeroSum16 * (onesZeroSum16 - 1) / 2\n        val onesZeroSum18\
    \ = onesZeroSum17 * (onesZeroSum17 - 1) / 2\n        val onesZeroSum19 = onesZeroSum18\
    \ * (onesZeroSum18 - 1) / 2\n        val onesZeroSum20 = onesZeroSum19 * (onesZeroSum19\
    \ - 1) / 2\n        val onesZeroSum21 = onesZeroSum20 * (onesZeroSum20 - 1) /\
    \ 2\n        val onesZeroSum22 = onesZeroSum21 * (onesZeroSum21 - 1) / 2\n   \
    \     val onesZeroSum23 = onesZeroSum22 * (", "        val ones = arr.filter(x\
    \ => x == 1).toList\n        val zeros = arr.filter(x => x == 0).toList\n    \
    \    val onesCount = ones.map(x => ones.count(_ == x)).sum\n        val zerosCount\
    \ = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimal", "        val ones = arr.filter(_ == 1).toList\n        val\
    \ zeros = arr.filter(_ == 0).toList\n        val onesCount = ones.count(_ == 1)\n\
    \        val zerosCount = zeros.count(_ == 0)\n        val onesDecimal = onesCount.toDouble\
    \ / ones.size\n        val zerosDecimal = zerosCount.toDouble / zeros.size\n \
    \       val onesDecimalDecimal = onesDecimal.toDouble / onesCount\n        val\
    \ zerosDecimalDecimal = zerosDecimal.toDouble / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal.toDouble / onesCount\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal.toDouble / zerosCount\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal.toDouble / onesCount\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal.toDouble / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal.toDouble / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal.toDouble / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal.toDouble / onesCount\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / onesCount\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toDouble\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.to",
  "        val ones = arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x\
    \ => x == 0l.toLong)\n        val onesCount = ones.count\n        val zerosCount\
    \ = zeros.count\n        if (onesCount == zerosCount) {\n            val onesDecimal\
    \ = ones.map(x => x.toString.toDouble).sum\n            val zerosDecimal = zeros.map(x\
    \ => x.toString.toDouble).sum\n            val onesDecimalInt = onesDecimal.toInt\n\
    \            val zerosDecimalInt = zerosDecimal.toInt\n            val onesDecimalInt\
    \ = onesDecimalInt.toLong\n            val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \            val onesDecimalInt = onesDecimalInt.toLong\n            val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n            val onesDecimalInt = onesDecimalInt.toLong\n\
    \            val zerosDecimalInt = zerosDecimalInt.toLong\n            val onesDecimalInt\
    \ = onesDecimalInt.toLong\n            val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \            val onesDecimalInt = onesDecimalInt.toLong\n            val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n            val onesDecimalInt = onesDecimalInt.toLong\n\
    \            val zerosDecimalInt = zerosDecimalInt.toLong\n            val onesDecimalInt\
    \ = onesDecimalInt.toLong\n            val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \            val onesDecimalInt = onesDecimalInt.toLong\n            val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n            val onesDecimalInt = onesDecimalInt.toLong\n\
    \            val zerosDecimalInt = zerosDecimalInt.toLong\n            val onesDecimalInt\
    \ = onesDecimalInt.toLong\n            val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \            val onesDecimalInt = onesDecimalInt.toLong\n            val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n            val onesDecimalInt = onesDecimalInt.toLong\n\
    \            val zerosDecimalInt = zerosDecimalInt.toLong\n            val onesDecimalInt\
    \ = onesDecimalInt.toLong\n            val zerosDecimalInt = zerosDecimalInt.toLong\n\
    \            val onesDecimalInt = onesDecimalInt.toLong\n            val zerosDecimalInt\
    \ = zerosDecimalInt.toLong\n            val onesDecimal", "        val ones =\
    \ arr.filter(x => x == 1l.toLong).length\n        val zeros = arr.filter(x =>\
    \ x == 0l.toLong).length\n        val maxOnes = arr.filter(x => x == 1l.toLong).max\n\
    \        val maxZeros = arr.filter(x => x == 0l.toLong).max\n        val maxOnesDecimal\
    \ = maxOnes.toString.toInt\n        val maxZerosDecimal = maxZeros.toString.toInt\n\
    \        val maxOnesDecimalDecimal = maxOnesDecimal.toString.toInt\n        val\
    \ maxZerosDecimalDecimal = maxZerosDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimal.toString.toInt\n        val maxZerosDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimal.toString.toInt\n        val maxZerosDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimal.toString.toInt\n        val maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimal.toString.toInt\n        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimal.toString.toInt\n        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n       \
    \ val maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toString.toInt\n\
    \        val maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimal", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n \
    \       val onesDecSorted = onesDec.take(ones)\n        val zerosDecSorted = zerosDec.take(zeros)\n\
    \        val onesDecSortedSorted: Array[Long] = onesDecSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSorted: Array[Long] = zerosDecSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSorted: Array[Long] = onesDecSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSorted: Array[Long] = zerosDecSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSorted: Array[Long] = onesDecSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSorted: Array[Long] = zerosDecSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSortedSorted: Array[Long] = onesDecSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSortedSorted: Array[Long] = zerosDecSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSortedSortedSorted: Array[Long] = onesDecSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSortedSortedSorted: Array[Long] = zerosDecSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSortedSortedSortedSorted: Array[Long] =\
    \ onesDecSortedSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n     \
    \   val zerosDecSortedSortedSortedSortedSortedSortedSorted: Array[Long] = zerosDecSortedSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val onesDecSortedSortedSortedSortedSortedSortedSorted: Array[Long] =\
    \ onesDecSortedSortedSortedSortedSortedSortedSorted.sortBy(_.toString.toInt)\n\
    \        val zerosDecSortedSortedSortedSortedSortedSortedSorted: Array[Long] =\
    \ zerosDecSorted", "        val ones = arr.filter(_ == 1l)\n        val zeros\
    \ = arr.filter(_ == 0l)\n        val onesCount = ones.count(_ == 1l)\n       \
    \ val zerosCount = zeros.count(_ == 0l)\n        val onesDecimal = onesCount.toDouble\
    \ / ones.size\n        val zerosDecimal = zerosCount.toDouble / zeros.size\n \
    \       val onesDecimalInt = onesDecimal.toInt\n        val zerosDecimalInt =\
    \ zerosDecimal.toInt\n        val onesDecimalDecimal = onesDecimalInt * Math.pow(10,\
    \ zerosDecimalInt)\n        val zerosDecimalDecimal = zerosDecimalInt * Math.pow(10,\
    \ zerosDecimalInt)\n        val onesDecimalDecimalInt = onesDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalInt = zerosDecimalDecimal.toInt\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimalInt * Math.pow(10, zerosDecimalDecimalInt)\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimalInt * Math.pow(10, zerosDecimalDecimalInt)\n\
    \        val onesDecimalDecimalDecimalInt = onesDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalInt = zerosDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalInt *\
    \ Math.pow(10, zerosDecimalDecimalDecimalInt)\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalInt * Math.pow(10, zerosDecimalDecimalDecimalInt)\n\
    \        val onesDecimalDecimalDecimalDecimalInt = onesDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalInt = zerosDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalInt\
    \ * Math.pow(10, zerosDecimalDecimalDecimalInt)\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalInt * Math.pow(10, zerosDecimalDecimalDecimalDecimalInt)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalInt = onesDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalInt = zerosDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalInt\
    \ * Math.pow(10, zerosDecimalDecimalDecimalDecimalDecimalInt)\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalInt * Math.pow(10, zerosDecimalDecimalDecimalDecimalInt)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalInt = onesDecimalDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimal", "        val ones = arr.filter(x =>\
    \ x == 1).toList\n        val zeros = arr.filter(x => x == 0).toList\n       \
    \ val onesCount = ones.size\n        val zerosCount = zeros.size\n        val\
    \ onesDecimal = onesCount / 2\n        val zerosDecimal = zerosCount / 2\n   \
    \     val onesDecimalDecimal = onesDecimal / 2\n        val zerosDecimalDecimal\
    \ = zerosDecimal / 2\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / 2\n    \
    \    val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 2\n  \
    \      val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal / 2\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 2\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 2\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt).reverse\n\
    \        val zerosDec = arr.map(_.toString.toInt).sortBy(_.toString.toInt)\n \
    \       val onesDec = onesDec.takeWhile(_ < ones).reverse\n        val zerosDec\
    \ = zerosDec.takeWhile(_ < zeros).reverse\n        val onesDec = onesDec.takeWhile(_\
    \ < ones).reverse\n        val zerosDec = zerosDec.takeWhile(_ < zeros).reverse\n\
    \        val onesDec = onesDec.takeWhile(_ < ones).reverse\n        val zerosDec\
    \ = zerosDec.takeWhile(_ < zeros).reverse\n        val onesDec = onesDec.takeWhile(_\
    \ < ones).reverse\n        val zerosDec = zerosDec.takeWhile(_ < zeros).reverse\n\
    \        val onesDec = onesDec.takeWhile(_ < ones).reverse\n        val zerosDec\
    \ = zerosDec.takeWhile(_ < zeros).reverse\n        val onesDec = onesDec.takeWhile(_\
    \ < ones).reverse\n        val zerosDec = zerosDec.takeWhile(_ < zeros).reverse\n\
    \        val onesDec = onesDec.takeWhile(_ < ones).reverse\n        val zerosDec\
    \ = zerosDec.takeWhile(_ < zeros).reverse\n        val onesDec = onesDec.takeWhile(_\
    \ < ones).reverse\n        val zerosDec = zerosDec.takeWhile(_ < zeros).reverse\n\
    \        val onesDec = onesDec.takeWhile(_ < ones).reverse\n        val zerosDec\
    \ = zerosDec.takeWhile(_ < zeros).reverse\n        val onesDec = onesDec.takeWhile(_\
    \ < ones).reverse\n        val zerosDec = zerosDec.takeWhile(_ < zeros).reverse\n\
    \        val onesDec = onesDec.takeWhile(_ < ones).reverse\n        val zerosDec\
    \ = zerosDec.takeWhile(_ < zeros).reverse\n        val onesDec = onesDec.takeWhile(_\
    \ < ones).reverse\n        val zerosDec = zerosDec.takeWhile(_ < zeros).reverse\n\
    \        val onesDec = onesDec.takeWhile(_ < ones).reverse\n        val zerosDec\
    \ = zerosDec.takeWhile(_ < zeros).reverse\n        val ones", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros\
    \ = ones + zeros\n        val onesZeros_sorted = arr.sortBy(x => (onesZeros -\
    \ x))\n        val onesZeros_sorted_reversed = onesZeros_sorted.reverse\n    \
    \    val onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed =\
    \ onesZeros_sorted_reversed_sorted.reverse\n        val onesZeros_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros - x))\n \
    \       val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x => (onesZeros\
    \ - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(x\
    \ => (onesZeros - x))\n        val onesZeros_sorted_", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_\
    \ == 1)\n        val zerosCount = arr.count(_ == 0)\n        val onesDecimal =\
    \ onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.filter(_ == 1l)\n        val zeros = arr.filter(_\
    \ == 0l)\n        val onesCount = ones.count\n        val zerosCount = zeros.count\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n", "        val ones = arr.count(_ == 1)\n        val zeros =\
    \ arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount\
    \ = arr.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n    \
    \    val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ", "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros =\
    \ arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x => x.toLong).sum\n\
    \        val zerosCount = zeros.map(x => x.toLong).sum\n        val onesDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toInt).sum\n        val zerosDecimal =\
    \ zeros.map(x => x.toLong).map(x => x.toInt).sum\n        val onesDecimalDecimal\
    \ = ones.map(x => x.toLong).map(x => x.toInt).map(x => x.toInt).sum\n        val\
    \ zerosDecimalDecimal = zeros.map(x => x.toLong).map(x => x.toInt).map(x => x.toInt).sum\n\
    \        val onesDecimalDecimalDecimal = ones.map(x => x.toLong).map(x => x.toInt).map(x\
    \ => x.toInt).map(x => x.toInt).sum\n        val zerosDecimalDecimalDecimal =\
    \ zeros.map(x => x.toLong).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimal = ones.map(x => x.toLong).map(x\
    \ => x.toInt).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).sum\n    \
    \    val zerosDecimalDecimalDecimalDecimal = zeros.map(x => x.toLong).map(x =>\
    \ x.toInt).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).sum\n       \
    \ val onesDecimalDecimalDecimalDecimalDecimal = ones.map(x => x.toLong).map(x\
    \ => x.toInt).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(x => x.toLong).map(x\
    \ => x.toInt).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(x => x.toLong).map(x\
    \ => x.toInt).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).map(x => x.toInt).map(x\
    \ => x.toInt).sum\n        val zeros", "        val ones = arr.filter(_ == 1).toList\n\
    \        val zeros = arr.filter(_ == 0).toList\n        val onesCount = ones.map(_.toString.toInt).sum\n\
    \        val zerosCount = zeros.map(_.toString.toInt).sum\n        val onesDecimal\
    \ = ones.map(_.toString.toInt).map(_.toString.toInt).sum\n        val zerosDecimal\
    \ = zeros.map(_.toString.toInt).map(_.toString.toInt).sum\n        val onesDecimalDecimal\
    \ = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = ones.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(", "  \
    \      val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesArr = arr.filter(_ == 1).sortBy(_.toString.toInt)\n \
    \       val zerosArr = arr.filter(_ == 0).sortBy(_.toString.toInt)\n        val\
    \ onesCount = onesArr.length\n        val zerosCount = zerosArr.length\n     \
    \   val onesSum = onesArr.foldLeft(0l) { (sum, elem) => sum + elem.toLong }\n\
    \        val zerosSum = zerosArr.foldLeft(0l) { (sum, elem) => sum + elem.toLong\
    \ }\n        val onesMax = onesSum / onesCount\n        val zerosMax = zerosSum\
    \ / zerosCount\n        val onesMin = onesSum / onesCount * -1\n        val zerosMin\
    \ = zerosSum / zerosCount * -1\n        val onesAvg = onesSum / onesCount\n  \
    \      val zerosAvg = zerosSum / zerosCount\n        val onesDev = onesSum / onesCount\
    \ * onesCount - onesSum * onesAvg\n        val zerosDev = zerosSum / zerosCount\
    \ * zerosCount - zerosSum * zerosAvg\n        val onesDeviation = onesDev / onesCount\
    \ * onesCount * onesCount / onesSum\n        val zerosDeviation = zerosDev / zerosCount\
    \ * zerosCount * zerosCount / zerosSum\n        val onesVariance = onesDeviation\
    \ / onesCount * onesCount * onesCount / onesSum\n        val zerosVariance = zerosDeviation\
    \ / zerosCount * zerosCount * zerosCount / zerosSum\n        val onesStdDev =\
    \ onesVariance / onesCount\n        val zerosStdDev = zerosVariance / zerosCount\n\
    \        val onesStdDeviation = onesStdDev / onesCount * onesCount * onesCount\
    \ / onesSum\n        val zerosStdDeviation = zerosStdDev / zerosCount * zerosCount\
    \ * zerosCount / zerosSum\n        val onesVarianceDeviation = onesStdDeviation\
    \ / onesCount * onesCount * onesCount / onesSum\n        val zerosVarianceDeviation\
    \ = zerosStdDeviation / zerosCount * zerosCount * zerosCount / zerosSum\n    \
    \    val onesStdDevDeviation = onesVarianceDevi", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesArr = arr.filter(_\
    \ == 1)\n        val zerosArr = arr.filter(_ == 0)\n        val onesCount = onesArr.length\n\
    \        val zerosCount = zerosArr.length\n        val onesSum = onesArr.sum\n\
    \        val zerosSum = zerosArr.sum\n        val onesMax = onesSum / onesCount\n\
    \        val zerosMax = zerosSum / zerosCount\n        val onesMin = onesSum /\
    \ onesCount\n        val zerosMin = zerosSum / zerosCount\n        val onesAvg\
    \ = onesSum / onesCount\n        val zerosAvg = zerosSum / zerosCount\n      \
    \  val onesDev = onesSum / onesCount\n        val zerosDev = zerosSum / zerosCount\n\
    \        val onesStd = onesDev / onesCount\n        val zerosStd = zerosDev /\
    \ zerosCount\n        val onesSumSqr = onesArr.reduce((x, y) => x + y)\n     \
    \   val zerosSumSqr = zerosArr.reduce((x, y) => x + y)\n        val onesAvgSqr\
    \ = onesSumSqr / (onesCount * 1.0)\n        val zerosAvgSqr = zerosSumSqr / (zerosCount\
    \ * 1.0)\n        val onesDev = onesSumSqr / (onesCount * 1.0)\n        val zerosDev\
    \ = zerosSumSqr / (zerosCount * 1.0)\n        val onesStd = onesDev / onesCount\n\
    \        val zerosStd = zerosDev / zerosCount\n        val onesSumSqr = onesArr.reduce((x,\
    \ y) => x + y)\n        val zerosSumSqr = zerosArr.reduce((x, y) => x + y)\n \
    \       val onesAvgSqr = onesSumSqr / (onesCount * 1.0)\n        val zerosAvgSqr\
    \ = zerosSumSqr / (zerosCount * 1.0)\n        val onesDev = onesSumSqr / (onesCount\
    \ * 1.0)\n        val zerosDev = zerosSumSqr / (zerosCount * 1.0)\n        val\
    \ onesStd = onesDev / onesCount\n        val zerosStd = zerosDev / zerosCount\n\
    \        val onesSumSqr = onesArr.reduce((x, y) => x + y)\n        val zerosSumSqr\
    \ = zerosArr.reduce((x, y) => x + y)\n        val onesAvgSqr = onesSumSqr / (one",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal", "       \
    \ val ones = arr.filter(x => x.toInt == 1)\n        val zeros = arr.filter(x =>\
    \ x.toInt == 0)\n        val onesCount = ones.map(x => x.toInt).sum\n        val\
    \ zerosCount = zeros.map(x => x.toInt).sum\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / zerosDecimal\n        val zerosDecimalDecimal\
    \ = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(x\
    \ => x == 1l.toLong)\n        val zeros = arr.filter(x => x == 0l.toLong)\n  \
    \      val onesCount = ones.map(x => 1l.toLong).sum\n        val zerosCount =\
    \ zeros.map(x => 0l.toLong).sum\n        val onesDecimal = ones.map(x => x.toLong).sum\
    \ / onesCount\n        val zerosDecimal = zeros.map(x => x.toLong).sum / zerosCount\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x\
    \ => x == 0l.toLong)\n        val onesCount = ones.count(x => x == 1l.toLong)\n\
    \        val zerosCount = zeros.count(x => x == 0l.toLong)\n        val onesDecimal\
    \ = onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.filter(x => x == 1l.toLong)\n        val zeros = arr.filter(x\
    \ => x == 0l.toLong)\n        val onesCount = ones.count\n        val zerosCount\
    \ = zeros.count\n        val onesDecimal = onesCount / arr.length\n        val\
    \ zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal\
    \ / zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal / zerosDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / onesDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ onesDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  '        arr.sortWith(compare)', "        val ones = arr.count(_ == 1)\n       \
    \ val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n \
    \       val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount\
    \ / arr.size\n        val zerosDecimal = zerosCount / arr.size\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecim",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val onesArr = arr.filter(_ % 2 == 0).sortBy(_ % 2).reverse\n\
    \        val zerosArr = arr.filter(_ % 2 == 1).sortBy(_ % 2).reverse\n       \
    \ val onesArr2 = onesArr.sortBy(_ % 10).reverse\n        val zerosArr2 = zerosArr.sortBy(_\
    \ % 10).reverse\n        val onesArr3 = onesArr2.sortBy(_ % 100).reverse\n   \
    \     val zerosArr3 = zerosArr2.sortBy(_ % 100).reverse\n        val onesArr4\
    \ = onesArr3.sortBy(_ % 1000).reverse\n        val zerosArr4 = zerosArr3.sortBy(_\
    \ % 1000).reverse\n        val onesArr5 = onesArr4.sortBy(_ % 10000).reverse\n\
    \        val zerosArr5 = zerosArr4.sortBy(_ % 10000).reverse\n        val onesArr6\
    \ = onesArr5.sortBy(_ % 100000).reverse\n        val zerosArr6 = zerosArr5.sortBy(_\
    \ % 100000).reverse\n        val onesArr7 = onesArr6.sortBy(_ % 1000000).reverse\n\
    \        val zerosArr7 = zerosArr6.sortBy(_ % 1000000).reverse\n        val onesArr8\
    \ = onesArr7.sortBy(_ % 10000000).reverse\n        val zerosArr8 = zerosArr7.sortBy(_\
    \ % 10000000).reverse\n        val onesArr9 = onesArr8.sortBy(_ % 100000000).reverse\n\
    \        val zerosArr9 = zerosArr8.sortBy(_ % 100000000).reverse\n        val\
    \ onesArr10 = onesArr9.sortBy(_ % 1000000000).reverse\n        val zerosArr10\
    \ = zerosArr9.sortBy(_ % 1000000000).reverse\n        val onesArr11 = onesArr10.sortBy(_\
    \ % 10000000000).reverse\n        val zerosArr11 = zerosArr10.sortBy(_ % 10000000000).reverse\n\
    \        val onesArr12 = onesArr11.sortBy(_ % 100000000000).reverse\n        val\
    \ zerosArr12 = zerosArr11.sortBy(_ % 100000000000).reverse\n        val onesArr13\
    \ = onesArr12.sortBy(_ % 1000000000000).reverse\n        val zerosArr13 = zerosArr12.sortBy(_\
    \ % 1000000000000).reverse\n        val onesArr14 = onesArr13.sortBy(_ % 10000000000000).reverse\n\
    \        val zerosArr14 = ", "        val ones = arr.filter(_ % 2 == 0).toList\n\
    \        val zeros = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x\
    \ => x.toString.toInt).sum\n        val zerosCount = zeros.map(x => x.toString.toInt).sum\n\
    \        val onesDecimal = onesCount / 2\n        val zerosDecimal = zerosCount\
    \ / 2\n        val onesDecimalString = onesDecimal.toString\n        val zerosDecimalString\
    \ = zerosDecimal.toString\n        val onesDecimalInt = onesDecimalString.toInt\n\
    \        val zerosDecimalInt = zerosDecimalString.toInt\n        val onesDecimalLong\
    \ = onesDecimalInt.toLong\n        val zerosDecimalLong = zerosDecimalInt.toLong\n\
    \        val onesDecimalFloat = onesDecimalLong.toFloat\n        val zerosDecimalFloat\
    \ = zerosDecimalLong.toFloat\n        val onesDecimalDouble = onesDecimalFloat.toDouble\n\
    \        val zerosDecimalDouble = zerosDecimalFloat.toDouble\n        val onesDecimalDecimal\
    \ = onesDecimalDouble.toBigDecimal\n        val zerosDecimalDecimal = zerosDecimalDouble.toBigDecimal\n\
    \        val onesDecimalDecimalString = onesDecimalDecimal.toString\n        val\
    \ zerosDecimalDecimalString = zerosDecimalDecimal.toString\n        val onesDecimalDecimalInt\
    \ = onesDecimalDecimalString.toInt\n        val zerosDecimalDecimalInt = zerosDecimalDecimalString.toInt\n\
    \        val onesDecimalDecimalLong = onesDecimalDecimalInt.toLong\n        val\
    \ zerosDecimalDecimalLong = zerosDecimalDecimalInt.toLong\n        val onesDecimalDecimalFloat\
    \ = onesDecimalDecimalLong.toFloat\n        val zerosDecimalDecimalFloat = zerosDecimalDecimalLong.toFloat\n\
    \        val onesDecimalDecimalDouble = onesDecimalDecimalFloat.toDouble\n   \
    \     val zerosDecimalDecimalDouble = zerosDecimalDecimalFloat.toDouble\n    \
    \    val onesDecimalDecimalDecimal = onesDecimalDecimalDouble.toBigDecimal\n \
    \       val zerosDecimalDecimalDecimal = zerosDecimalDecimalDouble.toBigDecimal\n\
    \        val onesDecimalDecimalDecimalString = onesDecimalDecimalDecimal.toString\n\
    \        val zerosDecimalDecimalDecimalString = zerosDecimalDecimalDecimal.toString\n\
    \        val onesDecimalDecimalDecimalInt = onesDecimalDecimalDecimalString.toInt\n\
    \        val zerosDecimalDecimalDecimalInt = zerosDecimalDecimalDecimalString.toInt\n\
    \        val onesDecimalDecimalDecimalLong = onesDecimalDecimalDecimalInt.toLong\n\
    \        val zerosDecimalDecimalDecimalLong = zerosDecimalDecimalDecimalInt.toLong\n",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = ones + zeros\n        val onesZeros_sorted = arr.sortWith(x\
    \ => (onesZeros - x.toLong))\n        val onesZeros_sortedWithZeros = onesZeros_sorted.takeWhile(x\
    \ => x == 0)\n        val onesZeros_sortedWithOnes = onesZeros_sorted.dropWhile(x\
    \ => x == 0)\n        val onesZeros_sortedWithOnesAndZeros = onesZeros_sortedWithOnes\
    \ ++ onesZeros_sortedWithZeros\n        onesZeros_sortedWithOnesAndZeros", " \
    \       val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n\
    \        val onesZeros = ones + zeros\n        val onesZerosInv = onesZeros /\
    \ arr.length\n        val onesZerosInv2 = onesZerosInv * onesZerosInv\n      \
    \  val onesZerosInv3 = onesZerosInv2 * onesZerosInv\n        val onesZerosInv4\
    \ = onesZerosInv3 * onesZerosInv\n        val onesZerosInv5 = onesZerosInv4 *\
    \ onesZerosInv\n        val onesZerosInv6 = onesZerosInv5 * onesZerosInv\n   \
    \     val onesZerosInv7 = onesZerosInv6 * onesZerosInv\n        val onesZerosInv8\
    \ = onesZerosInv7 * onesZerosInv\n        val onesZerosInv9 = onesZerosInv8 *\
    \ onesZerosInv\n        val onesZerosInv10 = onesZerosInv9 * onesZerosInv\n  \
    \      val onesZerosInv11 = onesZerosInv10 * onesZerosInv\n        val onesZerosInv12\
    \ = onesZerosInv11 * onesZerosInv\n        val onesZerosInv13 = onesZerosInv12\
    \ * onesZerosInv\n        val onesZerosInv14 = onesZerosInv13 * onesZerosInv\n\
    \        val onesZerosInv15 = onesZerosInv14 * onesZerosInv\n        val onesZerosInv16\
    \ = onesZerosInv15 * onesZerosInv\n        val onesZerosInv17 = onesZerosInv16\
    \ * onesZerosInv\n        val onesZerosInv18 = onesZerosInv17 * onesZerosInv\n\
    \        val onesZerosInv19 = onesZerosInv18 * onesZerosInv\n        val onesZerosInv20\
    \ = onesZerosInv19 * onesZerosInv\n        val onesZerosInv21 = onesZerosInv20\
    \ * onesZerosInv\n        val onesZerosInv22 = onesZerosInv21 * onesZerosInv\n\
    \        val onesZerosInv23 = onesZerosInv22 * onesZerosInv\n        val onesZerosIn",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe",
  "        val ones = arr.filter(_ == 1l.toLong)\n        val zeros = arr.filter(_\
    \ == 0l.toLong)\n        val onesCount = ones.count()\n        val zerosCount\
    \ = zeros.count()\n        val onesDecimal = onesCount.toDouble / arr.length\n\
    \        val zerosDecimal = zerosCount.toDouble / arr.length\n        val onesDecimalInt\
    \ = onesDecimal.toInt\n        val zerosDecimalInt = zerosDecimal.toInt\n    \
    \    val onesDecimalDecimal = onesDecimalInt * Math.pow(10, onesDecimalInt)\n\
    \        val zerosDecimalDecimal = zerosDecimalInt * Math.pow(10, zerosDecimalInt)\n\
    \        val onesDecimalDecimalInt = onesDecimalDecimal.toInt\n        val zerosDecimalDecimalInt\
    \ = zerosDecimalDecimal.toInt\n        val onesDecimalDecimalDecimal = onesDecimalDecimalInt\
    \ * Math.pow(10, onesDecimalDecimalInt)\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimalInt * Math.pow(10, zerosDecimalDecimalInt)\n        val\
    \ onesDecimalDecimalDecimalInt = onesDecimalDecimalDecimal.toInt\n        val\
    \ zerosDecimalDecimalDecimalInt = zerosDecimalDecimalDecimal.toInt\n        val\
    \ onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalInt * Math.pow(10,\
    \ onesDecimalDecimalDecimalInt)\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalInt * Math.pow(10, zerosDecimalDecimalDecimalInt)\n\
    \        val onesDecimalDecimalDecimalDecimalInt = onesDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalInt = zerosDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalInt\
    \ * Math.pow(10, onesDecimalDecimalDecimalInt)\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalInt * Math.pow(10, zerosDecimalDecimalDecimalDecimalInt)\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalInt = onesDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalInt = zerosDecimalDecimalDecimalDecimalDecimal.toInt\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalInt\
    \ * Math.pow(10, onesDecimalDecimalDecimalDecimalInt)\n        val zerosDecimalDecimalDecimalDecimalDecimalInt\
    \ = zerosDecimalDecimalDecimalDecimalDecimal.toInt\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalInt * Math.pow(10, onesDecimalDecimalDecimalDecimalInt)\n\
    \        val zeros", "        val ones = arr.filter(x => x == 1).toList\n    \
    \    val zeros = arr.filter(x => x == 0).toList\n        val onesCount = ones.map(x\
    \ => ones.count(_ == x)).max\n        val zerosCount = zeros.map(x => zeros.count(_\
    \ == x)).max\n        val onesDecimal = ones.map(x => ones.count(_ == x)).sum\
    \ / onesCount.toDouble\n        val zerosDecimal = zeros.map(x => zeros.count(_\
    \ == x)).sum / zerosCount.toDouble\n        val onesDecimalDecimal = onesDecimal\
    \ + zerosDecimal\n        val zerosDecimalDecimal = zerosDecimal + onesDecimal\n\
    \        val onesDecimalDecimalDecimal = onesDecimalDecimal.toLong\n        val\
    \ zerosDecimalDecimalDecimal = zerosDecimalDecimal.toLong\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal.toLong\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal.toLong\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal.toLong\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal.toLong\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal.toLong\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesZeros = ones + zeros\n        val onesZeroArray = arr.map(x =>\
    \ (x, onesZeros)).toArray\n        val onesZeroArraySorted = onesZeroArray.sortWith((x,\
    \ y) => x._2 < y._2)\n        val onesZeroArraySortedSortedWithZeros = onesZeroArraySorted.sortWith((x,\
    \ y) => x._1 < y._1)\n        val onesZeroArraySortedSortedWithOnes = onesZeroArraySortedSortedWithZeros.sortWith((x,\
    \ y) => x._2 < y._2)\n        val onesZeroArraySortedSortedWithOnesAndZeros =\
    \ onesZeroArraySortedSortedWithOnes.sortWith((x, y) => x._1 < y._1)\n        val\
    \ onesZeroArraySortedSortedWithOnesAndOnes = onesZeroArraySortedSortedWithOnesAndZeros.sortWith((x,\
    \ y) => x._2 < y._2)\n        val onesZeroArraySortedSortedWithOnesAndOnesAndZeros\
    \ = onesZeroArraySortedSortedWithOnesAndOnes.sortWith((x, y) => x._1 < y._1)\n\
    \        val onesZeroArraySortedSortedWithOnesAndOnesAndOnes = onesZeroArraySortedSortedWithOnesAndOnesAndZeros.sortWith((x,\
    \ y) => x._2 < y._2)\n        val onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndZeros\
    \ = onesZeroArraySortedSortedWithOnesAndOnesAndOnes.sortWith((x, y) => x._1 <\
    \ y._1)\n        val onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndOnes =\
    \ onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndZeros.sortWith((x, y) => x._2\
    \ < y._2)\n        val onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndOnesAndZeros\
    \ = onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndOnes.sortWith((x, y) =>\
    \ x._1 < y._1)\n        val onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndOnesAndOnes\
    \ = onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndOnesAndZeros.sortWith((x,\
    \ y) => x._2 < y._2)\n        val onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = onesZeroArraySortedSortedWithOnesAndOnesAndOnesAndOnesAndOnes.sortWith((x,\
    \ y) => ", "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros\
    \ = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x => x.toString.toInt).sum\n\
    \        val zerosCount = zeros.map(x => x.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / 2\n        val zerosDecimal = zerosCount / 2\n        val onesDecimalString\
    \ = onesDecimal.toString\n        val zerosDecimalString = zerosDecimal.toString\n\
    \        val onesDecimalInt = onesDecimalString.toInt\n        val zerosDecimalInt\
    \ = zerosDecimalString.toInt\n        val onesDecimalLong = onesDecimalInt.toLong\n\
    \        val zerosDecimalLong = zerosDecimalInt.toLong\n        val onesDecimalLongString\
    \ = onesDecimalLong.toString\n        val zerosDecimalLongString = zerosDecimalLong.toString\n\
    \        val onesDecimalLongInt = onesDecimalLongString.toInt\n        val zerosDecimalLongInt\
    \ = zerosDecimalLongString.toInt\n        val onesDecimalLongLong = onesDecimalLongInt.toLong\n\
    \        val zerosDecimalLongLong = zerosDecimalLongInt.toLong\n        val onesDecimalLongLongString\
    \ = onesDecimalLongLong.toString\n        val zerosDecimalLongLongString = zerosDecimalLongLong.toString\n\
    \        val onesDecimalLongLongInt = onesDecimalLongLongString.toInt\n      \
    \  val zerosDecimalLongLongInt = zerosDecimalLongLongString.toInt\n        val\
    \ onesDecimalLongLongLong = onesDecimalLongLongInt.toLong\n        val zerosDecimalLongLongLong\
    \ = zerosDecimalLongLongInt.toLong\n        val onesDecimalLongLongLongString\
    \ = onesDecimalLongLongLong.toString\n        val zerosDecimalLongLongLongString\
    \ = zerosDecimalLongLongLong.toString\n        val onesDecimalLongLongLongInt\
    \ = onesDecimalLongLongLongString.toInt\n        val zerosDecimalLongLongLongInt\
    \ = zerosDecimalLongLongLongString.toInt\n        val onesDecimalLongLongLongLong\
    \ = onesDecimalLongLongLongInt.toLong\n        val zerosDecimalLongLongLongLong\
    \ = zerosDecimalLongLongLongInt.toLong\n        val onesDecimalLongLongLongLongString\
    \ = onesDecimalLongLongLongLong.toString\n        val zerosDecimalLongLongLongLongString\
    \ = zerosDecimalLongLongLongLong.toString\n        val onesDecimalLongLongLongLongInt\
    \ = onesDecimalLongLongLongLongString.toInt\n        val zerosDecimal", '        arr.sortWith(compare)',
  "        val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_\
    \ == 0).length\n        val onesZeros = ones + zeros\n        val onesZero = onesZeros\
    \ / 2\n        val onesZeroMinusOne = onesZero - 1\n        val onesZeroMinusOneMinusOne\
    \ = onesZeroMinusOne - 1\n        val onesZeroMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n   \
    \     val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_\
    \ == 0).toList\n        val onesCount = ones.count\n        val zerosCount = zeros.count\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros", "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros\
    \ = arr.filter(_ % 2 == 1).length\n        val decimals = arr.filter(_ % 10 ==\
    \ 0).length\n        val decimalsDecimals = arr.filter(_ % 10 == 1).length\n \
    \       val decimalsDecimalsDecimals = arr.filter(_ % 10 == 2).length\n      \
    \  val decimalsDecimalsDecimalsDecimals = arr.filter(_ % 10 == 3).length\n   \
    \     val decimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_ % 10 == 4).length\n\
    \        val decimalsDecimalsDecimalsDecimalsDecimalsDecimals = arr.filter(_ %\
    \ 10 == 5).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 6).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 7).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 8).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 9).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 10).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 11).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 12).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 13).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 14).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimals\
    \ = arr.filter(_ % 10 == 15).length\n        val decimalsDecimalsDecimalsDecimalsDecimalsDecimalsDecimal",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / ones\n        val zerosDecimal\
    \ = zerosCount / zeros\n        val onesDecimalDecimal = onesDecimal / onesDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimal", "        val ones = arr.count(_\
    \ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros = ones +\
    \ zeros\n        val onesZero = onesZeros / (onesZeros + zeros)\n        val onesZeros\
    \ = onesZeros * (onesZeros + zeros) / onesZero\n        val onesZeros = onesZeros\
    \ * (onesZeros + zeros) / onesZero\n        val onesZeros = onesZeros * (onesZeros\
    \ + zeros) / onesZero\n        val onesZeros = onesZeros * (onesZeros + zeros)\
    \ / onesZero\n        val onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n\
    \        val onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n        val\
    \ onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n        val onesZeros\
    \ = onesZeros * (onesZeros + zeros) / onesZero\n        val onesZeros = onesZeros\
    \ * (onesZeros + zeros) / onesZero\n        val onesZeros = onesZeros * (onesZeros\
    \ + zeros) / onesZero\n        val onesZeros = onesZeros * (onesZeros + zeros)\
    \ / onesZero\n        val onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n\
    \        val onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n        val\
    \ onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n        val onesZeros\
    \ = onesZeros * (onesZeros + zeros) / onesZero\n        val onesZeros = onesZeros\
    \ * (onesZeros + zeros) / onesZero\n        val onesZeros = onesZeros * (onesZeros\
    \ + zeros) / onesZero\n        val onesZeros = onesZeros * (onesZeros + zeros)\
    \ / onesZero\n        val onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n\
    \        val onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n        val\
    \ onesZeros = onesZeros * (onesZeros + zeros) / onesZero\n        val onesZeros\
    \ = onesZeros * (onesZeros + zeros) / onesZero\n        val ", "        val ones\
    \ = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val onesZeros\
    \ = ones + zeros\n        val onesZerosList = arr.map(x => (x, onesZeros)).toList\n\
    \        val onesZerosListSorted = onesZerosList.toList.sortBy(_._1).reverse\n\
    \        val onesZerosListSortedWithOnes = onesZerosListSorted.filter(_._2 ==\
    \ ones)\n        val onesZerosListSortedWithZeros = onesZerosListSorted.filter(_._2\
    \ == zeros)\n        val onesZerosListSortedWithOnesAndZeros = onesZerosListSorted.filter(_._2\
    \ == onesZeros)\n        val onesZerosListSortedWithOnesAndZerosSorted = onesZerosListSortedWithOnesAndZeros.sortBy(_._1).reverse\n\
    \        val onesZerosListSortedWithOnesAndZerosSortedWithOnes = onesZerosListSortedWithOnesAndZerosSorted.filter(_._2\
    \ == ones)\n        val onesZerosListSortedWithOnesAndZerosSortedWithZeros = onesZerosListSortedWithOnesAndZerosSorted.filter(_._2\
    \ == zeros)\n        val onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZeros\
    \ = onesZerosListSortedWithOnesAndZerosSorted.filter(_._2 == onesZeros)\n    \
    \    val onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZerosSorted = onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZeros.sortBy(_._1).reverse\n\
    \        val onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithOnes\
    \ = onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZerosSorted.filter(_._2\
    \ == ones)\n        val onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithZeros\
    \ = onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZerosSorted.filter(_._2\
    \ == zeros)\n        val onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZerosSortedWithOnesAndZeros\
    \ = onesZerosListSortedWithOnesAndZerosSortedWithOnesAndZerosSorted.filter(_._2\
    \ == onesZeros)\n        val onesZerosListSortedWithOnesAndZerosSortedWith", " \
    \       val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n\
    \        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimal"]
stop_tokens:
- "\n    }\n"
