name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong,\
  \ -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong,\
  \ -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_\
    \ == 0).length\n        val onesZeros = ones + zeros\n        val onesZero = onesZeros\
    \ / 2\n        val onesZeroMinusOne = onesZero - 1\n        val onesZeroMinusOneMinusOne\
    \ = onesZeroMinusOne - 1\n        val onesZeroMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOne = onesZeroMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ onesZeroMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n   \
    \     val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val onesZeroMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = ones", "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros\
    \ = arr.filter(_ % 2 == 1).toList\n        val onesZeros = ones + zeros\n    \
    \    val onesZeros_sorted = onesZeros.sortBy(x => x.toString.toInt)\n        val\
    \ onesZeros_sorted_sorted = onesZeros_sorted.sortBy(x => x.toString.toInt)\n \
    \       val onesZeros_sorted_sorted_sorted = onesZeros_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted.sortBy(x => x.toString.toInt)\n    \
    \    val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x => x.toString.toInt)\n\
    \        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        val onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = onesZeros_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted.sortBy(x\
    \ => x.toString.toInt)\n        ", "        val ones = arr.filter(_ == 1).size\n\
    \        val zeros = arr.filter(_ == 0).size\n        val onesZeros = ones + zeros\n\
    \        val onesZerosList = onesZeros.toList\n        val onesZerosListSorted\
    \ = onesZerosList.toList.sortBy(_ / onesZerosListSorted.last)\n        val onesZerosListSortedReversed\
    \ = onesZerosListSorted.reverse\n        val onesZerosListSortedReversedSorted\
    \ = onesZerosListSortedReversed.sortBy(_ / onesZerosListSortedReversed.last)\n\
    \        val onesZerosListSortedReversedSortedList = onesZerosListSortedReversedSorted.toList\n\
    \        val onesZerosListSortedReversedSortedListSorted = onesZerosListSortedReversedSortedList.sortBy(_\
    \ / onesZerosListSortedReversedSortedList.last)\n        val onesZerosListSortedReversedSortedListSortedList\
    \ = onesZerosListSortedReversedSortedListSorted.toList\n        val onesZerosListSortedReversedSortedListSortedListSorted\
    \ = onesZerosListSortedReversedSortedListSortedList.toList.sortBy(_ / onesZerosListSortedReversedSortedListSortedList.last)\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedList = onesZerosListSortedReversedSortedListSortedListSortedList.toList\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedListSorted =\
    \ onesZerosListSortedReversedSortedListSortedListSortedListSorted.toList.sortBy(_\
    \ / onesZerosListSortedReversedSortedListSortedListSortedList.last)\n        val\
    \ onesZerosListSortedReversedSortedListSortedListSortedListSortedList = onesZerosListSortedReversedSortedListSortedListSortedListSortedListSorted.toList\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedListSortedListSorted\
    \ = onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSorted.toList\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSorted\
    \ = onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSortedListSorted.toList\n\
    \        val onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSortedListSorted\
    \ = onesZerosListSortedReversedSortedListSortedListSortedListSortedListSortedListSortedListSortedListSorted.to",
  "        val ones = arr.filter(_ % 2 == 0).length\n        val zeros = arr.filter(_\
    \ % 2 == 1).length\n        val maxOnes = arr.max\n        val maxZeros = arr.min\n\
    \        val maxOnesDecimal = maxOnes.toString.toInt\n        val maxZerosDecimal\
    \ = maxZeros.toString.toInt\n        val maxDecimal = math.max(maxOnesDecimal,\
    \ maxZerosDecimal)\n        val onesDecimal = ones.toString.toInt\n        val\
    \ zerosDecimal = zeros.toString.toInt\n        val decimal = math.max(onesDecimal,\
    \ zerosDecimal)\n        val decimalDecimal = decimal.toString.toInt\n       \
    \ val decimalDecimalDecimal = math.pow(10, decimalDecimal)\n        val decimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimal)\n        val decimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimal)\n        val decimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimal)\n        val decimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimal)\n        val\
    \ decimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(10,\
    \ decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n  \
    \      val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = math.pow(10,\
    \ decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = math.pow(10, decimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal)\n\
    \        val decimalDecimalDecimalDecimalDecimal", "        val ones = arr.filter(_\
    \ % 2 == 0).toList\n        val zeros = arr.filter(_ % 2 == 1).toList\n      \
    \  val onesCount = ones.map(x => x.toLong).sum\n        val zerosCount = zeros.map(x\
    \ => x.toLong).sum\n        val onesDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).sum\n\
    \        val zerosDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimalDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimal = ones.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimal = zeros.map(x => x.toLong).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).map(_.toString.toDouble).sum\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = ones.map(x => x.to",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / ones\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / ones\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zeros\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ones\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zeros\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimal", "        val ones = arr.count(_ == 1)\n        val zeros\
    \ = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n        val\
    \ zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount / ones\n\
    \        val zerosDecimal = zerosCount / zeros\n        val onesDecimalDecimal\
    \ = onesDecimal / onesDecimal\n        val zerosDecimalDecimal = zerosDecimal\
    \ / zerosDecimal\n        val onesDecimalDecimalDecimal = onesDecimalDecimal /\
    \ onesDecimalDecimal\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimal", "        val ones = arr.filter(_ == 1).length\n    \
    \    val zeros = arr.filter(_ == 0).length\n        val onesZeros = ones + zeros\n\
    \        val onesZeros_sorted = arr.sortBy(_ - onesZeros)\n        val onesZeros_sorted_reversed\
    \ = onesZeros_sorted.reverse\n        val onesZeros_sorted_reversed_sorted = onesZeros_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed = onesZeros_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted = onesZeros_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted.reverse\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_ - onesZeros)\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed.sortBy(_\
    \ - onesZeros)\n        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted.reverse\n\
    \        val onesZeros_sorted_reversed_sorted_reversed_sorted_reversed_", "  \
    \      val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDeci",
  "        val ones = arr.filter(x => x == 1).toList\n        val zeros = arr.filter(x\
    \ => x == 0).toList\n        val onesCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosCount = zeros.map(x => zeros.count(_ == x)).sum\n        val\
    \ onesDecimal = ones.map(x => x.toString.toInt).sum\n        val zerosDecimal\
    \ = zeros.map(x => x.toString.toInt).sum\n        val onesDecimalCount = ones.map(x\
    \ => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_\
    \ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(x => ones.count(_ == x)).sum\n        val zerosDecimalCount = zeros.map(x\
    \ => zeros.count(_ == x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_\
    \ == x)).sum\n        val zerosDecimalCount = zeros.map(x => zeros.count(_ ==\
    \ x)).sum\n        val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n\
    \        val zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n   \
    \     val onesDecimalCount = ones.map(x => ones.count(_ == x)).sum\n        val\
    \ zerosDecimalCount = zeros.map(x => zeros.count(_ == x)).sum\n        val onesDecimalCount\
    \ = ones.map(", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesZeros = arr.count(_ == 1 && _ == 0)\n        val onesOnes\
    \ = arr.count(_ == 1 && _ == 1)\n        val onesZeroOnes = arr.count(_ == 1 &&\
    \ _ == 0 && _ == 1)\n        val onesOnesOnes = arr.count(_ == 1 && _ == 1 &&\
    \ _ == 1)\n        val onesZeroOnesOnes = arr.count(_ == 1 && _ == 0 && _ == 1\
    \ && _ == 1)\n        val onesOnesOnesOnes = arr.count(_ == 1 && _ == 1 && _ ==\
    \ 1 && _ == 1)\n        val onesZeroOnesOnesOnes = arr.count(_ == 1 && _ == 0\
    \ && _ == 1 && _ == 1 && _ == 1)\n        val onesOnesOnesOnesOnes = arr.count(_\
    \ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1)\n        val onesZeroOnesOnesOnesOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 1 && _ == 1 && _ == 1)\n    \
    \    val onesOnesOnesOnesOnesOnes = arr.count(_ == 1 && _ == 1 && _ == 1 && _\
    \ == 1 && _ == 1 && _ == 1)\n        val onesZeroOnesOnesOnesOnesOnes = arr.count(_\
    \ == 1 && _ == 0 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1)\n        val\
    \ onesOnesOnesOnesOnesOnesOnes = arr.count(_ == 1 && _ == 1 && _ == 1 && _ ==\
    \ 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1)\n        val onesZeroOnesOnesOnesOnesOnesOnes\
    \ = arr.count(_ == 1 && _ == 0 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ ==\
    \ 1 && _ == 1 && _ == 1)\n        val onesOnesOnesOnesOnesOnesOnesOnes = arr.count(_\
    \ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 &&\
    \ _ == 1 && _ == 1)\n        val onesZeroOnesOnesOnesOnesOnesOnesOnes = arr.count(_\
    \ == 1 && _ == 0 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 && _ == 1 &&\
    \ _ == 1 && _ == 1 && _ == 1 && _ == 1)\n        val onesOnesOnes", "        val\
    \ ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n        val\
    \ onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_ == 0)\n\
    \        val onesDecimal = onesCount / arr.length\n        val zerosDecimal =\
    \ zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / zerosDecimal\n\
    \        val zerosDecimalDecimal = zerosDecimal / onesDecimal\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / zerosDecimalDecimal\n        val zerosDecimalDecimalDecimal\
    \ = zerosDecimalDecimal / onesDecimalDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / zerosDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal /\
    \ zerosDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimal", "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_\
    \ == 0)\n        val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.size\n        val zerosDecimal\
    \ = zerosCount / arr.size\n        val onesDecimalDecimal = onesDecimal / ones\n\
    \        val zerosDecimalDecimal = zerosDecimal / zeros\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesDecimal\n        val zerosDecimalDecimalDecimal =\
    \ zerosDecimalDecimal / zerosDecimal\n        val onesDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimal / onesDecimalDecimal\n        val zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / zerosDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimal\n        val\
    \ zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n    \
    \    val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n   \
    \     val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\n\
    \        ", "        val ones = arr.filter(_ % 2 == 0).toList\n        val zeros\
    \ = arr.filter(_ % 2 == 1).toList\n        val onesCount = ones.map(x => x.toLong).sum\n\
    \        val zerosCount = zeros.map(x => x.toLong).sum\n        val onesDecimal\
    \ = onesCount / arr.length\n        val zerosDecimal = zerosCount / arr.length\n\
    \        val onesDecimalDecimal = onesDecimal / 10\n        val zerosDecimalDecimal\
    \ = zerosDecimal / 10\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / 10\n  \
    \      val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / 10\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ 10\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / 10\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / 10\n        val onesDecimal", "        val ones = arr.count(_ == 1)\n    \
    \    val zeros = arr.count(_ == 0)\n        val onesCount = arr.count(_ == 1)\n\
    \        val zerosCount = arr.count(_ == 0)\n        val onesDecimal = onesCount\
    \ / arr.length\n        val zerosDecimal = zerosCount / arr.length\n        val\
    \ onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal ",
  "        val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n \
    \       val onesCount = arr.count(_ == 1)\n        val zerosCount = arr.count(_\
    \ == 0)\n        val onesDecimal = onesCount / arr.length\n        val zerosDecimal\
    \ = zerosCount / arr.length\n        val onesDecimalDecimal = onesDecimal / onesCount\n\
    \        val zerosDecimalDecimal = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / ", "        val ones = arr.filter(_ == 1).toList\n        val zeros = arr.filter(_\
    \ == 0).toList\n        val onesCount = ones.count(_ == 1)\n        val zerosCount\
    \ = zeros.count(_ == 0)\n        val onesDecimal = onesCount / arr.length\n  \
    \      val zerosDecimal = zerosCount / arr.length\n        val onesDecimalDecimal\
    \ = onesDecimal / onesCount\n        val zerosDecimalDecimal = zerosDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimal = zerosDecimalDecimal / zerosCount\n \
    \       val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n      \
    \  val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n\
    \        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal", " \
    \       val ones = arr.count(_ == 1)\n        val zeros = arr.count(_ == 0)\n\
    \        val onesArr = arr.filter(_ == 1)\n        val zerosArr = arr.filter(_\
    \ == 0)\n        val onesCount = onesArr.size\n        val zerosCount = zerosArr.size\n\
    \        val onesArr = onesArr.sortBy(x => (onesCount - onesArr.indexOf(x)), Ordering[Long].reverse)\n\
    \        val zerosArr = zerosArr.sortBy(x => (zerosCount - zerosArr.indexOf(x)),\
    \ Ordering[Long].reverse)\n        val onesArr = onesArr.sortBy(x => (onesCount\
    \ - onesArr.indexOf(x)), Ordering[Long].reverse)\n        val zerosArr = zerosArr.sortBy(x\
    \ => (zerosCount - zerosArr.indexOf(x)), Ordering[Long].reverse)\n        onesArr::zerosArr",
  "        val ones = arr.filter(_ == 1).length\n        val zeros = arr.filter(_\
    \ == 0).length\n        val onesZeros = ones + zeros\n        val onesZeroDec\
    \ = onesZeros / 10\n        val zeroDec = zeros / 10\n        val onesZeroDecDec\
    \ = onesZeroDec / 10\n        val zeroDecDec = zeroDec / 10\n        val onesZeroDecDecDec\
    \ = onesZeroDecDec / 10\n        val zeroDecDecDec = zeroDecDec / 10\n       \
    \ val onesZeroDecDecDecDec = onesZeroDecDecDec / 10\n        val zeroDecDecDecDec\
    \ = zeroDecDecDec / 10\n        val onesZeroDecDecDecDecDec = onesZeroDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDec = zeroDecDecDecDec / 10\n        val onesZeroDecDecDecDecDecDec\
    \ = onesZeroDecDecDecDecDec / 10\n        val zeroDecDecDecDecDecDec = zeroDecDecDecDecDec\
    \ / 10\n        val onesZeroDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDec = zeroDecDecDecDecDecDec / 10\n\
    \        val onesZeroDecDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDecDec = zeroDecDecDecDecDecDecDec /\
    \ 10\n        val onesZeroDecDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDecDecDec = zeroDecDecDecDecDecDecDecDec\
    \ / 10\n        val onesZeroDecDecDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDecDecDecDec = zeroDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val onesZeroDecDecDecDecDecDecDecDecDec = onesZeroDecDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val zeroDecDecDecDecDecDecDecDecDecDec = zeroDecDecDecDecDecDecDecDecDec\
    \ / 10\n        val onesZeroDecDecDecDecDecDecDecDecDecDec = onesZeroDec", " \
    \       val ones = arr.filter(_ % 2 == 0).toList\n        val zeros = arr.filter(_\
    \ % 2 == 1).toList\n        val onesCount = ones.map(x => x.toString.toInt).sum\n\
    \        val zerosCount = zeros.map(x => x.toString.toInt).sum\n        val onesDecimal\
    \ = onesCount / ones.size\n        val zerosDecimal = zerosCount / zeros.size\n\
    \        val onesDecimalDecimal = onesDecimal / onesCount\n        val zerosDecimalDecimal\
    \ = zerosDecimal / zerosCount\n        val onesDecimalDecimalDecimal = onesDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimal = zerosDecimalDecimal /\
    \ zerosCount\n        val onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / zerosCount\n        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimal / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n        val\
    \ onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n    \
    \    val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / zerosCount\n\
    \        val onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / onesCount\n        val zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDe"]
stop_tokens:
- "\n    }\n"
