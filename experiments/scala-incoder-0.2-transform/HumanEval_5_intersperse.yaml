name: HumanEval_5_intersperse
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Insert a number 'delimeter' between every two consecutive elements of input\
  \ list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    // (List[Long]())\n\
  \    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l))\n \
  \   // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n   \
  \ def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
  \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
  \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
  \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        val numbers_copy = numbers.toList\n        val numbers_copy\
    \ = numbers_copy.tail\n        numbers_copy match {\n            case Nil => Nil\n\
    \            case head :: tail => {\n                val head_delimeter = delimeter\n\
    \                val tail_delimeter = delimeter\n                val result =\
    \ head :: tail.intersperse(head_delimeter, tail_delimeter)\n                intersperse(result,\
    \ tail_delimeter)\n            }\n        }", "        val result = numbers.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x :: acc.take(acc.size - 1))\n        result.takeWhile(_ < delimeter)\
    \ ::: result.drop(delimeter)", "        val numbers_copy = numbers.toList\n  \
    \      val delimeters = List.fill(numbers_copy.size)(delimeter)\n        numbers_copy\
    \ ++ delimeters", "        val result = numbers.foldLeft(List[Long]())((acc, elem)\
    \ => {\n            acc :+ elem\n            acc :+ delimeter\n        })\n  \
    \      result", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ numbers.foreach(x => result += x)\n        result.takeWhile(_ != delimeter).foreach(x\
    \ => result += delimeter)\n        result.toList", "        val numbers_size =\
    \ numbers.size\n        val delimeter_size = delimeter.toLong\n        val result\
    \ = new Array[Long](numbers_size + delimeter_size)\n        var i = 0\n      \
    \  var j = 0\n        while (i < numbers_size) {\n            result(i) = numbers(i)\n\
    \            i += 1\n        }\n        while (j < delimeter_size) {\n       \
    \     result(i) = delimeter\n            i += 1\n            j += 1\n        }\n\
    \        result", "        val numbers_copy = numbers.toList\n        val result\
    \ = numbers_copy.foldLeft(List[Long]())((acc, number) => {\n            acc match\
    \ {\n                case Nil => List(number)\n                case head :: tail\
    \ => head :: delimeter :: tail\n            }\n        })\n        result", " \
    \       val result = new mutable.ListBuffer[Long]()\n        numbers.foreach{\
    \ number =>\n            result += number\n            result += delimeter\n \
    \       }\n        result.toList", "        val result = numbers.foldLeft(List[Long]())((acc,\
    \ x) => acc :+ delimeter + x)\n        result.dropRight(1)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        numbers.foreach(number => result +=\
    \ number * delimeter)\n        result.toList", "        val numbers_copy = numbers.toList\n\
    \        val result = numbers_copy.foldLeft(List[Long]())((acc, elem) => {\n \
    \           acc :+ elem\n            acc :+ delimeter\n        })\n        result",
  "        val numbers_copy = numbers.toList\n        val delimeter_copy = delimeter\n\
    \        val result = numbers_copy.foldLeft(List[Long]())((acc, elem) => {\n \
    \           val delimeter_copy = elem\n            acc :+ delimeter_copy\n   \
    \     })\n        result", "        val numbersList = numbers.toList\n       \
    \ val result = new mutable.ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < numbersList.size) {\n            val current = numbersList(i)\n       \
    \     val nextNumber = numbersList(i + 1)\n            if (nextNumber == delimeter)\
    \ {\n                result.add(current)\n                i += 1\n           \
    \ } else {\n                result.add(current)\n                result.add(delimeter)\n\
    \                i += 1\n            }\n        }\n        result.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => result += number+delimeter)\n        result.toList", "        val numbers_copy\
    \ = numbers.toList\n        val delimeters = numbers_copy.takeRight(numbers_copy.size\
    \ - 1).map(x => delimeter + x).reverse\n        numbers_copy ++ delimeters", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var i = 0\n     \
    \   while (i < numbers.size) {\n            result.append(numbers(i))\n      \
    \      result.append(delimeter)\n            result.append(numbers(i + 1))\n \
    \           i += 2\n        }\n        result.toList", "        val numbersList\
    \ = numbers.toList\n        val result = numbersList\n        val delimeterList\
    \ = List((delimeter))\n        val delimeterListIterator = delimeterList.iterator\n\
    \        val resultIterator = result.iterator\n        val resultIteratorNext\
    \ = resultIterator.next\n        val resultIteratorNextNext = resultIteratorNext.next\n\
    \        while(numbersListIterator.hasNext && resultIteratorNext.hasNext) {\n\
    \            resultIteratorNextNext = resultIteratorNextNext.next\n          \
    \  resultIterator.next = resultIteratorNextNext\n            resultIteratorNext\
    \ = resultIterator.next\n            resultIteratorNextNext = resultIteratorNext.next\n\
    \        }\n        resultIteratorNextNext = resultIteratorNext.next\n       \
    \ resultIterator.next = resultIteratorNextNext\n        resultIteratorNext = resultIterator.next\n\
    \        resultIteratorNextNext = resultIteratorNext.next\n        result", " \
    \       val result = new mutable.ListBuffer[Long]()\n        numbers.foreach {\
    \ number =>\n            result += number\n            result += delimeter\n \
    \       }\n        result.toList", "        val numbers_copy = numbers.toList\n\
    \        val delimeter_copy = delimeter\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < numbers_copy.size) {\n            if (i\
    \ == numbers_copy.size - 1) {\n                result += numbers_copy(i).asInstanceOf[Long]\n\
    \            } else {\n                result += numbers_copy(i).asInstanceOf[Long]\
    \ + delimeter_copy\n            }\n            i += 1\n        }\n        result.toList",
  "        val numbersList = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n\
    \        var current = 0\n        var last = 0\n        numbersList.foreach(x\
    \ => {\n            current += 1\n            if (current > 1) {\n           \
    \     result += delimeter\n            }\n            result += x\n          \
    \  last = x\n        })\n        result.toList"]
stop_tokens:
- "\n    }\n"
