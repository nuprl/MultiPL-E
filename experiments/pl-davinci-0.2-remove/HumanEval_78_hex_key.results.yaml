language: pl
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ =~ /[2357BD]/g;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $hex{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ if $num =~ /^[0-9]$/;\n    return ord($num) - ord('A') + 10;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        'A' => 0,\n        'B' => 1,\n        'C' => 0,\n\
    \        'D' => 1,\n        'E' => 0,\n        'F' => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        'A' => 10,\n        'B' => 11,\n        'C' => 12,\n        'D' => 13,\n\
    \        'E' => 14,\n        'F' => 15,\n    );\n    return $key{$num};\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $hex{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ if $num =~ /^[0-9]$/;\n    return ord($num) - ord('A') + 10;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return ord($num)\
    \ - ord('0') if $num =~ /[0-9]/;\n    return ord($num) - ord('A') + 10;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n    \
    \    if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ =~ /[0-9]/ ? $num : ord($num) - ord('A') + 10;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    $num =~ tr/A-F/10-15/;\n\
    \    return $num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ if $num =~ /[0-9]/;\n    return ord($num) - 55;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my $hex_key\
    \ = {\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    };\n    return $hex_key->{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my @hex_key\
    \ = (0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n    my %hex_key = map { $hex_key[$_]\
    \ => $_ } 0..$#hex_key;\n    return \\%hex_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my $key = {\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    };\n    return $key->{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ =~ /^[0-9A-F]$/;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ if $num =~ /^[0-9]$/;\n    return ord($num) - ord('A') + 10;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return ord(uc($num))\
    \ - ord('0') if $num =~ /[0-9]/;\n    return ord(uc($num)) - ord('A') + 10;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ if $num =~ /^[0-9]$/;\n    return ord($num) - ord('A') + 10;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my @hex = qw(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F);\n    my %hex = map { $hex[$_] => $_ } 0..$#hex;\n\
    \    return $hex{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my @hex_key\
    \ = (0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F');\n    my %hex_key = map { $hex_key[$_]\
    \ => $_ } 0..$#hex_key;\n    return \\%hex_key;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ =~ /[A-F]/ ? ord($num) - 55 : $num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex = (\n\
    \        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n        4\
    \ => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 => 0,\n\
    \        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n        D\
    \ => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex{$num};\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ =~ /[A-F]/ ? ord($num) - ord('A') + 10 : $num;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ =~ /[2357BD]/g;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ if $num =~ /^[0-9]$/;\n    return ord($num) - ord('A') + 10;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"\
    AB\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(\"1077E\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABED1A33\"),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    2020\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"123456789ABCDEF0\"),6)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return $num\
    \ =~ /[A-F]/ ? ord($num) - 55 : $num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    $num =~ tr/A-F/10-15/;\n\
    \    return $num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4,\n        '5'\
    \ => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9,\n        'A' => 10, 'B' => 11,\
    \ 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    $num =~ tr/A-F/10-15/;\n\
    \    return $num;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    return ord(uc($num))\
    \ - ord('0') if $num =~ /[0-9]/;\n    return ord(uc($num)) - ord('A') + 10;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n        4\
    \ => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 => 0,\n\
    \        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n        D\
    \ => 1,\n        E => 0,\n        F => 0,\n    );\n    return $key{$num};\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n  \
    \      if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        'A' => 0,\n        'B' => 1,\n        'C' => 0,\n\
    \        'D' => 1,\n        'E' => 0,\n        'F' => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %key = (\n\
    \        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n\
    \        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n\
    \        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' => 11,\n\
    \        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F' => 15,\n\
    \    );\n    return $key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        0 => 0,\n        1 => 0,\n        2 => 1,\n        3 => 1,\n  \
    \      4 => 0,\n        5 => 1,\n        6 => 0,\n        7 => 1,\n        8 =>\
    \ 0,\n        9 => 0,\n        A => 1,\n        B => 1,\n        C => 0,\n   \
    \     D => 1,\n        E => 0,\n        F => 0,\n    );\n    return $hex_key{$num};\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hex_key;\n\
    \        if(eq_deeply($candidate->(\"AB\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1077E\"),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    ABED1A33\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"2020\"),2)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123456789ABCDEF0\"\
    ),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    112233445566778899AABBCCDDEEFF00\"),12)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
- exit_code: 1
  program: "# You have been tasked to write a function that receives \n# a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n# digits that are\
    \ primes (prime number, or a prime, is a natural number \n# greater than 1 that\
    \ is not a product of two smaller natural numbers).\n# Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5,\
    \ 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
    \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
    \ uppercase.\n# Examples:\nsub hex_key {\n    my($num) = @_;\n    my %hex_key\
    \ = (\n        '0' => 0,\n        '1' => 1,\n        '2' => 2,\n        '3' =>\
    \ 3,\n        '4' => 4,\n        '5' => 5,\n        '6' => 6,\n        '7' =>\
    \ 7,\n        '8' => 8,\n        '9' => 9,\n        'A' => 10,\n        'B' =>\
    \ 11,\n        'C' => 12,\n        'D' => 13,\n        'E' => 14,\n        'F'\
    \ => 15,\n    );\n    return $hex_key{$num};\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&hex_key;\n        if(eq_deeply($candidate->(\"AB\"\
    ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    1077E\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"ABED1A33\"),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020\"),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    123456789ABCDEF0\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->(\"112233445566778899AABBCCDDEEFF00\"\
    ),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015019
