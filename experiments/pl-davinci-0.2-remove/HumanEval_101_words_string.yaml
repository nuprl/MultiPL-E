name: HumanEval_101_words_string
language: pl
prompt: "# You will be given a string of words separated by commas or spaces. Your\
  \ task is\n# to split the string into words and return an array of the words.\n\
  # For example:\nsub words_string {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_string;\n\
  \        if(eq_deeply($candidate->(\"Hi, my name is John\"),[\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->(\"One, two, three, four, five, six\"\
  ),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hi, my name\"),[\"Hi\", \"my\", \"name\"])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"One,, two, three,\
  \ four, five, six,\"),[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ahmed     , gamal\"),[\"ahmed\", \"gamal\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "  \
    \  my @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words =\
    \ split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words = split /[\\s,]+/,\
    \ $s;\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}",
  "    my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[, ]+/, $s);\n  \
    \  return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n\
    }", "    my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my\
    \ @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    return split(/[\\s,]+/, $s);\n}", " \
    \   my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words = split /[,\
    \ ]+/, $s;\n    return \\@words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my\
    \ @words = split /[\\s,]+/, $s;\n    return \\@words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return \\@words;\n}", "    my @words = split(/[, ]+/, $s);\n\
    \    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    return split(/[\\s,]+/, $s);\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words\
    \ = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    return split(/[\\s,]+/, $s);\n}", " \
    \   my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words\
    \ = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words = split /[\\\
    s,]+/, $s;\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n \
    \   return @words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return \\@words;\n\
    }", "    return split(/[, ]+/, $s);\n}", "    my @words = split /[\\s,]+/, $s;\n\
    \    return \\@words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split /[, ]+/, $s;\n    return \\@words;\n}",
  "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words =\
    \ split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words = split /[\\s,]+/,\
    \ $s;\n    return \\@words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}",
  "    my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    my @words = split(/\\s+|,\\s*/, $s);\n    return\
    \ @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words =\
    \ split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split /[, ]+/, $s;\n   \
    \ return @words;\n}", "    return [split(/[\\s,]+/, $s)];\n}", "    my @words\
    \ = split /[, ]+/, $s;\n    return @words;\n}", "    my @words = split(/[\\s,]+/,\
    \ $s);\n    return @words;\n}", "    my @words = split(/[, ]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words =\
    \ split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split /[\\s,]+/,\
    \ $s;\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ \\@words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @words = split /[\\s,]+/, $s;\n    return \\@words;\n}", "    return split(/[,\
    \ ]+/, $s);\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words =\
    \ split /[, ]+/, $s;\n    return \\@words;\n}", "    my @words = split(/[\\s,]+/,\
    \ $s);\n    return @words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return\
    \ \\@words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}",
  "    my @words = split(/[, ]+/, $s);\n    return @words;\n}", "    my @words = split(/[,\
    \ ]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    return split(/[\\s,]+/, $s);\n}", "    my @words\
    \ = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words = split(/[, ]+/,\
    \ $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ \\@words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    return split(/[, ]+/, $s);\n}", "    my @words = split(/[\\s,]+/, $s);\n  \
    \  return @words;\n}", "    $s =~ s/\\s+/ /g;\n    $s =~ s/^\\s+//;\n    $s =~\
    \ s/\\s+$//;\n    return split(/\\s+/, $s);\n}", "    my @words = split /[\\s,]+/,\
    \ $s;\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words =\
    \ split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/,\
    \ $s);\n    return \\@words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return\
    \ \\@words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words =\
    \ split /[\\s,]+/, $s;\n    return \\@words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[, ]+/, $s);\n  \
    \  return @words;\n}", "    my @words = split(/\\s+|,\\s*/, $s);\n    return \\\
    @words;\n}", "    return [split /[\\s,]+/, $s];\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split(/[, ]+/, $s);\n    return @words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words\
    \ = split /[\\s,]+/, $s;\n    return \\@words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split /[\\s,]+/, $s;\n \
    \   return @words;\n}", "    return [split /[\\s,]+/, $s];\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[, ]+/, $s);\n  \
    \  return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split /[\\s,]+/, $s;\n    return \\@words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split /[\\\
    s,]+/, $s;\n    return @words;\n}", "    my @words = split(/[, ]+/, $s);\n   \
    \ return @words;\n}", "    my @words = split(/[, ]+/, $s);\n    return @words;\n\
    }", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    return split(/[\\s,]+/,\
    \ $s);\n}", "    my @words = split(/[, ]+/, $s);\n    return @words;\n}", "  \
    \  my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words =\
    \ split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/,\
    \ $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split(/[, ]+/, $s);\n    return @words;\n}", " \
    \   my @words = split(/[, ]+/, $s);\n    return @words;\n}", "    my @words =\
    \ split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words = split(/\\\
    s+|,\\s*/, $s);\n    return \\@words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return \\@words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return \\\
    @words;\n}", "    my @words = split(/[, ]+/, $s);\n    return @words;\n}", " \
    \   my @words = split /[\\s,]+/, $s;\n    return \\@words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split /[, ]+/, $s;\n   \
    \ return \\@words;\n}", "    my @words = split(/[, ]+/, $s);\n    return \\@words;\n\
    }", "    my @words = split /[, ]+/, $s;\n    return \\@words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words = split /[\\\
    s,]+/, $s;\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n \
    \   return \\@words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n\
    }", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words\
    \ = split /[, ]+/, $s;\n    return @words;\n}", "    my @words = split(/[, ]+/,\
    \ $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ \\@words;\n}", "    return [split /[, ]+/, $s];\n}", "    my @words = split(/[,\
    \ ]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    return [split /[\\s,]+/, $s];\n}", "    my @words\
    \ = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n\
    }", "    return [split /[\\s,]+/, $s];\n}", "    my @words = split /[\\s,]+/,\
    \ $s;\n    return \\@words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return\
    \ @words;\n}", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}",
  "    my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split(/[\\s,]+/, $s);\n    return \\@words;\n}", "    my\
    \ @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[,\
    \ ]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return \\@words;\n}", "    my @words = split(/[, ]+/, $s);\n    return @words;\n\
    }", "    my @words = split /[\\s,]+/, $s;\n    return @words;\n}", "    my @words\
    \ = split(/[, ]+/, $s);\n    return @words;\n}", "    my @words = split /[\\s,]+/,\
    \ $s;\n    return \\@words;\n}", "    my @words = split(/[, ]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split /[, ]+/, $s;\n    return @words;\n}", " \
    \   my @words = split /[\\s,]+/, $s;\n    return \\@words;\n}", "    my @words\
    \ = split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[, ]+/, $s);\n  \
    \  return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n\
    }", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}", "    return\
    \ [split /[\\s,]+/, $s];\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @words = split(/[, ]+/, $s);\n    return \\@words;\n}", "    my @words =\
    \ split(/[\\s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/,\
    \ $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return\
    \ @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n    return @words;\n}",
  "    my @words = split(/\\s*[,\\s]\\s*/, $s);\n    return @words;\n}", "    my @words\
    \ = split(/\\s+|,\\s*/, $s);\n    return @words;\n}", "    my @words = split(/[\\\
    s,]+/, $s);\n    return @words;\n}", "    my @words = split(/[\\s,]+/, $s);\n\
    \    return @words;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
