name: HumanEval_47_median
language: pl
prompt: "# Return median of elements in the list l.\nsub median {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),3)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10, 4,\
  \ 6, 1000, 10, 20]),8.0)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5]),5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 5]),5.5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8,\
  \ 1, 3, 9, 9, 2, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $n = @$l;\n    my $m = $n/2;\n    my @s = sort {$a <=> $b} @$l;\n\
    \    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2) {\n\
    \t$median = $l->[int($len/2)];\n    } else {\n\t$median = ($l->[int($len/2)-1]\
    \ + $l->[int($len/2)])/2;\n    }\n    return $median;\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my $m = int($n/2);\n    my @s = sort {$a <=>\
    \ $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1]\
    \ + $s[$m])/2;\n    }\n}", "    my $n = scalar(@$l);\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2) {\n\
    \t$median = $l->[$len/2];\n    } else {\n\t$median = ($l->[$len/2] + $l->[$len/2-1])/2;\n\
    \    }\n    return $median;\n}", "    my($n) = scalar(@$l);\n    my($m) = int($n/2);\n\
    \    my($s) = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n\treturn $s->[$m];\n \
    \   } else {\n\treturn ($s->[$m-1] + $s->[$m])/2;\n    }\n}", "    my $n = @$l;\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = scalar(@$l);\n  \
    \  return undef if $n == 0;\n    my $m = int($n/2);\n    my @s = sort {$a <=>\
    \ $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1]\
    \ + $s[$m])/2;\n    }\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    my @s =\
    \ sort { $a <=> $b } @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\
    \treturn ($s[$m-1] + $s[$m]) / 2;\n    }\n}", "    my $n = scalar(@$l);\n    my\
    \ $m = $n / 2;\n    my $median;\n    if ($n == 0) {\n\t$median = undef;\n    }\
    \ elsif ($n == 1) {\n\t$median = $l->[0];\n    } elsif ($n % 2 == 0) {\n\t$median\
    \ = ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n\t$median = $l->[$m];\n    }\n\
    \    return $median;\n}", "    my $n = @$l;\n    return undef if $n == 0;\n  \
    \  my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n    if ($n % 2) {\n\t\
    return $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m]) / 2;\n    }\n}", " \
    \   my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len % 2) {\n\t\
    return $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n  \
    \  }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    my @s = sort {$a <=>\
    \ $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1]\
    \ + $s[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n\
    \    if ($len % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1]\
    \ + $l->[$mid])/2;\n    }\n}", "    my @sorted = sort {$a <=> $b} @$l;\n    my\
    \ $n = @sorted;\n    if ($n % 2 == 0) {\n\treturn ($sorted[$n/2 - 1] + $sorted[$n/2])\
    \ / 2;\n    } else {\n\treturn $sorted[$n/2];\n    }\n}", "    my $n = scalar(@$l);\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my($n) = @$l;\n    my($i,\
    \ $j, $k, $m);", "    my($n) = @$l;\n    my($i, $j, $k, $t);\n    for ($i = 0;\
    \ $i < $n; $i++) {\n\tfor ($j = $i; $j < $n; $j++) {\n\t    if ($l->[$j] < $l->[$i])\
    \ {\n\t\t$t = $l->[$i];\n\t\t$l->[$i] = $l->[$j];\n\t\t$l->[$j] = $t;\n\t    }\n\
    \t}\n    }\n    if ($n % 2) {\n\treturn $l->[$n/2];\n    } else {\n\treturn ($l->[$n/2]\
    \ + $l->[$n/2-1]) / 2;\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $len = scalar(@$l);\n    if ($len == 0) {\n\treturn undef;\n    }\n   \
    \ my $m = $len / 2;\n    if ($len % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m])\
    \ / 2;\n    } else {\n\treturn $l->[$m];\n    }\n}", "    my $len = scalar(@$l);\n\
    \    if ($len % 2) {\n\treturn $l->[int($len/2)];\n    } else {\n\treturn ($l->[int($len/2)-1]\
    \ + $l->[int($len/2)]) / 2;\n    }\n}", "    my $n = @$l;\n    my $m = $n / 2;\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])\
    \ / 2;\n    }\n}", "    my $len = scalar(@$l);\n    my $median;\n    if ($len\
    \ % 2) {\n\t$median = $l->[int($len/2)];\n    } else {\n\t$median = ($l->[int($len/2)-1]\
    \ + $l->[int($len/2)])/2;\n    }\n    return $median;\n}", "    my @sorted = sort\
    \ {$a <=> $b} @$l;\n    my $median = $sorted[int(@sorted/2)];\n    return $median;\n\
    }", "    my $n = @$l;\n    my $m = $n / 2;\n    if ($n % 2) {\n\treturn $l->[$m];\n\
    \    } else {\n\treturn ($l->[$m-1] + $l->[$m]) / 2;\n    }\n}", "    my $n =\
    \ scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n\
    \    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len =\
    \ scalar(@$l);\n    my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n\
    \    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n\
    \ = @$l;\n    return undef if $n == 0;\n    my $m = int($n/2);\n    my @s = sort\
    \ {$a <=> $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn\
    \ ($s[$m-1] + $s[$m])/2;\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    if ($len == 0) {\n\treturn undef;\n\
    \    }\n    my $mid = int($len/2);\n    my @sorted = sort {$a <=> $b} @$l;\n \
    \   if ($len % 2 == 0) {\n\treturn ($sorted[$mid-1] + $sorted[$mid])/2;\n    }\
    \ else {\n\treturn $sorted[$mid];\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my @s = sort {$a <=> $b} @$l;\n    return $s[$#s/2];\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n %\
    \ 2 == 0) {\n\treturn ($s[$n/2] + $s[$n/2 - 1]) / 2;\n    } else {\n\treturn $s[$n/2];\n\
    \    }\n}", "    my $len = @$l;\n    return undef if $len == 0;\n    my $m = int($len/2);\n\
    \    if ($len % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] +\
    \ $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $median;\n    if\
    \ ($len % 2) {\n\t$median = $l->[int($len/2)];\n    } else {\n\t$median = ($l->[int($len/2)-1]\
    \ + $l->[int($len/2)])/2;\n    }\n    return $median;\n}", "    my $len = scalar(@$l);\n\
    \    my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    }\
    \ else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my $m = int($n/2);\n    my @s = sort {$a <=>\
    \ $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1]\
    \ + $s[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n\
    \    if ($len % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1]\
    \ + $l->[$mid])/2;\n    }\n}", "    my $len = scalar(@$l);\n    return undef if\
    \ $len == 0;\n    my $mid = int($len/2);\n    my @sorted = sort {$a <=> $b} @$l;\n\
    \    if ($len % 2) {\n\treturn $sorted[$mid];\n    } else {\n\treturn ($sorted[$mid-1]\
    \ + $sorted[$mid])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $median;\n\
    \    if ($len % 2) {\n\t$median = $l->[int($len/2)];\n    } else {\n\t$median\
    \ = ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n    }\n    return $median;\n\
    }", "    my $len = scalar(@$l);\n    if ($len == 0) {\n\treturn undef;\n    }\n\
    \    my $mid = int($len/2);\n    if ($len % 2 == 0) {\n\treturn ($l->[$mid-1]\
    \ + $l->[$mid])/2;\n    } else {\n\treturn $l->[$mid];\n    }\n}", "    my $len\
    \ = scalar(@$l);\n    my $median;\n    if ($len % 2) {\n\t$median = $l->[int($len/2)];\n\
    \    } else {\n\t$median = ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n    }\n\
    \    return $median;\n}", "    my $len = scalar(@$l);\n    my $median;\n    if\
    \ ($len % 2) {\n\t$median = $l->[int($len/2)];\n    } else {\n\t$median = ($l->[int($len/2)-1]\
    \ + $l->[int($len/2)])/2;\n    }\n    return $median;\n}", "    my $len = scalar(@$l);\n\
    \    if ($len == 0) {\n\treturn undef;\n    }\n    my $m = int($len/2);\n    if\
    \ ($len % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    } else {\n\treturn\
    \ $l->[$m];\n    }\n}", "    my $n = scalar(@$l);\n    return undef if $n == 0;\n\
    \    my @sorted = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n        return\
    \ ($sorted[$n/2] + $sorted[$n/2 - 1]) / 2;\n    } else {\n        return $sorted[$n/2];\n\
    \    }\n}", "    my($n) = @$l;\n    my($m) = int($n/2);\n    if ($n % 2) {\n\t\
    return $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}",
  "    my $len = scalar(@$l);\n    return undef if $len == 0;\n    my $m = int($len/2);\n\
    \    my @s = sort {$a <=> $b} @$l;\n    if ($len % 2) {\n\treturn $s[$m];\n  \
    \  } else {\n\treturn ($s[$m-1] + $s[$m])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = @$l;\n    my $m =\
    \ $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n\
    \    } else {\n\treturn ($s[$m-1] + $s[$m]) / 2;\n    }\n}", "    my @sorted =\
    \ sort {$a <=> $b} @$l;\n    my $mid = int(@sorted/2);\n    if (@sorted % 2) {\n\
    \        return $sorted[$mid];\n    } else {\n        return ($sorted[$mid-1]\
    \ + $sorted[$mid])/2;\n    }\n}", "    my $n = @$l;\n    my $m = $n / 2;\n   \
    \ my @s = sort { $a <=> $b } @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    }\
    \ else {\n\treturn ($s[$m-1] + $s[$m]) / 2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    }\
    \ else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n\
    \treturn ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n\treturn $l->[$m];\n    }\n\
    }", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n\
    \    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my @s = sort {$a <=> $b} @$l;\n    return $s[$n/2]\
    \ if $n % 2;\n    return ($s[$n/2-1] + $s[$n/2]) / 2;\n}", "    my($n) = @$l;\n\
    \    my($m) = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $s = scalar(@$l);\n  \
    \  return $s ? $l->[int($s/2)] : undef;\n}", "    my $len = scalar(@$l);\n   \
    \ my $median;\n    if ($len % 2) {\n\t$median = $l->[($len-1)/2];\n    } else\
    \ {\n\t$median = ($l->[$len/2] + $l->[$len/2-1])/2;\n    }\n    return $median;\n\
    }", "    my $len = scalar(@$l);\n    if ($len == 0) {\n\treturn undef;\n    }\n\
    \    my $m = int($len/2);\n    my @s = sort {$a <=> $b} @$l;\n    if ($len % 2)\
    \ {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m])/2;\n    }\n}",
  "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n\
    \    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = @$l;\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    }\
    \ else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n = @$l;\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $median;\n    if ($len % 2) {\n\t$median = $l->[int($len/2)];\n    } else\
    \ {\n\t$median = ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n    }\n    return\
    \ $median;\n}", "    my @s = sort {$a <=> $b} @$l;\n    my $n = @s;\n    my $m\
    \ = $n / 2;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1]\
    \ + $s[$m]) / 2;\n    }\n}", "    my $len = scalar(@$l);\n    my $median;\n  \
    \  if ($len % 2) {\n\t$median = $l->[int($len/2)];\n    } else {\n\t$median =\
    \ ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n    }\n    return $median;\n}",
  "    my $len = scalar(@$l);\n    return undef if $len == 0;\n    my $m = $len /\
    \ 2;\n    if ($len % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m]) / 2;\n    } else\
    \ {\n\treturn $l->[$m];\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $m = int($len/2);\n    if ($len\
    \ % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2)\
    \ {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n \
    \   }\n}", "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = int($n/2);\n\
    \    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    }\
    \ else {\n\treturn ($s[$m-1] + $s[$m])/2;\n    }\n}", "    my $n = @$l;\n    return\
    \ undef if $n == 0;\n    my $m = int($n/2);\n    my @s = sort {$a <=> $b} @$l;\n\
    \    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m])/2;\n\
    \    }\n}", "    my $n = scalar(@$l);\n    return undef if $n == 0;\n    my $m\
    \ = int($n/2);\n    if ($n % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m]) / 2;\n\
    \    } else {\n\treturn $l->[$m];\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len\
    \ % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len\
    \ % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $s = scalar(@$l);\n    my $m = int($s/2);\n    if ($s % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $len = scalar(@$l);\n    if ($len == 0) {\n\treturn undef;\n    }\n   \
    \ my $m = int($len/2);\n    if ($len % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    } else {\n\treturn $l->[$m];\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len\
    \ % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n\
    \    }\n}", "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = $n /\
    \ 2;\n    my @s = sort { $a <=> $b } @$l;\n    return $n % 2 ? $s[$m] : ($s[$m-1]\
    \ + $s[$m]) / 2;\n}", "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if\
    \ ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my($n) = scalar(@$l);\n    my($m) = int($n/2);\n    if ($n %\
    \ 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2) {\n\
    \t$median = $l->[int($len/2)];\n    } else {\n\t$median = ($l->[int($len/2)-1]\
    \ + $l->[int($len/2)])/2;\n    }\n    return $median;\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n\
    \treturn ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n\treturn $l->[$m];\n    }\n\
    }", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n\
    \    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my @sorted\
    \ = sort {$a <=> $b} @$l;\n    my $len = @sorted;\n    if($len % 2) { # Odd number\
    \ of elements\n\treturn $sorted[int($len/2)];\n    } else { # Even number of elements\n\
    \treturn ($sorted[int($len/2)-1] + $sorted[int($len/2)])/2;\n    }\n}", "    my\
    \ $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len % 2) {\n\treturn\
    \ $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}",
  "    my $n = @$l;\n    return undef if $n == 0;\n    my @s = sort {$a <=> $b} @$l;\n\
    \    if ($n % 2 == 0) {\n\treturn ($s[$n/2] + $s[$n/2 - 1]) / 2;\n    } else {\n\
    \treturn $s[$n/2];\n    }\n}", "    my $n = @$l;\n    return undef if $n == 0;\n\
    \    my $m = int($n/2);\n    if ($n % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m])\
    \ / 2;\n    } else {\n\treturn $l->[$m];\n    }\n}", "    my $n = scalar(@$l);\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    }\
    \ else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n\
    \treturn ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n\treturn $l->[$m];\n    }\n\
    }", "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort { $a <=> $b } @$l;\n\
    \    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m])\
    \ / 2;\n    }\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    my @s = sort {\
    \ $a <=> $b } @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn\
    \ ($s[$m-1] + $s[$m]) / 2;\n    }\n}", "    my $n = @$l;\n    my @s = sort {$a\
    \ <=> $b} @$l;\n    if ($n % 2) {\n\treturn $s[$n/2];\n    } else {\n\treturn\
    \ ($s[$n/2-1] + $s[$n/2])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $mid\
    \ = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    } else {\n\t\
    return ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $median;\n    if ($len % 2) {\n\t$median = $l->[int($len/2)];\n    } else\
    \ {\n\t$median = ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n    }\n    return\
    \ $median;\n}", "    my $m = int(@$l/2);\n    return @$l % 2 ? $l->[$m] : ($l->[$m-1]\
    \ + $l->[$m])/2;\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n %\
    \ 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $n = scalar(@$l);\n    my $m = int($n/2);\n    return $n % 2 ? $l->[$m]\
    \ : ($l->[$m-1] + $l->[$m])/2;\n}", "    my $n = @$l;\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    return undef if $n == 0;\n    my @s = sort\
    \ {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n\treturn ($s[$n/2] + $s[$n/2 - 1])\
    \ / 2;\n    } else {\n\treturn $s[$n/2];\n    }\n}", "    my $len = scalar(@$l);\n\
    \    return undef if $len == 0;\n    my $m = int($len/2);\n    my @s = sort {$a\
    \ <=> $b} @$l;\n    if ($len % 2) {\n\treturn $s[$m];\n    } else {\n\treturn\
    \ ($s[$m-1] + $s[$m])/2;\n    }\n}", "    my $n = @$l;\n    return undef if $n\
    \ == 0;\n    my $m = $n / 2;\n    my $s = sort { $a <=> $b } @$l;\n    return\
    \ $n % 2 ? $s->[$m] : ($s->[$m-1] + $s->[$m]) / 2;\n}", "    my $len = @$l;\n\
    \    my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    }\
    \ else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n = @$l;\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $m = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$m];\n    } else\
    \ {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = @$l;\n   \
    \ my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    } else\
    \ {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    if ($len == 0) {\n\treturn undef;\n    }\n    my $m = int($len/2);\n    if\
    \ ($len % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    } else {\n\treturn\
    \ $l->[$m];\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n\
    \ % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    my @s = sort {$a <=>\
    \ $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1]\
    \ + $s[$m])/2;\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n\
    \ % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    my @s = sort {$a <=>\
    \ $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1]\
    \ + $s[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n\
    \    if ($len % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1]\
    \ + $l->[$mid])/2;\n    }\n}", "    my @sorted = sort {$a <=> $b} @$l;\n    return\
    \ $sorted[int(@sorted/2)];\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n\
    \    if ($len % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1]\
    \ + $l->[$mid])/2;\n    }\n}", "    my $len = scalar(@$l);\n    if ($len == 0)\
    \ {\n\treturn undef;\n    }\n    my $median = $len % 2 ? $l->[$len/2] : ($l->[$len/2-1]\
    \ + $l->[$len/2])/2;\n    return $median;\n}", "    my $n = scalar(@$l);\n   \
    \ my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\t\
    return ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $len = scalar(@$l);\n    my $mid = int($len/2);\n    my @sorted = sort\
    \ {$a <=> $b} @$l;\n    if ($len % 2) {\n        return $sorted[$mid];\n    }\
    \ else {\n        return ($sorted[$mid-1] + $sorted[$mid])/2;\n    }\n}", "  \
    \  my $len = scalar(@$l);\n    my $median;\n    if ($len % 2) {\n\t$median = $l->[int($len/2)];\n\
    \    } else {\n\t$median = ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n    }\n\
    \    return $median;\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n\
    \ % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len\
    \ % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len\
    \ % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n\
    \    }\n}", "    my $len = @$l;\n    my $median;\n    if ($len % 2) {\n      \
    \  $median = $l->[int($len/2)];\n    } else {\n        $median = ($l->[int($len/2)-1]\
    \ + $l->[int($len/2)])/2;\n    }\n    return $median;\n}", "    my $len = scalar(@$l);\n\
    \    my $med = $len / 2;\n    my $median;\n    if ($len % 2) {\n\t$median = $l->[$med];\n\
    \    } else {\n\t$median = ($l->[$med] + $l->[$med-1]) / 2;\n    }\n    return\
    \ $median;\n}", "    my @sorted = sort {$a <=> $b} @$l;\n    my $mid = int(@sorted/2);\n\
    \    if (@sorted % 2) {\n        return $sorted[$mid];\n    } else {\n       \
    \ return ($sorted[$mid-1] + $sorted[$mid])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    }\
    \ else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    if ($len == 0) {\n\treturn undef;\n    }\n    my $m = int($len/2);\n    if\
    \ ($len % 2 == 0) {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    } else {\n\treturn\
    \ $l->[$m];\n    }\n}", "    my $len = scalar(@$l);\n    if ($len == 0) {\n\t\
    return undef;\n    }\n    my $mid = int($len/2);\n    if ($len % 2 == 0) {\n\t\
    return ($l->[$mid-1] + $l->[$mid])/2;\n    } else {\n\treturn $l->[$mid];\n  \
    \  }\n}", "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2) {\n\t\
    $median = $l->[int($len/2)];\n    } else {\n\t$median = ($l->[int($len/2)-1] +\
    \ $l->[int($len/2)])/2;\n    }\n    return $median;\n}", "    my $n = @$l;\n \
    \   my $m = $n / 2;\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn\
    \ ($l->[$m - 1] + $l->[$m]) / 2;\n    }\n}", "    my $len = scalar(@$l);\n   \
    \ my $m = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = @$l;\n    return\
    \ undef if $n == 0;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n\
    \treturn ($s[$n/2-1] + $s[$n/2])/2;\n    } else {\n\treturn $s[$n/2];\n    }\n\
    }", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len % 2)\
    \ {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n\
    \    }\n}", "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = $n /\
    \ 2;\n    my $s = sort { $a <=> $b } @$l;\n    return $n % 2 ? $s->[$m] : ($s->[$m-1]\
    \ + $s->[$m]) / 2;\n}", "    my $n = scalar(@$l);\n    my $m = int($n/2);\n  \
    \  if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n\
    \    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = @$l;\n\
    \    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\
    \treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = scalar(@$l);\n  \
    \  return undef if $n == 0;\n    my $m = int($n/2);\n    my @s = sort {$a <=>\
    \ $b} @$l;\n    return $n % 2 ? $s[$m] : ($s[$m-1] + $s[$m])/2;\n}", "    my $len\
    \ = scalar(@$l);\n    return undef if $len == 0;\n    my $m = int($len/2);\n \
    \   if ($len % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] +\
    \ $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n\
    \    if ($len % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1]\
    \ + $l->[$mid])/2;\n    }\n}", "    my $n = scalar(@$l);\n    my $m = int($n/2);\n\
    \    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = $n /\
    \ 2;\n    my $r = $l->[$m];\n    if ($n % 2 == 0) {\n\t$r = ($r + $l->[$m-1])\
    \ / 2;\n    }\n    return $r;\n}", "    my $len = scalar(@$l);\n    my $mid =\
    \ int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn\
    \ ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $len = scalar(@$l);\n   \
    \ my $median;\n    if ($len % 2) {\n\t$median = $l->[int($len/2)];\n    } else\
    \ {\n\t$median = ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n    }\n    return\
    \ $median;\n}", "    my $len = scalar(@$l);\n    return undef if $len == 0;\n\
    \    my $m = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$m];\n    } else\
    \ {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = @$l;\n    return\
    \ undef if $n == 0;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2 == 0) {\n\
    \treturn ($s[$n/2] + $s[$n/2 - 1]) / 2;\n    } else {\n\treturn $s[$n/2];\n  \
    \  }\n}", "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2) {\n\
    \treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n\
    }", "    my @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n\
    \ % 2 == 0) {\n\treturn ($sorted[$n/2] + $sorted[$n/2-1])/2;\n    } else {\n\t\
    return $sorted[$n/2];\n    }\n}", "    my $len = scalar(@$l);\n    return undef\
    \ if $len == 0;\n    my $m = $len / 2;\n    if ($len % 2 == 0) {\n\treturn ($l->[$m-1]\
    \ + $l->[$m]) / 2;\n    } else {\n\treturn $l->[$m];\n    }\n}", "    my $len\
    \ = scalar(@$l);\n    my $mid = int($len/2);\n    my @sorted = sort {$a <=> $b}\
    \ @$l;\n    if ($len % 2) {\n        return $sorted[$mid];\n    } else {\n   \
    \     return ($sorted[$mid-1] + $sorted[$mid])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    return undef if $n == 0;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n %\
    \ 2 == 0) {\n\treturn ($s[$n/2] + $s[$n/2 - 1]) / 2;\n    } else {\n\treturn $s[$n/2];\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $len = scalar(@$l);\n    my $m = int($len/2);\n    if ($len % 2) {\n\t\
    return $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}",
  "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n\
    \    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len =\
    \ scalar(@$l);\n    return undef if $len == 0;\n    my $m = int($len/2);\n   \
    \ if ($len % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n\
    \    }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my @sorted = sort {$a <=> $b} @$l;\n    my $mid = int(@sorted/2);\n    if\
    \ (@sorted % 2) {\n        return $sorted[$mid];\n    } else {\n        return\
    \ ($sorted[$mid-1] + $sorted[$mid])/2;\n    }\n}", "    my $n = @$l;\n    my $m\
    \ = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn\
    \ ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $mid\
    \ = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    } else {\n\t\
    return ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $n = scalar(@$l);\n\
    \    my $m = $n/2;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n\treturn\
    \ $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m])/2;\n    }\n}", "    my $len\
    \ = scalar(@$l);\n    return undef if $len == 0;\n    my $m = int($len/2);\n \
    \   if ($len % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] +\
    \ $l->[$m])/2;\n    }\n}", "    my $n = scalar(@$l);\n    return undef if $n ==\
    \ 0;\n    my $m = int($n/2);\n    my @s = sort {$a <=> $b} @$l;\n    if ($n %\
    \ 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m])/2;\n    }\n\
    }", "    my $n = @$l;\n    my $m = int($n/2);\n    my @s = sort {$a <=> $b} @$l;\n\
    \    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m])/2;\n\
    \    }\n}", "    my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2)\
    \ {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n \
    \   }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $len = scalar(@$l);\n    return undef if $len == 0;\n    my $m = int($len/2);\n\
    \    if ($len % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m-1] +\
    \ $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $m = $len / 2;\n\
    \    my $median;\n    if ($len % 2) {\n\t$median = $l->[$m];\n    } else {\n\t\
    $median = ($l->[$m-1] + $l->[$m]) / 2;\n    }\n    return $median;\n}", "    my\
    \ @sorted = sort {$a <=> $b} @$l;\n    my $n = @sorted;\n    if ($n % 2 == 0)\
    \ {\n\treturn ($sorted[$n/2] + $sorted[$n/2-1])/2;\n    } else {\n\treturn $sorted[$n/2];\n\
    \    }\n}", "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if ($len\
    \ % 2) {\n\treturn $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n\
    \    }\n}", "    my $len = scalar(@$l);\n    return undef if $len == 0;\n    my\
    \ $m = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$m];\n    } else {\n\t\
    return ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n  \
    \  if ($len == 0) {\n\treturn undef;\n    } elsif ($len == 1) {\n\treturn $l->[0];\n\
    \    } else {\n\tmy $sorted = [sort {$a <=> $b} @$l];\n\tmy $mid = int($len/2);\n\
    \tif ($len % 2 == 0) {\n\t    return ($sorted->[$mid-1] + $sorted->[$mid])/2;\n\
    \t} else {\n\t    return $sorted->[$mid];\n\t}\n    }\n}", "    my $n = @$l;\n\
    \    return undef if $n == 0;\n    my $m = int($n/2);\n    if ($n % 2 == 0) {\n\
    \treturn ($l->[$m-1] + $l->[$m]) / 2;\n    } else {\n\treturn $l->[$m];\n    }\n\
    }", "    my $n = scalar(@$l);\n    return undef if $n == 0;\n    my $m = int($n/2);\n\
    \    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    }\
    \ else {\n\treturn ($s[$m-1] + $s[$m])/2;\n    }\n}", "    my $n = @$l;\n    my\
    \ $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn\
    \ ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $len = scalar(@$l);\n    my $median;\n\
    \    if ($len % 2) {\n\t$median = $l->[int($len/2)];\n    } else {\n\t$median\
    \ = ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n    }\n    return $median;\n\
    }", "    my $n = @$l;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n\t\
    return $s[$n/2];\n    } else {\n\treturn ($s[$n/2-1] + $s[$n/2])/2;\n    }\n}",
  "    my $len = scalar(@$l);\n    my $mid = int($len/2);\n    if($len % 2) {\n\t\
    return $l->[$mid];\n    } else {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n  \
    \  }\n}", "    my $n = @$l;\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn\
    \ $l->[$m];\n    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", " \
    \   my $n = @$l;\n    return undef if $n == 0;\n    my $m = $n / 2;\n    my @s\
    \ = sort { $a <=> $b } @$l;\n    if ($n % 2) {\n\treturn $s[$m];\n    } else {\n\
    \treturn ($s[$m-1] + $s[$m]) / 2;\n    }\n}", "    my $len = scalar(@$l);\n  \
    \  my $mid = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$mid];\n    } else\
    \ {\n\treturn ($l->[$mid-1] + $l->[$mid])/2;\n    }\n}", "    my $len = scalar(@$l);\n\
    \    my $m = int($len/2);\n    if ($len % 2) {\n\treturn $l->[$m];\n    } else\
    \ {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = @$l;\n    my\
    \ $m = int($n/2);\n    return $n % 2 ? $l->[$m] : ($l->[$m-1] + $l->[$m])/2;\n\
    }", "    my $n = @$l;\n    return undef if $n == 0;\n    my $m = int($n/2);\n\
    \    my @s = sort {$a <=> $b} @$l;\n    return $n % 2 ? $s[$m] : ($s[$m-1] + $s[$m])/2;\n\
    }", "    my $len = scalar(@$l);\n    my $median;\n    if ($len % 2) {\n\t$median\
    \ = $l->[int($len/2)];\n    } else {\n\t$median = ($l->[int($len/2)-1] + $l->[int($len/2)])/2;\n\
    \    }\n    return $median;\n}", "    my $n = @$l;\n    my $m = $n / 2;\n    if\
    \ ($n % 2) {\n\treturn $l->[$m];\n    } else {\n\treturn ($l->[$m - 1] + $l->[$m])\
    \ / 2;\n    }\n}", "    my $n = scalar(@$l);\n    my $m = $n / 2;\n    my $median;\n\
    \    if ($n % 2) {\n\t$median = $l->[$m];\n    } else {\n\t$median = ($l->[$m-1]\
    \ + $l->[$m]) / 2;\n    }\n    return $median;\n}", "    my $len = scalar(@$l);\n\
    \    if ($len == 0) {\n\treturn undef;\n    }\n    my $mid = int($len/2);\n  \
    \  my @sorted = sort {$a <=> $b} @$l;\n    if ($len % 2 == 0) {\n\treturn ($sorted[$mid-1]\
    \ + $sorted[$mid])/2;\n    } else {\n\treturn $sorted[$mid];\n    }\n}", "   \
    \ my $n = scalar(@$l);\n    my $m = int($n/2);\n    if ($n % 2) {\n\treturn $l->[$m];\n\
    \    } else {\n\treturn ($l->[$m-1] + $l->[$m])/2;\n    }\n}", "    my $n = @$l;\n\
    \    my $m = $n/2;\n    my @s = sort {$a <=> $b} @$l;\n    if ($n % 2) {\n\treturn\
    \ $s[$m];\n    } else {\n\treturn ($s[$m-1] + $s[$m])/2;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
