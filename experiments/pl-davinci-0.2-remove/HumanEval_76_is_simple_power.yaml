name: HumanEval_76_is_simple_power
language: pl
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\nsub is_simple_power {\n    my($x, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_simple_power;\n\
  \        if(eq_deeply($candidate->(16, 2),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(143214, 16),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9,\
  \ 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16,\
  \ 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24,\
  \ 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(128, 4),\"\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(12, 6),\"\")) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n    }\n \
    \   return $i == $x;\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int\
    \ == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    my $i = 1;\n    while ($i < $x)\
    \ {\n        $i *= $n;\n    }\n    return $i == $x;\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return log($x) / log($n) == int(log($x) / log($n));\n}", "    return\
    \ log($x) / log($n) == int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int ==\
    \ $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x\
    \ == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) /\
    \ log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    my $int = int(log($x)/log($n));\n    return\
    \ $n**$int == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n}", " \
    \   return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ log($x) / log($n) == int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return log($x) / log($n) == int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return log($x) / log($n) == int(log($x) / log($n));\n}",
  "    my $int = int(log($x)/log($n));\n    return $n**$int == $x;\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int ==\
    \ $x;\n}", "    my $i = 0;\n    my $p = $n ** $i;\n    while ($p <= $x) {\n  \
    \      return 1 if $p == $x;\n        $i++;\n        $p = $n ** $i;\n    }\n \
    \   return 0;\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    my\
    \ $i = 0;\n    my $result = 1;\n    while ($result < $x) {\n        $result =\
    \ $n ** $i;\n        $i++;\n    }\n    return $result == $x;\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    my $i = 1;\n    while ($i < $x)\
    \ {\n        $i *= $n;\n    }\n    return $i == $x;\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n    }\n    return\
    \ $i == $x;\n}", "    return log($x) / log($n) == int(log($x) / log($n));\n}",
  "    return $x == $n ** int(log($x) / log($n));\n}", "    my $i = 1;\n    while\
    \ ($i < $x) {\n        $i *= $n;\n    }\n    return $i == $x;\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int ==\
    \ $x;\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int == $x;\n}",
  "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ log($x) / log($n) == int(log($x) / log($n));\n}", "    return log($x) / log($n)\
    \ == int(log($x) / log($n));\n}", "    my $r = log($x) / log($n);\n    return\
    \ $r == int($r);\n}", "    my $i = 0;\n    while ($x > 1) {\n        $x /= $n;\n\
    \        $i++;\n    }\n    return $x == 1;\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    my\
    \ $int = log($x) / log($n);\n    return $int == int($int);\n}", "    return $x\
    \ == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) /\
    \ log($n));\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int ==\
    \ $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x\
    \ == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) /\
    \ log($n));\n}", "    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n \
    \   }\n    return $i == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n    }\n    return\
    \ $i == $x;\n}", "    my $i = 0;\n    while ($x > 1) {\n        $x /= $n;\n  \
    \      $i++;\n    }\n    return $x == 1;\n}", "    my $i = 1;\n    while ($i <\
    \ $x) {\n        $i *= $n;\n    }\n    return $i == $x;\n}", "    return $x ==\
    \ $n ** int(log($x) / log($n));\n}", "    my $i = 1;\n    while ($i < $x) {\n\
    \        $i *= $n;\n    }\n    return $i == $x;\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n\
    \    }\n    return $i == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $i = 1;\n   \
    \ while ($n ** $i <= $x) {\n        return 1 if $n ** $i == $x;\n        $i++;\n\
    \    }\n    return 0;\n}", "    return $x == $n ** int(log($x) / log($n));\n}",
  "    my $i = 0;\n    while ($x > 1) {\n        $x /= $n;\n        $i++;\n    }\n\
    \    return $x == 1;\n}", "    return $x == $n ** int(log($x) / log($n));\n}",
  "    my $i = 0;\n    while ($n ** $i <= $x) {\n        return 1 if $n ** $i == $x;\n\
    \        $i++;\n    }\n    return 0;\n}", "    my $i = 1;\n    while ($i < $x)\
    \ {\n        $i *= $n;\n    }\n    return $i == $x;\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    my $i = 1;\n    while ($n ** $i <= $x)\
    \ {\n        return 1 if $n ** $i == $x;\n        $i++;\n    }\n    return 0;\n\
    }", "    return $x == $n ** int log($x) / log($n);\n}", "    my $i = 1;\n    my\
    \ $result = 1;\n    while ($result < $x) {\n        $result = $n ** $i;\n    \
    \    $i++;\n    }\n    return $result == $x;\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int ==\
    \ $x;\n}", "    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n    }\n\
    \    return $i == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n}",
  "    my $int = int(log($x)/log($n));\n    return $x == $n**$int;\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    my $i = 1;\n    while ($i < $x)\
    \ {\n        $i *= $n;\n    }\n    return $i == $x;\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    my $i = 1;\n    while ( $i < $x ) {\n \
    \       if ( $n ** $i == $x ) {\n            return 1;\n        }\n        $i++;\n\
    \    }\n    return 0;\n}", "    return log($x) / log($n) == int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    my $i = 0;\n    while ($x > 1) {\n        $x /= $n;\n        $i++;\n\
    \    }\n    return $x == 1;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return log($x) / log($n) == int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    my $i = 1;\n    while ($i < $x) {\n    \
    \    $i *= $n;\n    }\n    return $i == $x;\n}", "    my $i = 1;\n    while ($i\
    \ < $x) {\n        $i *= $n;\n    }\n    return $i == $x;\n}", "    my $i = 0;\n\
    \    while ( $x > 1 ) {\n        $x /= $n;\n        $i++;\n    }\n    return $x\
    \ == 1 ? $i : 0;\n}", "    my $i = 0;\n    while ($n ** $i < $x) {\n        $i++;\n\
    \    }\n    return $n ** $i == $x;\n}", "    return $x == $n ** int(log($x) /\
    \ log($n));\n}", "    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n \
    \   }\n    return $i == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $i = 0;\n   \
    \ while ( $x > 1 ) {\n        $x /= $n;\n        $i++;\n    }\n    return $x ==\
    \ 1 ? $i : 0;\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return log($x) / log($n) == int(log($x)\
    \ / log($n));\n}", "    my $pow = log($x) / log($n);\n    return $pow == int($pow);\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    my $i = 0;\n    while ( $x >= $n ) {\n        $x /= $n;\n        $i++;\n\
    \    }\n    return $x == 1 ? $i : 0;\n}", "    my $i = 1;\n    while ($i < $x)\
    \ {\n        $i *= $n;\n    }\n    return $i == $x;\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    my $int = int(log($x)/log($n));\n    return $n**$int == $x;\n}", "  \
    \  return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int ==\
    \ $x;\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int == $x;\n}",
  "    my $i = 0;\n    while ( $x > 1 ) {\n        $x /= $n;\n        $i++;\n    }\n\
    \    return $x == 1;\n}", "    return $x == $n ** int(log($x) / log($n));\n}",
  "    my $i = 0;\n    while ( $x > 1 ) {\n        $x /= $n;\n        $i++;\n    }\n\
    \    return $x == 1 ? $i : 0;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    my $root = int(log($x) / log($n));\n  \
    \  return $n ** $root == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return log($x) / log($n) == int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return log($x) / log($n) == int(log($x) / log($n));\n}",
  "    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n    }\n    return $i\
    \ == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    return\
    \ $x == $n ** int(log($x) / log($n));\n}", "    return log($x) / log($n) == int(log($x)\
    \ / log($n));\n}", "    my $i = 1;\n    while ($i < $x) {\n        $i *= $n;\n\
    \    }\n    return $i == $x;\n}", "    my $i = 1;\n    while ($i < $x) {\n   \
    \     $i *= $n;\n    }\n    return $i == $x;\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $n**$int == $x;\n}", "    return $x == $n ** int(log($x) / log($n));\n\
    }", "    return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n\
    \ ** int(log($x) / log($n));\n}", "    my $i = 0;\n    my $result = 0;\n    while\
    \ ($result < $x) {\n        $result = $n ** $i;\n        if ($result == $x) {\n\
    \            return 1;\n        }\n        $i++;\n    }\n    return 0;\n}", " \
    \   return $x == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x)\
    \ / log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    my\
    \ $int = int(log($x)/log($n));\n    return $n**$int == $x;\n}", "    return $x\
    \ == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) /\
    \ log($n));\n}", "    my $i = 0;\n    while ( $n ** $i <= $x ) {\n        return\
    \ 1 if $n ** $i == $x;\n        $i++;\n    }\n    return 0;\n}", "    return $x\
    \ == $n ** int(log($x) / log($n));\n}", "    return $x == $n ** int(log($x) /\
    \ log($n));\n}", "    return $x == $n ** int(log($x) / log($n));\n}", "    my\
    \ $i = 1;\n    my $result = $n;\n    while ($result <= $x) {\n        if ($result\
    \ == $x) {\n            return 1;\n        }\n        $i++;\n        $result =\
    \ $n ** $i;\n    }\n    return 0;\n}", "    return log($x) / log($n) == int(log($x)\
    \ / log($n));\n}", "    my $int = int(log($x)/log($n));\n    return $n**$int ==\
    \ $x;\n}", "    my $i = 0;\n    while ( $x > $n ) {\n        $x /= $n;\n     \
    \   $i++;\n    }\n    return $x == $n;\n}", "    my $int = int(log($x)/log($n));\n\
    \    return $x == $n**$int;\n}", "    my $i = 1;\n    while ($i < $x) {\n    \
    \    $i *= $n;\n    }\n    return $i == $x;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
