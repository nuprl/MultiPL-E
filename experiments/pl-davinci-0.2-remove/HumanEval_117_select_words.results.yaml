language: pl
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split(//, $word)) {\n            if ($letter =~ /[^aeiou]/) {\n           \
    \     $count++;\n            }\n        }\n        if ($count == $n) {\n     \
    \       push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @selected;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @selected, $word if $count == $n;\n    }\n    return @selected;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split //, $word) {\n            $consonants++ if $char =~ /[^aeiou]/i;\n\
    \        }\n        push @result, $word if $consonants == $n;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    return [] if $s eq '';\n    my @words = split /\\\
    s+/, $s;\n    my @result;\n    for my $word (@words) {\n        my $count = ()\
    \ = $word =~ /[^aeiou]/gi;\n        push @result, $word if $count == $n;\n   \
    \ }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = ($word =~ tr/bcdfghjklmnpqrstvwxyz//);\n\
    \        push(@result, $word) if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @consonants\
    \ = grep { /[^aeiou]/ } @words;\n    return grep { $n == tr/[^aeiou]// } @words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            my $char = substr($word, $i, 1);\n\
    \            $count++ if ($char !~ /[aeiou]/i);\n        }\n        push(@result,\
    \ $word) if ($count == $n);\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char !~ /[aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @result;\n    my @words = split(/\\s+/, $s);\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split(//,\
    \ $word)) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n      \
    \  push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @selected;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @selected, $word if $consonants == $n;\n    }\n    return @selected;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @results;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @results, $word if $count == $n;\n    }\n    return @results;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @consonants\
    \ = qw(b c d f g h j k l m n p q r s t v w x y z);\n    my @result;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        foreach my $char (split('',\
    \ $word)) {\n            if (grep(/^$char$/, @consonants)) {\n               \
    \ $count++;\n            }\n        }\n        if ($count == $n) {\n         \
    \   push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            $count++ if ($char !~ /[aeiou]/i);\n     \
    \   }\n        push(@result, $word) if ($count == $n);\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @consonants\
    \ = qw(b c d f g h j k l m n p q r s t v w x y z);\n    my @result;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        foreach my $char (split('',\
    \ $word)) {\n            if (grep { $_ eq $char } @consonants) {\n           \
    \     $count++;\n            }\n        }\n        if ($count == $n) {\n     \
    \       push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $c (split(//,\
    \ $word)) {\n            $count++ if $c =~ /[^aeiou]/i;\n        }\n        push\
    \ @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @result = ();\n    my @words = split(/\\s+/,\
    \ $s);\n    foreach my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $letter (split(//, $word)) {\n            if ($letter =~ /[^aeiou]/i) {\n\
    \                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/[^aeiou]//;\n  \
    \      push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    return [] if $s eq '';\n    my @words = split(/\\\
    s+/, $s);\n    my @consonants = grep { $_ !~ /[aeiou]/ } split(//, $s);\n    my\
    \ @result = ();\n    for my $word (@words) {\n        my @consonants_in_word =\
    \ grep { $_ !~ /[aeiou]/ } split(//, $word);\n        push @result, $word if scalar(@consonants_in_word)\
    \ == $n;\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @selected;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@selected, $word);\n        }\n    }\n    return @selected;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/[^aeiou]//;\n  \
    \      push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        $count++ while\
    \ $word =~ /[bcdfghjklmnpqrstvwxyz]/gi;\n        push @result, $word if $count\
    \ == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[bcdfghjklmnpqrstvwxz]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[bcdfghjklmnpqrstvwxz]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split //, $word) {\n            $count++ if $letter =~ /[^aeiou]/;\n      \
    \  }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split ' ', $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @consonants\
    \ = grep { /[^aeiou]/ } split //, $s;\n    my @result;\n    for my $word (@words)\
    \ {\n        my @consonants_in_word = grep { /[^aeiou]/ } split //, $word;\n \
    \       push @result, $word if @consonants_in_word == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $c = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $c++;\n            }\n        }\n        if ($c == $n) {\n            push(@result,\
    \ $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/;\n        }\n    \
    \    push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @result = ();\n    my @words = split(/\\s+/,\
    \ $s);\n    foreach my $word (@words) {\n        my $consonants = 0;\n       \
    \ my @chars = split(//, $word);\n        foreach my $char (@chars) {\n       \
    \     if ($char =~ /[^aeiou]/i) {\n                $consonants++;\n          \
    \  }\n        }\n        if ($consonants == $n) {\n            push(@result, $word);\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 0
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    return [] if $s eq '';\n    my @words = split /\\\
    s+/, $s;\n    my @result;\n    foreach my $word (@words) {\n        my $count\
    \ = 0;\n        foreach my $char (split //, $word) {\n            $count++ if\
    \ $char =~ /[^aeiou]/i;\n        }\n        push @result, $word if $count == $n;\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @consonants\
    \ = qw(b c d f g h j k l m n p q r s t v w x y z);\n    my @result;\n    for my\
    \ $word (@words) {\n        my $count = 0;\n        for my $char (split //, $word)\
    \ {\n            $count++ if grep {$_ eq $char} @consonants;\n        }\n    \
    \    push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(' ', $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        if (consonants($word) == $n) {\n   \
    \         push @result, $word;\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::consonants called at /tmp/tmp2gga0bhb.pl line
    12.

    '
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $vowels = $word =~ tr/aeiou//;\n\
    \        my $consonants = length($word) - $vowels;\n        push @result, $word\
    \ if $consonants == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            my $c = substr($word, $i, 1);\n\
    \            if ($c =~ /[^aeiou]/i) {\n                $count++;\n           \
    \ }\n        }\n        if ($count == $n) {\n            push(@result, $word);\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @selected_words;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @selected_words, $word if $consonants == $n;\n    }\n    return\
    \ @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @selected;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $c (split\
    \ //, $word) {\n            $count++ if $c !~ /[aeiou]/i;\n        }\n       \
    \ push @selected, $word if $count == $n;\n    }\n    return @selected;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/[^aeiou]//;\n  \
    \      push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @selected;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @selected, $word if $consonants == $n;\n    }\n    return @selected;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   for my $word (@words) {\n        my $count = 0;\n        for my $letter (split\
    \ //, $word) {\n            if ($letter =~ /[^aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split //, $word) {\n            if ($letter !~ /[aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[^aeiou]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $c (split\
    \ //, $word) {\n            $count++ if $c !~ /[aeiou]/i;\n        }\n       \
    \ push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @selected;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @selected, $word if $consonants == $n;\n    }\n    return @selected;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[bcdfghjklmnpqrstvwxz]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 255
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @consonants\
    \ = grep { /[^aeiou]/ } @words;\n    my @result = grep { $n == () = $_ =~ /[^aeiou]/g\
    \ } @words;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary\
    \ had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t modify numeric eq (==) in scalar assignment at /tmp/tmp44g50uqz.pl
    line 11, near "/[^aeiou]/g }"

    BEGIN not safe after errors--compilation aborted at /tmp/tmp44g50uqz.pl line 14.

    '
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $c\
    \ (split //, $word) {\n            $count++ if $c !~ /[aeiou]/i;\n        }\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @selected;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        if ($consonants == $n) {\n            push @selected, $word;\n      \
    \  }\n    }\n    return @selected;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   for my $word (@words) {\n        my $count = 0;\n        for my $letter (split\
    \ //, $word) {\n            $count++ if $letter =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n \
    \   for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char !~ /[aeiou]/i) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = () = $word =~ /[bcdfghjklmnpqrstvwxz]/gi;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns a list of all words from string s that contain exactly\
    \ \n# n consonants, in order these words appear in the string s.\n# If the string\
    \ s is empty then the function should return an empty list.\n# Note: you may assume\
    \ the input string contains only letters and spaces.\n# Examples:\nsub select_words\
    \ {\n    my($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660004018
