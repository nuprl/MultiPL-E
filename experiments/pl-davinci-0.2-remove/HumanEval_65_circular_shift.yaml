name: HumanEval_65_circular_shift
language: pl
prompt: "# Circular shift the digits of the integer x, shift the digits right by shift\n\
  # and return the result as a string.\n# If shift > number of digits, return digits\
  \ reversed.\nsub circular_shift {\n    my($x, $shift) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n\
  \        if(eq_deeply($candidate->(100, 2),\"001\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97,\
  \ 8),\"79\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(12, 1),\"21\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $y = $x % 10**$shift;\n    return $y . substr($x, 0, $digits - $shift);\n\
    }", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $y = $x % 10**$shift;\n    return $y . substr($x, 0, $digits - $shift);\n\
    }", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $y = substr($x, $shift) . substr($x, 0, $shift);\n    return $y;\n}",
  "    my $digits = length($x);\n    if ($shift >= $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    return substr($x, $shift, $digits-$shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $s =\
    \ $x;\n    my $n = 0;\n    while ($s) {\n        $s /= 10;\n        $n++;\n  \
    \  }\n    $shift %= $n;\n    my $y = 0;\n    while ($shift) {\n        $y = $y\
    \ * 10 + $x % 10;\n        $x /= 10;\n        $shift--;\n    }\n    while ($x)\
    \ {\n        $y = $y * 10 + $x % 10;\n        $x /= 10;\n    }\n    return $y;\n\
    }", "    my $n = length($x);\n    my $y = $x;\n    if ($shift < $n) {\n      \
    \  $y = substr($x, $shift) . substr($x, 0, $shift);\n    }\n    else {\n     \
    \   $y = reverse($x);\n    }\n    return $y;\n}", "    my $digits = length($x);\n\
    \    return $x if $shift == 0;\n    return reverse($x) if $shift >= $digits;\n\
    \    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ my $y = substr($x, $shift) . substr($x, 0, $shift);\n    return $y;\n}", " \
    \   my $digits = length($x);\n    return scalar reverse $x if $shift > $digits;\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits =\
    \ length($x);\n    return reverse($x) if $shift > $digits;\n    return substr($x,\
    \ $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return reverse($x);\n    } else {\n   \
    \     return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n \
    \   }\n}", "    my $digits = length($x);\n    my $y = $x;\n    if ($shift > $digits)\
    \ {\n        $y = reverse($y);\n    } else {\n        $y = substr($y, $shift)\
    \ . substr($y, 0, $shift);\n    }\n    return $y;\n}", "    my $n = length($x);\n\
    \    $shift %= $n;\n    return substr($x, $shift) . substr($x, 0, $shift);\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = reverse($x);\n    my $len = length($digits);\n\
    \    if ($shift > $len) {\n        return $digits;\n    }\n    my $left = substr($digits,\
    \ 0, $shift);\n    my $right = substr($digits, $shift);\n    return $right . $left;\n\
    }", "    my $digits = length($x);\n    if ($shift >= $digits) {\n        return\
    \ reverse($x);\n    }\n    my $y = substr($x, $shift, $digits - $shift);\n   \
    \ $y .= substr($x, 0, $shift);\n    return $y;\n}", "    my $s = $x;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        $s = reverse($s);\n    }\
    \ else {\n        $s = substr($s, $shift) . substr($s, 0, $shift);\n    }\n  \
    \  return $s;\n}", "    my $digits = length($x);\n    return scalar reverse $x\
    \ if $shift > $digits;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "    my $len = length($x);\n    return reverse($x) if $shift > $len;\n   \
    \ my $y = substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n    return\
    \ $y;\n}", "    my $s = $x;\n    my $len = length($x);\n    if ($shift > $len)\
    \ {\n        $s = reverse($s);\n    } else {\n        $s = substr($s, $len - $shift)\
    \ . substr($s, 0, $len - $shift);\n    }\n    return $s;\n}", "    my $len = length($x);\n\
    \    return reverse($x) if $shift > $len;\n    return substr($x, $len - $shift)\
    \ . substr($x, 0, $len - $shift);\n}", "    my $digits = length($x);\n    return\
    \ scalar reverse $x if $shift > $digits;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $n = length($x);\n    if ($shift > $n) {\n        return\
    \ reverse($x);\n    } else {\n        return substr($x, $n - $shift, $shift) .\
    \ substr($x, 0, $n - $shift);\n    }\n}", "    my $digits = length($x);\n    my\
    \ $shifted = $x;\n    if ($shift < $digits) {\n        $shifted = substr($x, $shift)\
    \ . substr($x, 0, $shift);\n    }\n    else {\n        $shifted = reverse($x);\n\
    \    }\n    return $shifted;\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n\
    \        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $n = length($x);\n    if ($shift >= $n) {\n        return scalar reverse\
    \ $x;\n    }\n    my $y = substr($x, $shift, $n-$shift) . substr($x, 0, $shift);\n\
    \    return $y;\n}", "    my $n = length($x);\n    my $s = substr($x, $n - $shift,\
    \ $shift);\n    my $r = substr($x, 0, $n - $shift);\n    return $s . $r;\n}",
  "    my $n = length($x);\n    return $x if $shift == 0;\n    return reverse($x)\
    \ if $shift >= $n;\n    return substr($x, $shift, $n-$shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    if ($shift >= $digits) {\n        return\
    \ reverse($x);\n    }\n    my $y = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    return $y;\n}", "    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right\
    \ = substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $n\
    \ = length($x);\n    return reverse($x) if $shift > $n;\n    return substr($x,\
    \ $shift, $n - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    $shift\
    \ %= $digits;\n    return reverse($x) if $shift == 0;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}",
  "    my $digits = length($x);\n    return reverse $x if $shift > $digits;\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $n = length($x);\n    return\
    \ scalar reverse $x if $shift > $n;\n    return substr($x, $shift, $n - $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $x_str = $x;\n    my $x_len = length($x_str);\n\
    \    if ($shift > $x_len) {\n        return reverse($x_str);\n    }\n    my $x_left\
    \ = substr($x_str, 0, $x_len - $shift);\n    my $x_right = substr($x_str, $x_len\
    \ - $shift);\n    return $x_right . $x_left;\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    return substr($x, $shift) .\
    \ substr($x, 0, $shift);\n}", "    my $n = length($x);\n    return reverse($x)\
    \ if $shift > $n;\n    my $y = substr($x, $n - $shift, $shift) . substr($x, 0,\
    \ $n - $shift);\n    return $y;\n}", "    my $len = length($x);\n    return scalar\
    \ reverse $x if $shift >= $len;\n    return substr($x, $shift, $len - $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $s = reverse $x;\n    $s = substr($s, 0, $shift) . substr($s, $shift);\n\
    \    return reverse $s;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $y = $x % 10**$shift;\n\
    \    return $y * 10**($digits-$shift) + int($x/10**$shift);\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right\
    \ = substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    return substr($x,\
    \ $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $n = length($x);\n\
    \    return scalar reverse $x if $shift > $n;\n    return substr($x, $shift, $n\
    \ - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $n = length($x);\n    $shift %= $n;\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $len = length($x);\n\
    \    return scalar reverse $x if $shift > $len;\n    return substr($x, $shift,\
    \ $len - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if\
    \ ($shift >= $digits) {\n        return scalar reverse $x;\n    }\n    my $y =\
    \ substr($x, $shift) . substr($x, 0, $shift);\n    return $y;\n}", "    my $digits\
    \ = length($x);\n    if ($shift >= $digits) {\n        return scalar reverse $x;\n\
    \    }\n    my $left = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    my $y = $x % (10 ** $shift);\n    $y = $y * (10 **\
    \ ($digits - $shift));\n    $y += int($x / (10 ** $shift));\n    return $y;\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return scalar reverse $x;\n    }\n    return\
    \ substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "    my $digits\
    \ = length($x);\n    return scalar reverse $x if $shift > $digits;\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    return scalar reverse $x if $shift > $digits;\n    my $y = $x % 10**$shift;\n\
    \    $x = $x / 10**$shift;\n    return $y . $x;\n}", "    my $digits = length($x);\n\
    \    return scalar reverse $x if $shift > $digits;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $len = length($x);\n    my $str = substr($x,\
    \ $len - $shift, $shift) . substr($x, 0, $len - $shift);\n    return $str;\n}",
  "    my $n = length($x);\n    return reverse($x) if $shift > $n;\n    return substr($x,\
    \ $shift, $n-$shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n}", "    my $n = length($x);\n    return\
    \ reverse($x) if $shift > $n;\n    return substr($x, $shift, $n-$shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    return substr($x, $shift) . substr($x, 0, $shift);\n}", "  \
    \  my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $y = $x % (10 ** $shift);\n    $y = $y * (10 ** ($digits - $shift));\n\
    \    $y += $x / (10 ** $shift);\n    return $y;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "    my $digits = length($x);\n    return scalar\
    \ reverse $x if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $n = length($x);\n    if\
    \ ($shift >= $n) {\n        return scalar reverse $x;\n    }\n    return substr($x,\
    \ $shift, $n-$shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $y = substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n    return $y;\n}", "    my $n = length($x);\n\
    \    return reverse($x) if $shift > $n;\n    return substr($x, $shift, $n - $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return scalar\
    \ reverse $x if $shift > $digits;\n    my $y = $x % 10**$shift;\n    return $y\
    \ . substr($x, 0, $digits - $shift);\n}", "    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    my $y = $x % 10**$shift;\n    return $y\
    \ . substr($x, 0, $digits - $shift);\n}", "    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my $y =\
    \ $x % 10**$shift;\n    return $y . int($x / 10**$shift);\n}", "    my $digits\
    \ = length $x;\n    $shift %= $digits;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    $shift %= $digits;\n   \
    \ return reverse($x) if $shift == 0;\n    return substr($x, $shift, $digits -\
    \ $shift) . substr($x, 0, $shift);\n}", "    my $str = \"$x\";\n    my $len =\
    \ length($str);\n    if ($shift > $len) {\n        return reverse($str);\n   \
    \ }\n    return substr($str, $shift, $len - $shift) . substr($str, 0, $shift);\n\
    }", "    my $n = length($x);\n    return reverse($x) if $shift > $n;\n    my $y\
    \ = substr($x, $n - $shift, $shift) . substr($x, 0, $n - $shift);\n    return\
    \ $y;\n}", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $result = substr($x, $shift) . substr($x, 0, $shift);\n    return $result;\n\
    }", "    my $digits = length($x);\n    if ($shift >= $digits) {\n        return\
    \ reverse($x);\n    }\n    my $y = substr($x, $shift, $digits - $shift);\n   \
    \ $y .= substr($x, 0, $shift);\n    return $y;\n}", "    my $x_str = reverse $x;\n\
    \    my $len = length $x_str;\n    if ($shift > $len) {\n        return $x_str;\n\
    \    }\n    my $y_str = substr($x_str, 0, $shift) . substr($x_str, $shift);\n\
    \    return reverse $y_str;\n}", "    my $n = length($x);\n    return reverse($x)\
    \ if $shift > $n;\n    return substr($x, $shift, $n - $shift) . substr($x, 0,\
    \ $shift);\n}", "    my $digits = length($x);\n    if ($shift >= $digits) {\n\
    \        return reverse($x);\n    }\n    my $left = substr($x, 0, $shift);\n \
    \   my $right = substr($x, $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $right = substr($x, $digits - $shift);\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    return $right . $left;\n}", "    my\
    \ $digits = length($x);\n    if ($shift > $digits) {\n        return scalar reverse\
    \ $x;\n    }\n    my $left = substr($x, 0, $shift);\n    my $right = substr($x,\
    \ $shift);\n    return $right . $left;\n}", "    my $n = length($x);\n    return\
    \ reverse($x) if $shift > $n;\n    return substr($x, $n - $shift) . substr($x,\
    \ 0, $n - $shift);\n}", "    my $n = length($x);\n    my $y = $x;\n    if ($shift\
    \ > $n) {\n        $y = reverse($y);\n    } else {\n        $y = substr($y, $shift)\
    \ . substr($y, 0, $shift);\n    }\n    return $y;\n}", "    my $n = length($x);\n\
    \    return reverse($x) if $shift > $n;\n    return substr($x, $shift, $n - $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "    my $n = length($x);\n    if ($shift >= $n) {\n        return reverse($x);\n\
    \    }\n    my $y = substr($x, $shift, $n - $shift);\n    $y .= substr($x, 0,\
    \ $shift);\n    return $y;\n}", "    my $len = length($x);\n    return reverse($x)\
    \ if $shift > $len;\n    return substr($x, $len - $shift) . substr($x, 0, $len\
    \ - $shift);\n}", "    my $n = length($x);\n    return reverse($x) if $shift >\
    \ $n;\n    return substr($x, $shift, $n - $shift) . substr($x, 0, $shift);\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}", " \
    \   my $digits = length($x);\n    $shift %= $digits;\n    if ($shift == 0) {\n\
    \        return $x;\n    } elsif ($shift > $digits) {\n        return reverse($x);\n\
    \    } else {\n        return substr($x, $shift) . substr($x, 0, $shift);\n  \
    \  }\n}", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ my $y = $x % 10**$shift;\n    return $y * 10**($digits-$shift) + int($x/10**$shift);\n\
    }", "    my $len = length($x);\n    return reverse($x) if $shift > $len;\n   \
    \ return substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n}", "    my\
    \ $digits = length($x);\n    if ($shift > $digits) {\n        return scalar reverse\
    \ $x;\n    }\n    return substr($x, $shift, $digits - $shift) . substr($x, 0,\
    \ $shift);\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    return scalar reverse $x if $shift > $digits;\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    else {\n\
    \        return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n\
    \    }\n}", "    my $n = length($x);\n    return reverse($x) if $shift > $n;\n\
    \    return substr($x, $shift, $n - $shift) . substr($x, 0, $shift);\n}", "  \
    \  my $s = $x;\n    my $n = length($x);\n    if ($shift >= $n) {\n        $s =\
    \ reverse($s);\n    } else {\n        $s = substr($s, $shift) . substr($s, 0,\
    \ $shift);\n    }\n    return $s;\n}", "    my $digits = length($x);\n    return\
    \ scalar reverse $x if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $digits = length($x);\n    if ($shift >= $digits) {\n\
    \        return reverse($x);\n    }\n    my $left = substr($x, 0, $shift);\n \
    \   my $right = substr($x, $shift);\n    return $right . $left;\n}", "    my $n\
    \ = length($x);\n    return $x if $shift == 0;\n    return reverse($x) if $shift\
    \ >= $n;\n    return substr($x, $shift, $n - $shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $y = substr($x, $shift) . substr($x, 0, $shift);\n    return $y;\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    my $y = $x;\n    $y =~ s/(\\d{$shift})(\\\
    d+)/$2$1/;\n    return $y;\n}", "    my $s = $x;\n    my $n = length($x);\n  \
    \  if ($shift > $n) {\n        $s = reverse($s);\n    } else {\n        $s = substr($s,\
    \ $shift) . substr($s, 0, $shift);\n    }\n    return $s;\n}", "    my $digits\
    \ = length($x);\n    $shift %= $digits;\n    return reverse($x) if $shift == 0;\n\
    \    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $y = substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n\
    \    return $y;\n}", "    my $n = length($x);\n    if ($shift > $n) {\n      \
    \  return reverse($x);\n    }\n    my $y = substr($x, $shift) . substr($x, 0,\
    \ $shift);\n    return $y;\n}", "    my $digits = length($x);\n    return scalar\
    \ reverse $x if $shift > $digits;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    return scalar reverse $x if $shift > $digits;\n    my $y\
    \ = $x * 10**$shift + int($x / 10**($digits - $shift));\n    return $y;\n}", " \
    \   my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n  \
    \  return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $y = $x % 10**$shift;\n\
    \    return $y . ($x - $y) / 10**$shift;\n}", "    my $digits = length($x);\n\
    \    return scalar reverse $x if $shift > $digits;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $len = length($x);\n    return reverse($x) if $shift\
    \ > $len;\n    my $y = substr($x, $len - $shift, $shift) . substr($x, 0, $len\
    \ - $shift);\n    return $y;\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $x_str\
    \ = $x;\n    my $x_len = length($x_str);\n    if ($shift > $x_len) {\n       \
    \ return reverse($x_str);\n    }\n    my $x_head = substr($x_str, 0, $x_len -\
    \ $shift);\n    my $x_tail = substr($x_str, $x_len - $shift);\n    return $x_tail\
    \ . $x_head;\n}", "    my $n = length($x);\n    $shift %= $n;\n    return scalar\
    \ reverse $x if $shift == 0;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "    my $len = length($x);\n    return $x if $shift == $len;\n    return $x\
    \ if $shift == 0;\n    return reverse($x) if $shift > $len;\n    my $y = substr($x,\
    \ $len - $shift, $shift);\n    $y .= substr($x, 0, $len - $shift);\n    return\
    \ $y;\n}", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}",
  "    my $n = length($x);\n    if ($shift >= $n) {\n        return scalar reverse\
    \ $x;\n    }\n    return substr($x, $shift, $n-$shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $front = substr($x, $shift);\n    my $back = substr($x, 0, $shift);\n\
    \    return $front . $back;\n}", "    my $digits = length($x);\n    $shift %=\
    \ $digits;\n    return reverse($x) if $shift == 0;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $str = reverse $x;\n    my $len = length $str;\n  \
    \  if ($shift > $len) {\n        return $str;\n    }\n    my $left = substr($str,\
    \ 0, $shift);\n    my $right = substr($str, $shift);\n    return reverse $right\
    \ . $left;\n}", "    my $n = length($x);\n    return $x if $shift == 0;\n    return\
    \ reverse($x) if $shift >= $n;\n    my $y = substr($x, $shift, $n - $shift);\n\
    \    $y .= substr($x, 0, $shift);\n    return $y;\n}", "    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "    my $len = length($x);\n    return reverse($x) if $shift >\
    \ $len;\n    return substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n\
    }", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}",
  "    my $n = length($x);\n    $shift %= $n;\n    return reverse($x) if $shift ==\
    \ 0;\n    return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right\
    \ = substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $str\
    \ = reverse $x;\n    $str = substr($str, 0, $shift) . substr($str, $shift);\n\
    \    return reverse $str;\n}", "    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $y = $x % 10**$shift;\n    $x = int($x / 10**$shift);\n\
    \    return $y . $x;\n}", "    my $digits = length($x);\n    return scalar reverse\
    \ $x if $shift > $digits;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $y = substr($x, $shift) . substr($x, 0, $shift);\n    return $y;\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}", " \
    \   my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n  \
    \  return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    else\
    \ {\n        return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n\
    \    }\n}", "    my $digits = length($x);\n    if ($shift > $digits) {\n     \
    \   return reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}", " \
    \   my $digits = length($x);\n    my $result = $x;\n    if ($shift < $digits)\
    \ {\n        $result = substr($x, $shift) . substr($x, 0, $shift);\n    }\n  \
    \  else {\n        $result = reverse($x);\n    }\n    return $result;\n}", " \
    \   my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n  \
    \  return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}", " \
    \   my $len = length($x);\n    return $x if $shift == $len;\n    return reverse($x)\
    \ if $shift > $len;\n    return substr($x, $shift, $len - $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length $x;\n    return scalar reverse $x\
    \ if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "  \
    \  my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n   \
    \ return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $n = length($x);\n\
    \    return reverse($x) if $shift > $n;\n    return substr($x, $shift, $n - $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    my $result\
    \ = $x;\n    if ($shift < $digits) {\n        $result = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    } else {\n        $result = reverse($x);\n    }\n    return\
    \ $result;\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x, 0,\
    \ $shift);\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $n = length $x;\n    return reverse $x if $shift\
    \ > $n;\n    return substr($x, $shift, $n-$shift) . substr($x, 0, $shift);\n}",
  "    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "    my $len = length($x);\n\
    \    if ($shift >= $len) {\n        return scalar reverse $x;\n    }\n    return\
    \ substr($x, $shift, $len - $shift) . substr($x, 0, $shift);\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $y = $x %\
    \ 10**$shift;\n    return $y . substr($x, 0, $digits - $shift);\n}", "    my $n\
    \ = length($x);\n    return reverse($x) if $shift > $n;\n    return substr($x,\
    \ $shift, $n - $shift) . substr($x, 0, $shift);\n}", "    my $len = length($x);\n\
    \    if ($shift > $len) {\n        return scalar reverse $x;\n    }\n    my $y\
    \ = substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n    return $y;\n\
    }", "    my $digits = length($x);\n    $shift %= $digits;\n    return reverse($x)\
    \ if $shift >= $digits;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "    my $digits = length($x);\n    my $y = $x;\n    if ($shift > $digits)\
    \ {\n        $y = reverse($x);\n    } else {\n        $y = substr($x, $shift,\
    \ $digits - $shift) . substr($x, 0, $shift);\n    }\n    return $y;\n}", "   \
    \ my $n = length($x);\n    return scalar reverse $x if $shift > $n;\n    return\
    \ substr($x, $shift, $n - $shift) . substr($x, 0, $shift);\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}", "    my $n = length($x);\n    $shift %=\
    \ $n;\n    return reverse($x) if $shift == 0;\n    return substr($x, $shift, $n\
    \ - $shift) . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    return\
    \ scalar reverse $x if $shift > $digits;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x, 0,\
    \ $shift);\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $y = $x % (10 ** $shift);\n    return $y . int($x / (10 **\
    \ $shift));\n}", "    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right =\
    \ substr($x, $digits - $shift);\n    return $right . $left;\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $y = $x %\
    \ 10**$shift;\n    return $y . substr($x, 0, $digits - $shift);\n}", "    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $y = $x %\
    \ (10 ** $shift);\n    return $y . int($x / (10 ** $shift));\n}", "    my $digits\
    \ = length($x);\n    if ($shift >= $digits) {\n        return scalar reverse $x;\n\
    \    }\n    my $left = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n\
    \    return $right . $left;\n}", "    my $digits = reverse(split(//, $x));\n \
    \   my $len = scalar(@$digits);\n    if ($shift > $len) {\n        return join('',\
    \ @$digits);\n    }\n    my @shifted = @$digits[$shift..$len-1];\n    push(@shifted,\
    \ @$digits[0..$shift-1]);\n    return join('', @shifted);\n}", "    my $digits\
    \ = length($x);\n    $shift %= $digits;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}", "    my $digits = length($x);\n    $shift %= $digits;\n   \
    \ return reverse($x) if $shift == 0;\n    return reverse(substr($x, $shift) .\
    \ substr($x, 0, $shift));\n}", "    my $digits = length($x);\n    my $result =\
    \ $x;\n    if ($shift > $digits) {\n        $result = reverse($result);\n    }\
    \ else {\n        $result = substr($result, $shift) . substr($result, 0, $shift);\n\
    \    }\n    return $result;\n}", "    my $digits = length($x);\n    if ($shift\
    \ >= $digits) {\n        return reverse($x);\n    }\n    my $y = substr($x, $shift)\
    \ . substr($x, 0, $shift);\n    return $y;\n}", "    my $digits = length($x);\n\
    \    return scalar reverse $x if $shift > $digits;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $y = $x;\n    $y =~ s/^(.{$shift})(.*)$/$2$1/;\n \
    \   return $y;\n}", "    my $digits = length($x);\n    if ($shift >= $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $y = substr($x, $shift,\
    \ $digits - $shift) . substr($x, 0, $shift);\n    return $y;\n}", "    my $digits\
    \ = length($x);\n    $shift %= $digits;\n    return reverse($x) if $shift == 0;\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}", "    my $x_str =\
    \ \"$x\";\n    my $len = length($x_str);\n    return $x_str if $shift >= $len;\n\
    \    return reverse($x_str) if $shift == 0;\n    return substr($x_str, $shift,\
    \ $len-$shift) . substr($x_str, 0, $shift);\n}", "    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n    return\
    \ $right . $left;\n}", "    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $y = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    return $y;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
