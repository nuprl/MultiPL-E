language: pl
name: HumanEval_49_modp
results:
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpthnoz2md.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpthnoz2md.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r =\
    \ ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r = ($r *\
    \ $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $p =\
    \ ($p * $p) % $M;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpqa7g8kel.pl line 11.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($t) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2) {\n\t    $r = ($r * $t) % $p;\n\t}\n\t$t = ($t * $t) % $p;\n\t$n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $t = modp($n\
    \ >> 1, $p);\n    $t = ($t * $t) % $p;\n    $t = ($t * 2) % $p if $n & 1;\n  \
    \  return $t;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$r = ($r * $r) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n    }\n    return $r;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$b = ($b * $b) % $p;\n\t$n = int($n\
    \ / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    for (my($i) = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    my $r = 1;\n    my $b = 2;\n    while\
    \ ($n > 0) {\n        $r = ($r * $b) % $p if $n & 1;\n        $n >>= 1;\n    \
    \    $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n) {\n\tif ($n & 1) {\n\t    $r = ($r\
    \ * 2) % $p;\n\t}\n\t$n >>= 1;\n\t$p = ($p * $p) % $p;\n    }\n    return $r;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpg_hmmc04.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n < 0;\n    return 1 if $n == 0;\n    my $res =\
    \ 1;\n    my $sq = $p;\n    while ($n > 0) {\n\tif ($n & 1) {\n\t    $res = ($res\
    \ * $sq) % $p;\n\t}\n\t$sq = ($sq * $sq) % $p;\n\t$n >>= 1;\n    }\n    return\
    \ $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n        if ($n\
    \ & 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n   \
    \     $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2 == 1) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$b = ($b * $b) % $p;\n\t$n =\
    \ int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$r = ($r * $r) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2 == 1) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$b = ($b * $b) % $p;\n\t$n =\
    \ int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpoqaucap0.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r =\
    \ ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r = ($r *\
    \ $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpthnoz2md.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpthnoz2md.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    my $r = 1;\n    while ($n > 0) {\n\
    \        $r = ($r * 2) % $p if $n % 2;\n        $n = int($n / 2);\n    }\n   \
    \ return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $x = modp($n\
    \ >> 1, $p);\n    $x = ($x * $x) % $p;\n    $x = ($x * 2) % $p if $n & 1;\n  \
    \  return $x;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2 == 1) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$b = ($b * $b) % $p;\n\t$n =\
    \ int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 1 if $n == 0;\n    return 0 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($t) = 1;\n    for (my $k = 1; $k <= $n; $k++) {\n\t$t = ($t\
    \ * 2) % $p;\n    }\n    return $t;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return modp($n\
    \ >> 1, $p) ** 2 % $p if $n % 2 == 0;\n    return modp($n >> 1, $p) ** 2 * 2 %\
    \ $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($t) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $t) % $p;\n\t}\n\t$t = ($t * $t) % $p;\n\t$n >>= 1;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $x = modp($n\
    \ >> 1, $p);\n    $x = ($x * $x) % $p;\n    $x = ($x * 2) % $p if $n & 1;\n  \
    \  return $x;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r =\
    \ ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$r = ($r * $r) % $p;\n    }\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2 == 1) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$b = ($b * $b) % $p;\n\t$n =\
    \ int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $m = modp($n\
    \ >> 1, $p);\n    $m = ($m * $m) % $p;\n    $m = ($m * 2) % $p if $n & 1;\n  \
    \  return $m;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $p =\
    \ ($p * $p) % $M;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpqa7g8kel.pl line 11.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($t) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $t) % $p;\n\t}\n\t$t = ($t * $t) % $p;\n\t$n >>= 1;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$r = ($r * $r) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n) {\n\tif ($n & 1) {\n\t    $r = ($r\
    \ * 2) % $p;\n\t}\n\t$n >>= 1;\n\t$p = ($p * $p) % $p;\n    }\n    return $r;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n  \
    \      if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpg_hmmc04.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    for (my($i) = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n\
    \            $r = ($r * 2) % $p;\n        }\n        $n = int($n / 2);\n     \
    \   $r = ($r * $r) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n        if ($n\
    \ & 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n   \
    \     $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n        $r = ($r * 2) % $p\
    \ if $n % 2;\n        $n = int($n/2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2 == 1) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$b = ($b * $b) % $p;\n\t$n =\
    \ int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $t = modp($n\
    \ >> 1, $p);\n    $t = ($t * $t) % $p;\n    $t = ($t * 2) % $p if $n & 1;\n  \
    \  return $t;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n    }\n    return $r;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n     \
    \   if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n\tif ($n & 1) {\n\
    \t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n    }\n\
    \    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n) {\n\tif ($n & 1) {\n\t    $r = ($r\
    \ * 2) % $p;\n\t}\n\t$n >>= 1;\n\t$p = ($p * $p) % MODULUS;\n    }\n    return\
    \ $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpk27iytz9.pl line 10.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r =\
    \ ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r = ($r *\
    \ $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    for (my($i) = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n) {\n\tif ($n & 1) {\n\t    $r = ($r\
    \ * 2) % $p;\n\t}\n\t$n >>= 1;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$r = ($r * $r) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r =\
    \ ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r = ($r *\
    \ $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n        if ($n\
    \ & 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n   \
    \     $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n        if ($n\
    \ & 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n   \
    \     $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $p =\
    \ ($p * $p) % $M;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpqa7g8kel.pl line 11.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r =\
    \ ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r = ($r *\
    \ $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n        if ($n\
    \ & 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n   \
    \     $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $k = 1; $k <= $n; $k++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2 == 1) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$b = ($b * $b) % $p;\n\t$n =\
    \ int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpthnoz2md.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpthnoz2md.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $p =\
    \ ($p * $p) % $M;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpqa7g8kel.pl line 11.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$r = ($r * $r) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if $n\
    \ % 2;\n\t$n = int($n / 2);\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return $n if $n < $p;\n    return 0 if $n == $p;\n    return\
    \ 1 if $n == $p+1;\n    my $r = $n % $p;\n    return $r*2 % $p if $n % 2 == 0;\n\
    \    return ($r*2-$p) % $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n > 0) {\n\tif ($n\
    \ % 2 == 1) {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$b = ($b * $b) % $p;\n\t$n =\
    \ int($n / 2);\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r =\
    \ ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r = ($r *\
    \ $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    my($b) = 2;\n    while ($n) {\n\tif ($n & 1)\
    \ {\n\t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r\
    \ = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r = ($r\
    \ * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n\tif ($n & 1) {\n\
    \t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n    }\n\
    \    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return modp($n\
    \ >> 1, $p) ** 2 % $p if $n % 2 == 0;\n    return modp($n >> 1, $p) ** 2 * 2 %\
    \ $p;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&modp;\n\
    \        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n\tif ($n & 1) {\n\
    \t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n    }\n\
    \    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n) {\n\t$r = ($r * 2) % $p if $n & 1;\n\
    \t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    for (my $i = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 1) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpthnoz2md.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t \
    \   $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$r = ($r * $r) % $p;\n  \
    \  }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    while ($n > 0) {\n\t$r = ($r * 2) % $p if ($n\
    \ & 1);\n\t$n >>= 1;\n    }\n    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n > 0) {\n        if\
    \ ($n % 2) {\n            $r = ($r * $b) % $p;\n        }\n        $n = int($n\
    \ / 2);\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n\tif ($n & 1) {\n\
    \t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n    }\n\
    \    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    my $b = 2;\n    while ($n) {\n\tif ($n & 1) {\n\
    \t    $r = ($r * $b) % $p;\n\t}\n\t$n >>= 1;\n\t$b = ($b * $b) % $p;\n    }\n\
    \    $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1101, 101),2))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(3, 11),8)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(100, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30,\
    \ 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(31, 5),3)) {\n        print \"ok!\" }else{\n     \
    \   exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2) {\n\t    $r =\
    \ ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r = ($r *\
    \ $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    my $r = modp($n\
    \ >> 1, $p);\n    $r = ($r * $r) % $p;\n    $r = ($r * 2) % $p if $n & 1;\n  \
    \  return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 255
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\t$p = ($p * $p) % $p;\n   \
    \ }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Illegal modulus zero at /tmp/tmpthnoz2md.pl line 7.

    '
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return modp($n/2,\
    \ $p)**2 % $p if $n % 2 == 0;\n    return modp($n-1, $p) * 2 % $p;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(1101, 101),2)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(0, 101),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
    \ 11),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->(100, 101),1)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(30, 5),4)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(31,\
    \ 5),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013723
- exit_code: 1
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my $r = 1;\n    while ($n > 0) {\n\tif ($n % 2 == 1) {\n\t  \
    \  $r = ($r * 2) % $p;\n\t}\n\t$n = int($n / 2);\n\tif ($n > 0) {\n\t    $r =\
    \ ($r * $r) % $p;\n\t}\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013723
- exit_code: 0
  program: "# Return 2^n modulo p (be aware of numerics).\nsub modp {\n    my($n,\
    \ $p) = @_;\n    my($r) = 1;\n    for (my($i) = 0; $i < $n; $i++) {\n\t$r = ($r\
    \ * 2) % $p;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&modp;\n        if(eq_deeply($candidate->(3, 5),3))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1101,\
    \ 101),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(0, 101),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(3, 11),8)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100,\
    \ 101),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(30, 5),4)) {\n        print \"ok!\" }else{\n   \
    \     exit 1;\n        }\n        if(eq_deeply($candidate->(31, 5),3)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660013723
