language: pl
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $uniq = uniq_chars($word);\n        if ($uniq > $max) {\n    \
    \        $max = $uniq;\n            $max_word = $word;\n        }\n    }\n   \
    \ return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::uniq_chars called at /tmp/tmpuu6y146u.pl line
    10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = count_unique($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique($word);\n    \
    \    if ($count > $max_count) {\n            $max_count = $count;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpx3coh_dx.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmptkhf3p31.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmptkhf3p31.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    for my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpy0wgfow_.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    for my $word (@$words)\
    \ {\n        my $unique = uniq_chars($word);\n        if ($unique > $max) {\n\
    \            $max = $unique;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::uniq_chars called at /tmp/tmp1xae7tbv.pl line
    10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $chars = {};\n        for my $char (split //, $word) {\n     \
    \       $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $unique = unique_chars($word);\n        if ($unique > $max) {\n\
    \            $max = $unique;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::unique_chars called at /tmp/tmpvozu9dvn.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    for my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpy0wgfow_.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmptkhf3p31.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $char (split //, $word) {\n \
    \           $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $uniq = uniq_chars($word);\n        if ($uniq > $max) {\n    \
    \        $max = $uniq;\n            $max_word = $word;\n        }\n    }\n   \
    \ return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::uniq_chars called at /tmp/tmpuppvecrv.pl line
    10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_unique = 0;\n    for my $word (@$words)\
    \ {\n        my %seen;\n        my $unique = 0;\n        for my $char (split //,\
    \ $word) {\n            if (!$seen{$char}) {\n                $unique++;\n   \
    \             $seen{$char} = 1;\n            }\n        }\n        if ($unique\
    \ > $max_unique) {\n            $max_unique = $unique;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %seen;\n        my $unique = 0;\n        foreach my $char (split\
    \ //, $word) {\n            $unique++ if !$seen{$char}++;\n        }\n       \
    \ if ($unique > $max) {\n            $max = $unique;\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $num_chars = scalar keys %chars;\n\
    \        if ($num_chars > $max) {\n            $max = $num_chars;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $char (split //, $word) {\n \
    \           $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp67qge0tn.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $num_chars = scalar keys %chars;\n\
    \        if ($num_chars > $max) {\n            $max = $num_chars;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpkk4apxur.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $c (split //, $word) {\n    \
    \        $chars->{$c} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp67qge0tn.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %seen;\n        my $count = 0;\n        for my $char (split //,\
    \ $word) {\n            $count++ if !$seen{$char}++;\n        }\n        if ($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %seen;\n        for my $char (split //, $word) {\n           \
    \ $seen{$char} = 1;\n        }\n        my $count = scalar keys %seen;\n     \
    \   if ($count > $max) {\n            $max = $count;\n            $max_word =\
    \ $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    foreach\
    \ my $word (@$words) {\n        my $count = count_unique($word);\n        if ($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp3bxhc6ac.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %seen;\n        for my $c (split //, $word) {\n            $seen{$c}\
    \ = 1;\n        }\n        my $count = scalar keys %seen;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    for my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpy0wgfow_.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = count_unique($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique($word);\n    \
    \    if ($count > $max_count) {\n            $max_count = $count;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpx3coh_dx.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $char (split //, $word) {\n \
    \           $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $unique = unique_chars($word);\n        if ($unique > $max) {\n\
    \            $max = $unique;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::unique_chars called at /tmp/tmpnsn491jl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = count_unique($max_word);\n\
    \    foreach my $word (@$words) {\n        my $count = count_unique($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpx7mxsqp5.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $uniq = uniq_chars($word);\n        if ($uniq > $max) {\n    \
    \        $max = $uniq;\n            $max_word = $word;\n        }\n    }\n   \
    \ return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::uniq_chars called at /tmp/tmp9vhr4p3o.pl line
    10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    for my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpy0wgfow_.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    for my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpy0wgfow_.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $num_chars = scalar keys %chars;\n\
    \        if ($num_chars > $max) {\n            $max = $num_chars;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $char (split //, $word) {\n \
    \           $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my %chars;\n        foreach my $char (split //, $word)\
    \ {\n            $chars{$char} = 1;\n        }\n        my $count = scalar keys\
    \ %chars;\n        if ($count > $max_count) {\n            $max_count = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n \
    \       if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $chars = {};\n        for my $char (split //, $word) {\n     \
    \       $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $unique = unique_chars($word);\n        if ($unique > $max) {\n\
    \            $max = $unique;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::unique_chars called at /tmp/tmpvozu9dvn.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %seen;\n        for my $c (split //, $word) {\n            $seen{$c}\
    \ = 1;\n        }\n        my $count = scalar keys %seen;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %seen;\n        my $count = 0;\n        for my $char (split //,\
    \ $word) {\n            $count++ if !$seen{$char}++;\n        }\n        if ($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my %chars;\n        foreach my $char (split //, $word)\
    \ {\n            $chars{$char} = 1;\n        }\n        my $count = scalar keys\
    \ %chars;\n        if ($count > $max_count) {\n            $max_count = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n \
    \       if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $char (split //, $word) {\n \
    \           $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmptkhf3p31.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp67qge0tn.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %seen;\n        my $count = 0;\n        for my $c (split //, $word)\
    \ {\n            $count++ if !$seen{$c}++;\n        }\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\",\
    \ \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %seen;\n        for my $c (split //, $word) {\n            $seen{$c}\
    \ = 1;\n        }\n        my $count = scalar keys %seen;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp67qge0tn.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $chars = {};\n        for my $char (split //, $word) {\n     \
    \       $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $char (split //, $word) {\n \
    \           $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = count_unique_chars($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique_chars called at /tmp/tmpbvrar69h.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my %chars;\n        @chars{split //, $word} = ();\n   \
    \     my $count = scalar keys %chars;\n        if ($count > $max_count) {\n  \
    \          $max_count = $count;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\",\
    \ \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $c (split(//, $word)) {\n            $chars{$c}\
    \ = 1;\n        }\n        my $count = scalar(keys %chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my($max_word, $max_count) = ('', 0);\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpmr1ngnhk.pl
    line 9.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        @chars{split //, $word} = ();\n        my $count\
    \ = scalar keys %chars;\n        if ($count > $max) {\n            $max = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n \
    \       if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $unique = unique_chars($word);\n        if ($unique > $max) {\n\
    \            $max = $unique;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::unique_chars called at /tmp/tmpdof6_dx6.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmppd36g00f.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = count_unique($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique($word);\n    \
    \    if ($count > $max_count) {\n            $max_count = $count;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpx3coh_dx.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    for my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpy0wgfow_.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $chars = {};\n        foreach my $char (split //, $word) {\n \
    \           $chars->{$char} = 1;\n        }\n        my $count = scalar keys %$chars;\n\
    \        if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpfm7s76vm.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = count_unique($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique($word);\n    \
    \    if ($count > $max_count) {\n            $max_count = $count;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpx3coh_dx.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpcttvx7di.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    for my $word (@$words)\
    \ {\n        my %count;\n        for my $char (split //, $word) {\n          \
    \  $count{$char}++;\n        }\n        my $num_unique = scalar keys %count;\n\
    \        if ($num_unique > $max) {\n            $max = $num_unique;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp67qge0tn.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my($max_word, $max_count) = ('', 0);\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpnm91qtub.pl
    line 9.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    foreach\
    \ my $word (@$words) {\n        my $count = count_unique($word);\n        if ($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp3bxhc6ac.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %seen;\n        for my $c (split //, $word) {\n            $seen{$c}\
    \ = 1;\n        }\n        my $count = scalar keys %seen;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    for my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpy0wgfow_.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    foreach\
    \ my $word (@$words) {\n        my $count = count_unique($word);\n        if ($count\
    \ > $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp3bxhc6ac.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $c (split //, $word) {\n            $chars{$c}\
    \ = 1;\n        }\n        my $count = scalar keys %chars;\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $max_word = $word;\n    \
    \    }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my %chars;\n        foreach my $char (split //, $word)\
    \ {\n            $chars{$char} = 1;\n        }\n        my $count = scalar keys\
    \ %chars;\n        if ($count > $max_count) {\n            $max_count = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n \
    \       if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $uniq = uniq_chars($word);\n        if ($uniq > $max) {\n    \
    \        $max = $uniq;\n            $max_word = $word;\n        }\n    }\n   \
    \ return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::uniq_chars called at /tmp/tmp9vhr4p3o.pl line
    10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my %counts;\n    my $max = 0;\n    my $max_word = '';\n    foreach\
    \ my $word (@$words) {\n        my %seen;\n        foreach my $char (split //,\
    \ $word) {\n            $seen{$char} = 1;\n        }\n        my $count = scalar\
    \ keys %seen;\n        if ($count > $max) {\n            $max = $count;\n    \
    \        $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %seen;\n        my $count = 0;\n        for my $c (split //, $word)\
    \ {\n            $count++ if !$seen{$c}++;\n        }\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\",\
    \ \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $uniq = uniq_chars($word);\n        if ($uniq > $max) {\n    \
    \        $max = $uniq;\n            $max_word = $word;\n        }\n    }\n   \
    \ return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::uniq_chars called at /tmp/tmp9vhr4p3o.pl line
    10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max_count) {\n            $max_count = $count;\n        \
    \    $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = 0;\n    for my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmpy0wgfow_.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = \"\";\n    for my $word (@$words)\
    \ {\n        my %chars;\n        for my $char (split //, $word) {\n          \
    \  $chars{$char} = 1;\n        }\n        my $count = scalar keys %chars;\n  \
    \      if ($count > $max) {\n            $max = $count;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        foreach my $char (split //, $word) {\n      \
    \      $chars{$char} = 1;\n        }\n        my $num_chars = scalar keys %chars;\n\
    \        if ($num_chars > $max) {\n            $max = $num_chars;\n          \
    \  $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp6na9x4td.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = $words->[0];\n    my $max_count = count_unique_chars($max_word);\n\
    \    for my $word (@$words) {\n        my $count = count_unique_chars($word);\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"\
    name\", \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\"\
    , \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique_chars called at /tmp/tmpbvrar69h.pl
    line 8.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my $count = count_unique($word);\n        if ($count > $max) {\n\
    \            $max = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp0i_3dpvl.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 255
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = \"\";\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my $count = count_unique($word);\n        if ($count >\
    \ $max_count) {\n            $max_count = $count;\n            $max_word = $word;\n\
    \        }\n    }\n    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&find_max;\n        if(eq_deeply($candidate->([\"name\"\
    , \"of\", \"string\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"\
    ]),\"enam\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    abc\", \"cba\"]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"\
    of\", \"footbott\"]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\"\
    , \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\",\
    \ \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"\
    ]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"play\", \"play\"\
    , \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::count_unique called at /tmp/tmp67qge0tn.pl
    line 10.

    '
  stdout: ''
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    foreach my $word\
    \ (@$words) {\n        my %chars;\n        foreach my $char (split(//, $word))\
    \ {\n            $chars{$char} = 1;\n        }\n        my $count = scalar(keys\
    \ %chars);\n        if ($count > $max_count) {\n            $max_count = $count;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n \
    \       if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\"\
    , \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
    , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\"\
    , \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
- exit_code: 1
  program: "# Write a function that accepts a list of strings.\n# The list contains\
    \ different words. Return the word with maximum number\n# of unique characters.\
    \ If multiple strings have maximum number of unique\n# characters, return the\
    \ one which comes first in lexicographical order.\nsub find_max {\n    my($words)\
    \ = @_;\n    my $max_word = '';\n    my $max_count = 0;\n    for my $word (@$words)\
    \ {\n        my %chars;\n        $chars{$_} = 1 for split //, $word;\n       \
    \ my $count = scalar keys %chars;\n        if ($count > $max_count) {\n      \
    \      $max_count = $count;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&find_max;\n        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"\
    ]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"name\", \"enam\", \"game\"]),\"enam\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"cba\"\
    ]),\"abc\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]),\"footbott\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"we\", \"are\", \"gonna\", \"rock\"]),\"\
    gonna\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([\"we\", \"are\", \"a\", \"mad\", \"nation\"]),\"\
    nation\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([\"this\", \"is\", \"a\", \"prrk\"]),\"this\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    b\"]),\"b\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([\"play\", \"play\", \"play\"]),\"play\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660014589
