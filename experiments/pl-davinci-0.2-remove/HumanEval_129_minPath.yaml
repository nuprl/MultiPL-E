name: HumanEval_129_minPath
language: pl
prompt: "# Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n# each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have\
  \ to find the minimum path of length k in the grid. You can start\n# from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n# in other words,\
  \ you can go to cells which share an edge with you current\n# cell.\n# Please note\
  \ that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n\
  # You CANNOT go off the grid.\n# A path A (of length k) is considered less than\
  \ a path B (of length k) if\n# after making the ordered lists of the values on the\
  \ cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n# than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j]\
  \ = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered\
  \ list of the values on the cells that the minimum path go through.\n# Examples:\n\
  sub minPath {\n    my($grid, $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minPath;\n\
  \        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1, 2,\
  \ 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5,\
  \ 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1])) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6,\
  \ 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10,\
  \ 1, 10, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3,\
  \ 10, 11, 16]], 5),[1, 7, 1, 7, 1])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([[11, 8, 7, 2], [5, 16, 14, 4],\
  \ [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12,\
  \ 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1,\
  \ 6, 1, 6, 1, 6, 1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1,\
  \ 3, 1, 3, 1, 3, 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1,\
  \ 5, 1, 5, 1, 5, 1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]], 10),[1, 2, 1, 2, 1,\
  \ 2, 1, 2, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([[1, 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3,\
  \ 1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n \
    \   my $min_path = [];\n    my $min_sum = $n * $m * $n * $m;\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n\
    \            my $sum = 0;\n            my $visited = {};\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum, $visited, $min_path, $min_sum);\n        }\n    }\n\
    \    return $min_path;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $min = $grid->[$i][$j]\
    \ if $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j]\
    \ > $max;\n        }\n    }\n    my $min_path = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [$grid->[$i][$j]];\n\
    \            my $visited = {};\n            $visited->{\"$i,$j\"} = 1;\n     \
    \       dfs($grid, $i, $j, $path, $visited, $min_path, $k, $min, $max);\n    \
    \    }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n        \
    \    for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n    \
    \        }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n       \
    \ }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n\
    \            for my $j (0 .. $m - 1) {\n                my $min = [];\n      \
    \          if ($i > 0) {\n                    my $up = $dp->[$i - 1][$j][$l -\
    \ 1];\n                    if (!@$min || $up->[0] < $min->[0]) {\n           \
    \             $min = $up;\n                    }\n                }\n        \
    \        if ($j > 0) {\n                    my $left = $dp->[$i][$j - 1][$l -\
    \ 1];\n                    if (!@$min || $left->[0] < $min->[0]) {\n         \
    \               $min = $left;\n                    }\n                }\n    \
    \            if ($i < $n - 1) {\n                    my $down = $dp->[$i + 1][$j][$l\
    \ - 1];\n                    if (!@$min || $down->[0] < $min->[0]) {\n       \
    \                 $min = $down;\n                    }\n                }\n  \
    \              if ($j < $m - 1) {\n                    my $right = $dp->[$i][$j\
    \ + 1][$l - 1];\n                    if (!@$min || $right->[0] < $min->[0]) {\n\
    \                        $min = $right;\n                   ", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my $minSum = $n * $m *\
    \ $k;\n    my $minPathSum = $minSum;\n    my $minPathSum2 = $minSum;\n    my $minPathSum3\
    \ = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPathSum5 = $minSum;\n\
    \    my $minPathSum6 = $minSum;\n    my $minPathSum7 = $minSum;\n    my $minPathSum8\
    \ = $minSum;\n    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n\
    \    my $minPathSum11 = $minSum;\n    my $minPathSum12 = $minSum;\n    my $minPathSum13\
    \ = $minSum;\n    my $minPathSum14 = $minSum;\n    my $minPathSum15 = $minSum;\n\
    \    my $minPathSum16 = $minSum;\n    my $minPathSum17 = $minSum;\n    my $minPathSum18\
    \ = $minSum;\n    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n\
    \    my $minPathSum21 = $minSum;\n    my $minPathSum22 = $minSum;\n    my $minPathSum23\
    \ = $minSum;\n    my $minPathSum24 = $minSum;\n    my $minPathSum25 = $minSum;\n\
    \    my $minPathSum26 = $minSum;\n    my $minPathSum27 = $minSum;\n    my $minPathSum28\
    \ = $minSum;\n    my $minPathSum29 = $minSum;\n    my $minPathSum30 = $minSum;\n\
    \    my $minPathSum31 = $minSum;\n    my $minPathSum32 = $minSum;\n    my $minPathSum33\
    \ = $minSum;\n    my $minPathSum34 = $minSum;\n    my $minPathSum35 = $minSum;\n\
    \    my $minPathSum36 =", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n \
    \   my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min = [];\n\
    \    for my $i (0..$k-1) {\n        $min->[$i] = 1000000;\n    }\n    my $min_path\
    \ = [];\n    for my $i (0..$k-1) {\n        $min_path->[$i] = -1;\n    }\n   \
    \ my $path = [];\n    for my $i (0..$k-1) {\n        $path->[$i] = -1;\n    }\n\
    \    my $path_len = 0;\n    my $min_path_len = 0;\n    my $min_path_sum = 0;\n\
    \    my $path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n\
    \    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum =\
    \ 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n", "    my $n =\
    \ scalar(@$grid);\n    my @dp;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $n - 1) {\n            $dp[$i][$j] = [];\n        }\n    }\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n            my $val\
    \ = $grid->[$i][$j];\n            my @neighbors = ();\n            if ($i > 0)\
    \ {\n                push @neighbors, [$i - 1, $j];\n            }\n         \
    \   if ($i < $n - 1) {\n                push @neighbors, [$i + 1, $j];\n     \
    \       }\n            if ($j > 0) {\n                push @neighbors, [$i, $j\
    \ - 1];\n            }\n            if ($j < $n - 1) {\n                push @neighbors,\
    \ [$i, $j + 1];\n            }\n            for my $neighbor (@neighbors) {\n\
    \                my($ni, $nj) = @$neighbor;\n                my $nval = $grid->[$ni][$nj];\n\
    \                if ($nval < $val) {\n                    push @{$dp[$i][$j]},\
    \ @{$dp[$ni][$nj]};\n                }\n            }\n            push @{$dp[$i][$j]},\
    \ $val;\n        }\n    }\n    my @res = ();\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $n - 1) {\n            if (@{$dp[$i][$j]} == $k) {\n\
    \                if (!@res || $dp[$i][$j] lt \\@res) {\n                    @res\
    \ = @{$dp[$i][$j]};\n                }\n            }\n        }\n    }\n    return\
    \ \\@res;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $tmp = [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n                  \
    \  if (scalar(@$min) == 0 || $tmp lt $min) {\n                        $min = $tmp;\n\
    \                    }\n                }\n                if ($i < $n - 1) {\n\
    \                    my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (scalar(@$min) == 0 || $tmp lt $min) {\n             \
    \           $min = $tmp;\n                    }\n                }\n         \
    \       if ($j > 0) {\n                    my $tmp = [@{$dp->[$i][$j - 1][$l -\
    \ 1]}, $grid->[$i][$j]];\n                    if (scalar(@$min) == 0 || $tmp lt\
    \ $min) {\n                        $min = $tmp;\n                    }\n     \
    \           }\n                if ($j < $m - 1) {\n                    my $tmp\
    \ = [", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n   \
    \ my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
    \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n   \
    \     }\n    }\n    my $res = [];\n    for my $i (0..$n-1) {\n        for my $j\
    \ (0..$m-1) {\n            my $path = [$grid->[$i][$j]];\n            my $visited\
    \ = {};\n            $visited->{\"$i,$j\"} = 1;\n            dfs($grid, $i, $j,\
    \ $k, $path, $visited, $res);\n        }\n    }\n    return $res;\n}", "    my\
    \ $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for my\
    \ $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min = [];\n    my $min_sum = $n * $m * $k;\n\
    \    my $min_path = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            my $path = [];\n            my $sum = 0;\n            my $visited\
    \ = [];\n            for my $i (0..$n-1) {\n                for my $j (0..$m-1)\
    \ {\n                    $visited->[$i][$j] = 0;\n                }\n        \
    \    }\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n         \
    \   if ($sum < $min_sum) {\n                $min_sum = $sum;\n               \
    \ $min_path = $path;\n            }\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
    \ = {};\n    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSum2\
    \ = $n * $n * $k;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $n * $k;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $n * $k;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $n * $k;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $n * $k;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $n * $k;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $n * $k;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $n * $k;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $n * $k;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $n * $k;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $n * $k;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $n * $k;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $n * $k;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $n * $k;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $n * $k;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $n * $k;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $n *", "    my $n = scalar(@$grid);\n   \
    \ my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n    \
    \        for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n\
    \            }\n        }\n    }\n    $dp->[0][0][0] = [$grid->[0][0]];\n    for\
    \ my $l (1 .. $k - 1) {\n        $dp->[0][0][$l] = [$grid->[0][0]];\n    }\n \
    \   for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n           \
    \ for my $l (1 .. $k - 1) {\n                if ($i > 0) {\n                 \
    \   my $prev = $dp->[$i - 1][$j][$l - 1];\n                    if (scalar(@$prev)\
    \ > 0) {\n                        my $curr = [@$prev, $grid->[$i][$j]];\n    \
    \                    if (scalar(@{$dp->[$i][$j][$l]}) == 0 ||\n              \
    \              $curr lt $dp->[$i][$j][$l]) {\n                            $dp->[$i][$j][$l]\
    \ = $curr;\n                        }\n                    }\n               \
    \ }\n                if ($j > 0) {\n                    my $prev = $dp->[$i][$j\
    \ - 1][$l - 1];\n                    if (scalar(@$prev) > 0) {\n             \
    \           my $curr = [@$prev, $grid->[$i][$j]];\n                        if\
    \ (scalar(@{$dp->[$i][$j][$l]}) == 0 ||\n                            $curr lt\
    \ $dp->[$i][$j][$l]) {\n                            $dp->[$i", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for (0..$n-1)\
    \ {\n        for (0..$m-1) {\n            $visited->[$_][$_] = 0;\n        }\n\
    \    }\n    my $minPath = [];\n    my $minSum = $n * $m * $k;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n \
    \   my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n \
    \   my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n \
    \   my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n \
    \   my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n \
    \   my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n \
    \   my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum = $minSum;\n    my $minPathSum = $minSum;\n \
    \   my $minPathSum", "    my $n = scalar(@$grid);\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[$n - 1][$n - 1];\n    my $minPath = [$min];\n    my $minPaths\
    \ = {};\n    my $minPathsByMin = {};\n    my $minPathsByMax = {};\n    my $minPathsBySum\
    \ = {};\n    my $minPathsBySumMin = {};\n    my $minPathsBySumMax = {};\n    my\
    \ $minPathsBySumMinMax = {};\n    my $minPathsBySumMinMaxK = {};\n    my $minPathsBySumMinMaxKMin\
    \ = {};\n    my $minPathsBySumMinMaxKMax = {};\n    my $minPathsBySumMinMaxKMinMax\
    \ = {};\n    my $minPathsBySumMinMaxKMinMaxSum = {};\n    my $minPathsBySumMinMaxKMinMaxSumMin\
    \ = {};\n    my $minPathsBySumMinMaxKMinMaxSumMax = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMax\
    \ = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMaxK = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMaxKMin\
    \ = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMaxKMax = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMaxKMinMax\
    \ = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMaxKMinMaxSum = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMaxKMinMaxSumMin\
    \ = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMaxKMinMaxSumMax = {};\n    my\
    \ $minPathsBySumMinMaxKMinMaxSumMinMaxKMinMaxSumMinMax = {};\n    my $minPathsBySumMinMaxKMinMaxSumMinMaxKMinMaxSumMinMaxK\
    \ = {};\n    my $minPathsBySumMinMaxKMin", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for (0..$n-1) {\n  \
    \      for (0..$m-1) {\n            $visited->[$_][$_] = 0;\n        }\n    }\n\
    \    my $minPath = [];\n    my $minSum = 0;\n    for (0..$n-1) {\n        for\
    \ (0..$m-1) {\n            my $path = [];\n            my $sum = 0;\n        \
    \    my $visited = [];\n            for (0..$n-1) {\n                for (0..$m-1)\
    \ {\n                    $visited->[$_][$_] = 0;\n                }\n        \
    \    }\n            my $res = dfs($grid, $_, $_, $k, $path, $sum, $visited);\n\
    \            if ($res->[0] == 1) {\n                if ($minSum == 0) {\n    \
    \                $minSum = $res->[1];\n                    $minPath = $res->[2];\n\
    \                } elsif ($res->[1] < $minSum) {\n                    $minSum\
    \ = $res->[1];\n                    $minPath = $res->[2];\n                } elsif\
    \ ($res->[1] == $minSum) {\n                    my $i = 0;\n                 \
    \   while ($i < $k) {\n                        if ($res->[2]->[$i] < $minPath->[$i])\
    \ {\n                            $minSum = $res->[1];\n                      \
    \      $minPath = $res->[2];\n                            last;\n            \
    \            } elsif ($res->[2]->[$i] > $minPath->[$i]) {\n                  \
    \          last;\n                        }\n                        $i++;\n \
    \                   }\n                }\n            }\n        }\n    }\n  \
    \  return $minPath;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath =\
    \ [];\n    my $minPathSum = undef;\n    my $minPathSum2 = undef;\n    for my $i\
    \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n   \
    \         my $pathSum = 0;\n            my $pathSum2 = 0;\n            my $pathLen\
    \ = 0;\n            my $pathLen2 = 0;\n            my $pathLen3 = 0;\n       \
    \     my $pathLen4 = 0;\n            my $pathLen5 = 0;\n            my $pathLen6\
    \ = 0;\n            my $pathLen7 = 0;\n            my $pathLen8 = 0;\n       \
    \     my $pathLen9 = 0;\n            my $pathLen10 = 0;\n            my $pathLen11\
    \ = 0;\n            my $pathLen12 = 0;\n            my $pathLen13 = 0;\n     \
    \       my $pathLen14 = 0;\n            my $pathLen15 = 0;\n            my $pathLen16\
    \ = 0;\n            my $pathLen17 = 0;\n            my $pathLen18 = 0;\n     \
    \       my $pathLen19 = 0;\n            my $pathLen20 = 0;\n            my $pathLen21\
    \ = 0;\n            my $pathLen22 = 0;\n            my $pathLen23 = 0;\n     \
    \       my $pathLen24 = 0;\n            my $pathLen25 = 0;\n            my $pathLen26\
    \ = 0;\n            my $pathLen27 = 0;\n            my $pathLen28 = 0;\n     \
    \       my $pathLen29 = 0;\n            my $pathLen30 = 0;\n            my $pathLen31\
    \ = 0;\n            my $pathLen32 = 0;\n            my $pathLen33 = 0;\n     \
    \       my $path", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n      \
    \          $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    $min\
    \ = $dp->[$i - 1][$j][$l - 1];\n                }\n                if ($j > 0)\
    \ {\n                    my $cur = $dp->[$i][$j - 1][$l - 1];\n              \
    \      if (compare($cur, $min) < 0) {\n                        $min = $cur;\n\
    \                    }\n                }\n                if ($i < $n - 1) {\n\
    \                    my $cur = $dp->[$i + 1][$j][$l - 1];\n                  \
    \  if (compare($cur, $min) < 0) {\n                        $min = $cur;\n    \
    \                }\n                }\n                if ($j < $m - 1) {\n  \
    \                  my $cur = $dp->[$i][$j + 1][$l - 1];\n                    if\
    \ (compare($cur, $min) < 0) {\n                        $min = $cur;\n        \
    \            }\n                }\n                $dp->[$i][$j][$l] = [@$min,\
    \ $grid->[$i][$j]];\n            }\n        }\n    }\n    my $min = [];\n    for\
    \ my $i", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n              \
    \  $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $prev = $dp->[$i - 1][$j][$l - 1];\n                    if (!@$min || $prev->[0]\
    \ < $min->[0]) {\n                        $min = $prev;\n                    }\n\
    \                }\n                if ($i < $n - 1) {\n                    my\
    \ $prev = $dp->[$i + 1][$j][$l - 1];\n                    if (!@$min || $prev->[0]\
    \ < $min->[0]) {\n                        $min = $prev;\n                    }\n\
    \                }\n                if ($j > 0) {\n                    my $prev\
    \ = $dp->[$i][$j - 1][$l - 1];\n                    if (!@$min || $prev->[0] <\
    \ $min->[0]) {\n                        $min = $prev;\n                    }\n\
    \                }\n                if ($j < $m - 1) {\n                    my\
    \ $prev = $dp->[$i][$j + 1][$l - 1];\n                    if (!@$min || $prev->[0]\
    \ < $min->[0]) {\n                        $min = $prev;\n                    }\n\
    \                }\n               ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $min = $grid->[$i][$j]\
    \ if $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j]\
    \ > $max;\n        }\n    }\n    my $res = [];\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $k,\
    \ $path) = @_;\n        if ($k == 0) {\n            if (@$path < @$res) {\n  \
    \              $res = $path;\n            }\n            return;\n        }\n\
    \        if ($i > 0 && $grid->[$i - 1][$j] >= $min && $grid->[$i - 1][$j] <= $max\
    \ && !$visited->[$i - 1][$j]) {\n            $visited->[$i - 1][$j] = 1;\n   \
    \         $dfs->($i - 1, $j, $k - 1, [@$path, $grid->[$i - 1][$j]]);\n       \
    \     $visited->[$i - 1][$j] = 0;\n        }\n        if ($i < $n - 1 && $grid->[$i\
    \ + 1][$j] >= $min && $grid->[$i + 1][$j] <= $max && !$visited->[$i + 1][$j])\
    \ {\n            $visited->[$i + 1][$j] = 1;\n            $dfs->($i + 1, $j, $k",
  "    my $n = @$grid;\n    my $visited = {};\n    my $minPath = [];\n    my $minSum\
    \ = $n * $n + 1;\n    my $minPathSum = $minSum;\n    my $minPathCount = 0;\n \
    \   my $minPathCountSum = $minSum;\n    my $minPathCountSum2 = $minSum;\n    my\
    \ $minPathCountSum3 = $minSum;\n    my $minPathCountSum4 = $minSum;\n    my $minPathCountSum5\
    \ = $minSum;\n    my $minPathCountSum6 = $minSum;\n    my $minPathCountSum7 =\
    \ $minSum;\n    my $minPathCountSum8 = $minSum;\n    my $minPathCountSum9 = $minSum;\n\
    \    my $minPathCountSum10 = $minSum;\n    my $minPathCountSum11 = $minSum;\n\
    \    my $minPathCountSum12 = $minSum;\n    my $minPathCountSum13 = $minSum;\n\
    \    my $minPathCountSum14 = $minSum;\n    my $minPathCountSum15 = $minSum;\n\
    \    my $minPathCountSum16 = $minSum;\n    my $minPathCountSum17 = $minSum;\n\
    \    my $minPathCountSum18 = $minSum;\n    my $minPathCountSum19 = $minSum;\n\
    \    my $minPathCountSum20 = $minSum;\n    my $minPathCountSum21 = $minSum;\n\
    \    my $minPathCountSum22 = $minSum;\n    my $minPathCountSum23 = $minSum;\n\
    \    my $minPathCountSum24 = $minSum;\n    my $minPathCountSum25 = $minSum;\n\
    \    my $minPathCountSum26 = $minSum;\n    my $minPathCountSum27 = $minSum;\n\
    \    my $minPathCountSum28 = $minSum;\n    my $minPathCountSum29 = $minSum;\n\
    \    my $minPathCountSum30 = $minSum;\n    my $minPathCountSum31 = $minSum;\n\
    \    my $minPathCountSum32 = $minSum;\n", "    my $n = scalar(@$grid);\n    my\
    \ $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minPathSum = $n\
    \ * $m + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $pathSum = $grid->[$i][$j];\n    \
    \        my $pathLen = 1;\n            my $visited = {};\n            $visited->{\"\
    $i,$j\"} = 1;\n            my $curr = [$i, $j];\n            while ($pathLen <\
    \ $k) {\n                my $next = nextCell($grid, $curr, $visited);\n      \
    \          last if !$next;\n                $pathSum += $grid->[$next->[0]][$next->[1]];\n\
    \                $pathLen++;\n                $curr = $next;\n            }\n\
    \            if ($pathLen == $k && $pathSum < $minPathSum) {\n               \
    \ $minPathSum = $pathSum;\n                $minPath = $path;\n            }\n\
    \        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n  \
    \  my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n \
    \           for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n    \
    \    }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1)\
    \ {\n            for my $j (0 .. $m - 1) {\n                my $min = [];\n  \
    \              if ($i > 0) {\n                    my $prev = $dp->[$i - 1][$j][$l\
    \ - 1];\n                    if (scalar(@$min) == 0 || $prev->[0] < $min->[0])\
    \ {\n                        $min = $prev;\n                    }\n          \
    \      }\n                if ($i < $n - 1) {\n                    my $prev = $dp->[$i\
    \ + 1][$j][$l - 1];\n                    if (scalar(@$min) == 0 || $prev->[0]\
    \ < $min->[0]) {\n                        $min = $prev;\n                    }\n\
    \                }\n                if ($j > 0) {\n                    my $prev\
    \ = $dp->[$i][$j - 1][$l - 1];\n                    if (scalar(@$min) == 0 ||\
    \ $prev->[0] < $min->[0]) {\n                        $min = $prev;\n         \
    \           }\n                }\n                if ($j < $m - 1) {\n       \
    \             my $prev = $dp->[$i][$j + 1][$l - 1];\n                    if (scalar(@$min",
  "    my $n = @$grid;\n    my $minPath = [];\n    my $minSum = $n * $n * $k;\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n            my\
    \ $path = [];\n            my $sum = 0;\n            my $visited = [];\n     \
    \       for my $x (0 .. $n - 1) {\n                for my $y (0 .. $n - 1) {\n\
    \                    $visited->[$x][$y] = 0;\n                }\n            }\n\
    \            $visited->[$i][$j] = 1;\n            $sum += $grid->[$i][$j];\n \
    \           push @$path, $grid->[$i][$j];\n            my $result = dfs($grid,\
    \ $i, $j, $k - 1, $visited, $path, $sum);\n            if ($result->[0] < $minSum)\
    \ {\n                $minSum = $result->[0];\n                $minPath = $result->[1];\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m * $n * $m;\n  \
    \  my $minPathSum = $minSum;\n    my $minPathSum2 = $minSum;\n    my $minPath2\
    \ = [];\n    my $minPath3 = [];\n    my $minPathSum3 = $minSum;\n    my $minPathSum4\
    \ = $minSum;\n    my $minPath4 = [];\n    my $minPathSum5 = $minSum;\n    my $minPath5\
    \ = [];\n    my $minPathSum6 = $minSum;\n    my $minPath6 = [];\n    my $minPathSum7\
    \ = $minSum;\n    my $minPath7 = [];\n    my $minPathSum8 = $minSum;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $minSum;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $minSum;\n    my $minPath10 = [];\n    my $minPathSum11 = $minSum;\n    my\
    \ $minPath11 = [];\n    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n\
    \    my $minPathSum13 = $minSum;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $minSum;\n    my $minPath14 = [];\n    my $minPathSum15 = $minSum;\n    my\
    \ $minPath15 = [];\n    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n\
    \    my $minPathSum17 = $minSum;\n    my $minPath17 = [];\n    my $minPathSum18\
    \ = $minSum;\n    my $minPath18 = [];\n    my $minPathSum19", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $min = [];\n    for my $i (0..$k-1) {\n        $min->[$i] = $grid->[0][0];\n\
    \    }\n    my $min_path = [];\n    for my $i (0..$k-1) {\n        $min_path->[$i]\
    \ = [0, 0];\n    }\n    my $path = [];\n    for my $i (0..$k-1) {\n        $path->[$i]\
    \ = [0, 0];\n    }\n    my $path_size = 0;\n    my $min_path_size = 0;\n    my\
    \ $path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_visited = 0;\n \
    \   my $path_visited = 0;\n    my $path_visited_size = 0;\n    my $min_path_visited_size\
    \ = 0;\n    my $path_visited_sum = 0;\n    my $min_path_visited_sum = 0;\n   \
    \ my $path_visited_hash = {};\n    my $min_path_visited_hash = {};\n    my $path_visited_hash_size\
    \ = 0;\n    my $min_path_visited_hash_size = 0;\n    my $path_visited_hash_sum\
    \ = 0;\n    my $min_path_visited_hash_sum = 0;\n    my $path_visited_hash_sum_size\
    \ = 0;\n    my $min_path_visited_hash_sum_size = 0;\n    my $path_visited_hash_sum_size_sum\
    \ = 0;\n    my $min_path_visited_hash_sum_size_sum = 0;\n    my $path_visited",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
    \ (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $val = $grid->[$i][$j];\n\
    \            my $min = $val;\n            my $path = [$val];\n            if ($i\
    \ > 0) {\n                my $prev = $dp->[$i - 1][$j];\n                if ($prev->[0]\
    \ < $min) {\n                    $min = $prev->[0];\n                    $path\
    \ = [@$prev];\n                } elsif ($prev->[0] == $min) {\n              \
    \      $path = [@$prev] if $prev->[0] lt $path->[0];\n                }\n    \
    \        }\n            if ($j > 0) {\n                my $prev = $dp->[$i][$j\
    \ - 1];\n                if ($prev->[0] < $min) {\n                    $min =\
    \ $prev->[0];\n                    $path = [@$prev];\n                } elsif\
    \ ($prev->[0] == $min) {\n                    $path = [@$prev] if $prev->[0] lt\
    \ $path->[0];\n                }\n            }\n            $dp->[$i][$j] = [$min,\
    \ $path];\n        }\n    }\n    my $res = $dp->[$n - 1][$m - 1];\n    return\
    \ $res->[1] if $k == 1;\n    my $path = $res->[1];\n    my $i = $n - 1;\n    my\
    \ $j = $m - 1;\n    while (@$path < $k) {\n        if ($i > 0) {\n           \
    \ my $prev = $dp->[$i - 1][$j];\n            if ($prev->[0] == $res->[0]) {\n\
    \                $res = $prev;\n                $path = [@$prev->[1], @$path];\n\
    \                $i--;\n                next;\n            }\n        }\n    \
    \    if ($", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $m + 1;\n    my $minPathSum2\
    \ = $n * $m + 1;\n    my $minPath2 = [];\n    my $minPathSum3 = $n * $m + 1;\n\
    \    my $minPath3 = [];\n    my $minPathSum4 = $n * $m + 1;\n    my $minPath4\
    \ = [];\n    my $minPathSum5 = $n * $m + 1;\n    my $minPath5 = [];\n    my $minPathSum6\
    \ = $n * $m + 1;\n    my $minPath6 = [];\n    my $minPathSum7 = $n * $m + 1;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $n * $m + 1;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $n * $m + 1;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $n * $m + 1;\n    my $minPath10 = [];\n    my $minPathSum11 = $n * $m + 1;\n\
    \    my $minPath11 = [];\n    my $minPathSum12 = $n * $m + 1;\n    my $minPath12\
    \ = [];\n    my $minPathSum13 = $n * $m + 1;\n    my $minPath13 = [];\n    my\
    \ $minPathSum14 = $n * $m + 1;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $n * $m + 1;\n    my $minPath15 = [];\n    my $minPathSum16 = $n * $m + 1;\n\
    \    my $minPath16 = [];\n    my $minPathSum17 = $n * $m + 1;\n    my $minPath17\
    \ = [];\n    my $minPathSum18 = $n * $m + 1;\n    my $minPath18 = [];\n    my\
    \ $minPathSum19 = $n * $m +", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min = [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n \
    \   my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path\
    \ = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n     \
    \       $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            my $res = dfs($grid, $k - 1, $i, $j, $n, $m, $visited, $path, $sum);\n\
    \            if ($res->[0] < $min_sum) {\n                $min_sum = $res->[0];\n\
    \                $min_path = $res->[1];\n            }\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n\
    \            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            for my $l (0 .. $k - 1) {\n                if\
    \ ($l == 0) {\n                    $dp->[$i][$j][$l] = [$grid->[$i][$j]];\n  \
    \              } else {\n                    my $min = undef;\n              \
    \      if ($i > 0) {\n                        my $tmp = [@{$dp->[$i - 1][$j][$l\
    \ - 1]}, $grid->[$i][$j]];\n                        if (!defined($min) || $tmp\
    \ lt $min) {\n                            $min = $tmp;\n                     \
    \   }\n                    }\n                    if ($i < $n - 1) {\n       \
    \                 my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                        if (!defined($min) || $tmp lt $min) {\n             \
    \               $min = $tmp;\n                        }\n                    }\n\
    \                    if ($j > 0) {\n                        my $tmp = [@{$dp->[$i][$j\
    \ - 1][$l - 1]}, $grid->[$i][$j]];\n                        if (!defined($min)\
    \ || $tmp lt $min) {\n                            $min = $tmp;\n             \
    \           }\n                    }\n                    if ($j < $m - 1) {\n\
    \                        my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $grid->[$i][$j]];\n\
    \                        if", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                for my $d (0 .. 3) {\n             \
    \       my $x = $i + $dx[$d];\n                    my $y = $j + $dy[$d];\n   \
    \                 if ($x >= 0 && $x < $n && $y >= 0 && $y < $m) {\n          \
    \              my $cur = $dp->[$x][$y][$l - 1];\n                        if (!@$min\
    \ || $cur->[0] < $min->[0] ||\n                            ($cur->[0] == $min->[0]\
    \ && $cur->[-1] < $min->[-1])) {\n                            $min = $cur;\n \
    \                       }\n                    }\n                }\n        \
    \        $dp->[$i][$j][$l] = [@$min, $grid->[$i][$j]];\n            }\n      \
    \  }\n    }\n    my $min = [];\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $cur = $dp->[$i][$j][$k - 1];\n         \
    \   if (!@$min || $cur->[0] < $min->", "    my $n = scalar(@$grid);\n    my @dp;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n          \
    \  $dp[$i][$j] = [$grid->[$i][$j]];\n        }\n    }\n    for my $step (1 ..\
    \ $k - 1) {\n        my @new_dp;\n        for my $i (0 .. $n - 1) {\n        \
    \    for my $j (0 .. $n - 1) {\n                my $min = $dp[$i][$j];\n     \
    \           if ($i > 0) {\n                    my $tmp = $dp[$i - 1][$j];\n  \
    \                  if (lexicographicallyLess($tmp, $min)) {\n                \
    \        $min = $tmp;\n                    }\n                }\n            \
    \    if ($i < $n - 1) {\n                    my $tmp = $dp[$i + 1][$j];\n    \
    \                if (lexicographicallyLess($tmp, $min)) {\n                  \
    \      $min = $tmp;\n                    }\n                }\n              \
    \  if ($j > 0) {\n                    my $tmp = $dp[$i][$j - 1];\n           \
    \         if (lexicographicallyLess($tmp, $min)) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j <\
    \ $n - 1) {\n                    my $tmp = $dp[$i][$j + 1];\n                \
    \    if (lexicographicallyLess($tmp, $min)) {\n                        $min =\
    \ $tmp;\n                    }\n                }\n                push @{$new_dp[$i][$j]},\
    \ @$min;\n            }\n        }\n        @dp = @new_dp;\n    }\n    my $min\
    \ = $dp[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1)\
    \ {\n            if (lexicographicallyLess($dp[$i][$j], $min)) {\n           \
    \     $min = $dp[$i][$j];\n            }\n        }\n    }\n    return $min;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n      \
    \          $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                for my $d (0 .. 3) {\n             \
    \       my $x = $i + $dx[$d];\n                    my $y = $j + $dy[$d];\n   \
    \                 if ($x >= 0 && $x < $n && $y >= 0 && $y < $m) {\n          \
    \              my $cur = $dp->[$x][$y][$l - 1];\n                        if (scalar(@$cur)\
    \ > 0 && (scalar(@$min) == 0 || $cur->[0] < $min->[0])) {\n                  \
    \          $min = $cur;\n                        }\n                    }\n  \
    \              }\n                $dp->[$i][$j][$l] = [@$min, $grid->[$i][$j]];\n\
    \            }\n        }\n    }\n    my $ans = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            if (scalar(@$ans) == 0\
    \ || $dp->[$i][$j][$k - 1]->[0] < $ans->[0]) {\n                $ans =", "   \
    \ my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n              \
    \  $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n    my $dirs = [[-1,\
    \ 0], [1, 0], [0, -1], [0, 1]];\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n    \
    \    }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1)\
    \ {\n            for my $j (0 .. $m - 1) {\n                my $min = undef;\n\
    \                for my $dir (@$dirs) {\n                    my $x = $i + $dir->[0];\n\
    \                    my $y = $j + $dir->[1];\n                    if ($x >= 0\
    \ && $x < $n && $y >= 0 && $y < $m) {\n                        my $cur = $dp->[$x][$y][$l\
    \ - 1];\n                        if (!defined($min) || $cur->[0] < $min->[0])\
    \ {\n                            $min = $cur;\n                        }\n   \
    \                 }\n                }\n                $dp->[$i][$j][$l] = [@$min,\
    \ $grid->[$i][$j]];\n            }\n        }\n    }\n    my $min = undef;\n \
    \   for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n           \
    \ my $cur = $dp->[$i][$j][$k - 1];\n            if (!defined($min) || $cur", " \
    \   my $n = @$grid;\n    my $visited = {};\n    my $minPath = [];\n    my $minSum\
    \ = $n * $n + 1;\n    my $minPathSum = $minSum;\n    my $minPathSum2 = $minSum;\n\
    \    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3 = $minSum;\n\
    \    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPath5 = [];\n\
    \    my $minPathSum5 = $minSum;\n    my $minPathSum6 = $minSum;\n    my $minPath6\
    \ = [];\n    my $minPath7 = [];\n    my $minPathSum7 = $minSum;\n    my $minPathSum8\
    \ = $minSum;\n    my $minPath8 = [];\n    my $minPath9 = [];\n    my $minPathSum9\
    \ = $minSum;\n    my $minPathSum10 = $minSum;\n    my $minPath10 = [];\n    my\
    \ $minPath11 = [];\n    my $minPathSum11 = $minSum;\n    my $minPathSum12 = $minSum;\n\
    \    my $minPath12 = [];\n    my $minPath13 = [];\n    my $minPathSum13 = $minSum;\n\
    \    my $minPathSum14 = $minSum;\n    my $minPath14 = [];\n    my $minPath15 =\
    \ [];\n    my $minPathSum15 = $minSum;\n    my $minPathSum16 = $minSum;\n    my\
    \ $minPath16 = [];\n    my $minPath17 = [];\n    my $minPathSum17 = $minSum;\n\
    \    my $minPathSum18 = $minSum;\n    my $minPath18 = [];\n    my $minPath19 =\
    \ [];\n    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n    my\
    \ $minPath20 = [];\n    my $minPath21 = [];\n    my $minPathSum21 = $minSum;\n\
    \    my $minPathSum22 = $minSum;\n    my $min", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min = [];\n    my $min_sum = $n *\
    \ $n + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = 0;\n            my $visited\
    \ = {};\n            my $dfs = sub {\n                my($i, $j, $k) = @_;\n \
    \               if ($k == 0) {\n                    if ($sum < $min_sum) {\n \
    \                       $min_sum = $sum;\n                        $min = $path;\n\
    \                    }\n                    return;\n                }\n     \
    \           for my $d ([-1, 0], [1, 0], [0, -1], [0, 1]) {\n                 \
    \   my($ni, $nj) = ($i + $d->[0], $j + $d->[1]);\n                    next if\
    \ $ni < 0 || $ni >= $n || $nj < 0 || $nj >= $m;\n                    next if $visited->{\"\
    $ni,$nj\"};\n                    $visited->{\"$ni,$nj\"} = 1;\n              \
    \      push @$path, $grid->[$ni][$nj];\n                    $sum += $grid->[$ni][$nj];\n\
    \                    $dfs->($ni, $nj, $k - 1);\n                    pop @$path;\n\
    \                    $sum -= $grid->[$ni][$nj];\n                    delete $visited->{\"\
    $ni,$nj\"};\n                }\n            };\n            $dfs->($i, $j, $k);\n\
    \        }\n    }\n    return $min;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  my $min = [];\n    for my $l (0 .. $k - 1) {\n        $min->[$l] = [];\n  \
    \  }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n     \
    \       $dp->[$i][$j][0][0] = $grid->[$i][$j];\n            if ($i == 0 && $j\
    \ == 0) {\n                $min->[0] = [$grid->[$i][$j]];\n            }\n   \
    \     }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1)\
    \ {\n            for my $j (0 .. $m - 1) {\n                my $min_path = [];\n\
    \                if ($i > 0) {\n                    my $path = $dp->[$i - 1][$j][$l\
    \ - 1];\n                    if (@$path) {\n                        push @$min_path,\
    \ $path;\n                    }\n                }\n                if ($j > 0)\
    \ {\n                    my $path = $dp->[$i][$j - 1][$l - 1];\n             \
    \       if (@$path) {\n                        push @$min_path, $path;\n     \
    \               }\n                }\n                if (@$min_path) {\n    \
    \                my $min_path_val = $min_path->[0];\n                    for my\
    \ $path (@$min_path) {\n                        if (lex_less($path, $min_path_val))\
    \ {\n                            $min_path_val = $path;\n                    \
    \    }\n                    }\n                    $dp->[$i][$", "    my $n =\
    \ scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j]\
    \ = [];\n            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l]\
    \ = [];\n            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n\
    \        }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n -\
    \ 1) {\n            for my $j (0 .. $m - 1) {\n                my $min = [];\n\
    \                for my $d (0 .. 3) {\n                    my $x = $i + $dx[$d];\n\
    \                    my $y = $j + $dy[$d];\n                    if ($x >= 0 &&\
    \ $x < $n && $y >= 0 && $y < $m) {\n                        my $cur = $dp->[$x][$y][$l\
    \ - 1];\n                        if (!@$min || $cur->[0] < $min->[0] ||\n    \
    \                        ($cur->[0] == $min->[0] && $cur->[-1] < $min->[-1]))\
    \ {\n                            $min = $cur;\n                        }\n   \
    \                 }\n                }\n                $dp->[$i][$j][$l] = [@$min,\
    \ $grid->[$i][$j]];\n            }\n        }\n    }\n    my $min = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $cur\
    \ = $dp->[$i][$j][$k - 1];\n            if (!@$min || $cur->[", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = {};\n\
    \        }\n    }\n    my $min_path = [];\n    for my $i (0 .. $n - 1) {\n   \
    \     for my $j (0 .. $m - 1) {\n            my $path = [];\n            for my\
    \ $p (0 .. $i - 1) {\n                for my $q (0 .. $j - 1) {\n            \
    \        my $prev_path = $dp->[$p][$q];\n                    my $new_path = [@$prev_path,\
    \ $grid->[$i][$j]];\n                    if (scalar(@$new_path) == $k) {\n   \
    \                     if (scalar(@$min_path) == 0 ||\n                       \
    \     $new_path->[0] < $min_path->[0]) {\n                            $min_path\
    \ = $new_path;\n                        }\n                    } else {\n    \
    \                    if (scalar(@$min_path) == 0 ||\n                        \
    \    $new_path->[0] < $min_path->[0]) {\n                            $dp->[$i][$j]\
    \ = $new_path;\n                        }\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return $min_path;\n}\nmy $grid =\
    \ [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_grid($grid);\nprint join(', ', @{minPath($grid,\
    \ 5)}), \"\\n\";", "    my $n = @$grid;\n    my $min = $grid->[0][0];\n    my\
    \ $max = $grid->[$n-1][$n-1];\n    my $minPath = [$min];\n    my $minPaths = {};\n\
    \    my $paths = {};\n    my $path = [$min];\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my\
    \ $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n\
    \    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my\
    \ $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n\
    \    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my\
    \ $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n\
    \    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my\
    \ $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n\
    \    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $path", "    my $n = scalar(@$grid);\n  \
    \  my $visited = {};\n    my $min_path = [];\n    my $min_sum = $n * $n + 1;\n\
    \    my $min_sum_path = [];\n    my $min_sum_path_len = 0;\n    my $min_sum_path_sum\
    \ = 0;\n    my $min_sum_path_visited = {};\n    my $min_sum_path_visited_count\
    \ = 0;\n    my $min_sum_path_visited_sum = 0;\n    my $min_sum_path_visited_sum_count\
    \ = 0;\n    my $min_sum_path_visited_sum_count_len = 0;\n    my $min_sum_path_visited_sum_count_len_sum\
    \ = 0;\n    my $min_sum_path_visited_sum_count_len_sum_path = [];\n    my $min_sum_path_visited_sum_count_len_sum_path_visited\
    \ = {};\n    my $min_sum_path_visited_sum_count_len_sum_path_visited_count = 0;\n\
    \    my $min_sum_path_visited_sum_count_len_sum_path_visited_sum = 0;\n    my\
    \ $min_sum_path_visited_sum_count_len_sum_path_visited_sum_count = 0;\n    my\
    \ $min_sum_path_visited_sum_count_len_sum_path_visited_sum_count_len = 0;\n  \
    \  my $min_sum_path_visited_sum_count_len_sum_path_visited_sum_count_len_sum =\
    \ 0;\n    my $min_sum_path_visited_sum_count_len_sum_path_visited_sum_count_len_sum_path\
    \ = [];\n    my $min_sum_path_visited_sum_count_len_sum_path_visited_sum_count_len_sum_path_visited\
    \ = {};\n    my $min_sum_path_visited_sum_count_len_sum_path", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n\
    \        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m + 1;\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path\
    \ = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n     \
    \       $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            my $res = dfs($grid, $i, $j, $k - 1, $visited, $sum, $path);\n  \
    \          if ($res->[0] < $minSum) {\n                $minSum = $res->[0];\n\
    \                $minPath = $res->[1];\n            }\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = {};\n\
    \        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            for my $l (1 .. $k) {\n                if($l == 1) {\n   \
    \                 $dp->[$i][$j]{$l} = [$grid->[$i][$j]];\n                } else\
    \ {\n                    my $min = [];\n                    if($i > 0) {\n   \
    \                     my $tmp = [@{$dp->[$i - 1][$j]{$l - 1}}, $grid->[$i][$j]];\n\
    \                        if(!@$min || $tmp lt $min) {\n                      \
    \      $min = $tmp;\n                        }\n                    }\n      \
    \              if($i < $n - 1) {\n                        my $tmp = [@{$dp->[$i\
    \ + 1][$j]{$l - 1}}, $grid->[$i][$j]];\n                        if(!@$min || $tmp\
    \ lt $min) {\n                            $min = $tmp;\n                     \
    \   }\n                    }\n                    if($j > 0) {\n             \
    \           my $tmp = [@{$dp->[$i][$j - 1]{$l - 1}}, $grid->[$i][$j]];\n     \
    \                   if(!@$min || $tmp lt $min) {\n                           \
    \ $min = $tmp;\n                        }\n                    }\n           \
    \         if($j < $m - 1) {\n                        my $tmp = [@{$dp->[$i][$j\
    \ + 1]{$l - 1}}, $grid->[$i][$j]];\n                        if(!@$min || $tmp\
    \ lt $min) {\n                            $min = $tmp;\n                     \
    \   }\n                    }\n                    $dp", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n\
    \            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = {};\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]->{$grid->[$i][$j]} = 1;\n \
    \       }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n -\
    \ 1) {\n            for my $j (0 .. $m - 1) {\n                for my $x ($i -\
    \ 1, $i, $i + 1) {\n                    for my $y ($j - 1, $j, $j + 1) {\n   \
    \                     next if $x < 0 || $x >= $n || $y < 0 || $y >= $m;\n    \
    \                    next if $x == $i && $y == $j;\n                        for\
    \ my $v (keys %{$dp->[$x][$y][$l - 1]}) {\n                            $dp->[$i][$j][$l]->{$v}\
    \ = 1;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    my $res = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            for my $v (keys %{$dp->[$i][$j][$k\
    \ - 1]}) {\n                push @$res, $v;\n            }\n        }\n    }\n\
    \    return $res;\n}", "    my $n = @$grid;\n    my $visited = {};\n    my $min_path\
    \ = undef;\n    my $min_path_sum = undef;\n    my $min_path_len = undef;\n   \
    \ my $min_path_val = undef;\n    my $min_path_val_sum = undef;\n    my $min_path_val_len\
    \ = undef;\n    my $min_path_val_sum_len = undef;\n    my $min_path_val_len_sum\
    \ = undef;\n    my $min_path_val_len_sum_len = undef;\n    my $min_path_val_sum_len_len\
    \ = undef;\n    my $min_path_val_sum_len_sum = undef;\n    my $min_path_val_len_sum_sum\
    \ = undef;\n    my $min_path_val_len_len_sum = undef;\n    my $min_path_val_len_len_len\
    \ = undef;\n    my $min_path_val_sum_len_len_len = undef;\n    my $min_path_val_len_sum_len_len\
    \ = undef;\n    my $min_path_val_len_len_sum_len = undef;\n    my $min_path_val_len_len_len_sum\
    \ = undef;\n    my $min_path_val_len_len_len_len = undef;\n    my $min_path_val_sum_len_len_len_len\
    \ = undef;\n    my $min_path_val_len_sum_len_len_len = undef;\n    my $min_path_val_len_len_sum_len_len\
    \ = undef;\n    my $min_path_val_len_len_len_sum_len = undef;\n    my $min_path_val_len_len_len_len_sum\
    \ = undef;\n    my $min_path_val_len_len_len_len_len = undef;\n    my $min_path_val_sum_len_len_len_len_len\
    \ =", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n    my $minPathLen\
    \ = $n * $m + 1;\n    my $minPathSum = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum2\
    \ = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum3 = $n * $m * ($n * $m + 1)\
    \ / 2;\n    my $minPathSum4 = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum5\
    \ = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum6 = $n * $m * ($n * $m + 1)\
    \ / 2;\n    my $minPathSum7 = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum8\
    \ = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum9 = $n * $m * ($n * $m + 1)\
    \ / 2;\n    my $minPathSum10 = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum11\
    \ = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum12 = $n * $m * ($n * $m +\
    \ 1) / 2;\n    my $minPathSum13 = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum14\
    \ = $n * $m * ($n * $m + 1) / 2;\n    my $minPathSum15 = $n * $m * ($n * $m +\
    \ 1) / 2;\n    my $minPathSum16 = $n * $m", "    my $n = @$grid;\n    my $m =\
    \ @{$grid->[0]};\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $minPath = [];\n    my $minSum = $n * $m * $n * $m;\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path\
    \ = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n     \
    \       push @$path, $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n\
    \            if ($k == 1) {\n                if ($sum < $minSum) {\n         \
    \           $minPath = $path;\n                    $minSum = $sum;\n         \
    \       }\n            } else {\n                my $res = dfs($grid, $visited,\
    \ $i, $j, $k - 1, $path, $sum);\n                if ($res->[1] < $minSum) {\n\
    \                    $minPath = $res->[0];\n                    $minSum = $res->[1];\n\
    \                }\n            }\n            $visited->[$i][$j] = 0;\n     \
    \   }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n    my $m\
    \ = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n        \
    \    for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n    \
    \        }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n       \
    \ }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n\
    \            for my $j (0 .. $m - 1) {\n                my $min = [];\n      \
    \          if ($i > 0) {\n                    my $tmp = [@{$dp->[$i - 1][$j][$l\
    \ - 1]}, $grid->[$i][$j]];\n                    if (!@$min || $tmp lt $min) {\n\
    \                        $min = $tmp;\n                    }\n               \
    \ }\n                if ($i < $n - 1) {\n                    my $tmp = [@{$dp->[$i\
    \ + 1][$j][$l - 1]}, $grid->[$i][$j]];\n                    if (!@$min || $tmp\
    \ lt $min) {\n                        $min = $tmp;\n                    }\n  \
    \              }\n                if ($j > 0) {\n                    my $tmp =\
    \ [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n                    if (!@$min\
    \ || $tmp lt $min) {\n                        $min = $tmp;\n                 \
    \   }\n                }\n                if ($j < $m - 1) {\n               \
    \     my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $", "    my $n = scalar(@$grid);\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[$n - 1][$n - 1];\n    my\
    \ $minPath = [$min];\n    my $maxPath = [$max];\n    my $minPaths = {};\n    my\
    \ $maxPaths = {};\n    for my $i (1 .. $k) {\n        if ($i == 1) {\n       \
    \     $minPaths->{$min} = [$min];\n            $maxPaths->{$max} = [$max];\n \
    \       } else {\n            $minPaths = {};\n            $maxPaths = {};\n \
    \           for my $r (0 .. $n - 1) {\n                for my $c (0 .. $n - 1)\
    \ {\n                    my $val = $grid->[$r][$c];\n                    if ($r\
    \ > 0) {\n                        my $up = $grid->[$r - 1][$c];\n            \
    \            if ($up < $val) {\n                            my $upPath = $minPaths->{$up};\n\
    \                            if (!defined($upPath)) {\n                      \
    \          $upPath = $minPaths->{$up} = [@$minPath];\n                       \
    \     }\n                            if (defined($upPath)) {\n               \
    \                 my $path = [@$upPath, $val];\n                             \
    \   my $curPath = $minPaths->{$val};\n                                if (!defined($curPath)\
    \ || $curPath->[-1] > $val) {\n                                    $minPaths->{$val}\
    \ = $path;\n                                }\n                            }\n\
    \                        }\n                    }\n                    if ($r\
    \ < $n - 1) {\n                        my $down = $grid->[$r + 1][$c];\n     \
    \                   if ($down < $val) {\n                            my $downPath\
    \ = $minPaths->{$down};\n                            if (!defined($downPath))\
    \ {\n                                $downPath = $minPaths->{$down} = [@$minPath];\n\
    \                            }\n                            if (defined($downPath))\
    \ {\n                                my", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[$n - 1][$m - 1];\n    my\
    \ $res = [];\n    my $visited = {};\n    my $dfs;\n    $dfs = sub {\n        my($i,\
    \ $j, $path, $sum) = @_;\n        return if $sum > $k;\n        return if $sum\
    \ + $max * ($k - @$path) < $min;\n        return if $sum + $min * ($k - @$path)\
    \ > $max;\n        return if $visited->{\"$i,$j,$sum\"};\n        $visited->{\"\
    $i,$j,$sum\"} = 1;\n        push @$path, $grid->[$i][$j];\n        if (@$path\
    \ == $k) {\n            if ($sum < $min) {\n                $min = $sum;\n   \
    \             $res = $path;\n            }\n        } else {\n            $dfs->($i\
    \ - 1, $j, [@$path], $sum + $grid->[$i - 1][$j]) if $i > 0;\n            $dfs->($i\
    \ + 1, $j, [@$path], $sum + $grid->[$i + 1][$j]) if $i < $n - 1;\n           \
    \ $dfs->($i, $j - 1, [@$path], $sum + $grid->[$i][$j - 1]) if $j > 0;\n      \
    \      $dfs->($i, $j + 1, [@$path], $sum + $grid->[$i][$j + 1]) if $j < $m - 1;\n\
    \        }\n    };\n    $dfs->(0, 0, [], 0);\n    return $res;\n}", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited = {};\n\
    \    my $minPath = [];\n    my $minPathSum = $n * $n * $k;\n    my $minPathSumCells\
    \ = [];\n    my $minPathSumCells2 = [];\n    my $minPathSumCells3 = [];\n    my\
    \ $minPathSumCells4 = [];\n    my $minPathSumCells5 = [];\n    my $minPathSumCells6\
    \ = [];\n    my $minPathSumCells7 = [];\n    my $minPathSumCells8 = [];\n    my\
    \ $minPathSumCells9 = [];\n    my $minPathSumCells10 = [];\n    my $minPathSumCells11\
    \ = [];\n    my $minPathSumCells12 = [];\n    my $minPathSumCells13 = [];\n  \
    \  my $minPathSumCells14 = [];\n    my $minPathSumCells15 = [];\n    my $minPathSumCells16\
    \ = [];\n    my $minPathSumCells17 = [];\n    my $minPathSumCells18 = [];\n  \
    \  my $minPathSumCells19 = [];\n    my $minPathSumCells20 = [];\n    my $minPathSumCells21\
    \ = [];\n    my $minPathSumCells22 = [];\n    my $minPathSumCells23 = [];\n  \
    \  my $minPathSumCells24 = [];\n    my $minPathSumCells25 = [];\n    my $minPathSumCells26\
    \ = [];\n    my $minPathSumCells27 = [];\n    my $minPathSumCells28 = [];\n  \
    \  my $minPathSumCells29 = [];\n    my $minPathSumCells30 = [];\n    my $minPathSumCells31\
    \ = [];\n    my $minPathSumCells32 = [];\n    my $minPathSumCells33 = [];\n  \
    \  my $minPathSumCells34 = [];\n    my $minPathSumCells35 = [];\n    my $minPathSumCells36\
    \ = [];\n    my $minPathSumCells37 = [];\n    my $", "    my $n = @$grid;\n  \
    \  my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n\
    \        }\n    }\n    my $min = [];\n    for my $i (0 .. $k - 1) {\n        $min->[$i]\
    \ = $grid->[0][0];\n    }\n    my $min_sum = $grid->[0][0];\n    my $min_path\
    \ = [];\n    my $min_path_sum = 0;\n    my $min_path_sum_index = 0;\n    my $min_path_index\
    \ = 0;\n    my $min_path_index_index = 0;\n    my $min_path_index_index_index\
    \ = 0;\n    my $min_path_index_index_index_index = 0;\n    my $min_path_index_index_index_index_index\
    \ = 0;\n    my $min_path_index_index_index_index_index_index = 0;\n    my $min_path_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_index_index_index_index_index_index_index_index = 0;\n\
    \    my $min_path_index_index_index_index_index_index_index_index_index = 0;\n\
    \    my $min_path_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    my $min_path_index_index_index_index_index_index_index", "    my $n\
    \ = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n\
    \            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n    \
    \    }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1)\
    \ {\n            for my $j (0 .. $m - 1) {\n                my $min = [];\n  \
    \              if ($i > 0) {\n                    my $cur = $dp->[$i - 1][$j][$l\
    \ - 1];\n                    if (!@$min || $cur->[0] < $min->[0]) {\n        \
    \                $min = $cur;\n                    }\n                }\n    \
    \            if ($i < $n - 1) {\n                    my $cur = $dp->[$i + 1][$j][$l\
    \ - 1];\n                    if (!@$min || $cur->[0] < $min->[0]) {\n        \
    \                $min = $cur;\n                    }\n                }\n    \
    \            if ($j > 0) {\n                    my $cur = $dp->[$i][$j - 1][$l\
    \ - 1];\n                    if (!@$min || $cur->[0] < $min->[0]) {\n        \
    \                $min = $cur;\n                    }\n                }\n    \
    \            if ($j < $m - 1) {\n                    my $cur = $dp->[$i][$j +\
    \ 1][$l - 1];\n                    if (!@$min || $cur->[0] < $min->[0]) {\n  \
    \                      $min = $cur;\n                    }\n                }\n\
    \               ", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                for my $d (0 .. 3) {\n             \
    \       my $x = $i + $dx[$d];\n                    my $y = $j + $dy[$d];\n   \
    \                 if ($x >= 0 && $x < $n && $y >= 0 && $y < $m) {\n          \
    \              my $lst = $dp->[$x][$y][$l - 1];\n                        if (!@$min\
    \ || $lst->[0] < $min->[0] ||\n                            ($lst->[0] == $min->[0]\
    \ && $lst->[-1] < $min->[-1])) {\n                            $min = $lst;\n \
    \                       }\n                    }\n                }\n        \
    \        $dp->[$i][$j][$l] = [@$min, $grid->[$i][$j]];\n            }\n      \
    \  }\n    }\n    my $min = [];\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $lst = $dp->[$i][$j][$k - 1];\n         \
    \   if (!@$", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $dp->[$i][$j] = {};\n        }\n    }\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            if ($i > 0) {\n                my\
    \ $prev = $dp->[$i - 1][$j];\n                for my $key (keys %$prev) {\n  \
    \                  if ($key < $k) {\n                        my $val = $prev->{$key};\n\
    \                        my $newKey = $key + 1;\n                        my $newVal\
    \ = $val . $grid->[$i][$j];\n                        if (!defined($dp->[$i][$j]{$newKey})\
    \ || $dp->[$i][$j]{$newKey} gt $newVal) {\n                            $dp->[$i][$j]{$newKey}\
    \ = $newVal;\n                        }\n                    }\n             \
    \   }\n            }\n            if ($j > 0) {\n                my $prev = $dp->[$i][$j\
    \ - 1];\n                for my $key (keys %$prev) {\n                    if ($key\
    \ < $k) {\n                        my $val = $prev->{$key};\n                \
    \        my $newKey = $key + 1;\n                        my $newVal = $val . $grid->[$i][$j];\n\
    \                        if (!defined($dp->[$i][$j]{$newKey}) || $dp->[$i][$j]{$newKey}\
    \ gt $newVal) {\n                            $dp->[$i][$j]{$newKey} = $newVal;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            if ($i == 0 && $j == 0) {\n                $dp->[$i][$j]{1}\
    \ = $grid->[$i][$j];\n            }\n        }\n    }\n    my $", "    my $n =\
    \ @$grid;\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $n - 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 ..\
    \ $k - 1) {\n                $dp->[$i][$j][$l] = [];\n            }\n        }\n\
    \    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n   \
    \         $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n    }\n    for my\
    \ $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n            for my $j\
    \ (0 .. $n - 1) {\n                my $min = [];\n                if ($i > 0)\
    \ {\n                    my $tmp = [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($i <\
    \ $n - 1) {\n                    my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j >\
    \ 0) {\n                    my $tmp = [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j <\
    \ $n - 1) {\n                    my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp l", "    my $n = @$grid;\n    my $m =\
    \ @{$grid->[0]};\n    my $min = [];\n    my $min_sum = $n * $m + 1;\n    my $min_path\
    \ = [];\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j] =\
    \ 1;\n            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $sum, $visited, $min, $min_sum,\
    \ $min_path);\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $min_path;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $visited->[$i][$j] = 0;\n        }\n    }\n    my $min_path = [];\n\
    \    my $min_sum = $n * $m * $n * $m;\n    my $cur_path = [];\n    my $cur_sum\
    \ = 0;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         $visited->[$i][$j] = 1;\n            $cur_path = [$grid->[$i][$j]];\n\
    \            $cur_sum = $grid->[$i][$j];\n            dfs($grid, $visited, $cur_path,\
    \ $cur_sum, $min_path, $min_sum, $i, $j, $k, $n, $m);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n  \
    \  my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n \
    \       for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n         \
    \   for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n     \
    \       }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n       \
    \ }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n\
    \            for my $j (0 .. $m - 1) {\n                my $min = [];\n      \
    \          for my $d (0 .. 3) {\n                    my $ni = $i + $dx[$d];\n\
    \                    my $nj = $j + $dy[$d];\n                    if ($ni >= 0\
    \ && $ni < $n && $nj >= 0 && $nj < $m) {\n                        my $cur = $dp->[$ni][$nj][$l\
    \ - 1];\n                        if (!@$min || $cur lt $min) {\n             \
    \               $min = $cur;\n                        }\n                    }\n\
    \                }\n                $dp->[$i][$j][$l] = [@$min, $grid->[$i][$j]];\n\
    \            }\n        }\n    }\n    my $min = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            my $cur = $dp->[$i][$j][$k\
    \ - 1];\n            if (!@$min || $cur lt $min) {\n                $min = $cur;\n\
    \            }\n        }\n    }\n    return $min;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n\
    \        $visited->[$i] = [];\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n     \
    \   $min->[$i] = $grid->[0][0];\n    }\n    my $min_path = [];\n    my $min_path_len\
    \ = $k;\n    my $path = [];\n    my $path_len = 0;\n    my $path_sum = 0;\n  \
    \  my $path_min = $grid->[0][0];\n    my $path_max = $grid->[0][0];\n    my $path_min_idx\
    \ = 0;\n    my $path_max_idx = 0;\n    my $path_min_idx_prev = 0;\n    my $path_max_idx_prev\
    \ = 0;\n    my $path_min_idx_next = 0;\n    my $path_max_idx_next = 0;\n    my\
    \ $path_min_idx_prev_prev = 0;\n    my $path_max_idx_prev_prev = 0;\n    my $path_min_idx_next_next\
    \ = 0;\n    my $path_max_idx_next_next = 0;\n    my $path_min_idx_prev_prev_prev\
    \ = 0;\n    my $path_max_idx_prev_prev_prev = 0;\n    my $path_min_idx_next_next_next\
    \ = 0;\n    my $path_max_idx_next_next_next = 0;\n    my $path_min_idx_prev_prev_prev_prev\
    \ = 0;\n    my $path_max_idx_prev_prev_prev_prev = 0;\n    my $path_min_idx_next_next_next_next\
    \ =", "    my $n = @$grid;\n    my $min = $grid->[0][0];\n    my $max = $grid->[$n-1][$n-1];\n\
    \    my $minPath = [$min];\n    my $minPaths = {};\n    my $paths = {};\n    my\
    \ $path = [$min];\n    $paths->{$min} = [$path];\n    my $i = 0;\n    while ($i\
    \ < $k) {\n        my $newPaths = {};\n        foreach my $val (keys %$paths)\
    \ {\n            my $pathsOfVal = $paths->{$val};\n            foreach my $path\
    \ (@$pathsOfVal) {\n                my $last = $path->[-1];\n                my\
    \ $row = int(($last-1)/$n);\n                my $col = ($last-1)%$n;\n       \
    \         my $newPath = [@$path];\n                if ($row > 0 && $grid->[$row-1][$col]\
    \ < $last) {\n                    push @$newPath, $grid->[$row-1][$col];\n   \
    \                 push @{$newPaths->{$grid->[$row-1][$col]}}, $newPath;\n    \
    \            }\n                if ($row < $n-1 && $grid->[$row+1][$col] < $last)\
    \ {\n                    push @$newPath, $grid->[$row+1][$col];\n            \
    \        push @{$newPaths->{$grid->[$row+1][$col]}}, $newPath;\n             \
    \   }\n                if ($col > 0 && $grid->[$row][$col-1] < $last) {\n    \
    \                push @$newPath, $grid->[$row][$col-1];\n                    push\
    \ @{$newPaths->{$grid->[$row][$col-1]}}, $newPath;\n                }\n      \
    \          if ($col < $n-1 && $grid->[$row][$col+1] < $last) {\n             \
    \       push @$newPath, $grid->[$row][$col+1];\n                    push", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0 .. $k - 1) {\n \
    \       $min->[$i] = $grid->[0][0];\n    }\n    my $min_path = [];\n    for my\
    \ $i (0 .. $k - 1) {\n        $min_path->[$i] = [0, 0];\n    }\n    my $queue\
    \ = [];\n    push @$queue, [0, 0, 0];\n    while (@$queue) {\n        my $cur\
    \ = shift @$queue;\n        my $i = $cur->[0];\n        my $j = $cur->[1];\n \
    \       my $l = $cur->[2];\n        if ($visited->[$i][$j]) {\n            next;\n\
    \        }\n        $visited->[$i][$j] = 1;\n        if ($l == $k - 1) {\n   \
    \         if ($grid->[$i][$j] < $min->[$l]) {\n                $min->[$l] = $grid->[$i][$j];\n\
    \                $min_path->[$l] = [$i, $j];\n            }\n            next;\n\
    \        }\n        if ($grid->[$i][$j] < $min->[$l]) {\n            $min->[$l]\
    \ = $grid->[$i][$j];\n            $min_path->[$l] = [$i, $j];\n        }\n   \
    \     if ($i > 0) {\n            push @$queue, [$i - 1, $j, $l + 1];\n       \
    \ }\n        if ($i < $n - 1) {\n            push @$queue, [$i + 1, $j, $l + 1];\n\
    \        }\n        if ($j > 0) {\n", "    my $n = @$grid;\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $n - 1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n\
    \            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n  \
    \  }\n    my $minPath = [];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $n - 1) {\n            my $path = [];\n            my $visited = [];\n\
    \            for my $i (0 .. $n - 1) {\n                for my $j (0 .. $n - 1)\
    \ {\n                    $visited->[$i][$j] = 0;\n                }\n        \
    \    }\n            $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $minPath, $k, $min, $max);\n\
    \        }\n    }\n    return $minPath;\n}", "    my $n = @$grid;\n    my $m =\
    \ @{$grid->[0]};\n    my $min_path = [];\n    my $min_sum = $n * $m * ($n * $m\
    \ + 1) / 2;\n    my $min_path_sum = $min_sum;\n    my $min_path_hash = {};\n \
    \   my $min_path_hash_sum = {};\n    my $min_path_hash_sum_k = {};\n    my $min_path_hash_sum_k_path\
    \ = {};\n    my $min_path_hash_sum_k_path_sum = {};\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [$grid->[$i][$j]];\n\
    \            my $path_sum = $grid->[$i][$j];\n            my $path_hash = {$grid->[$i][$j]\
    \ => 1};\n            my $path_hash_sum = {$path_sum => 1};\n            my $path_hash_sum_k\
    \ = {};\n            my $path_hash_sum_k_path = {};\n            my $path_hash_sum_k_path_sum\
    \ = {};\n            my $q = [[$i, $j]];\n            while (@$q) {\n        \
    \        my $p = shift @$q;\n                my $x = $p->[0];\n              \
    \  my $y = $p->[1];\n                for my $d ([-1, 0], [1, 0], [0, -1], [0,\
    \ 1]) {\n                    my $x1 = $x + $d->[0];\n                    my $y1\
    \ = $y + $d->[1];\n                    if ($x1 >= 0 && $x1 < $n && $y1 >= 0 &&\
    \ $y1 < $m) {\n                        my $v = $grid->[$x1][$y1];\n          \
    \              my $path1 = [@$path, $v];\n                        my $path_sum1\
    \ = $path_sum + $v;\n                        my $path_", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my $minSum = $n * $m +\
    \ 1;\n    my $minPathSum = $minSum;\n    my $minPathSum2 = $minSum;\n    my $minPath2\
    \ = [];\n    my $minPathSum3 = $minSum;\n    my $minPath3 = [];\n    my $minPathSum4\
    \ = $minSum;\n    my $minPath4 = [];\n    my $minPathSum5 = $minSum;\n    my $minPath5\
    \ = [];\n    my $minPathSum6 = $minSum;\n    my $minPath6 = [];\n    my $minPathSum7\
    \ = $minSum;\n    my $minPath7 = [];\n    my $minPathSum8 = $minSum;\n    my $minPath8\
    \ = [];\n    my $minPathSum9 = $minSum;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $minSum;\n    my $minPath10 = [];\n    my $minPathSum11 = $minSum;\n    my\
    \ $minPath11 = [];\n    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n\
    \    my $minPathSum13 = $minSum;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $minSum;\n    my $minPath14 = [];\n    my $minPathSum15 = $minSum;\n    my\
    \ $minPath15 = [];\n    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n\
    \    my $minPathSum17 = $minSum;\n    my $minPath17 = [];\n    my $minPathSum18\
    \ = $minSum;\n    my $minPath18 = [];\n    my $minPathSum19 = $minSum;\n    my\
    \ $minPath19 = [];\n    my $minPathSum20 = $minSum;\n    my $minPath20 = [];\n\
    \    my $minPathSum21 = $minSum;\n    my $minPath21 = [];\n    my $minPathSum22\
    \ = $minSum", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min_path =\
    \ [];\n    my $min_sum = $n * $m * $n * $m;\n    my $cur_path = [];\n    my $cur_sum\
    \ = 0;\n    my $cur_k = 0;\n    my $cur_i = 0;\n    my $cur_j = 0;\n    my $min_i\
    \ = 0;\n    my $min_j = 0;\n    my $min_k = 0;\n    my $min_sum = $n * $m * $n\
    \ * $m;\n    my $min_path = [];\n    while (1) {\n        if ($cur_k == $k) {\n\
    \            if ($cur_sum < $min_sum) {\n                $min_sum = $cur_sum;\n\
    \                $min_path = $cur_path;\n            }\n            $cur_sum -=\
    \ $grid->[$cur_i][$cur_j];\n            $cur_k--;\n            $visited->[$cur_i][$cur_j]\
    \ = 0;\n            $cur_j = pop(@$cur_path);\n            $cur_i = pop(@$cur_path);\n\
    \            next;\n        }\n        if ($cur_i < 0 || $cur_i >= $n || $cur_j\
    \ < 0 || $cur_j >= $m) {\n            if ($cur_k == 0) {\n                last;\n\
    \            }\n            $cur_sum -= $grid->[$cur_i][$cur_j];\n           \
    \ $cur_k--;\n            $visited->[$cur_i][$cur_j] = 0;\n            $cur_j =\
    \ pop(@$cur_path);\n            $cur_i = pop(@$cur_path);\n            next;\n\
    \        }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n\
    \    my $minSum = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $path =\
    \ [];\n    my $pathSum = 0;\n    my $pathLen = 0;\n    my $minPathLen = $k;\n\
    \    my $minPathEnd = [0, 0];\n    my $cur = [0, 0];\n    my $dirs = [[-1, 0],\
    \ [1, 0], [0, -1], [0, 1]];\n    my $dfs = sub {\n        my($cur, $path, $pathSum,\
    \ $pathLen) = @_;\n        if ($pathLen == $k) {\n            if ($pathSum < $minPathSum)\
    \ {\n                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \                $minPathLen = $pathLen;\n                $minPathEnd = $cur;\n\
    \            }\n            return;\n        }\n        for my $dir (@$dirs) {\n\
    \            my $next = [$cur->[0] + $dir->[0], $cur->[1] + $dir->[1]];\n    \
    \        if ($next->[0] >= 0 && $next->[0] < $n && $next->[1] >= 0 && $next->[1]\
    \ < $m && !$visited->[$next->[0]][$next->[1]]) {\n                $visited->[$next->[0]][$next->[1]]\
    \ = 1;\n                push @$path, $grid->[$next->[0]][$next->[1]];\n      \
    \          $pathSum += $grid->[$next->[0]][$next->[1]];\n                $pathLen++;\n\
    \                $dfs->($next, $", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $path = $dp->[$i - 1][$j][$l - 1];\n                    if (!@$min || $path\
    \ lt $min) {\n                        $min = $path;\n                    }\n \
    \               }\n                if ($i < $n - 1) {\n                    my\
    \ $path = $dp->[$i + 1][$j][$l - 1];\n                    if (!@$min || $path\
    \ lt $min) {\n                        $min = $path;\n                    }\n \
    \               }\n                if ($j > 0) {\n                    my $path\
    \ = $dp->[$i][$j - 1][$l - 1];\n                    if (!@$min || $path lt $min)\
    \ {\n                        $min = $path;\n                    }\n          \
    \      }\n                if ($j < $m - 1) {\n                    my $path = $dp->[$i][$j\
    \ + 1][$l - 1];\n                    if (!@$min || $path lt $min) {\n        \
    \                $min = $path;\n                    }\n                }\n   \
    \             $dp->[$i][$j][$l] = [@$min", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[$n - 1][$m - 1];\n    my\
    \ $minPath = [];\n    my $minPaths = {};\n    my $minPaths2 = {};\n    my $minPaths3\
    \ = {};\n    my $minPaths4 = {};\n    my $minPaths5 = {};\n    my $minPaths6 =\
    \ {};\n    my $minPaths7 = {};\n    my $minPaths8 = {};\n    my $minPaths9 = {};\n\
    \    my $minPaths10 = {};\n    my $minPaths11 = {};\n    my $minPaths12 = {};\n\
    \    my $minPaths13 = {};\n    my $minPaths14 = {};\n    my $minPaths15 = {};\n\
    \    my $minPaths16 = {};\n    my $minPaths17 = {};\n    my $minPaths18 = {};\n\
    \    my $minPaths19 = {};\n    my $minPaths20 = {};\n    my $minPaths21 = {};\n\
    \    my $minPaths22 = {};\n    my $minPaths23 = {};\n    my $minPaths24 = {};\n\
    \    my $minPaths25 = {};\n    my $minPaths26 = {};\n    my $minPaths27 = {};\n\
    \    my $minPaths28 = {};\n    my $minPaths29 = {};\n    my $minPaths30 = {};\n\
    \    my $minPaths31 = {};\n    my $minPaths32 = {};\n    my $minPaths33 = {};\n\
    \    my $minPaths34 = {};\n    my $minPaths35 = {};\n    my $minPaths36 = {};\n\
    \    my $minPaths37 = {};\n    my $minPaths38 = {};\n    my $minPaths39 = {};\n\
    \    my $minPaths40 = {};\n    my $minPath", "    my $n = @$grid;\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $n - 1) {\n            my $path = [$grid->[$i][$j]];\n  \
    \          my $sum = $grid->[$i][$j];\n            my $visited = {};\n       \
    \     $visited->{\"$i,$j\"} = 1;\n            dfs($grid, $i, $j, $k - 1, $path,\
    \ $sum, $visited, $min_path, $min_sum);\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m * $k;\n\
    \    my $minPathSum = 0;\n    my $minPathLen = 0;\n    my $minPathLast = 0;\n\
    \    my $minPathLastRow = 0;\n    my $minPathLastCol = 0;\n    my $minPathLastRowDir\
    \ = 0;\n    my $minPathLastColDir = 0;\n    my $minPathLastRowDir2 = 0;\n    my\
    \ $minPathLastColDir2 = 0;\n    my $minPathLastRowDir3 = 0;\n    my $minPathLastColDir3\
    \ = 0;\n    my $minPathLastRowDir4 = 0;\n    my $minPathLastColDir4 = 0;\n   \
    \ my $minPathLastRowDir5 = 0;\n    my $minPathLastColDir5 = 0;\n    my $minPathLastRowDir6\
    \ = 0;\n    my $minPathLastColDir6 = 0;\n    my $minPathLastRowDir7 = 0;\n   \
    \ my $minPathLastColDir7 = 0;\n    my $minPathLastRowDir8 = 0;\n    my $minPathLastColDir8\
    \ = 0;\n    my $minPathLastRowDir9 = 0;\n    my $minPathLastColDir9 = 0;\n   \
    \ my $minPathLastRowDir10 = 0;\n    my $minPathLastColDir10 = 0;\n    my $minPathLastRowDir11\
    \ = 0;\n    my $minPathLastColDir11 = 0;\n    my $minPathLastRowDir12 = 0;\n \
    \   my $minPathLastColDir12 = 0;\n    my $minPathLastRowDir13 = 0;\n    my $minPathLastColDir13\
    \ = 0;\n    my $minPathLastRowDir14 = 0;\n   ", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            for my $l (0 .. $k -\
    \ 1) {\n                $dp->[$i][$j][$l] = {};\n            }\n        }\n  \
    \  }\n    my $min = undef;\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            $dp->[$i][$j][0]->{$grid->[$i][$j]} = 1;\n       \
    \     if (not defined $min or $min > $grid->[$i][$j]) {\n                $min\
    \ = $grid->[$i][$j];\n            }\n        }\n    }\n    for my $l (1 .. $k\
    \ - 1) {\n        for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m -\
    \ 1) {\n                for my $p (0 .. $n - 1) {\n                    for my\
    \ $q (0 .. $m - 1) {\n                        if (abs($i - $p) + abs($j - $q)\
    \ == 1) {\n                            for my $v (keys %{$dp->[$p][$q][$l - 1]})\
    \ {\n                                if (not defined $min or $min > $v) {\n  \
    \                                  $min = $v;\n                              \
    \  }\n                                $dp->[$i][$j][$l]->{$v} = 1;\n         \
    \                   }\n                        }\n                    }\n    \
    \            }\n            }\n        }\n    }\n    return $min;\n}", "    my\
    \ $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path =\
    \ [];\n    my $min_path_sum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n \
    \       for my $j (0 .. $m - 1) {\n            my $path = [];\n            my\
    \ $path_sum = 0;\n            my $visited = {};\n            dfs($grid, $i, $j,\
    \ $k, $path, $path_sum, $visited);\n            if ($path_sum < $min_path_sum)\
    \ {\n                $min_path_sum = $path_sum;\n                $min_path = $path;\n\
    \            }\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n        $min->[$i]\
    \ = $grid->[0][0];\n    }\n    my $min_path = [];\n    for my $i (0..$k-1) {\n\
    \        $min_path->[$i] = [0, 0];\n    }\n    my $path = [];\n    for my $i (0..$k-1)\
    \ {\n        $path->[$i] = [0, 0];\n    }\n    my $len = 0;\n    my $min_len =\
    \ $k;\n    my $i = 0;\n    my $j = 0;\n    my $dir = 0;\n    while (1) {\n   \
    \     if ($len == $k) {\n            if ($grid->[$i][$j] < $min->[$len-1]) {\n\
    \                $min->[$len-1] = $grid->[$i][$j];\n                for my $l\
    \ (0..$len-1) {\n                    $min_path->[$l] = [$path->[$l][0], $path->[$l][1]];\n\
    \                }\n                $min_len = $len;\n            }\n        \
    \    $visited->[$i][$j] = 0;\n            $len--;\n            $i = $path->[$len][0];\n\
    \            $j = $path->[$len][1];\n            $dir = 0;\n            next;\n\
    \        }\n        if ($i == 0 && $j == 0) {\n            $visited->[$i][$j]\
    \ = 1;\n            $path->[$len] = [$i, $j];\n            $len++;\n         \
    \   $dir = 0;\n           ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for\
    \ my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [$grid->[$i][$j]];\n\
    \            }\n        }\n    }\n    for my $l (1 .. $k - 1) {\n        for my\
    \ $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n                my\
    \ $min = [];\n                if ($i > 0) {\n                    if (compare($dp->[$i\
    \ - 1][$j][$l - 1], $min) < 0) {\n                        $min = $dp->[$i - 1][$j][$l\
    \ - 1];\n                    }\n                }\n                if ($i < $n\
    \ - 1) {\n                    if (compare($dp->[$i + 1][$j][$l - 1], $min) < 0)\
    \ {\n                        $min = $dp->[$i + 1][$j][$l - 1];\n             \
    \       }\n                }\n                if ($j > 0) {\n                \
    \    if (compare($dp->[$i][$j - 1][$l - 1], $min) < 0) {\n                   \
    \     $min = $dp->[$i][$j - 1][$l - 1];\n                    }\n             \
    \   }\n                if ($j < $m - 1) {\n                    if (compare($dp->[$i][$j\
    \ + 1][$l - 1], $min) < 0) {\n                        $min = $dp->[$i][$j +",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n     \
    \   $min->[$i] = $grid->[0][0];\n    }\n    my $q = [];\n    push @$q, [0, 0,\
    \ 0];\n    while (@$q) {\n        my $cur = shift @$q;\n        my($i, $j, $d)\
    \ = @$cur;\n        if ($d == $k) {\n            last;\n        }\n        if\
    \ ($visited->[$i][$j]) {\n            next;\n        }\n        $visited->[$i][$j]\
    \ = 1;\n        if ($grid->[$i][$j] < $min->[$d]) {\n            for my $x ($d..$k-1)\
    \ {\n                $min->[$x] = $grid->[$i][$j];\n            }\n        }\n\
    \        if ($i > 0) {\n            push @$q, [$i-1, $j, $d+1];\n        }\n \
    \       if ($i < $n-1) {\n            push @$q, [$i+1, $j, $d+1];\n        }\n\
    \        if ($j > 0) {\n            push @$q, [$i, $j-1, $d+1];\n        }\n \
    \       if ($j < $m-1) {\n            push @$q, [$i, $j+1, $d+1];\n        }\n\
    \    }\n    return $min;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $tmp = $dp->[$i - 1][$j][$l - 1];\n                    if (!@$min || $tmp->[0]\
    \ < $min->[0]) {\n                        $min = $tmp;\n                    }\n\
    \                }\n                if ($i < $n - 1) {\n                    my\
    \ $tmp = $dp->[$i + 1][$j][$l - 1];\n                    if (!@$min || $tmp->[0]\
    \ < $min->[0]) {\n                        $min = $tmp;\n                    }\n\
    \                }\n                if ($j > 0) {\n                    my $tmp\
    \ = $dp->[$i][$j - 1][$l - 1];\n                    if (!@$min || $tmp->[0] <\
    \ $min->[0]) {\n                        $min = $tmp;\n                    }\n\
    \                }\n                if ($j < $m - 1) {\n                    my\
    \ $tmp = $dp->[$i][$j + 1][$l - 1];\n                    if (!@$min || $tmp->[0]\
    \ < $min->[0]) {\n                        $min = $tmp;\n                    }\n\
    \                }\n               ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $up = $dp->[$i - 1][$j][$l - 1];\n                    if (!@$min || $up->[0]\
    \ < $min->[0]) {\n                        $min = $up;\n                    }\n\
    \                }\n                if ($i < $n - 1) {\n                    my\
    \ $down = $dp->[$i + 1][$j][$l - 1];\n                    if (!@$min || $down->[0]\
    \ < $min->[0]) {\n                        $min = $down;\n                    }\n\
    \                }\n                if ($j > 0) {\n                    my $left\
    \ = $dp->[$i][$j - 1][$l - 1];\n                    if (!@$min || $left->[0] <\
    \ $min->[0]) {\n                        $min = $left;\n                    }\n\
    \                }\n                if ($j < $m - 1) {\n                    my\
    \ $right = $dp->[$i][$j + 1][$l - 1];\n                    if (!@$min || $right->[0]\
    \ < $min->[0]) {\n                        $min = $right;\n                   \
    \ }\n                }\n               ", "    my $n = @$grid;\n    my $min_path\
    \ = [];\n    my $min_sum = $n * $n * $k;\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $n - 1) {\n            my $path = [];\n            my $sum\
    \ = $grid->[$i][$j];\n            my $visited = {};\n            $visited->{\"\
    $i,$j\"} = 1;\n            push @$path, $grid->[$i][$j];\n            my $res\
    \ = dfs($grid, $i, $j, $k - 1, $sum, $visited, $path);\n            if ($res->[0]\
    \ < $min_sum) {\n                $min_sum = $res->[0];\n                $min_path\
    \ = $res->[1];\n            }\n        }\n    }\n    return $min_path;\n}", " \
    \   my $n = @$grid;\n    my $visited = {};\n    my $min = [];\n    my $min_sum\
    \ = $n * $n + 1;\n    my $min_path = [];\n    my $min_path_sum = $n * $n + 1;\n\
    \    my $min_path_len = $n * $n + 1;\n    my $min_path_len_sum = $n * $n + 1;\n\
    \    my $min_path_len_sum_path = [];\n    my $min_path_len_sum_path_sum = $n *\
    \ $n + 1;\n    my $min_path_len_sum_path_sum_path = [];\n    my $min_path_len_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path = [];\n    my\
    \ $min_path_len_sum_path_sum_path_sum_path_sum = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum = $n * $n\
    \ + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path = [];\n\
    \    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum = $n *\
    \ $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum\
    \ = $n * $n + 1;\n    my $min_path_len_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path_sum_path\
    \ = [];\n    my $min_path_len_sum_", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min_path =\
    \ [];\n    my $min_sum = $n * $m * $k;\n    for my $i (0..$n-1) {\n        for\
    \ my $j (0..$m-1) {\n            my $path = [];\n            my $sum = 0;\n  \
    \          $visited->[$i][$j] = 1;\n            push @$path, $grid->[$i][$j];\n\
    \            $sum += $grid->[$i][$j];\n            my $ret = dfs($grid, $visited,\
    \ $path, $sum, $k, $i, $j);\n            if ($ret->[0] < $min_sum) {\n       \
    \         $min_sum = $ret->[0];\n                $min_path = $ret->[1];\n    \
    \        }\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_sum = $n * $m + 1;\n    my $min_sum_path\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          my $path = [];\n            my $sum = 0;\n            my $sum_path\
    \ = [];\n            my $visited = [];\n            for my $x (0 .. $n - 1) {\n\
    \                for my $y (0 .. $m - 1) {\n                    $visited->[$x][$y]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            push @$path, $grid->[$i][$j];\n            push @$sum_path, $grid->[$i][$j];\n\
    \            $sum += $grid->[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $path, $sum, $sum_path, $visited);\n            if ($sum < $min_sum) {\n   \
    \             $min_sum = $sum;\n                $min_sum_path = $sum_path;\n \
    \           } elsif ($sum == $min_sum) {\n                if (lexicographicallyLess($sum_path,\
    \ $min_sum_path)) {\n                    $min_sum_path = $sum_path;\n        \
    \        }\n            }\n        }\n    }\n    return $min_sum_path;\n}", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[$n - 1][$m - 1];\n    my $dp = [];\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n\
    \            for my $v ($min .. $max) {\n                $dp->[$i][$j][$v] = [];\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            for my $v ($min .. $max) {\n               \
    \ $dp->[$i][$j][$v][0] = $grid->[$i][$j] == $v;\n            }\n        }\n  \
    \  }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n     \
    \       for my $j (0 .. $m - 1) {\n                for my $v ($min .. $max) {\n\
    \                    $dp->[$i][$j][$v][$l] = 0;\n                    if ($i >\
    \ 0) {\n                        $dp->[$i][$j][$v][$l] += $dp->[$i - 1][$j][$v][$l\
    \ - 1];\n                    }\n                    if ($i < $n - 1) {\n     \
    \                   $dp->[$i][$j][$v][$l] += $dp->[$i + 1][$j][$v][$l - 1];\n\
    \                    }\n                    if ($j > 0) {\n                  \
    \      $dp->[$i][$j][$v][$l] += $dp->[$i][$j - 1][$v][$l - 1];\n             \
    \       }\n                    if ($j < $m - 1) {\n                        $dp->[$i][$j][$v][$l]\
    \ += $dp->[$i][$j + 1][$", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $sum = 0;\n            my $visited = {};\n            my $dfs =\
    \ sub {\n                my($i, $j, $k) = @_;\n                if ($k == 0) {\n\
    \                    if ($sum < $min_sum) {\n                        $min_sum\
    \ = $sum;\n                        $min_path = [@$path];\n                   \
    \ }\n                    return;\n                }\n                for my $d\
    \ ([-1, 0], [1, 0], [0, -1], [0, 1]) {\n                    my($i1, $j1) = ($i\
    \ + $d->[0], $j + $d->[1]);\n                    next if $i1 < 0 || $i1 >= $n\
    \ || $j1 < 0 || $j1 >= $m;\n                    next if $visited->{\"$i1,$j1\"\
    };\n                    $visited->{\"$i1,$j1\"} = 1;\n                    push\
    \ @$path, $grid->[$i1][$j1];\n                    $sum += $grid->[$i1][$j1];\n\
    \                    $dfs->($i1, $j1, $k - 1);\n                    pop @$path;\n\
    \                    $sum -= $grid->[$i1][$j1];\n                    delete $visited->{\"\
    $i1,$j1\"};\n                }\n            };\n            $dfs->($i, $j, $k);\n\
    \        }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n    my $m\
    \ = @{$grid->[0]};\n    my $visited = {};\n    my $minPath = [];\n    my $minSum\
    \ = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $minPathSum2 = $minSum;\n\
    \    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3 = $minSum;\n\
    \    my $minPathSum4 = $minSum;\n    my $minPath4 = [];\n    my $minPathSum5 =\
    \ $minSum;\n    my $minPath5 = [];\n    my $minPathSum6 = $minSum;\n    my $minPath6\
    \ = [];\n    my $minPathSum7 = $minSum;\n    my $minPath7 = [];\n    my $minPathSum8\
    \ = $minSum;\n    my $minPath8 = [];\n    my $minPathSum9 = $minSum;\n    my $minPath9\
    \ = [];\n    my $minPathSum10 = $minSum;\n    my $minPath10 = [];\n    my $minPathSum11\
    \ = $minSum;\n    my $minPath11 = [];\n    my $minPathSum12 = $minSum;\n    my\
    \ $minPath12 = [];\n    my $minPathSum13 = $minSum;\n    my $minPath13 = [];\n\
    \    my $minPathSum14 = $minSum;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $minSum;\n    my $minPath15 = [];\n    my $minPathSum16 = $minSum;\n    my\
    \ $minPath16 = [];\n    my $minPathSum17 = $minSum;\n    my $minPath17 = [];\n\
    \    my $minPathSum18 = $minSum;\n    my $minPath18 = [];\n    my $minPathSum19\
    \ = $minSum;\n    my $minPath19 = [];\n    my $minPathSum20 = $minSum;\n    my\
    \ $minPath20 = [];\n    my $minPathSum21 = $minSum;\n    my $minPath21 = [];\n\
    \   ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m + 1;\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
    \ = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n     \
    \       $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            my $res = dfs($grid, $visited, $i, $j, $k, $sum, $path);\n      \
    \      if ($res->[0] < $minSum) {\n                $minSum = $res->[0];\n    \
    \            $minPath = $res->[1];\n            }\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $minPath;\n}", "    my $n = @$grid;\n   \
    \ my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n \
    \       for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $min = [];\n    for my $i (0..$k-1) {\n        $min->[$i] = $grid->[0][0];\n\
    \    }\n    my $min_path = [];\n    for my $i (0..$k-1) {\n        $min_path->[$i]\
    \ = [0, 0];\n    }\n    my $path = [];\n    for my $i (0..$k-1) {\n        $path->[$i]\
    \ = [0, 0];\n    }\n    my $path_len = 0;\n    my $min_path_len = 0;\n    my $path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $i = 0;\n    my $j = 0;\n    my $visited_count\
    \ = 0;\n    my $min_visited_count = 0;\n    my $min_visited = [];\n    for my\
    \ $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $min_visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min_visited_sum = 0;\n    my $min_visited_sum_count\
    \ = 0;\n    my $min_visited_sum_count_max = 0;\n    my $min_visited_sum_count_max_sum\
    \ = 0;\n    my $min_visited_sum_count_max_sum_count = 0;\n    my $min_visited_sum_count_max_sum_count_max\
    \ = 0;\n    my $min_visited_sum_count_max_sum_count_max_sum = 0;\n    my $min_visited_sum_count_max_sum_count_",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i\
    \ (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j]\
    \ = [];\n            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l]\
    \ = [];\n            }\n        }\n    }\n    my $min = [];\n    for my $i (0\
    \ .. $k - 1) {\n        $min->[$i] = [1e9, 1e9];\n    }\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            for my $l (0 .. $k -\
    \ 1) {\n                if ($l == 0) {\n                    $dp->[$i][$j][$l]\
    \ = [$grid->[$i][$j]];\n                    if ($grid->[$i][$j] < $min->[$l][0])\
    \ {\n                        $min->[$l] = [$grid->[$i][$j], $i, $j];\n       \
    \             }\n                } else {\n                    my $min_val = 1e9;\n\
    \                    my $min_path = [];\n                    if ($i > 0) {\n \
    \                       my $path = [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                        if ($path->[0] < $min_val) {\n                      \
    \      $min_val = $path->[0];\n                            $min_path = $path;\n\
    \                        }\n                    }\n                    if ($i\
    \ < $n - 1) {\n                        my $path = [@{$dp->[$i + 1][$j][$l - 1]},\
    \ $grid->[$i][$j]];\n                        if ($path->[0] < $min_val) {\n  \
    \                          $min_val = $path->[0];\n                          \
    \  $min_path = $path;\n                        }\n", "    my $n = @$grid;\n  \
    \  my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n \
    \       for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n         \
    \   for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n     \
    \       }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n       \
    \ }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n\
    \            for my $j (0 .. $m - 1) {\n                my $min = [];\n      \
    \          if ($i > 0) {\n                    my $tmp = $dp->[$i - 1][$j][$l -\
    \ 1];\n                    if (!@$min || $tmp->[0] < $min->[0]) {\n          \
    \              $min = $tmp;\n                    }\n                }\n      \
    \          if ($i < $n - 1) {\n                    my $tmp = $dp->[$i + 1][$j][$l\
    \ - 1];\n                    if (!@$min || $tmp->[0] < $min->[0]) {\n        \
    \                $min = $tmp;\n                    }\n                }\n    \
    \            if ($j > 0) {\n                    my $tmp = $dp->[$i][$j - 1][$l\
    \ - 1];\n                    if (!@$min || $tmp->[0] < $min->[0]) {\n        \
    \                $min = $tmp;\n                    }\n                }\n    \
    \            if ($j < $m - 1) {\n                    my $tmp = $dp->[$i][$j +\
    \ 1][$l - 1];\n                    if (!@$min || $tmp->[0] < $min->[0]) {\n  \
    \                      $min = $tmp;\n                    }\n                }\n\
    \               ", "    my $n = @$grid;\n    my $min = $grid->[0][0];\n    my\
    \ $max = $grid->[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $n - 1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n \
    \           $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n   \
    \ }\n    my $res = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $n - 1) {\n            if ($grid->[$i][$j] == $min) {\n                my $path\
    \ = dfs($grid, $i, $j, $k, $n, $min, $max);\n                $res = $path if $path\
    \ && (!@$res || $path->[0] < $res->[0]);\n            }\n        }\n    }\n  \
    \  return $res;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my\
    \ $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $min = $grid->[$i][$j]\
    \ if $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j]\
    \ > $max;\n        }\n    }\n    my $minPath = [];\n    my $minPathSum = $max\
    \ * $k;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    my $path = [];\n    my $pathSum = 0;\n    for my $i (0 .. $n - 1) {\n   \
    \     for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 1;\n       \
    \     push @$path, $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited->[$i][$j] = 0;\n            pop @$path;\n            $pathSum\
    \ -= $grid->[$i][$j];\n        }\n    }\n    return $minPath;\n}", "    my $n\
    \ = @$grid;\n    my @minPath;\n    my $minSum = $n * $n * $n;\n    my @minPath;\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n          \
    \  my @path;\n            my $sum = 0;\n            my $visited = {};\n      \
    \      my $res = dfs($grid, $i, $j, $k, \\@path, $sum, $visited);\n          \
    \  if ($res) {\n                if ($sum < $minSum) {\n                    $minSum\
    \ = $sum;\n                    @minPath = @path;\n                }\n        \
    \    }\n        }\n    }\n    return @minPath;\n}", "    my $n = @$grid;\n   \
    \ my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n  \
    \      for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n          \
    \  for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n      \
    \      }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n\
    \    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n   \
    \         for my $j (0 .. $m - 1) {\n                my $min = [];\n         \
    \       if ($i > 0) {\n                    my $prev = $dp->[$i - 1][$j][$l - 1];\n\
    \                    if (!@$min || $prev->[0] < $min->[0]) {\n               \
    \         $min = $prev;\n                    }\n                }\n          \
    \      if ($i < $n - 1) {\n                    my $prev = $dp->[$i + 1][$j][$l\
    \ - 1];\n                    if (!@$min || $prev->[0] < $min->[0]) {\n       \
    \                 $min = $prev;\n                    }\n                }\n  \
    \              if ($j > 0) {\n                    my $prev = $dp->[$i][$j - 1][$l\
    \ - 1];\n                    if (!@$min || $prev->[0] < $min->[0]) {\n       \
    \                 $min = $prev;\n                    }\n                }\n  \
    \              if ($j < $m - 1) {\n                    my $prev = $dp->[$i][$j\
    \ + 1][$l - 1];\n                    if (!@$min || $prev->[0] < $min->[0]) {\n\
    \                        $min = $prev;\n                    }\n              \
    \  }\n               ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n   \
    \ my $min = [];\n    my $min_sum = $n * $m * $n;\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            my $sum = 0;\n            my $path = [];\n       \
    \     dfs($grid, $i, $j, $k, $sum, $path, $visited, $min, $min_sum);\n       \
    \ }\n    }\n    return $min;\n}", "    my $n = @$grid;\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[$n-1][$n-1];\n    my $minPath = [];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$n-1) {\n            if ($grid->[$i][$j] < $min) {\n\
    \                $min = $grid->[$i][$j];\n            }\n            if ($grid->[$i][$j]\
    \ > $max) {\n                $max = $grid->[$i][$j];\n            }\n        }\n\
    \    }\n    my $minPath = [];\n    my $minPathLen = $k;\n    my $minPathSum =\
    \ $max * $k;\n    my $minPathSumLen = $k;\n    my $minPathSumSum = $max * $k;\n\
    \    my $minPathSumSumLen = $k;\n    my $minPathSumSumSum = $max * $k;\n    my\
    \ $minPathSumSumSumLen = $k;\n    my $minPathSumSumSumSum = $max * $k;\n    my\
    \ $minPathSumSumSumSumLen = $k;\n    my $minPathSumSumSumSumSum = $max * $k;\n\
    \    my $minPathSumSumSumSumSumLen = $k;\n    my $minPathSumSumSumSumSumSum =\
    \ $max * $k;\n    my $minPathSumSumSumSumSumSumLen = $k;\n    my $minPathSumSumSumSumSumSumSum\
    \ = $max * $k;\n    my $minPathSumSumSumSumSumSumSumLen = $k;\n    my $minPathSumSumSumSumSumSumSumSum\
    \ = $max * $k;\n    my $minPathSumSumSumSumSumSumSumSumLen = $k;\n    my $minPathSumSumSumSumSumSumSumSumSum\
    \ = $max * $k;\n    my $minPathSumSumSumSumSumSumSumSumSumLen = $k;\n    my $minPathSumSumSumSumSumSumSumSumSumSum\
    \ = $max * $k;\n    my $", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min = [];\n\
    \    for my $i (0..$k-1) {\n        $min->[$i] = $grid->[0][0];\n    }\n    my\
    \ $min_sum = $grid->[0][0];\n    my $min_path = [];\n    my $min_path_sum = 0;\n\
    \    my $min_path_len = 0;\n    my $min_path_visited = [];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $min_path_visited->[$i][$j] =\
    \ 0;\n        }\n    }\n    my $path = [];\n    my $path_sum = 0;\n    my $path_len\
    \ = 0;\n    my $path_visited = [];\n    for my $i (0..$n-1) {\n        for my\
    \ $j (0..$m-1) {\n            $path_visited->[$i][$j] = 0;\n        }\n    }\n\
    \    my $stack = [];\n    push @$stack, [0, 0];\n    while (scalar(@$stack) >\
    \ 0) {\n        my $cell = pop @$stack;\n        my($i, $j) = @$cell;\n      \
    \  if ($visited->[$i][$j] == 1) {\n            next;\n        }\n        $visited->[$i][$j]\
    \ = 1;\n        if ($path_len == $k) {\n            if ($path_sum < $min_sum)\
    \ {\n                $min_sum = $path_sum;\n                for my $i (0..$k-1)\
    \ {\n                    $min->[$i] = $path->[$i", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n\
    \            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l]\
    \ = [$grid->[$i][$j]];\n            }\n        }\n    }\n    for my $l (1 .. $k\
    \ - 1) {\n        for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m -\
    \ 1) {\n                my $min = [];\n                if ($i > 0) {\n       \
    \             $min = $dp->[$i - 1][$j][$l - 1];\n                }\n         \
    \       if ($j > 0 && (!@$min || $min->[0] > $dp->[$i][$j - 1][$l - 1]->[0]))\
    \ {\n                    $min = $dp->[$i][$j - 1][$l - 1];\n                }\n\
    \                if ($i < $n - 1 && (!@$min || $min->[0] > $dp->[$i + 1][$j][$l\
    \ - 1]->[0])) {\n                    $min = $dp->[$i + 1][$j][$l - 1];\n     \
    \           }\n                if ($j < $m - 1 && (!@$min || $min->[0] > $dp->[$i][$j\
    \ + 1][$l - 1]->[0])) {\n                    $min = $dp->[$i][$j + 1][$l - 1];\n\
    \                }\n                $dp->[$i][$j", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = {};\n\
    \        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            if ($i > 0) {\n                my $prev = $dp->[$i - 1][$j];\n\
    \                for my $path (keys %$prev) {\n                    my $newPath\
    \ = $path . $grid->[$i][$j];\n                    $dp->[$i][$j]{$newPath} = 1;\n\
    \                }\n            }\n            if ($j > 0) {\n               \
    \ my $prev = $dp->[$i][$j - 1];\n                for my $path (keys %$prev) {\n\
    \                    my $newPath = $path . $grid->[$i][$j];\n                \
    \    $dp->[$i][$j]{$newPath} = 1;\n                }\n            }\n        \
    \    if ($i == 0 && $j == 0) {\n                $dp->[$i][$j]{$grid->[$i][$j]}\
    \ = 1;\n            }\n        }\n    }\n    my $minPath = \"\";\n    for my $path\
    \ (keys %{$dp->[$n - 1][$m - 1]}) {\n        if (length($path) == $k) {\n    \
    \        if ($minPath eq \"\" || $path lt $minPath) {\n                $minPath\
    \ = $path;\n            }\n        }\n    }\n    return [split(//, $minPath)];\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
    \ = {};\n    my $minPath = [];\n    my $minPathSum = $n * $n + 1;\n    my $minPathSum2\
    \ = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPath3 = [];\n    my $minPathSum3\
    \ = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum4 = $n * $n + 1;\n\
    \    my $minPath5 = [];\n    my $minPathSum5 = $n * $n + 1;\n    my $minPath6\
    \ = [];\n    my $minPathSum6 = $n * $n + 1;\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum8 = $n * $n + 1;\n\
    \    my $minPath9 = [];\n    my $minPathSum9 = $n * $n + 1;\n    my $minPath10\
    \ = [];\n    my $minPathSum10 = $n * $n + 1;\n    my $minPath11 = [];\n    my\
    \ $minPathSum11 = $n * $n + 1;\n    my $minPath12 = [];\n    my $minPathSum12\
    \ = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum13 = $n * $n + 1;\n\
    \    my $minPath14 = [];\n    my $minPathSum14 = $n * $n + 1;\n    my $minPath15\
    \ = [];\n    my $minPathSum15 = $n * $n + 1;\n    my $minPath16 = [];\n    my\
    \ $minPathSum16 = $n * $n + 1;\n    my $minPath17 = [];\n    my $minPathSum17\
    \ = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPathSum18 = $n * $n + 1;\n\
    \    my $minPath", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited\
    \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n          \
    \  $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum\
    \ = $n * $m * $k;\n    my $minPathSum = $minSum;\n    my $minPathIndex = 0;\n\
    \    my $minPathIndexSum = $minSum;\n    my $minPathIndexSumIndex = 0;\n    my\
    \ $minPathIndexSumIndexSum = $minSum;\n    my $minPathIndexSumIndexSumIndex =\
    \ 0;\n    my $minPathIndexSumIndexSumIndexSum = $minSum;\n    my $minPathIndexSumIndexSumIndexSumIndex\
    \ = 0;\n    my $minPathIndexSumIndexSumIndexSumIndexSum = $minSum;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndex\
    \ = 0;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSum = $minSum;\n \
    \   my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndex = 0;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndexSum\
    \ = $minSum;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndex\
    \ = 0;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSum\
    \ = $minSum;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndex\
    \ = 0;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSum\
    \ = $minSum;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndex\
    \ = 0;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSum\
    \ = $minSum;\n    my $minPathIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndexSumIndex\
    \ = 0;\n    my $minPathIndexSumIndexSumIndexSum", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min = $grid->[0][0];\n    my $max\
    \ = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n\
    \            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n            $max\
    \ = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my $minPath\
    \ = [];\n    my $minSum = $max * $k;\n    my $minSumPath = [];\n    for my $i\
    \ (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n   \
    \         my $sum = 0;\n            my $sumPath = [];\n            my $visited\
    \ = [];\n            for my $i (0..$n-1) {\n                for my $j (0..$m-1)\
    \ {\n                    $visited->[$i][$j] = 0;\n                }\n        \
    \    }\n            dfs($grid, $i, $j, $k, $path, $sum, $sumPath, $visited);\n\
    \            if ($sum < $minSum) {\n                $minSum = $sum;\n        \
    \        $minSumPath = $sumPath;\n            }\n            if ($sum == $minSum)\
    \ {\n                if (less($sumPath, $minSumPath)) {\n                    $minSumPath\
    \ = $sumPath;\n                }\n            }\n        }\n    }\n    return\
    \ $minSumPath;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n      \
    \          $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                for my $d (0 .. 3) {\n             \
    \       my $ni = $i + $dx[$d];\n                    my $nj = $j + $dy[$d];\n \
    \                   if ($ni >= 0 && $ni < $n && $nj >= 0 && $nj < $m) {\n    \
    \                    my $cur = $dp->[$ni][$nj][$l - 1];\n                    \
    \    if (!@$min || $cur lt $min) {\n                            $min = $cur;\n\
    \                        }\n                    }\n                }\n       \
    \         $dp->[$i][$j][$l] = [@$min, $grid->[$i][$j]];\n            }\n     \
    \   }\n    }\n    my $min = [];\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $cur = $dp->[$i][$j][$k - 1];\n         \
    \   if (!@$min || $cur lt $min) {\n                $min = $cur;\n            }\n\
    \        }\n    }\n    return $min;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min = [];\n\
    \    for my $i (0..$k-1) {\n        $min->[$i] = $grid->[0][0];\n    }\n    my\
    \ $min_path = [];\n    my $min_path_len = $k;\n    my $path = [];\n    my $path_len\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $cur_min = $grid->[0][0];\n   \
    \ my $cur_max = $grid->[0][0];\n    while (1) {\n        if ($path_len == $k)\
    \ {\n            if ($cur_min < $min->[0]) {\n                for my $i (0..$k-1)\
    \ {\n                    $min->[$i] = $path->[$i];\n                }\n      \
    \          $min_path = $path;\n                $min_path_len = $path_len;\n  \
    \          } elsif ($cur_min == $min->[0]) {\n                my $i = 0;\n   \
    \             while ($i < $k && $path->[$i] == $min->[$i]) {\n               \
    \     $i++;\n                }\n                if ($i < $k && $path->[$i] < $min->[$i])\
    \ {\n                    for my $i (0..$k-1) {\n                        $min->[$i]\
    \ = $path->[$i];\n                    }\n                    $min_path = $path;\n\
    \                    $min_path_len = $path_len;\n                }\n         \
    \   }\n            $visited->[$i][$j] = 0;\n            $path_len--;\n       \
    \     $cur_min = $path->[$path_len];\n            $cur_max = $path->[$path_len",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min_path = [];\n    my $min_sum = $n * $m +\
    \ 1;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx = -1;\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path = [];\n\
    \            my $sum = 0;\n            my $path_sum = 0;\n            my $path_sum_idx\
    \ = -1;\n            my $path_sum_idx_found = 0;\n            my $path_sum_idx_found_idx\
    \ = -1;\n            my $path_sum_idx_found_idx_found = 0;\n            my $path_sum_idx_found_idx_found_idx\
    \ = -1;\n            my $path_sum_idx_found_idx_found_idx_found = 0;\n       \
    \     my $path_sum_idx_found_idx_found_idx_found_idx = -1;\n            my $path_sum_idx_found_idx_found_idx_found_idx_found\
    \ = 0;\n            my $path_sum_idx_found_idx_found_idx_found_idx_found_idx =\
    \ -1;\n            my $path_sum_idx_found_idx_found_idx_found_idx_found_idx_found\
    \ = 0;\n            my $path_sum_idx_found_idx_found_idx_found_idx_found_idx_found_idx\
    \ = -1;\n            my $path_sum_idx_found_idx_found_idx_found_idx_found_idx_found",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n\
    \            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n  \
    \  }\n    my $minPath = [];\n    my $minPathSum = $max * $k;\n    my $minPathSum2\
    \ = $max * $k;\n    my $minPathSum3 = $max * $k;\n    my $minPath2 = [];\n   \
    \ my $minPath3 = [];\n    my $minPath4 = [];\n    my $minPath5 = [];\n    my $minPath6\
    \ = [];\n    my $minPath7 = [];\n    my $minPath8 = [];\n    my $minPath9 = [];\n\
    \    my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPath12 = [];\n \
    \   my $minPath13 = [];\n    my $minPath14 = [];\n    my $minPath15 = [];\n  \
    \  my $minPath16 = [];\n    my $minPath17 = [];\n    my $minPath18 = [];\n   \
    \ my $minPath19 = [];\n    my $minPath20 = [];\n    my $minPath21 = [];\n    my\
    \ $minPath22 = [];\n    my $minPath23 = [];\n    my $minPath24 = [];\n    my $minPath25\
    \ = [];\n    my $minPath26 = [];\n    my $minPath27 = [];\n    my $minPath28 =\
    \ [];\n    my $minPath29 = [];\n    my $minPath30 = [];\n    my $minPath31 = [];\n\
    \    my $minPath32 = [];\n    my $minPath33 = [];\n    my $minPath34 = [];\n \
    \   my $minPath35 = [];\n    my $min", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min = [];\n\
    \    for my $i (0..$k-1) {\n        $min->[$i] = $grid->[0][0];\n    }\n    my\
    \ $min_path = [];\n    my $path = [];\n    my $path_len = 0;\n    my $min_path_len\
    \ = 0;\n    my $min_path_sum = 0;\n    my $path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_sum = 0;\n    my $min_path_sum = 0;", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $minPath = [];\n    my $minSum = $n * $m * $k;\n    my $curPath\
    \ = [];\n    my $curSum = 0;\n    my $curLen = 0;\n    my $curI = 0;\n    my $curJ\
    \ = 0;\n    my $curVisited = 0;\n    my $minI = 0;\n    my $minJ = 0;\n    my\
    \ $minVisited = 0;\n    my $minLen = 0;\n    my $minSum = $n * $m * $k;\n    my\
    \ $minPath = [];\n    my $minSum = $n * $m * $k;\n    my $curPath = [];\n    my\
    \ $curSum = 0;\n    my $curLen = 0;\n    my $curI = 0;\n    my $curJ = 0;\n  \
    \  my $curVisited = 0;\n    my $minI = 0;\n    my $minJ = 0;\n    my $minVisited\
    \ = 0;\n    my $minLen = 0;\n    my $minSum = $n * $m * $k;\n    my $curPath =\
    \ [];\n    my $curSum = 0;\n    my $curLen = 0;\n    my $curI = 0;\n    my $curJ\
    \ = 0;\n    my $curVisited = 0;\n    my $minI = 0;\n    my $minJ = 0;\n    my\
    \ $minVisited = 0;\n    my $minLen = 0;\n    my $minSum = $n * $m * $k;\n    my\
    \ $curPath = [];\n    my $curSum = 0;\n    my $curLen = 0;\n    my $curI = 0;\n\
    \    my $curJ = 0;\n    my $curVisited = 0;\n    my $", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n        $min->[$i]\
    \ = $grid->[0][0];\n    }\n    my $min_path = [];\n    for my $i (0..$k-1) {\n\
    \        $min_path->[$i] = [0, 0];\n    }\n    my $path = [];\n    for my $i (0..$k-1)\
    \ {\n        $path->[$i] = [0, 0];\n    }\n    my $path_len = 0;\n    my $min_path_len\
    \ = 0;\n    my $path_sum = 0;\n    my $min_path_sum = 0;\n    my $path_visited\
    \ = 0;\n    my $min_path_visited = 0;\n    my $path_visited_sum = 0;\n    my $min_path_visited_sum\
    \ = 0;\n    my $path_visited_count = 0;\n    my $min_path_visited_count = 0;\n\
    \    my $path_visited_count_sum = 0;\n    my $min_path_visited_count_sum = 0;\n\
    \    my $path_visited_count_max = 0;\n    my $min_path_visited_count_max = 0;\n\
    \    my $path_visited_count_max_sum = 0;\n    my $min_path_visited_count_max_sum\
    \ = 0;\n    my $path_visited_count_min = 0;\n    my $min_path_visited_count_min\
    \ = 0;\n    my $path_visited_count_min_sum = 0;\n    my $min_path_visited_count_min_sum\
    \ = 0;\n   ", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min =\
    \ $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j]\
    \ < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n   \
    \     }\n    }\n    my $min_path = [];\n    for my $i (0 .. $n - 1) {\n      \
    \  for my $j (0 .. $m - 1) {\n            if ($grid->[$i][$j] == $min) {\n   \
    \             my $path = dfs($grid, $i, $j, $k, $min, $max);\n               \
    \ if (!@$min_path || $path < $min_path) {\n                    $min_path = $path;\n\
    \                }\n            }\n        }\n    }\n    return $min_path;\n}",
  "    my $n = scalar(@$grid);\n    my @path;\n    my $min = $n * $n + 1;\n    my\
    \ @minPath;\n    my @visited;\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $n - 1) {\n            $visited[$i][$j] = 0;\n        }\n    }\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n            @path\
    \ = ();\n            $visited[$i][$j] = 1;\n            dfs($grid, $i, $j, $k,\
    \ $n, $min, \\@minPath, \\@path, \\@visited);\n            $visited[$i][$j] =\
    \ 0;\n        }\n    }\n    return @minPath;\n}", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n            for\
    \ my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n           \
    \ }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n        }\n  \
    \  }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n     \
    \       for my $j (0 .. $m - 1) {\n                my $min = [];\n           \
    \     if ($i > 0) {\n                    my $v = $dp->[$i - 1][$j][$l - 1];\n\
    \                    if (!@$min || $v lt $min->[0]) {\n                      \
    \  $min = $v;\n                    }\n                }\n                if ($i\
    \ < $n - 1) {\n                    my $v = $dp->[$i + 1][$j][$l - 1];\n      \
    \              if (!@$min || $v lt $min->[0]) {\n                        $min\
    \ = $v;\n                    }\n                }\n                if ($j > 0)\
    \ {\n                    my $v = $dp->[$i][$j - 1][$l - 1];\n                \
    \    if (!@$min || $v lt $min->[0]) {\n                        $min = $v;\n  \
    \                  }\n                }\n                if ($j < $m - 1) {\n\
    \                    my $v = $dp->[$i][$j + 1][$l - 1];\n                    if\
    \ (!@$min || $v lt $min->[0]) {\n                        $min = $v;\n        \
    \            }\n                }\n                $dp->[$i][$j][$l", "    my\
    \ $n = @$grid;\n    my $min = [];\n    my $min_sum = $n * $n * $k;\n    my $visited\
    \ = {};\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $sum, $path) = @_;\n\
    \        return if $sum > $min_sum;\n        if (@$path == $k) {\n           \
    \ if ($sum < $min_sum) {\n                $min_sum = $sum;\n                $min\
    \ = $path;\n            }\n            return;\n        }\n        for my $dir\
    \ ([-1, 0], [1, 0], [0, -1], [0, 1]) {\n            my($x, $y) = ($i + $dir->[0],\
    \ $j + $dir->[1]);\n            next if $x < 0 || $x >= $n || $y < 0 || $y >=\
    \ $n;\n            next if $visited->{\"$x,$y\"};\n            $visited->{\"$x,$y\"\
    } = 1;\n            $dfs->($x, $y, $sum + $grid->[$x][$y], [@$path, $grid->[$x][$y]]);\n\
    \            $visited->{\"$x,$y\"} = 0;\n        }\n    };\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $n - 1) {\n            $visited->{\"$i,$j\"\
    } = 1;\n            $dfs->($i, $j, $grid->[$i][$j], [$grid->[$i][$j]]);\n    \
    \        $visited->{\"$i,$j\"} = 0;\n        }\n    }\n    return $min;\n}", " \
    \   my $n = @$grid;\n    my $minPath = [];\n    my $minSum = $n * $n + 1;\n  \
    \  my $minPaths = [];\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $n - 1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1)\
    \ {\n            my $path = [];\n            my $sum = 0;\n            $visited->[$i][$j]\
    \ = 1;\n            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $sum, $minPath, $minSum, $visited);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $minPath;\n\
    }", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
    \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n          \
    \  $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n    my $minPathSum\
    \ = $n * $m * $k;\n    my $minPathSumIndex = 0;\n    for my $i (0..$n-1) {\n \
    \       for my $j (0..$m-1) {\n            $visited->[$i][$j] = 1;\n         \
    \   my $path = [];\n            push @$path, $grid->[$i][$j];\n            my\
    \ $pathSum = $grid->[$i][$j];\n            my $pathSumIndex = 1;\n           \
    \ my $pathLength = 1;\n            my $pathIndex = 0;\n            my $paths =\
    \ [];\n            push @$paths, $path;\n            my $pathsIndex = [];\n  \
    \          push @$pathsIndex, $pathIndex;\n            my $pathsSum = [];\n  \
    \          push @$pathsSum, $pathSum;\n            my $pathsSumIndex = [];\n \
    \           push @$pathsSumIndex, $pathSumIndex;\n            my $pathsLength\
    \ = [];\n            push @$pathsLength, $pathLength;\n            while ($paths)\
    \ {\n                my $path = $paths->[-1];\n                my $pathIndex =\
    \ $pathsIndex->[-1];\n                my $pathSum = $pathsSum->[-1];\n       \
    \         my $pathSumIndex = $pathsSumIndex->[-1];\n                my $pathLength\
    \ = $pathsLength->[-1];\n                if ($pathLength == $k) {\n          \
    \          if ($pathSum < $minPathSum) {\n                        $minPath = $path;\n\
    \                        $minPathSum = $pathSum;\n                        $minPathSumIndex\
    \ = $pathSumIndex;\n                    } elsif ($pathSum == $minPathSum)", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min_path = [];\n    my $min_sum = $n * $m *\
    \ $n * $m;\n    my $min_path_sum = $min_sum;\n    my $min_path_len = 0;\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $min_path_sum\
    \ = $min_sum;\n            $min_path_len = 0;\n            my $path = [];\n  \
    \          my $path_sum = 0;\n            my $path_len = 0;\n            my $path_visited\
    \ = [];\n            for my $i (0 .. $n - 1) {\n                for my $j (0 ..\
    \ $m - 1) {\n                    $path_visited->[$i][$j] = 0;\n              \
    \  }\n            }\n            dfs($grid, $i, $j, $k, $visited, $path, $path_sum,\
    \ $path_len, $path_visited, $min_path, $min_path_sum, $min_path_len);\n      \
    \  }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n    my $m\
    \ = scalar(@{$grid->[0]});\n    my $min_path = [];\n    my $min_sum = $n * $m\
    \ * $k;\n    my $min_path_sum = $min_sum;\n    my $min_path_sum_idx = 0;\n   \
    \ my $min_path_sum_val = 0;\n    my $min_path_sum_val_idx = 0;\n    my $min_path_sum_val_idx_idx\
    \ = 0;\n    my $min_path_sum_val_idx_idx_idx = 0;\n    my $min_path_sum_val_idx_idx_idx_idx\
    \ = 0;\n    my $min_path_sum_val_idx_idx_idx_idx_idx = 0;\n    my $min_path_sum_val_idx_idx_idx_idx_idx_idx\
    \ = 0;\n    my $min_path_sum_val_idx_idx_idx_idx_idx_idx_idx = 0;\n    my $min_path_sum_val_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = 0;\n    my $min_path_sum_val_idx_idx_idx_idx_idx_idx_idx_idx_idx = 0;\n  \
    \  my $min_path_sum_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx = 0;\n    my $min_path_sum_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = 0;\n    my $min_path_sum_val_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx\
    \ = 0;\n    my $min_path_sum", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min = [];\n\
    \    for my $i (0..$k-1) {\n        $min->[$i] = $grid->[0][0];\n    }\n    my\
    \ $min_sum = $grid->[0][0];\n    my $min_path = [];\n    $min_path->[0] = [0,\
    \ 0];\n    my $q = [];\n    push @$q, [0, 0, $grid->[0][0], 0];\n    while (@$q)\
    \ {\n        my $cur = shift @$q;\n        my($i, $j, $sum, $len) = @$cur;\n \
    \       if ($len == $k) {\n            if ($sum < $min_sum) {\n              \
    \  $min_sum = $sum;\n                $min = $min_path;\n            }\n      \
    \      next;\n        }\n        if ($sum > $min_sum) {\n            next;\n \
    \       }\n        if ($i > 0 && !$visited->[$i-1][$j]) {\n            $visited->[$i-1][$j]\
    \ = 1;\n            $min_path->[$len+1] = [$i-1, $j];\n            push @$q, [$i-1,\
    \ $j, $sum+$grid->[$i-1][$j], $len+1];\n        }\n        if ($i < $n-1 && !$visited->[$i+1][$j])\
    \ {\n            $visited->[$i+1][$j] = 1;\n            $min_path->[$len+1] =\
    \ [$i+1, $j];\n            push @$q, [$i+1, $j, $sum+$grid->[$i+1][$j], $len+",
  "    my $n = scalar(@$grid);\n    my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n            $min =\
    \ $grid->[$i][$j] if $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j]\
    \ if $grid->[$i][$j] > $max;\n        }\n    }\n    my $minPath = [$min];\n  \
    \  my $minPathSum = $min;\n    my $maxPath = [$max];\n    my $maxPathSum = $max;\n\
    \    my $path = [];\n    my $pathSum = 0;\n    my $visited = [];\n    for my $i\
    \ (0..$n-1) {\n        for my $j (0..$n-1) {\n            $visited->[$i][$j] =\
    \ 0;\n        }\n    }\n    my $minPathFound = 0;\n    my $maxPathFound = 0;\n\
    \    my $minPathFoundSum = 0;\n    my $maxPathFoundSum = 0;\n    my $minPathFoundLen\
    \ = 0;\n    my $maxPathFoundLen = 0;\n    my $minPathFoundI = 0;\n    my $minPathFoundJ\
    \ = 0;\n    my $maxPathFoundI = 0;\n    my $maxPathFoundJ = 0;\n    for my $i\
    \ (0..$n-1) {\n        for my $j (0..$n-1) {\n            $path = [];\n      \
    \      $pathSum = 0;\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            $pathSum += $grid->[$i][$j];\n            if ($pathSum\
    \ < $minPathSum) {\n                $minPath = $path;\n                $minPathSum\
    \ = $pathSum;\n            }\n            if ($pathSum > $maxPathSum) {\n    \
    \            $maxPath", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min_path =\
    \ [];\n    my $min_sum = $n * $m * $n * $m;\n    my $min_path_sum = $min_sum;\n\
    \    my $min_path_len = $n * $m;\n    my $min_path_len_sum = $min_path_len;\n\
    \    my $min_path_len_sum_sum = $min_path_len;\n    my $min_path_len_sum_sum_sum\
    \ = $min_path_len;\n    my $min_path_len_sum_sum_sum_sum = $min_path_len;\n  \
    \  my $min_path_len_sum_sum_sum_sum_sum = $min_path_len;\n    my $min_path_len_sum_sum_sum_sum_sum_sum\
    \ = $min_path_len;\n    my $min_path_len_sum_sum_sum_sum_sum_sum_sum = $min_path_len;\n\
    \    my $min_path_len_sum_sum_sum_sum_sum_sum_sum_sum = $min_path_len;\n    my\
    \ $min_path_len_sum_sum_sum_sum_sum_sum_sum_sum_sum = $min_path_len;\n    my $min_path_len_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_path_len;\n    my $min_path_len_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_path_len;\n    my $min_path_len_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = $min_path_len;\n", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my @dp;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            $dp[$i][$j] = [$grid->[$i][$j]];\n        }\n    }\n    for my $i\
    \ (1 .. $k - 1) {\n        for my $j (0 .. $n - 1) {\n            for my $l (0\
    \ .. $m - 1) {\n                my $cur = $grid->[$j][$l];\n                my\
    \ @neighbors;\n                if ($j > 0) {\n                    push @neighbors,\
    \ $dp[$j - 1][$l];\n                }\n                if ($j < $n - 1) {\n  \
    \                  push @neighbors, $dp[$j + 1][$l];\n                }\n    \
    \            if ($l > 0) {\n                    push @neighbors, $dp[$j][$l -\
    \ 1];\n                }\n                if ($l < $m - 1) {\n               \
    \     push @neighbors, $dp[$j][$l + 1];\n                }\n                my\
    \ $min = $neighbors[0];\n                for my $neighbor (@neighbors) {\n   \
    \                 if (lexicographic_compare($neighbor, $min) < 0) {\n        \
    \                $min = $neighbor;\n                    }\n                }\n\
    \                $dp[$j][$l] = [@$min, $cur];\n            }\n        }\n    }\n\
    \    my $min = $dp[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j (0\
    \ .. $m - 1) {\n            if (lexicographic_compare($dp[$i][$j], $min) < 0)\
    \ {\n                $min = $dp[$i][$j];\n            }\n        }\n    }\n  \
    \  return $min;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my\
    \ $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n    \
    \            $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for my\
    \ $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n              \
    \  if ($l == 0) {\n                    $dp->[$i][$j][$l] = [$grid->[$i][$j]];\n\
    \                } else {\n                    my $min = [];\n               \
    \     if ($i > 0) {\n                        my $tmp = $dp->[$i - 1][$j][$l -\
    \ 1];\n                        if (!@$min || $tmp->[0] < $min->[0]) {\n      \
    \                      $min = $tmp;\n                        }\n             \
    \       }\n                    if ($i < $n - 1) {\n                        my\
    \ $tmp = $dp->[$i + 1][$j][$l - 1];\n                        if (!@$min || $tmp->[0]\
    \ < $min->[0]) {\n                            $min = $tmp;\n                 \
    \       }\n                    }\n                    if ($j > 0) {\n        \
    \                my $tmp = $dp->[$i][$j - 1][$l - 1];\n                      \
    \  if (!@$min || $tmp->[0] < $min->[0]) {\n                            $min =\
    \ $tmp;\n                        }\n                    }\n                  \
    \  if ($j < $m - 1) {\n                        my $tmp = $dp->[$i][$j + 1][$l\
    \ - 1];\n                        if (!@$min || $tmp->[0] < $min->[0]) {\n    \
    \                        $min = $tmp;\n                        }\n           \
    \         }\n                   ", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minSum = $n * $n * $k;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [[$i, $j]];\n\
    \            my $sum = $grid->[$i][$j];\n            my $visited = {};\n     \
    \       $visited->{\"$i,$j\"} = 1;\n            if (dfs($grid, $k, $i, $j, $path,\
    \ $sum, $visited, $minPath, $minSum)) {\n                return $minPath;\n  \
    \          }\n        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $min = $grid->[0][0];\n    my $max\
    \ = $grid->[$n-1][$m-1];\n    my $dp = [];\n    for my $i (0..$n-1) {\n      \
    \  for my $j (0..$m-1) {\n            $dp->[$i][$j] = [];\n            for my\
    \ $v ($min..$max) {\n                $dp->[$i][$j][$v] = [];\n            }\n\
    \        }\n    }\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n\
    \            for my $v ($min..$max) {\n                $dp->[$i][$j][$v][0] =\
    \ $grid->[$i][$j] == $v ? 1 : 0;\n            }\n        }\n    }\n    for my\
    \ $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            for my $v ($min..$max)\
    \ {\n                for my $l (1..$k) {\n                    my $cnt = 0;\n \
    \                   if ($i > 0) {\n                        $cnt += $dp->[$i-1][$j][$v][$l-1];\n\
    \                    }\n                    if ($j > 0) {\n                  \
    \      $cnt += $dp->[$i][$j-1][$v][$l-1];\n                    }\n           \
    \         if ($i < $n-1) {\n                        $cnt += $dp->[$i+1][$j][$v][$l-1];\n\
    \                    }\n                    if ($j < $m-1) {\n               \
    \         $cnt += $dp->[$i][$j+1][$v][$l-1];\n                    }\n        \
    \            $dp->[$i][$j][$v][$l] = $cnt;\n                }\n            }\n\
    \        }\n    }\n    my $min_path = [];\n   ", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n            for\
    \ my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n           \
    \ }\n        }\n    }\n    my $min = [];\n    for my $l (0 .. $k - 1) {\n    \
    \    $min->[$l] = [];\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l]\
    \ = [];\n                if ($l == 0) {\n                    push @{$dp->[$i][$j][$l]},\
    \ $grid->[$i][$j];\n                } else {\n                    if ($i > 0)\
    \ {\n                        my $prev = $dp->[$i - 1][$j][$l - 1];\n         \
    \               if (scalar(@$prev) > 0) {\n                            my $curr\
    \ = [@$prev, $grid->[$i][$j]];\n                            if (scalar(@{$dp->[$i][$j][$l]})\
    \ == 0 ||\n                                $curr lt $dp->[$i][$j][$l]) {\n   \
    \                             $dp->[$i][$j][$l] = $curr;\n                   \
    \         }\n                        }\n                    }\n              \
    \      if ($j > 0) {\n                        my $prev = $dp->[$i][$j - 1][$l\
    \ - 1];\n                        if (scalar(@$prev) > 0) {\n                 \
    \           my $curr = [@$prev, $grid->[$i][$j]];\n                          \
    \  if (scalar(@{$dp->[$i][$j][$l]}) == 0 ||\n", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n\
    \            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n    \
    \    }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1)\
    \ {\n            for my $j (0 .. $m - 1) {\n                my $min = [];\n  \
    \              if ($i > 0) {\n                    my $prev = $dp->[$i - 1][$j][$l\
    \ - 1];\n                    if (!@$min || $prev->[0] < $min->[0]) {\n       \
    \                 $min = $prev;\n                    }\n                }\n  \
    \              if ($i < $n - 1) {\n                    my $prev = $dp->[$i + 1][$j][$l\
    \ - 1];\n                    if (!@$min || $prev->[0] < $min->[0]) {\n       \
    \                 $min = $prev;\n                    }\n                }\n  \
    \              if ($j > 0) {\n                    my $prev = $dp->[$i][$j - 1][$l\
    \ - 1];\n                    if (!@$min || $prev->[0] < $min->[0]) {\n       \
    \                 $min = $prev;\n                    }\n                }\n  \
    \              if ($j < $m - 1) {\n                    my $prev = $dp->[$i][$j\
    \ + 1][$l - 1];\n                    if (!@$min || $prev->[0] < $min->[0]) {\n\
    \                        $min = $prev;\n                   ", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j]\
    \ if $grid->[$i][$j] > $max;\n        }\n    }\n    my $minPath = [];\n    my\
    \ $minPathLen = $k + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            my $path = [];\n            my $pathLen = 0;\n      \
    \      my $visited = {};\n            my $dfs = sub {\n                my($i,\
    \ $j) = @_;\n                return if $i < 0 || $i >= $n || $j < 0 || $j >= $m;\n\
    \                return if $visited->{\"$i,$j\"};\n                return if $pathLen\
    \ + $k - 1 < $minPathLen && $grid->[$i][$j] > $max;\n                return if\
    \ $pathLen + $k - 1 > $minPathLen && $grid->[$i][$j] < $min;\n               \
    \ $visited->{\"$i,$j\"} = 1;\n                push @$path, $grid->[$i][$j];\n\
    \                $pathLen++;\n                if ($pathLen > $minPathLen) {\n\
    \                    pop @$path;\n                    $pathLen--;\n          \
    \          return;\n                }\n                if ($pathLen == $k) {\n\
    \                    if ($pathLen < $minPathLen || $path->[0] < $minPath->[0])\
    \ {\n                        $minPath = $path;\n                        $minPathLen\
    \ = $pathLen;\n                    }\n                    pop @$path;\n      \
    \              $pathLen--;\n                    return;\n                }\n \
    \               $df", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for\
    \ my $l (0 .. $k - 1) {\n                if ($l == 0) {\n                    $dp->[$i][$j][$l]\
    \ = [$grid->[$i][$j]];\n                } else {\n                    my $min\
    \ = undef;\n                    if ($i > 0) {\n                        my $tmp\
    \ = [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n                       \
    \ if (!defined($min) || $tmp lt $min) {\n                            $min = $tmp;\n\
    \                        }\n                    }\n                    if ($i\
    \ < $n - 1) {\n                        my $tmp = [@{$dp->[$i + 1][$j][$l - 1]},\
    \ $grid->[$i][$j]];\n                        if (!defined($min) || $tmp lt $min)\
    \ {\n                            $min = $tmp;\n                        }\n   \
    \                 }\n                    if ($j > 0) {\n                     \
    \   my $tmp = [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n             \
    \           if (!defined($min) || $tmp lt $min) {\n                          \
    \  $min = $tmp;\n                        }\n                    }\n          \
    \          if ($j < $m - 1) {\n                        my $tmp = [@{$dp->[$i][$j\
    \ + 1][$l - 1]}, $grid->[$i][$j]];\n                        if", "    my $n =\
    \ @$grid;\n    my $minPath = [];\n    my $minSum = $n * $n + 1;\n    my $minPaths\
    \ = [];\n    my $path = [];\n    my $paths = [];\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    dfs($grid, $k, 0, 0, $minPath, $minSum, $minPaths,\
    \ $path, $paths, $visited);\n    return $minPaths;\n}", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n        \
    \    for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n    \
    \        }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n       \
    \ }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n\
    \            for my $j (0 .. $m - 1) {\n                my $min = [];\n      \
    \          if ($i > 0) {\n                    my $tmp = [@{$dp->[$i - 1][$j][$l\
    \ - 1]}, $grid->[$i][$j]];\n                    if (!@$min || $tmp lt $min) {\n\
    \                        $min = $tmp;\n                    }\n               \
    \ }\n                if ($i < $n - 1) {\n                    my $tmp = [@{$dp->[$i\
    \ + 1][$j][$l - 1]}, $grid->[$i][$j]];\n                    if (!@$min || $tmp\
    \ lt $min) {\n                        $min = $tmp;\n                    }\n  \
    \              }\n                if ($j > 0) {\n                    my $tmp =\
    \ [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n                    if (!@$min\
    \ || $tmp lt $min) {\n                        $min = $tmp;\n                 \
    \   }\n                }\n                if ($j < $m - 1) {\n               \
    \     my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $grid->[$i][", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $minPath = [];\n    my $minSum = $n * $m * $n * $m;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum2 = $minSum;\n    my $minPathSum3 = $minSum;\n\
    \    my $minPathSum4 = $minSum;\n    my $minPathSum5 = $minSum;\n    my $minPathSum6\
    \ = $minSum;\n    my $minPathSum7 = $minSum;\n    my $minPathSum8 = $minSum;\n\
    \    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n    my $minPathSum11\
    \ = $minSum;\n    my $minPathSum12 = $minSum;\n    my $minPathSum13 = $minSum;\n\
    \    my $minPathSum14 = $minSum;\n    my $minPathSum15 = $minSum;\n    my $minPathSum16\
    \ = $minSum;\n    my $minPathSum17 = $minSum;\n    my $minPathSum18 = $minSum;\n\
    \    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n    my $minPathSum21\
    \ = $minSum;\n    my $minPathSum22 = $minSum;\n    my $minPathSum23 = $minSum;\n\
    \    my $minPathSum24 = $minSum;\n    my $minPathSum25 = $minSum;\n    my $minPathSum26\
    \ = $minSum;\n    my $minPathSum27 = $minSum;\n    my $minPathSum28 = $minSum;\n\
    \    my $minPathSum29 = $minSum;\n    my $minPathSum30 = $minSum;\n    my $minPathSum31\
    \ = $min", "    my $n = scalar(@$grid);\n    my $visited = {};\n    my $minPath\
    \ = [];\n    my $minSum = $n * $n * $n;\n    my $minPathSum = $minSum;\n    my\
    \ $minPathLen = $k;\n    my $minPathLenSum = $minSum;\n    my $minPathLenSum2\
    \ = $minSum;\n    my $minPathLenSum3 = $minSum;\n    my $minPathLenSum4 = $minSum;\n\
    \    my $minPathLenSum5 = $minSum;\n    my $minPathLenSum6 = $minSum;\n    my\
    \ $minPathLenSum7 = $minSum;\n    my $minPathLenSum8 = $minSum;\n    my $minPathLenSum9\
    \ = $minSum;\n    my $minPathLenSum10 = $minSum;\n    my $minPathLenSum11 = $minSum;\n\
    \    my $minPathLenSum12 = $minSum;\n    my $minPathLenSum13 = $minSum;\n    my\
    \ $minPathLenSum14 = $minSum;\n    my $minPathLenSum15 = $minSum;\n    my $minPathLenSum16\
    \ = $minSum;\n    my $minPathLenSum17 = $minSum;\n    my $minPathLenSum18 = $minSum;\n\
    \    my $minPathLenSum19 = $minSum;\n    my $minPathLenSum20 = $minSum;\n    my\
    \ $minPathLenSum21 = $minSum;\n    my $minPathLenSum22 = $minSum;\n    my $minPathLenSum23\
    \ = $minSum;\n    my $minPathLenSum24 = $minSum;\n    my $minPathLenSum25 = $minSum;\n\
    \    my $minPathLenSum26 = $minSum;\n    my $minPathLenSum27 = $minSum;\n    my\
    \ $minPathLenSum28 = $minSum;\n    my $minPathLenSum29 = $minSum;\n    my $minPathLenSum30\
    \ = $minSum;\n    my $minPathLenSum31 = $minSum;\n    my $minPathLenSum32 =",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min = [];\n    my $min_sum = $n * $m + 1;\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n            my $path\
    \ = [];\n            my $sum = 0;\n            dfs($grid, $i, $j, $k, $visited,\
    \ $path, $sum);\n            if ($sum < $min_sum) {\n                $min_sum\
    \ = $sum;\n                $min = $path;\n            }\n        }\n    }\n  \
    \  return $min;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $tmp = [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n                  \
    \  if (!@$min || $tmp lt $min) {\n                        $min = $tmp;\n     \
    \               }\n                }\n                if ($i < $n - 1) {\n   \
    \                 my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j >\
    \ 0) {\n                    my $tmp = [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j <\
    \ $m - 1) {\n                    my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $visited\
    \ = {};\n    my $minPath = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum2 = $minSum;\n    my $minPath2 = [];\n    my $minPath3\
    \ = [];\n    my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n    my\
    \ $minPath4 = [];\n    my $minPathSum5 = $minSum;\n    my $minPath5 = [];\n  \
    \  my $minPathSum6 = $minSum;\n    my $minPath6 = [];\n    my $minPathSum7 = $minSum;\n\
    \    my $minPath7 = [];\n    my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n\
    \    my $minPathSum9 = $minSum;\n    my $minPath9 = [];\n    my $minPathSum10\
    \ = $minSum;\n    my $minPath10 = [];\n    my $minPathSum11 = $minSum;\n    my\
    \ $minPath11 = [];\n    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n\
    \    my $minPathSum13 = $minSum;\n    my $minPath13 = [];\n    my $minPathSum14\
    \ = $minSum;\n    my $minPath14 = [];\n    my $minPathSum15 = $minSum;\n    my\
    \ $minPath15 = [];\n    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n\
    \    my $minPathSum17 = $minSum;\n    my $minPath17 = [];\n    my $minPathSum18\
    \ = $minSum;\n    my $minPath18 = [];\n    my $minPathSum19 = $minSum;\n    my\
    \ $minPath19 = [];\n    my $minPathSum20 = $minSum;\n    my $minPath20 = [];\n\
    \    my $minPathSum21 = $minSum;\n    my $minPath", "    my $n = @$grid;\n   \
    \ my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $max = $grid->[$n\
    \ - 1][$m - 1];\n    my $minPath = [$min];\n    my $minPaths = {};\n    my $visited\
    \ = {};\n    my $queue = [{\n        path => $minPath,\n        x => 0,\n    \
    \    y => 0,\n    }];\n    while (@$queue) {\n        my $curr = shift @$queue;\n\
    \        my $path = $curr->{path};\n        my $x = $curr->{x};\n        my $y\
    \ = $curr->{y};\n        my $val = $grid->[$x][$y];\n        my $pathStr = join('-',\
    \ @$path);\n        if ($visited->{$pathStr}) {\n            next;\n        }\n\
    \        $visited->{$pathStr} = 1;\n        if (@$path == $k) {\n            if\
    \ ($val < $min) {\n                $min = $val;\n                $minPath = $path;\n\
    \            }\n            next;\n        }\n        for my $deltaX (-1 .. 1)\
    \ {\n            for my $deltaY (-1 .. 1) {\n                next if $deltaX ==\
    \ 0 && $deltaY == 0;\n                my $newX = $x + $deltaX;\n             \
    \   my $newY = $y + $deltaY;\n                next if $newX < 0 || $newX >= $n\
    \ || $newY < 0 || $newY >= $m;\n                my $newVal = $grid->[$newX][$newY];\n\
    \                my $newPath = [@$path, $newVal];\n                my $newPathStr\
    \ = join('-', @$newPath);\n                if ($newVal < $min) {\n           \
    \         $min = $newVal;\n                    $minPath = $newPath;\n        \
    \        }\n                if ($newVal < $max) {\n                    push @$queue,\
    \ {\n                        path => $newPath,\n", "    my $n = @$grid;\n    my\
    \ $minPath = [];\n    my $minSum = $n * $n + 1;\n    my $minPaths = [];\n    my\
    \ $paths = [[]];\n    my $sums = [0];\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $m = 0;\n    my $n = 0;\n    my $sum = 0;\n    my $path = [];\n    my $paths2\
    \ = [];\n    my $sums2 = [];\n    my $path2 = [];\n    my $sum2 = 0;\n    my $grid2\
    \ = [];\n    my $grid3 = [];\n    my $grid4 = [];\n    my $grid5 = [];\n    my\
    \ $grid6 = [];\n    my $grid7 = [];\n    my $grid8 = [];\n    my $grid9 = [];\n\
    \    my $grid10 = [];\n    my $grid11 = [];\n    my $grid12 = [];\n    my $grid13\
    \ = [];\n    my $grid14 = [];\n    my $grid15 = [];\n    my $grid16 = [];\n  \
    \  my $grid17 = [];\n    my $grid18 = [];\n    my $grid19 = [];\n    my $grid20\
    \ = [];\n    my $grid21 = [];\n    my $grid22 = [];\n    my $grid23 = [];\n  \
    \  my $grid24 = [];\n    my $grid25 = [];\n    my $grid26 = [];\n    my $grid27\
    \ = [];\n    my $grid28 = [];\n    my $grid29 = [];\n    my $grid30 = [];\n  \
    \  my $grid31 = [];\n    my $grid32 = [];\n    my $grid33 = [];\n    my $grid34\
    \ = [];\n    my $grid35 = [];\n    my $grid36 = [];\n    my $grid37 = [];\n  \
    \  my $grid38 = [];\n    my $grid39 = [];\n    my $grid40 = [];\n    my $grid41\
    \ = [];\n    my $grid42 = [];\n    my $grid43 = [];\n    my $grid44 = [];\n  \
    \  my $grid45 = [];\n    my $grid46 = [];\n    my $grid47 = [];", "    my $n =\
    \ scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min_path = [];\n\
    \    my $min_sum = $n * $m + 1;\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            my $path = [];\n            my $sum = 0;\n \
    \           dfs($grid, $i, $j, $k, $path, $sum);\n            if ($sum < $min_sum)\
    \ {\n                $min_sum = $sum;\n                $min_path = $path;\n  \
    \          }\n        }\n    }\n    return $min_path;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $visited = [];\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    my $min = [];\n    for my $i (0..$k-1) {\n        $min->[$i]\
    \ = $grid->[0][0];\n    }\n    my $min_sum = $grid->[0][0];\n    my $min_path\
    \ = [];\n    my $min_path_sum = 0;\n    my $path = [];\n    my $path_sum = 0;\n\
    \    my $path_len = 0;\n    my $path_ind = 0;\n    my $cur_row = 0;\n    my $cur_col\
    \ = 0;\n    my $cur_val = $grid->[0][0];\n    my $cur_sum = $cur_val;\n    my\
    \ $cur_len = 1;\n    my $cur_ind = 0;\n    my $cur_path = [];\n    my $cur_path_sum\
    \ = 0;\n    my $cur_path_len = 0;\n    my $cur_path_ind = 0;\n    my $cur_path_val\
    \ = 0;\n    my $cur_path_row = 0;\n    my $cur_path_col = 0;\n    my $cur_path_row_ind\
    \ = 0;\n    my $cur_path_col_ind = 0;\n    my $cur_path_row_val = 0;\n    my $cur_path_col_val\
    \ = 0;\n    my $cur_path_row_sum = 0;\n    my $cur_path_col_sum = 0;\n    my $cur_path_row_len\
    \ = 0;\n    my $cur_path_col_len = 0;\n    my $cur_path_row_ind = 0;\n    my $cur_path_col_ind\
    \ = 0;\n    my $cur_path_row_val = 0;", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $min = $grid->[$i][$j]\
    \ if $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j]\
    \ > $max;\n        }\n    }\n    my $minPath = [];\n    my $minPathSum = $max\
    \ * $k;\n    my $minPathSum2 = $max * $k;\n    my $minPath2 = [];\n    my $minPathSum3\
    \ = $max * $k;\n    my $minPath3 = [];\n    my $minPathSum4 = $max * $k;\n   \
    \ my $minPath4 = [];\n    my $minPathSum5 = $max * $k;\n    my $minPath5 = [];\n\
    \    my $minPathSum6 = $max * $k;\n    my $minPath6 = [];\n    my $minPathSum7\
    \ = $max * $k;\n    my $minPath7 = [];\n    my $minPathSum8 = $max * $k;\n   \
    \ my $minPath8 = [];\n    my $minPathSum9 = $max * $k;\n    my $minPath9 = [];\n\
    \    my $minPathSum10 = $max * $k;\n    my $minPath10 = [];\n    my $minPathSum11\
    \ = $max * $k;\n    my $minPath11 = [];\n    my $minPathSum12 = $max * $k;\n \
    \   my $minPath12 = [];\n    my $minPathSum13 = $max * $k;\n    my $minPath13\
    \ = [];\n    my $minPathSum14 = $max * $k;\n    my $minPath14 = [];\n    my $minPathSum15\
    \ = $max * $k;\n    my $minPath15 = [];\n    my $min", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $minPath = [];\n    my $minSum = $n * $m +\
    \ 1;\n    my $minPathSum = $n * $m + 1;\n    my $minPathSum2 = $n * $m + 1;\n\
    \    my $minPath2 = [];\n    my $minSum2 = $n * $m + 1;\n    my $minPath3 = [];\n\
    \    my $minSum3 = $n * $m + 1;\n    my $minPathSum3 = $n * $m + 1;\n    my $minPathSum4\
    \ = $n * $m + 1;\n    my $minPath4 = [];\n    my $minSum4 = $n * $m + 1;\n   \
    \ for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my\
    \ $path = [];\n            my $sum = 0;\n            my $pathSum = 0;\n      \
    \      my $pathSum2 = 0;\n            my $path2 = [];\n            my $sum2 =\
    \ 0;\n            my $path3 = [];\n            my $sum3 = 0;\n            my $pathSum3\
    \ = 0;\n            my $pathSum4 = 0;\n            my $path4 = [];\n         \
    \   my $sum4 = 0;\n            my $visited = [];\n            for my $i (0 ..\
    \ $n - 1) {\n                for my $j (0 .. $m - 1) {\n                    $visited->[$i][$j]\
    \ = 0;\n                }\n            }\n            $visited->[$i][$j] = 1;\n\
    \            push @$path, $grid->[$i][$j];\n            push @$path2, $grid->[$i][$j];\n\
    \            push @$path3, $grid->[$i][$j];\n            push @$path4, $grid->[$i][$j];\n\
    \            $sum += $grid->[$i][$j];\n            $sum2 += $grid->[$i][$j];\n\
    \            $sum3 += $grid->", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = {};\n    my $minPath = [];\n    my $minPathSum = $n * $n +\
    \ 1;\n    my $minPathSum2 = $n * $n + 1;\n    my $minPath2 = [];\n    my $minPath3\
    \ = [];\n    my $minPathSum3 = $n * $n + 1;\n    my $minPath4 = [];\n    my $minPathSum4\
    \ = $n * $n + 1;\n    my $minPath5 = [];\n    my $minPathSum5 = $n * $n + 1;\n\
    \    my $minPath6 = [];\n    my $minPathSum6 = $n * $n + 1;\n    my $minPath7\
    \ = [];\n    my $minPathSum7 = $n * $n + 1;\n    my $minPath8 = [];\n    my $minPathSum8\
    \ = $n * $n + 1;\n    my $minPath9 = [];\n    my $minPathSum9 = $n * $n + 1;\n\
    \    my $minPath10 = [];\n    my $minPathSum10 = $n * $n + 1;\n    my $minPath11\
    \ = [];\n    my $minPathSum11 = $n * $n + 1;\n    my $minPath12 = [];\n    my\
    \ $minPathSum12 = $n * $n + 1;\n    my $minPath13 = [];\n    my $minPathSum13\
    \ = $n * $n + 1;\n    my $minPath14 = [];\n    my $minPathSum14 = $n * $n + 1;\n\
    \    my $minPath15 = [];\n    my $minPathSum15 = $n * $n + 1;\n    my $minPath16\
    \ = [];\n    my $minPathSum16 = $n * $n + 1;\n    my $minPath17 = [];\n    my\
    \ $minPathSum17 = $n * $n + 1;\n    my $minPath18 = [];\n    my $minPathSum18\
    \ = $n * $n + 1;\n    my $minPath", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $visited = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1)\
    \ {\n            $visited->[$i][$j] = 0;\n        }\n    }\n    my $min = [];\n\
    \    for my $i (0..$k-1) {\n        $min->[$i] = $grid->[0][0];\n    }\n    my\
    \ $min_path = [];\n    for my $i (0..$k-1) {\n        $min_path->[$i] = [0, 0];\n\
    \    }\n    $visited->[0][0] = 1;\n    my $path = [];\n    for my $i (0..$k-1)\
    \ {\n        $path->[$i] = [0, 0];\n    }\n    my $path_len = 0;\n    my $path_idx\
    \ = 0;\n    while ($path_len < $k) {\n        my $curr_row = $path->[$path_idx][0];\n\
    \        my $curr_col = $path->[$path_idx][1];\n        if ($curr_row > 0 && $visited->[$curr_row-1][$curr_col]\
    \ == 0) {\n            $visited->[$curr_row-1][$curr_col] = 1;\n            $path->[$path_len][0]\
    \ = $curr_row-1;\n            $path->[$path_len][1] = $curr_col;\n           \
    \ $path_len++;\n            $path_idx = $path_len;\n        } elsif ($curr_row\
    \ < $n-1 && $visited->[$curr_row+1][$curr_col] == 0) {\n            $visited->[$curr_row+1][$curr_col]\
    \ = 1;\n            $path->[$path_len][0] = $curr_row+1;\n            $path->",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min = [];\n    for my $i (0 .. $k - 1) {\n \
    \       $min->[$i] = $grid->[0][0];\n    }\n    my $res = [];\n    for my $i (0\
    \ .. $k - 1) {\n        $res->[$i] = $grid->[0][0];\n    }\n    my $dfs = sub\
    \ {\n        my($i, $j, $cur, $cur_min) = @_;\n        if ($cur == $k) {\n   \
    \         if ($cur_min < $min) {\n                $min = $cur_min;\n         \
    \       $res = $cur_min;\n            }\n            return;\n        }\n    \
    \    if ($i > 0 && !$visited->[$i - 1][$j]) {\n            $visited->[$i - 1][$j]\
    \ = 1;\n            $dfs->($i - 1, $j, $cur + 1, $cur_min->[$cur] = $grid->[$i\
    \ - 1][$j]);\n            $visited->[$i - 1][$j] = 0;\n        }\n        if ($i\
    \ < $n - 1 && !$visited->[$i + 1][$j]) {\n            $visited->[$i + 1][$j] =\
    \ 1;\n            $dfs->($i + 1, $j, $cur + 1, $cur_min->[$cur] = $grid->[$i +\
    \ 1][$j]);\n            $visited->[$i + 1][$j] = 0;\n        }\n        if ($j\
    \ > 0 && !$visited->[$i][$j - 1]) {\n            $visited->[$i][$j - 1] = 1;\n\
    \            $dfs->($i,", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n \
    \   my $min = $grid->[0][0];\n    my $max = $grid->[$n - 1][$m - 1];\n    my $dp\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $dp->[$i][$j] = [];\n            for my $p (0 .. $k - 1) {\n      \
    \          $dp->[$i][$j][$p] = $max + 1;\n            }\n        }\n    }\n  \
    \  $dp->[0][0][0] = $grid->[0][0];\n    for my $p (1 .. $k - 1) {\n        for\
    \ my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n             \
    \   if ($i > 0) {\n                    $dp->[$i][$j][$p] = min($dp->[$i][$j][$p],\
    \ $dp->[$i - 1][$j][$p - 1] + $grid->[$i][$j]);\n                }\n         \
    \       if ($j > 0) {\n                    $dp->[$i][$j][$p] = min($dp->[$i][$j][$p],\
    \ $dp->[$i][$j - 1][$p - 1] + $grid->[$i][$j]);\n                }\n         \
    \   }\n        }\n    }\n    my $res = [];\n    for my $i (0 .. $k - 1) {\n  \
    \      push @$res, $dp->[$n - 1][$m - 1][$i];\n    }\n    return $res;\n}", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $min = [];\n    my $min_sum = $n * $m + 1;\n\
    \    my $min_path = [];\n    my $path = [];\n    my $sum = 0;\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 1;\n            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            dfs($grid, $k, $i, $j, $visited, $path, $sum, $min, $min_sum, $min_path);\n\
    \            $visited->[$i][$j] = 0;\n            $sum -= $grid->[$i][$j];\n \
    \           pop @$path;\n        }\n    }\n    return $min_path;\n}", "    my\
    \ $n = @$grid;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n       \
    \ for my $j (0 .. $n - 1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $min = [];\n    for my $i (0 .. $n * $n - 1) {\n        $min->[$i]\
    \ = $grid->[0][0];\n    }\n    my $res = [];\n    for my $i (0 .. $n * $n - 1)\
    \ {\n        $res->[$i] = $grid->[0][0];\n    }\n    my $min_sum = $grid->[0][0];\n\
    \    my $min_path = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $n - 1) {\n            $min_path->[$i][$j] = [];\n        }\n    }\n    $min_path->[0][0]\
    \ = [$grid->[0][0]];\n    my $queue = [];\n    push @$queue, [0, 0];\n    while\
    \ (@$queue) {\n        my $cur = shift @$queue;\n        my $i = $cur->[0];\n\
    \        my $j = $cur->[1];\n        $visited->[$i][$j] = 1;\n        my $sum\
    \ = 0;\n        for my $x (@{$min_path->[$i][$j]}) {\n            $sum += $x;\n\
    \        }\n        if ($sum < $min_sum) {\n            $min_sum = $sum;\n   \
    \         $res = $min_path->[$i][$j];\n        }\n        if ($i > 0 && !$visited->[$i\
    \ - 1][$j]) {\n            my $path = [];\n            for my $x (@{$min_path->[$i][$j]})\
    \ {\n                push @$path, $x;\n            }\n            push @$path,\
    \ $grid->[$i - 1][$j];\n            $min_", "    my $n = scalar(@$grid);\n   \
    \ my $m = scalar(@{$grid->[0]});\n    my $min = [];\n    my $min_sum = $n * $n\
    \ + 1;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n   \
    \ for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my\
    \ $path = [];\n            my $sum = 0;\n            $visited->[$i][$j] = 1;\n\
    \            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            if ($sum < $min_sum) {\n                $min_sum = $sum;\n      \
    \          $min = $path;\n            }\n            if ($sum == $min_sum) {\n\
    \                if (lexicographicallyLess($path, $min)) {\n                 \
    \   $min = $path;\n                }\n            }\n            if ($sum <= $k)\
    \ {\n                my $ret = dfs($grid, $k, $i, $j, $visited, $path, $sum, $min_sum,\
    \ $min);\n                $min_sum = $ret->[0];\n                $min = $ret->[1];\n\
    \            }\n            $visited->[$i][$j] = 0;\n        }\n    }\n    return\
    \ $min;\n}", "    my $n = scalar(@$grid);\n    my $min = $grid->[0][0];\n    my\
    \ $max = $grid->[0][0];\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1)\
    \ {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n         \
    \   $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n    }\n    my\
    \ $minPath = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n \
    \           my $path = [];\n            my $visited = [];\n            for my\
    \ $x (0..$n-1) {\n                my $row = [];\n                for my $y (0..$n-1)\
    \ {\n                    push @$row, 0;\n                }\n                push\
    \ @$visited, $row;\n            }\n            dfs($grid, $i, $j, $k, $visited,\
    \ $path, $minPath, $min, $max);\n        }\n    }\n    return $minPath;\n}", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n\
    \            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n  \
    \  }\n    my $minPath = [];\n    my $minPathSum = $max * $k;\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $visited->[$i][$j] = 0;\n        }\n    }\n    my $path = [];\n   \
    \ my $pathSum = 0;\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $k) = @_;\n\
    \        if ($k == 0) {\n            if ($pathSum < $minPathSum) {\n         \
    \       $minPathSum = $pathSum;\n                $minPath = [@$path];\n      \
    \      }\n            return;\n        }\n        if ($pathSum > $minPathSum)\
    \ {\n            return;\n        }\n        my $delta = $grid->[$i][$j];\n  \
    \      $pathSum += $delta;\n        push @$path, $delta;\n        $visited->[$i][$j]\
    \ = 1;\n        if ($i > 0 && !$visited->[$i - 1][$j]) {\n            $dfs->($i\
    \ - 1, $j, $k - 1);\n        }\n        if ($i < $n - 1 && !$visited->[$i + 1][$j])\
    \ {\n            $dfs->($i + 1, $j, $k - 1);\n        }\n        if ($j > 0 &&\
    \ !$visited->", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited\
    \ = [];\n    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n    my $min_path_sum\
    \ = 0;\n    my $min_path_len = 0;\n    my $min_path_start = 0;\n    my $min_path_end\
    \ = 0;\n    my $min_path_start_row = 0;\n    my $min_path_start_col = 0;\n   \
    \ my $min_path_end_row = 0;\n    my $min_path_end_col = 0;\n    my $min_path_start_dir\
    \ = 0;\n    my $min_path_end_dir = 0;\n    my $min_path_start_dir_row = 0;\n \
    \   my $min_path_start_dir_col = 0;\n    my $min_path_end_dir_row = 0;\n    my\
    \ $min_path_end_dir_col = 0;\n    my $min_path_start_dir_len = 0;\n    my $min_path_end_dir_len\
    \ = 0;\n    my $min_path_start_dir_sum = 0;\n    my $min_path_end_dir_sum = 0;\n\
    \    my $min_path_start_dir_min = 0;\n    my $min_path_end_dir_min = 0;\n    my\
    \ $min_path_start_dir_max = 0;\n    my $min_path_end_dir_max = 0;\n    my $min_path_start_dir_min_row\
    \ = 0;\n    my $min_path_start_dir_min_col = 0;\n    my $min_path_end_dir_min_row\
    \ = 0;\n    my $min_path_end_dir_min_col = 0;\n    my $min_path_start_dir_max_row\
    \ = 0;\n    my $min_path_start_dir_max_col = 0;\n    my $min_path_end_dir_max_row\
    \ = 0;\n    my", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $dp\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n  \
    \          $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n      \
    \          $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n    for my\
    \ $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $tmp = [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n                  \
    \  if (!@$min || $tmp lt $min) {\n                        $min = $tmp;\n     \
    \               }\n                }\n                if ($i < $n - 1) {\n   \
    \                 my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j >\
    \ 0) {\n                    my $tmp = [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n\
    \                    if (!@$min || $tmp lt $min) {\n                        $min\
    \ = $tmp;\n                    }\n                }\n                if ($j <\
    \ $m - 1) {\n                    my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $grid->[$i][",
  "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n              \
    \  $dp->[$i][$j][$l] = {};\n            }\n        }\n    }\n    for my $i (0\
    \ .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]->{$grid->[$i][$j]}\
    \ = 1;\n        }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0\
    \ .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n                for my\
    \ $x ($i - 1, $i, $i + 1) {\n                    for my $y ($j - 1, $j, $j + 1)\
    \ {\n                        next if $x < 0 || $x >= $n || $y < 0 || $y >= $m;\n\
    \                        next if $x == $i && $y == $j;\n                     \
    \   for my $v (keys %{$dp->[$x][$y][$l - 1]}) {\n                            $dp->[$i][$j][$l]->{$v}\
    \ = 1;\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    my $ans = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            for my $v (keys %{$dp->[$i][$j][$k\
    \ - 1]}) {\n                push @$ans, $v;\n            }\n        }\n    }\n\
    \    return $ans;\n}", "    my $n = @$grid;\n    my $min = $grid->[0][0];\n  \
    \  my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $n - 1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n\
    \            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n  \
    \  }\n    my $minPath = [];\n    my $minPathSum = $max * $k;\n    my $visited\
    \ = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n  \
    \          $visited->[$i][$j] = 0;\n        }\n    }\n    my $path = [];\n   \
    \ my $pathSum = 0;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n\
    \ - 1) {\n            $path->[0] = [$i, $j];\n            $pathSum = $grid->[$i][$j];\n\
    \            $visited->[$i][$j] = 1;\n            dfs($grid, $k, $n, $i, $j, $path,\
    \ $pathSum, $visited, $minPath, $minPathSum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $minPath;\n}", "    my $n = @$grid;\n   \
    \ my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $max = $grid->[$n\
    \ - 1][$m - 1];\n    my $minPath = [$min];\n    my $minPaths = {};\n    my $minPaths2\
    \ = {};\n    my $minPaths3 = {};\n    my $minPaths4 = {};\n    my $minPaths5 =\
    \ {};\n    my $minPaths6 = {};\n    my $minPaths7 = {};\n    my $minPaths8 = {};\n\
    \    my $minPaths9 = {};\n    my $minPaths10 = {};\n    my $minPaths11 = {};\n\
    \    my $minPaths12 = {};\n    my $minPaths13 = {};\n    my $minPaths14 = {};\n\
    \    my $minPaths15 = {};\n    my $minPaths16 = {};\n    my $minPaths17 = {};\n\
    \    my $minPaths18 = {};\n    my $minPaths19 = {};\n    my $minPaths20 = {};\n\
    \    my $minPaths21 = {};\n    my $minPaths22 = {};\n    my $minPaths23 = {};\n\
    \    my $minPaths24 = {};\n    my $minPaths25 = {};\n    my $minPaths26 = {};\n\
    \    my $minPaths27 = {};\n    my $minPaths28 = {};\n    my $minPaths29 = {};\n\
    \    my $minPaths30 = {};\n    my $minPaths31 = {};\n    my $minPaths32 = {};\n\
    \    my $minPaths33 = {};\n    my $minPaths34 = {};\n    my $minPaths35 = {};\n\
    \    my $minPaths36 = {};\n    my $minPaths37 = {};\n    my $minPaths38 = {};\n\
    \    my $minPaths39 = {};\n    my $minPaths40 = {};\n    my", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n        \
    \    for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n    \
    \        }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n       \
    \ }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n\
    \            for my $j (0 .. $m - 1) {\n                my $min = [];\n      \
    \          if ($i > 0) {\n                    my $tmp = [@{$dp->[$i - 1][$j][$l\
    \ - 1]}, $grid->[$i][$j]];\n                    if (!@$min || $tmp lt $min) {\n\
    \                        $min = $tmp;\n                    }\n               \
    \ }\n                if ($i < $n - 1) {\n                    my $tmp = [@{$dp->[$i\
    \ + 1][$j][$l - 1]}, $grid->[$i][$j]];\n                    if (!@$min || $tmp\
    \ lt $min) {\n                        $min = $tmp;\n                    }\n  \
    \              }\n                if ($j > 0) {\n                    my $tmp =\
    \ [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n                    if (!@$min\
    \ || $tmp lt $min) {\n                        $min = $tmp;\n                 \
    \   }\n                }\n                if ($j < $m - 1) {\n               \
    \     my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $grid->[$i][", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $min_path = [];\n    my $min_path_sum = $n * $m * $k;\n    my $path\
    \ = [];\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n          \
    \  $path = [];\n            $visited->[$i][$j] = 1;\n            push @$path,\
    \ $grid->[$i][$j];\n            dfs($grid, $visited, $i, $j, $path, $min_path,\
    \ $min_path_sum, $k);\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    return $min_path;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                if ($i > 0) {\n                    my\
    \ $tmp = dp($dp, $i - 1, $j, $l - 1);\n                    if (cmp($tmp, $min)\
    \ < 0) {\n                        $min = $tmp;\n                    }\n      \
    \          }\n                if ($i < $n - 1) {\n                    my $tmp\
    \ = dp($dp, $i + 1, $j, $l - 1);\n                    if (cmp($tmp, $min) < 0)\
    \ {\n                        $min = $tmp;\n                    }\n           \
    \     }\n                if ($j > 0) {\n                    my $tmp = dp($dp,\
    \ $i, $j - 1, $l - 1);\n                    if (cmp($tmp, $min) < 0) {\n     \
    \                   $min = $tmp;\n                    }\n                }\n \
    \               if ($j < $m - 1) {\n                    my $tmp = dp($dp, $i,\
    \ $j + 1, $l - 1);\n                    if (cmp($tmp, $min) < 0) {\n         \
    \               $min = $tmp;\n                    }\n                }\n     \
    \           $dp->[$i][$j][$l] = [@$min, $grid->[$", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minSum = $n\
    \ * $n * $k;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = 0;\n            my $visited\
    \ = [];\n            for my $x (0 .. $n - 1) {\n                for my $y (0 ..\
    \ $m - 1) {\n                    $visited->[$x][$y] = 0;\n                }\n\
    \            }\n            dfs($grid, $i, $j, $k, $path, $sum, $visited);\n \
    \           if ($sum < $minSum) {\n                $minSum = $sum;\n         \
    \       $minPath = $path;\n            }\n        }\n    }\n    return $minPath;\n\
    }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $visited = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $visited->[$i][$j] = 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum\
    \ = $n * $m * $n * $m;\n    my $minPathSum = $minSum;\n    my $minPathLen = $k;\n\
    \    my $minPathList = [];\n    my $minPathListSum = $minSum;\n    my $minPathListLen\
    \ = $k;\n    my $minPathListList = [];\n    my $minPathListListSum = $minSum;\n\
    \    my $minPathListListLen = $k;\n    my $minPathListListList = [];\n    my $minPathListListListSum\
    \ = $minSum;\n    my $minPathListListListLen = $k;\n    my $minPathListListListList\
    \ = [];\n    my $minPathListListListListSum = $minSum;\n    my $minPathListListListListLen\
    \ = $k;\n    my $minPathListListListListList = [];\n    my $minPathListListListListListSum\
    \ = $minSum;\n    my $minPathListListListListListLen = $k;\n    my $minPathListListListListListList\
    \ = [];\n    my $minPathListListListListListListSum = $minSum;\n    my $minPathListListListListListListLen\
    \ = $k;\n    my $minPathListListListListListListList = [];\n    my $minPathListListListListListListListSum\
    \ = $minSum;\n    my $minPathListListListListListListListLen = $k;\n    my $minPathListListListListListListListList\
    \ = [];\n    my $minPathListListListListListListListListSum = $minSum;\n    my\
    \ $minPathListListListListListListListListLen = $k;\n    my $minPathListListListListListListListListList\
    \ = [];\n    my $", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min\
    \ = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min = $grid->[$i][$j] if\
    \ $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j]\
    \ > $max;\n        }\n    }\n    my $minPath = [];\n    my $minPathSum = $max\
    \ * $k;\n    my $minPathSumIndex = 0;\n    my $minPathSumIndex2 = 0;\n    my $minPathSumIndex3\
    \ = 0;\n    my $minPathSumIndex4 = 0;\n    my $minPathSumIndex5 = 0;\n    my $minPathSumIndex6\
    \ = 0;\n    my $minPathSumIndex7 = 0;\n    my $minPathSumIndex8 = 0;\n    my $minPathSumIndex9\
    \ = 0;\n    my $minPathSumIndex10 = 0;\n    my $minPathSumIndex11 = 0;\n    my\
    \ $minPathSumIndex12 = 0;\n    my $minPathSumIndex13 = 0;\n    my $minPathSumIndex14\
    \ = 0;\n    my $minPathSumIndex15 = 0;\n    my $minPathSumIndex16 = 0;\n    my\
    \ $minPathSumIndex17 = 0;\n    my $minPathSumIndex18 = 0;\n    my $minPathSumIndex19\
    \ = 0;\n    my $minPathSumIndex20 = 0;\n    my $minPathSumIndex21 = 0;\n    my\
    \ $minPathSumIndex22 = 0;\n    my $minPathSumIndex23 = 0;\n    my $minPathSumIndex24\
    \ = 0;\n    my $minPathSumIndex25 = 0;\n    my $minPathSumIndex26 = 0;\n    my\
    \ $minPathSumIndex27 = 0;\n    my $minPathSumIndex28 = 0;\n    my $minPath", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
    \ = $n * $m * $k;\n    my $curr = [];\n    my $curr_sum = 0;\n    my $visited\
    \ = [];\n    my $visited_sum = 0;\n    my $visited_count = 0;\n    my $visited_count_sum\
    \ = 0;\n    my $visited_count_max = 0;\n    my $visited_count_max_sum = 0;\n \
    \   my $visited_count_max_idx = 0;\n    my $visited_count_max_idx_sum = 0;\n \
    \   my $visited_count_max_idx_sum_sum = 0;\n    my $visited_count_max_idx_sum_sum_sum\
    \ = 0;\n    my $visited_count_max_idx_sum_sum_sum_sum = 0;\n    my $visited_count_max_idx_sum_sum_sum_sum_sum\
    \ = 0;\n    my $visited_count_max_idx_sum_sum_sum_sum_sum_sum = 0;\n    my $visited_count_max_idx_sum_sum_sum_sum_sum_sum_sum\
    \ = 0;\n    my $visited_count_max_idx_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n \
    \   my $visited_count_max_idx_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    my\
    \ $visited_count_max_idx_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    my\
    \ $visited_count_max_idx_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  \
    \  my $visited_count_max_idx_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum =\
    \ 0;\n    my $visited_count_", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for\
    \ my $l (0 .. $k - 1) {\n                if ($l == 0) {\n                    $dp->[$i][$j][$l]\
    \ = [$grid->[$i][$j]];\n                } else {\n                    my $min\
    \ = [];\n                    if ($i > 0) {\n                        my $tmp =\
    \ [@{$dp->[$i - 1][$j][$l - 1]}, $grid->[$i][$j]];\n                        if\
    \ (!@$min || $tmp lt $min) {\n                            $min = $tmp;\n     \
    \                   }\n                    }\n                    if ($i < $n\
    \ - 1) {\n                        my $tmp = [@{$dp->[$i + 1][$j][$l - 1]}, $grid->[$i][$j]];\n\
    \                        if (!@$min || $tmp lt $min) {\n                     \
    \       $min = $tmp;\n                        }\n                    }\n     \
    \               if ($j > 0) {\n                        my $tmp = [@{$dp->[$i][$j\
    \ - 1][$l - 1]}, $grid->[$i][$j]];\n                        if (!@$min || $tmp\
    \ lt $min) {\n                            $min = $tmp;\n                     \
    \   }\n                    }\n                    if ($j < $m - 1) {\n       \
    \                 my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $grid->[$i][$j]];\n\
    \                        if (!@$min || $tmp lt $min", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n\
    \            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n    \
    \    }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1)\
    \ {\n            for my $j (0 .. $m - 1) {\n                my $min = [];\n  \
    \              if ($i > 0) {\n                    my $cur = $dp->[$i - 1][$j][$l\
    \ - 1];\n                    if (!@$min || $cur->[0] < $min->[0]) {\n        \
    \                $min = $cur;\n                    }\n                }\n    \
    \            if ($i < $n - 1) {\n                    my $cur = $dp->[$i + 1][$j][$l\
    \ - 1];\n                    if (!@$min || $cur->[0] < $min->[0]) {\n        \
    \                $min = $cur;\n                    }\n                }\n    \
    \            if ($j > 0) {\n                    my $cur = $dp->[$i][$j - 1][$l\
    \ - 1];\n                    if (!@$min || $cur->[0] < $min->[0]) {\n        \
    \                $min = $cur;\n                    }\n                }\n    \
    \            if ($j < $m - 1) {\n                    my $cur = $dp->[$i][$j +\
    \ 1][$l - 1];\n                    if (!@$min || $cur->[0] < $min->[0]) {\n  \
    \                      $min = $cur;\n                   ", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n\
    \        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $m * $k;\n   \
    \ my $minPathSum = $minSum;\n    my $minPathVisited = [];\n    my $minPathVisitedSum\
    \ = $minSum;\n    my $minPathVisitedCount = 0;\n    my $minPathVisitedCountSum\
    \ = $minSum;\n    my $minPathVisitedCountSum2 = $minSum;\n    my $minPathVisitedCountSum3\
    \ = $minSum;\n    my $minPathVisitedCountSum4 = $minSum;\n    my $minPathVisitedCountSum5\
    \ = $minSum;\n    my $minPathVisitedCountSum6 = $minSum;\n    my $minPathVisitedCountSum7\
    \ = $minSum;\n    my $minPathVisitedCountSum8 = $minSum;\n    my $minPathVisitedCountSum9\
    \ = $minSum;\n    my $minPathVisitedCountSum10 = $minSum;\n    my $minPathVisitedCountSum11\
    \ = $minSum;\n    my $minPathVisitedCountSum12 = $minSum;\n    my $minPathVisitedCountSum13\
    \ = $minSum;\n    my $minPathVisitedCountSum14 = $minSum;\n    my $minPathVisitedCountSum15\
    \ = $minSum;\n    my $minPathVisitedCountSum16 = $minSum;\n    my $minPathVisitedCountSum17\
    \ = $minSum;\n    my $minPathVisitedCountSum18 = $minSum;\n    my $minPathVisitedCountSum19\
    \ = $minSum;\n    my $minPathVisitedCountSum20 = $minSum;\n    my $minPathVisitedCountSum21\
    \ = $minSum;\n    my $minPathVisitedCountSum22 = $minSum;\n    my $", "    my\
    \ $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $dp->[$i][$j] = [$grid->[$i][$j]];\n        }\n    }\n    for my $step (1 ..\
    \ $k - 1) {\n        my $new_dp = [];\n        for my $i (0 .. $n - 1) {\n   \
    \         for my $j (0 .. $m - 1) {\n                my $min = $dp->[$i][$j];\n\
    \                if ($i > 0 && $dp->[$i - 1][$j]->[$step - 1] < $min->[$step -\
    \ 1]) {\n                    $min = $dp->[$i - 1][$j];\n                }\n  \
    \              if ($j > 0 && $dp->[$i][$j - 1]->[$step - 1] < $min->[$step - 1])\
    \ {\n                    $min = $dp->[$i][$j - 1];\n                }\n      \
    \          if ($i < $n - 1 && $dp->[$i + 1][$j]->[$step - 1] < $min->[$step -\
    \ 1]) {\n                    $min = $dp->[$i + 1][$j];\n                }\n  \
    \              if ($j < $m - 1 && $dp->[$i][$j + 1]->[$step - 1] < $min->[$step\
    \ - 1]) {\n                    $min = $dp->[$i][$j + 1];\n                }\n\
    \                $new_dp->[$i][$j] = [@$min, $grid->[$i][$j]];\n            }\n\
    \        }\n        $dp = $new_dp;\n    }\n    my $min = $dp->[0][0];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            if ($dp->[$i][$",
  "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
    \ = $n * $m * $k;\n    my $visited = [];\n    my $path = [];\n    my $sum = 0;\n\
    \    my $dfs;\n    $dfs = sub {\n        my($i, $j) = @_;\n        if ($i < 0\
    \ || $i >= $n || $j < 0 || $j >= $m) {\n            return;\n        }\n     \
    \   if ($visited->[$i][$j]) {\n            return;\n        }\n        $visited->[$i][$j]\
    \ = 1;\n        push @$path, $grid->[$i][$j];\n        $sum += $grid->[$i][$j];\n\
    \        if (@$path == $k) {\n            if ($sum < $min_sum) {\n           \
    \     $min_sum = $sum;\n                $min = [@$path];\n            }\n    \
    \    } else {\n            $dfs->($i - 1, $j);\n            $dfs->($i + 1, $j);\n\
    \            $dfs->($i, $j - 1);\n            $dfs->($i, $j + 1);\n        }\n\
    \        pop @$path;\n        $sum -= $grid->[$i][$j];\n        $visited->[$i][$j]\
    \ = 0;\n    };\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)\
    \ {\n            $dfs->($i, $j);\n        }\n    }\n    return $min;\n}", "  \
    \  my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n\
    \            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n  \
    \  }\n    my $res = [];\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $path, $sum)\
    \ = @_;\n        if ($sum > $k) {\n            return;\n        }\n        if\
    \ ($sum == $k) {\n            if ($path->[-1] < $res->[-1]) {\n              \
    \  $res = $path;\n            }\n            return;\n        }\n        if ($i\
    \ > 0 && !$visited->[$i - 1][$j]) {\n            $visited->[$i - 1][$j] = 1;\n\
    \            $dfs->($i - 1, $j, [@$path, $grid->[$i - 1][$j]], $sum + 1);\n  \
    \          $visited->[$i - 1][$j] = 0;\n        }\n        if ($i < $n - 1 &&\
    \ !$visited->[$i + 1][$j]) {\n            $visited->[$i + 1][$j] = 1;\n      \
    \      $dfs->($i + 1, $j, [@$path, $grid->[$i + 1][$j]], $sum + 1);\n        \
    \    $visited->[$i + 1][$j] = 0;", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = [];\n    my $min_sum = $n * $m * $n * $m;\n    my $visited = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            my $cur = [];\n            my\
    \ $sum = 0;\n            $visited->[$i][$j] = 1;\n            $sum += $grid->[$i][$j];\n\
    \            push @$cur, $grid->[$i][$j];\n            dfs($grid, $n, $m, $i,\
    \ $j, $k - 1, $cur, $sum, $visited, $min, $min_sum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $minPath = [];\n    my $minSum = $n\
    \ * $m + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            my $path = [];\n            my $sum = $grid->[$i][$j];\n        \
    \    my $visited = {};\n            $visited->{\"$i,$j\"} = 1;\n            push\
    \ @$path, $grid->[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $sum, $path,\
    \ $visited);\n            if ($sum < $minSum) {\n                $minSum = $sum;\n\
    \                $minPath = $path;\n            }\n        }\n    }\n    return\
    \ $minPath;\n}", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min\
    \ = $grid->[0][0];\n    my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $m - 1) {\n            $min = $grid->[$i][$j] if\
    \ $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j] if $grid->[$i][$j]\
    \ > $max;\n        }\n    }\n    my $res = [];\n    my $visited = [];\n    for\
    \ my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    my $dfs;\n    $dfs = sub {\n        my($i, $j, $k,\
    \ $cur) = @_;\n        if ($k == 0) {\n            if ($cur < $res) {\n      \
    \          $res = $cur;\n            }\n            return;\n        }\n     \
    \   if ($cur > $res) {\n            return;\n        }\n        if ($i < 0 ||\
    \ $i >= $n || $j < 0 || $j >= $m) {\n            return;\n        }\n        if\
    \ ($visited->[$i][$j]) {\n            return;\n        }\n        $visited->[$i][$j]\
    \ = 1;\n        $dfs->($i - 1, $j, $k - 1, [@$cur, $grid->[$i][$j]]);\n      \
    \  $dfs->($i + 1, $j, $k - 1, [@$cur, $grid->[$i][$j]]);\n        $dfs->($i, $j\
    \ - 1, $k - 1, [@$cur, $grid->[$i][$j]]);\n        $dfs->($i, $j + 1, $k - 1,\
    \ [@$cur, $grid->[$i][$", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minSum = $n * $n + 1;\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n    \
    \        my $sum = 0;\n            my $visited = {};\n            dfs($grid, $i,\
    \ $j, $k, $path, $sum, $visited);\n            if ($sum < $minSum) {\n       \
    \         $minSum = $sum;\n                $minPath = $path;\n            }\n\
    \        }\n    }\n    return $minPath;\n}", "    my $n = scalar(@$grid);\n  \
    \  my $m = scalar(@{$grid->[0]});\n    my $min = [];\n    my $min_sum = $n * $n\
    \ + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n   \
    \         my $sum = $grid->[$i][$j];\n            my $path = [[$i, $j]];\n   \
    \         my $visited = {};\n            $visited->{\"$i,$j\"} = 1;\n        \
    \    my $found = 0;\n            my $dfs;\n            $dfs = sub {\n        \
    \        my($i, $j, $sum, $path) = @_;\n                if (scalar(@$path) ==\
    \ $k) {\n                    if ($sum < $min_sum) {\n                        $min_sum\
    \ = $sum;\n                        $min = $path;\n                    }\n    \
    \                $found = 1;\n                    return;\n                }\n\
    \                for my $dir ([-1, 0], [1, 0], [0, -1], [0, 1]) {\n          \
    \          my($di, $dj) = @$dir;\n                    my $ni = $i + $di;\n   \
    \                 my $nj = $j + $dj;\n                    if ($ni >= 0 && $ni\
    \ < $n && $nj >= 0 && $nj < $m && !$visited->{\"$ni,$nj\"}) {\n              \
    \          $visited->{\"$ni,$nj\"} = 1;\n                        $dfs->($ni, $nj,\
    \ $sum + $grid->[$ni][$nj], [@$path, [$ni, $nj]]);\n                        $visited->{\"\
    $ni,$nj\"} = 0;\n                    }\n                }\n            };\n  \
    \          $dfs->($i, $j, $sum, $path);\n            if ($found) {\n         \
    \       last;\n            }\n        }\n    }\n    return [map {$grid->[$_->[0]][$_->[1]]}\
    \ @$min];\n}\nsay join(',", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            my $val = $grid->[$i][$j];\n            my $min = [];\n  \
    \          for my $d (0 .. $k - 1) {\n                if ($d == 0) {\n       \
    \             $min->[$d] = [$val];\n                } else {\n               \
    \     my $min_val = [];\n                    for my $x (-1 .. 1) {\n         \
    \               for my $y (-1 .. 1) {\n                            next if $x\
    \ == 0 && $y == 0;\n                            next if $i + $x < 0 || $i + $x\
    \ >= $n;\n                            next if $j + $y < 0 || $j + $y >= $m;\n\
    \                            my $prev = $dp->[$i + $x][$j + $y][$d - 1];\n   \
    \                         push @$min_val, $prev if @$prev;\n                 \
    \       }\n                    }\n                    @$min_val = sort {\n   \
    \                     my $len = @$a < @$b ? @$a : @$b;\n                     \
    \   for my $i (0 .. $len - 1) {\n                            return $a->[$i] <=>\
    \ $b->[$i] if $a->[$i] != $b->[$i];\n                        }\n             \
    \           return @$a <=> @$b;\n                    } @$min_val;\n          \
    \          $min->[$d] = [@{$min_val->[0]}, $val];\n                }\n       \
    \     }\n            $dp->[$i][$j] = $min;\n        }\n    }\n    my $min = [];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  my $val = $dp->[$i][$j][$k - 1];\n            push @$min, $val if @$val;\n\
    \        }\n    }\n    @", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $visited = {};\n    my $minPath = [];\n    my $minSum = $n * $n + 1;\n\
    \    my $minPathSum = $minSum;\n    my $minPathVisited = {};\n    my $minPathVisitedSum\
    \ = $minSum;\n    my $minPathVisitedSum2 = $minSum;\n    my $minPathVisitedSum2_2\
    \ = $minSum;\n    my $minPathVisitedSum2_3 = $minSum;\n    my $minPathVisitedSum2_4\
    \ = $minSum;\n    my $minPathVisitedSum2_5 = $minSum;\n    my $minPathVisitedSum2_6\
    \ = $minSum;\n    my $minPathVisitedSum2_7 = $minSum;\n    my $minPathVisitedSum2_8\
    \ = $minSum;\n    my $minPathVisitedSum2_9 = $minSum;\n    my $minPathVisitedSum2_10\
    \ = $minSum;\n    my $minPathVisitedSum2_11 = $minSum;\n    my $minPathVisitedSum2_12\
    \ = $minSum;\n    my $minPathVisitedSum2_13 = $minSum;\n    my $minPathVisitedSum2_14\
    \ = $minSum;\n    my $minPathVisitedSum2_15 = $minSum;\n    my $minPathVisitedSum2_16\
    \ = $minSum;\n    my $minPathVisitedSum2_17 = $minSum;\n    my $minPathVisitedSum2_18\
    \ = $minSum;\n    my $minPathVisitedSum2_19 = $minSum;\n    my $minPathVisitedSum2_20\
    \ = $minSum;\n    my $minPathVisitedSum2_21 = $minSum;\n    my $minPathVisitedSum2_22\
    \ = $minSum;\n    my $minPathVisitedSum2_23 = $minSum;\n    my $minPathVisitedSum2_24\
    \ = $minSum;\n    my $minPath", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $min = [];\n    my $min_sum = $n * $n * $n;\n    my $min_path = [];\n\
    \    my $min_path_sum = $n * $n * $n;\n    my $min_path_len = $n * $n * $n;\n\
    \    my $min_path_len_sum = $n * $n * $n;\n    my $min_path_len_sum_len = $n *\
    \ $n * $n;\n    my $min_path_len_sum_len_sum = $n * $n * $n;\n    my $min_path_len_sum_len_sum_len\
    \ = $n * $n * $n;\n    my $min_path_len_sum_len_sum_len_sum = $n * $n * $n;\n\
    \    my $min_path_len_sum_len_sum_len_sum_len = $n * $n * $n;\n    my $min_path_len_sum_len_sum_len_sum_len_sum\
    \ = $n * $n * $n;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len = $n *\
    \ $n * $n;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum = $n * $n\
    \ * $n;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len = $n * $n\
    \ * $n;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum = $n\
    \ * $n * $n;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len\
    \ = $n * $n * $n;\n    my $min_path_len_sum_len_sum_len_sum_len_sum_len_", " \
    \   my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n    my $min_sum\
    \ = $n * $m + 1;\n    my $min_path = [];\n    my $visited = [];\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = 0; $j < $m; $j++) {\n          \
    \  $visited->[$i][$j] = 0;\n        }\n    }\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = 0; $j < $m; $j++) {\n            my $path = [];\n  \
    \          my $sum = 0;\n            $visited->[$i][$j] = 1;\n            $path->[0]\
    \ = $grid->[$i][$j];\n            $sum += $grid->[$i][$j];\n            my $res\
    \ = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum);\n            if ($res->[0]\
    \ < $min_sum) {\n                $min_sum = $res->[0];\n                $min_path\
    \ = $res->[1];\n            }\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    return $min_path;\n}", "    my $n = @$grid;\n    my $visited = {};\n\
    \    my $minPath = [];\n    my $minSum = $n * $n * $k;\n    my $minPathSum = $minSum;\n\
    \    my $minPathSum2 = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n\
    \    my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4\
    \ = [];\n    my $minPath5 = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6\
    \ = $minSum;\n    my $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $minSum;\n    my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9\
    \ = [];\n    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n   \
    \ my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n\
    \    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n    my $minPath13 =\
    \ [];\n    my $minPathSum13 = $minSum;\n    my $minPathSum14 = $minSum;\n    my\
    \ $minPath14 = [];\n    my $minPath15 = [];\n    my $minPathSum15 = $minSum;\n\
    \    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n    my $minPath17 =\
    \ [];\n    my $minPathSum17 = $minSum;\n    my $minPathSum18 = $minSum;\n    my\
    \ $minPath18 = [];\n    my $minPath19 = [];\n    my $minPathSum19 = $minSum;\n\
    \    my $minPathSum20 = $minSum;\n    my $minPath20 = [];\n    my $minPath21 =\
    \ [];\n    my $minPathSum21 = $minSum;\n    my $minPathSum22 = $minSum;\n    my\
    \ $", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = [];\n  \
    \  my $min_sum = $n * $m * $k;\n    my $visited = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] =\
    \ 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            my $path = [];\n            my $sum = 0;\n          \
    \  dfs($grid, $i, $j, $k, $path, $sum, $visited, $min, $min_sum);\n        }\n\
    \    }\n    return $min;\n}", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $minPath = [];\n    my $minSum = $n * $n + 1;\n    my $minPathSum = $minSum;\n\
    \    my $minPathSum2 = $minSum;\n    my $minPath2 = [];\n    my $minPath3 = [];\n\
    \    my $minPathSum3 = $minSum;\n    my $minPathSum4 = $minSum;\n    my $minPath4\
    \ = [];\n    my $minPath5 = [];\n    my $minPathSum5 = $minSum;\n    my $minPathSum6\
    \ = $minSum;\n    my $minPath6 = [];\n    my $minPath7 = [];\n    my $minPathSum7\
    \ = $minSum;\n    my $minPathSum8 = $minSum;\n    my $minPath8 = [];\n    my $minPath9\
    \ = [];\n    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n   \
    \ my $minPath10 = [];\n    my $minPath11 = [];\n    my $minPathSum11 = $minSum;\n\
    \    my $minPathSum12 = $minSum;\n    my $minPath12 = [];\n    my $minPath13 =\
    \ [];\n    my $minPathSum13 = $minSum;\n    my $minPathSum14 = $minSum;\n    my\
    \ $minPath14 = [];\n    my $minPath15 = [];\n    my $minPathSum15 = $minSum;\n\
    \    my $minPathSum16 = $minSum;\n    my $minPath16 = [];\n    my $minPath17 =\
    \ [];\n    my $minPathSum17 = $minSum;\n    my $minPathSum18 = $minSum;\n    my\
    \ $minPath18 = [];\n    my $minPath19 = [];\n    my $minPathSum19 = $minSum;\n\
    \    my $minPathSum20 = $minSum;\n    my $minPath20 = [];\n    my $minPath21 =\
    \ [];\n    my $minPathSum21 = $minSum;\n    my $minPath", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $visited = {};\n    my $queue = [{\n     \
    \   x => 0,\n        y => 0,\n        path => [$grid->[0][0]],\n    }];\n    while\
    \ (@$queue) {\n        my $cur = shift @$queue;\n        my $x = $cur->{x};\n\
    \        my $y = $cur->{y};\n        my $path = $cur->{path};\n        if (@$path\
    \ == $k) {\n            return $path;\n        }\n        for my $dx (-1, 0, 1)\
    \ {\n            for my $dy (-1, 0, 1) {\n                if ($dx == 0 && $dy\
    \ == 0) {\n                    next;\n                }\n                my $nx\
    \ = $x + $dx;\n                my $ny = $y + $dy;\n                if ($nx < 0\
    \ || $nx >= $n || $ny < 0 || $ny >= $m) {\n                    next;\n       \
    \         }\n                if ($visited->{\"$nx,$ny\"}) {\n                \
    \    next;\n                }\n                $visited->{\"$nx,$ny\"} = 1;\n\
    \                push @$queue, {\n                    x => $nx,\n            \
    \        y => $ny,\n                    path => [@$path, $grid->[$nx][$ny]],\n\
    \                };\n            }\n        }\n    }\n    return [];\n}", "  \
    \  my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min =\
    \ [];\n    my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $path =\
    \ [];\n    my $sum = 0;\n    my $visited = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $visited->[$i][$j] = 0;\n    \
    \    }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1)\
    \ {\n            $sum = 0;\n            $path = [];\n            $visited->[$i][$j]\
    \ = 1;\n            $sum += $grid->[$i][$j];\n            push @$path, $grid->[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $sum, $path, $visited, $min_sum, $min_path);\n\
    \            $visited->[$i][$j] = 0;\n        }\n    }\n    return $min_path;\n\
    }", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[0][0];\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n\
    \            $max = $grid->[$i][$j] if $grid->[$i][$j] > $max;\n        }\n  \
    \  }\n    my $min_path = [];\n    my $min_sum = $max * $k;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $sum = $grid->[$i][$j];\n            my $visited = {};\n      \
    \      $visited->{\"$i,$j\"} = 1;\n            my $dfs = sub {\n             \
    \   my($i, $j, $k) = @_;\n                if ($k == 0) {\n                   \
    \ if ($sum < $min_sum) {\n                        $min_sum = $sum;\n         \
    \               $min_path = [@$path];\n                    }\n               \
    \     return;\n                }\n                for my $d ([-1, 0], [1, 0],\
    \ [0, -1], [0, 1]) {\n                    my $x = $i + $d->[0];\n            \
    \        my $y = $j + $d->[1];\n                    next if $x < 0 || $x >= $n\
    \ || $y < 0 || $y >= $m;\n                    next if $visited->{\"$x,$y\"};\n\
    \                    $visited->{\"$x,$y\"} = 1;\n                    push @$path,\
    \ $grid->[$x][$y];\n                    $sum += $grid->[$x][$y];\n           \
    \         $dfs->($x, $y, $k - 1);\n                    pop @$path;\n         \
    \           $sum -= $grid->[$x", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min_path = [];\n    my $min_sum = $n * $m * $k;\n    for my $i (0 ..\
    \ $n - 1) {\n        for my $j (0 .. $m - 1) {\n            my $path = [];\n \
    \           my $sum = 0;\n            my $visited = {};\n            dfs($grid,\
    \ $i, $j, $k, $path, $sum, $visited, $min_path, $min_sum);\n        }\n    }\n\
    \    return $min_path;\n}", "    my $n = @$grid;\n    my $min = $grid->[0][0];\n\
    \    my $max = $grid->[$n-1][$n-1];\n    my $minPath = [$min];\n    my $minPaths\
    \ = {};\n    my $paths = {};\n    my $path = [$min];\n    my $paths = {};\n  \
    \  my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths =\
    \ {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my\
    \ $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n\
    \    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my\
    \ $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n\
    \    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my\
    \ $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n\
    \    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths\
    \ = {};\n    my $paths = {};\n    my $paths = {};\n    my $paths = {};\n    my\
    \ $paths = {};\n    my $paths = {};\n    my $path", "    my $n = @$grid;\n   \
    \ my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n \
    \       for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $minPath = [];\n    my $minSum = $n * $m * $n * $m;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathLen = 0;\n    my $minPathI = 0;\n    my $minPathJ\
    \ = 0;\n    for my $i (0..$n-1) {\n        for my $j (0..$m-1) {\n           \
    \ my $path = [];\n            my $pathSum = 0;\n            my $pathLen = 0;\n\
    \            my $pathI = $i;\n            my $pathJ = $j;\n            $visited->[$i][$j]\
    \ = 1;\n            $path->[$pathLen] = $grid->[$i][$j];\n            $pathSum\
    \ += $grid->[$i][$j];\n            $pathLen++;\n            while ($pathLen <\
    \ $k) {\n                my $min = $n * $m * $n * $m;\n                my $minI\
    \ = -1;\n                my $minJ = -1;\n                if ($pathI > 0 && !$visited->[$pathI-1][$pathJ])\
    \ {\n                    if ($grid->[$pathI-1][$pathJ] < $min) {\n           \
    \             $min = $grid->[$pathI-1][$pathJ];\n                        $minI\
    \ = $pathI-1;\n                        $minJ = $pathJ;\n                    }\n\
    \                }\n                if ($pathI < $n-1 && !$visited->[$pathI+1][$pathJ])\
    \ {\n                    if ($grid->[$pathI+1][$pathJ] < $min) {\n           \
    \             $min = $grid->[$pathI+1][$pathJ];\n                        $minI\
    \ = $pathI+", "    my $n = @$grid;\n    my $min = $grid->[0][0];\n    my $max\
    \ = $grid->[$n-1][$n-1];\n    my $minPath = [$min];\n    my $minPaths = {};\n\
    \    $minPaths->{$min} = $minPath;\n    my $maxPath = [$max];\n    my $maxPaths\
    \ = {};\n    $maxPaths->{$max} = $maxPath;\n    my $minPathsByLength = {};\n \
    \   $minPathsByLength->{1} = $minPaths;\n    my $maxPathsByLength = {};\n    $maxPathsByLength->{1}\
    \ = $maxPaths;\n    my $minPathsByLengthAndValue = {};\n    $minPathsByLengthAndValue->{1}->{$min}\
    \ = $minPath;\n    my $maxPathsByLengthAndValue = {};\n    $maxPathsByLengthAndValue->{1}->{$max}\
    \ = $maxPath;\n    my $minPathsByLengthAndValueAndLastValue = {};\n    $minPathsByLengthAndValueAndLastValue->{1}->{$min}->{$min}\
    \ = $minPath;\n    my $maxPathsByLengthAndValueAndLastValue = {};\n    $maxPathsByLengthAndValueAndLastValue->{1}->{$max}->{$max}\
    \ = $maxPath;\n    my $minPathsByLengthAndValueAndLastValueAndLastValue = {};\n\
    \    $minPathsByLengthAndValueAndLastValueAndLastValue->{1}->{$min}->{$min}->{$min}\
    \ = $minPath;\n    my $maxPathsByLengthAndValueAndLastValueAndLastValue = {};\n\
    \    $maxPathsByLengthAndValueAndLastValueAndLastValue->{1}->{$max}->{$max}->{$max}\
    \ = $maxPath;\n    my $minPathsByLengthAndValueAndLastValueAndLastValueAndLastValue\
    \ = {};\n    $minPathsByLengthAndValueAndLastValueAndLastValueAnd", "    my $n\
    \ = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n    my $min = [];\n \
    \   my $min_sum = $n * $n + 1;\n    my $min_path = [];\n    my $visited = {};\n\
    \    my $dfs;\n    $dfs = sub {\n        my($i, $j, $sum, $path) = @_;\n     \
    \   if ($sum >= $min_sum) {\n            return;\n        }\n        if ($k ==\
    \ 0) {\n            if ($sum < $min_sum) {\n                $min_sum = $sum;\n\
    \                $min = $path;\n            }\n            return;\n        }\n\
    \        if ($i < 0 || $i >= $n || $j < 0 || $j >= $m) {\n            return;\n\
    \        }\n        if (exists $visited->{\"$i,$j\"}) {\n            return;\n\
    \        }\n        $visited->{\"$i,$j\"} = 1;\n        push @$path, $grid->[$i][$j];\n\
    \        $dfs->($i - 1, $j, $sum + $grid->[$i][$j], $path);\n        $dfs->($i\
    \ + 1, $j, $sum + $grid->[$i][$j], $path);\n        $dfs->($i, $j - 1, $sum +\
    \ $grid->[$i][$j], $path);\n        $dfs->($i, $j + 1, $sum + $grid->[$i][$j],\
    \ $path);\n        pop @$path;\n        delete $visited->{\"$i,$j\"};\n    };\n\
    \    for (my $i = 0; $i < $n; ++$i) {\n        for (my $j = 0; $j < $m; ++$j)\
    \ {\n            $dfs->($i, $j, 0, []);\n        }\n    }\n    return $min;\n}",
  "    my $n = scalar(@$grid);\n    my $min_path = [];\n    my $min_path_sum = $n\
    \ * $n * $k;\n    my $visited = {};\n    my $path = [];\n    my $path_sum = 0;\n\
    \    my $path_sum_min = $n * $n * $k;\n    my $path_sum_max = 0;\n    my $path_sum_min_max\
    \ = $n * $n * $k;\n    my $path_sum_max_min = 0;\n    my $path_sum_min_max_min\
    \ = $n * $n * $k;\n    my $path_sum_max_min_min = 0;\n    my $path_sum_min_max_min_min\
    \ = $n * $n * $k;\n    my $path_sum_max_min_min_min = 0;\n    my $path_sum_min_max_min_min_min\
    \ = $n * $n * $k;\n    my $path_sum_max_min_min_min_min = 0;\n    my $path_sum_min_max_min_min_min_min\
    \ = $n * $n * $k;\n    my $path_sum_max_min_min_min_min_min = 0;\n    my $path_sum_min_max_min_min_min_min_min\
    \ = $n * $n * $k;\n    my $path_sum_max_min_min_min_min_min_min = 0;\n    my $path_sum_min_max_min_min_min_min_min_min\
    \ = $n * $n * $k;\n    my $path_sum_max_min_min_min_min_min_min_min = 0;\n   \
    \ my $path_sum_min_max_min_min_min_min_min_min_min = $n * $n * $k;\n    my $path_sum_max_min_min_min_min_min_min_min_min\
    \ = 0;\n    my $path_sum_min_max_min_min_min_min_min_", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n        \
    \    for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = -1;\n    \
    \        }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my $j\
    \ (0 .. $m - 1) {\n            $dp->[$i][$j][0] = $grid->[$i][$j];\n        }\n\
    \    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1) {\n   \
    \         for my $j (0 .. $m - 1) {\n                my $min = -1;\n         \
    \       for my $d (0 .. 3) {\n                    my $x = $i + $dx[$d];\n    \
    \                my $y = $j + $dy[$d];\n                    if ($x >= 0 && $x\
    \ < $n && $y >= 0 && $y < $m) {\n                        my $val = $dp->[$x][$y][$l\
    \ - 1];\n                        if ($val != -1) {\n                         \
    \   if ($min == -1 || $val < $min) {\n                                $min = $val;\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n                $dp->[$i][$j][$l] = $min;\n         \
    \   }\n        }\n    }\n    my $min = -1;\n    for my $i (0 .. $n - 1) {\n  \
    \      for my $j (0 .. $m - 1) {\n            my $val = $dp->[$i][$j][$k - 1];\n\
    \            if ($val != -1) {\n                if ($min == -1 || $val < $min)\
    \ {\n                    $min = $val;\n                }\n            }\n    \
    \    }\n    }\n    my $res =", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $min = $grid->[0][0];\n    my $max = $grid->[$n - 1][$m - 1];\n    my\
    \ $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n\
    \            $dp->[$i][$j] = [$grid->[$i][$j]];\n        }\n    }\n    for my\
    \ $i (1 .. $k - 1) {\n        for my $j (0 .. $n - 1) {\n            for my $l\
    \ (0 .. $m - 1) {\n                my $cur = $grid->[$j][$l];\n              \
    \  my $up = $j > 0 ? $dp->[$j - 1][$l] : [];\n                my $down = $j <\
    \ $n - 1 ? $dp->[$j + 1][$l] : [];\n                my $left = $l > 0 ? $dp->[$j][$l\
    \ - 1] : [];\n                my $right = $l < $m - 1 ? $dp->[$j][$l + 1] : [];\n\
    \                my $min_up = $up->[$i - 1] // $max;\n                my $min_down\
    \ = $down->[$i - 1] // $max;\n                my $min_left = $left->[$i - 1] //\
    \ $max;\n                my $min_right = $right->[$i - 1] // $max;\n         \
    \       my $min_neighbor = min($min_up, $min_down, $min_left, $min_right);\n \
    \               if ($min_neighbor == $min_up) {\n                    $dp->[$j][$l][$i]\
    \ = $cur;\n                } elsif ($min_neighbor == $min_down) {\n          \
    \          $dp->[$j][$l][$i] = $cur;\n                } elsif ($min_neighbor ==\
    \ $min_left) {\n                    $dp->[$j][$l", "    my $n = scalar(@$grid);\n\
    \    my $m = scalar(@{$grid->[0]});\n    my $dp = [];\n    for my $i (0 .. $n\
    \ - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = [];\n\
    \            for my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n\
    \            }\n        }\n    }\n    for my $i (0 .. $n - 1) {\n        for my\
    \ $j (0 .. $m - 1) {\n            $dp->[$i][$j][0] = [$grid->[$i][$j]];\n    \
    \    }\n    }\n    for my $l (1 .. $k - 1) {\n        for my $i (0 .. $n - 1)\
    \ {\n            for my $j (0 .. $m - 1) {\n                my $min = [];\n  \
    \              if ($i > 0) {\n                    my $tmp = [@{$dp->[$i - 1][$j][$l\
    \ - 1]}, $grid->[$i][$j]];\n                    if (!@$min || $tmp lt $min) {\n\
    \                        $min = $tmp;\n                    }\n               \
    \ }\n                if ($i < $n - 1) {\n                    my $tmp = [@{$dp->[$i\
    \ + 1][$j][$l - 1]}, $grid->[$i][$j]];\n                    if (!@$min || $tmp\
    \ lt $min) {\n                        $min = $tmp;\n                    }\n  \
    \              }\n                if ($j > 0) {\n                    my $tmp =\
    \ [@{$dp->[$i][$j - 1][$l - 1]}, $grid->[$i][$j]];\n                    if (!@$min\
    \ || $tmp lt $min) {\n                        $min = $tmp;\n                 \
    \   }\n                }\n                if ($j < $m - 1) {\n               \
    \     my $tmp = [@{$dp->[$i][$j + 1][$l - 1]}, $", "    my $n = scalar(@$grid);\n\
    \    my @dp;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n\
    \            $dp[$i][$j] = [];\n        }\n    }\n    for my $i (0 .. $n - 1)\
    \ {\n        for my $j (0 .. $n - 1) {\n            my $cur = $grid->[$i][$j];\n\
    \            my @neighbors = ();\n            if ($i > 0) {\n                push\
    \ @neighbors, [$i - 1, $j];\n            }\n            if ($i < $n - 1) {\n \
    \               push @neighbors, [$i + 1, $j];\n            }\n            if\
    \ ($j > 0) {\n                push @neighbors, [$i, $j - 1];\n            }\n\
    \            if ($j < $n - 1) {\n                push @neighbors, [$i, $j + 1];\n\
    \            }\n            for my $neighbor (@neighbors) {\n                my\
    \ $x = $neighbor->[0];\n                my $y = $neighbor->[1];\n            \
    \    my $prev = $grid->[$x][$y];\n                if ($cur < $prev) {\n      \
    \              if (scalar(@{$dp[$x][$y]}) == 0) {\n                        push\
    \ @{$dp[$i][$j]}, $cur;\n                    } else {\n                      \
    \  my @new_path = ($cur);\n                        for my $p (@{$dp[$x][$y]})\
    \ {\n                            push @new_path, $p;\n                       \
    \ }\n                        if (scalar(@{$dp[$i][$j]}) == 0 ||\n            \
    \                lexicographicallyLess(\\@new_path, $dp[$i][$j])) {\n        \
    \                    $dp[$i][$j] = \\@new_path;\n                        }\n \
    \                   }\n                }\n            }\n        }\n    }\n  \
    \  my $min_path = [];\n    for my $i (0 .. $n - 1)", "    my $n = @$grid;\n  \
    \  my $m = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n\
    \        for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n\
    \    }\n    my $minPath = [];\n    my $minSum = $n * $m * $n * $m;\n    my $minPathSum\
    \ = $minSum;\n    my $minPathSum2 = $minSum;\n    my $minPathSum3 = $minSum;\n\
    \    my $minPathSum4 = $minSum;\n    my $minPathSum5 = $minSum;\n    my $minPathSum6\
    \ = $minSum;\n    my $minPathSum7 = $minSum;\n    my $minPathSum8 = $minSum;\n\
    \    my $minPathSum9 = $minSum;\n    my $minPathSum10 = $minSum;\n    my $minPathSum11\
    \ = $minSum;\n    my $minPathSum12 = $minSum;\n    my $minPathSum13 = $minSum;\n\
    \    my $minPathSum14 = $minSum;\n    my $minPathSum15 = $minSum;\n    my $minPathSum16\
    \ = $minSum;\n    my $minPathSum17 = $minSum;\n    my $minPathSum18 = $minSum;\n\
    \    my $minPathSum19 = $minSum;\n    my $minPathSum20 = $minSum;\n    my $minPathSum21\
    \ = $minSum;\n    my $minPathSum22 = $minSum;\n    my $minPathSum23 = $minSum;\n\
    \    my $minPathSum24 = $minSum;\n    my $minPathSum25 = $minSum;\n    my $minPathSum26\
    \ = $minSum;\n    my $minPathSum27 = $minSum;\n    my $minPathSum28 = $minSum;\n\
    \    my $minPathSum29 = $minSum;\n    my $minPathSum30 = $minSum;\n    my $minPathSum31\
    \ = $min", "    my $n = scalar(@$grid);\n    my $m = scalar(@{$grid->[0]});\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            for\
    \ my $l (0 .. $k - 1) {\n                $dp->[$i][$j][$l] = [];\n           \
    \     if ($l == 0) {\n                    push @{$dp->[$i][$j][$l]}, $grid->[$i][$j];\n\
    \                } else {\n                    my $min = [];\n               \
    \     if ($i > 0) {\n                        my $tmp = $dp->[$i - 1][$j][$l -\
    \ 1];\n                        if (scalar(@$tmp) > 0) {\n                    \
    \        if (scalar(@$min) == 0 || $tmp->[0] < $min->[0]) {\n                \
    \                $min = $tmp;\n                            }\n               \
    \         }\n                    }\n                    if ($i < $n - 1) {\n \
    \                       my $tmp = $dp->[$i + 1][$j][$l - 1];\n               \
    \         if (scalar(@$tmp) > 0) {\n                            if (scalar(@$min)\
    \ == 0 || $tmp->[0] < $min->[0]) {\n                                $min = $tmp;\n\
    \                            }\n                        }\n                  \
    \  }\n                    if ($j > 0) {\n                        my $tmp = $dp->[$i][$j\
    \ - 1][$l - 1];\n                        if (scalar(@$tmp) > 0) {\n          \
    \                  if (scalar(@$min) == 0 || $tmp->[0] < $min->[0]) {\n      \
    \          ", "    my $n = scalar(@$grid);\n    my $min = $grid->[0][0];\n   \
    \ my $max = $grid->[$n - 1][$n - 1];\n    my $minPath = [$min];\n    my $minPaths\
    \ = {};\n    my $minPathsByLength = {};\n    for my $i (0 .. $n - 1) {\n     \
    \   for my $j (0 .. $n - 1) {\n            my $path = [$grid->[$i][$j]];\n   \
    \         $minPaths->{$i}{$j} = $path;\n            $minPathsByLength->{1}{$path}\
    \ = 1;\n        }\n    }\n    for my $l (2 .. $k) {\n        my $newMinPathsByLength\
    \ = {};\n        for my $i (0 .. $n - 1) {\n            for my $j (0 .. $n - 1)\
    \ {\n                my $path = $minPaths->{$i}{$j};\n                my $last\
    \ = $path->[-1];\n                if ($last == $min) {\n                    if\
    \ ($i > 0) {\n                        my $newPath = [@$path, $grid->[$i - 1][$j]];\n\
    \                        if (!exists($minPathsByLength->{$l - 1}{$newPath})) {\n\
    \                            $newMinPathsByLength->{$newPath} = 1;\n         \
    \               }\n                    }\n                    if ($j > 0) {\n\
    \                        my $newPath = [@$path, $grid->[$i][$j - 1]];\n      \
    \                  if (!exists($minPathsByLength->{$l - 1}{$newPath})) {\n   \
    \                         $newMinPathsByLength->{$newPath} = 1;\n            \
    \            }\n                    }\n                }\n                elsif\
    \ ($last == $max) {\n                    if ($i < $n - 1) {\n                \
    \        my $newPath = [@$path, $grid->[$i + 1][$j]];\n                      \
    \  if (!exists($minPathsByLength->{$l - 1}{$newPath})) {", "    my $n = @$grid;\n\
    \    my $m = @{$grid->[0]};\n    my $dp = [];\n    for my $i (0 .. $n - 1) {\n\
    \        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j] = {};\n        }\n\
    \    }\n    my $q = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            push @$q, [$i, $j, $grid->[$i][$j]];\n        }\n   \
    \ }\n    while (@$q) {\n        my $p = shift @$q;\n        my($i, $j, $v) = @$p;\n\
    \        my $d = $dp->[$i][$j];\n        $d->{$v} = 1;\n        for my $p (@{neighbors($i,\
    \ $j, $n, $m)}) {\n            my($x, $y) = @$p;\n            my $d2 = $dp->[$x][$y];\n\
    \            for my $v2 (keys %$d2) {\n                if ($v2 > $v) {\n     \
    \               $d->{$v2} = 1;\n                }\n            }\n        }\n\
    \        for my $p (@{neighbors($i, $j, $n, $m)}) {\n            my($x, $y) =\
    \ @$p;\n            my $d2 = $dp->[$x][$y];\n            for my $v2 (keys %$d)\
    \ {\n                if (!$d2->{$v2}) {\n                    $d2->{$v2} = 1;\n\
    \                    push @$q, [$x, $y, $v2];\n                }\n           \
    \ }\n        }\n    }\n    my $res = [];\n    for my $i (0 .. $n - 1) {\n    \
    \    for my $j (0 .. $m - 1) {\n            my $d = $dp->[$i][$j];\n         \
    \   for my $v (keys %$d)", "    my $n = @$grid;\n    my $m = @{$grid->[0]};\n\
    \    my $dp = [];\n    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m -\
    \ 1) {\n            $dp->[$i][$j] = [];\n            for my $l (0 .. $k - 1) {\n\
    \                $dp->[$i][$j][$l] = [];\n            }\n        }\n    }\n  \
    \  for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n            $dp->[$i][$j][0]\
    \ = [$grid->[$i][$j]];\n        }\n    }\n    for my $l (1 .. $k - 1) {\n    \
    \    for my $i (0 .. $n - 1) {\n            for my $j (0 .. $m - 1) {\n      \
    \          my $min = [];\n                for my $d (0 .. 3) {\n             \
    \       my $x = $i + $dx[$d];\n                    my $y = $j + $dy[$d];\n   \
    \                 if ($x >= 0 && $x < $n && $y >= 0 && $y < $m) {\n          \
    \              my $cur = $dp->[$x][$y][$l - 1];\n                        if (!@$min\
    \ || $cur->[0] < $min->[0] ||\n                            ($cur->[0] == $min->[0]\
    \ &&\n                             $cur->[$#$cur] < $min->[$#$min])) {\n     \
    \                       $min = $cur;\n                        }\n            \
    \        }\n                }\n                $dp->[$i][$j][$l] = [@$min, $grid->[$i][$j]];\n\
    \            }\n        }\n    }\n    my $min = [];\n    for my $i (0 .. $n -\
    \ 1) {\n        for my $j (0 .. $m - 1) {\n            my $cur = $dp->[$i][$j][$k\
    \ - 1];\n            if (!@$min || $cur->[0", "    my $n = @$grid;\n    my $m\
    \ = @{$grid->[0]};\n    my $visited = [];\n    for my $i (0..$n-1) {\n       \
    \ for my $j (0..$m-1) {\n            $visited->[$i][$j] = 0;\n        }\n    }\n\
    \    my $min_path = [];\n    my $min_sum = $n * $m + 1;\n    for my $i (0..$n-1)\
    \ {\n        for my $j (0..$m-1) {\n            my $path = [];\n            my\
    \ $sum = 0;\n            $visited->[$i][$j] = 1;\n            dfs($grid, $visited,\
    \ $i, $j, $path, $sum, $k, $min_path, $min_sum);\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $min_path;\n}", "    my $n = @$grid;\n  \
    \  my $m = @{$grid->[0]};\n    my $min = $grid->[0][0];\n    my $max = $grid->[0][0];\n\
    \    for my $i (0 .. $n - 1) {\n        for my $j (0 .. $m - 1) {\n          \
    \  $min = $grid->[$i][$j] if $grid->[$i][$j] < $min;\n            $max = $grid->[$i][$j]\
    \ if $grid->[$i][$j] > $max;\n        }\n    }\n    my $minPath = [];\n    my\
    \ $minPathLen = $k + 1;\n    for my $i (0 .. $n - 1) {\n        for my $j (0 ..\
    \ $m - 1) {\n            my $path = [];\n            my $pathLen = 0;\n      \
    \      my $visited = {};\n            my $queue = [[$i, $j]];\n            while\
    \ (@$queue) {\n                my $cur = shift @$queue;\n                my($x,\
    \ $y) = @$cur;\n                next if $visited->{\"$x,$y\"};\n             \
    \   $visited->{\"$x,$y\"} = 1;\n                push @$path, $grid->[$x][$y];\n\
    \                ++$pathLen;\n                if ($pathLen == $k) {\n        \
    \            if ($path < $minPath) {\n                        $minPath = $path;\n\
    \                        $minPathLen = $pathLen;\n                    }\n    \
    \                last;\n                }\n                for my $dir ([-1, 0],\
    \ [1, 0], [0, -1], [0, 1]) {\n                    my($dx, $dy) = @$dir;\n    \
    \                my $nx = $x + $dx;\n                    my $ny = $y + $dy;\n\
    \                    next if $nx < 0 || $nx >= $n || $ny < 0 || $ny >= $m;\n \
    \                   push @$queue, [$nx, $ny];\n                }\n           \
    \ }\n        }\n    }\n    return $minPath;\n}", "    my $n = @$grid;\n    my\
    \ $m = @{$grid->[0]};\n    my $visited = {};\n    my $min = [];\n    my $min_sum\
    \ = $n * $m * $k;\n    my $min_path = [];\n    my $min_path_sum = 0;\n    my $min_path_len\
    \ = 0;\n    my $min_path_visited = {};\n    my $min_path_visited_sum = 0;\n  \
    \  my $min_path_visited_len = 0;\n    my $min_path_visited_sum_len = 0;\n    my\
    \ $min_path_visited_sum_len_sum = 0;\n    my $min_path_visited_sum_len_sum_len\
    \ = 0;\n    my $min_path_visited_sum_len_sum_len_sum = 0;\n    my $min_path_visited_sum_len_sum_len_sum_len\
    \ = 0;\n    my $min_path_visited_sum_len_sum_len_sum_len_sum = 0;\n    my $min_path_visited_sum_len_sum_len_sum_len_sum_len\
    \ = 0;\n    my $min_path_visited_sum_len_sum_len_sum_len_sum_len_sum = 0;\n  \
    \  my $min_path_visited_sum_len_sum_len_sum_len_sum_len_sum_len = 0;\n    my $min_path_visited_sum_len_sum_len_sum_len_sum_len_sum_len_sum\
    \ = 0;\n    my $min_path_visited_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len\
    \ = 0;\n    my $min_path_visited_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum\
    \ = 0;\n    my $min_path_visited_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len\
    \ = 0;\n", "    my $n = scalar(@$grid);\n    my $visited = [];\n    for my $i\
    \ (0..$n-1) {\n        for my $j (0..$n-1) {\n            $visited->[$i][$j] =\
    \ 0;\n        }\n    }\n    my $minPath = [];\n    my $minSum = $n * $n * $k;\n\
    \    for my $i (0..$n-1) {\n        for my $j (0..$n-1) {\n            $visited->[$i][$j]\
    \ = 1;\n            my $path = [$grid->[$i][$j]];\n            my $sum = $grid->[$i][$j];\n\
    \            my $res = dfs($grid, $visited, $i, $j, $k-1, $path, $sum);\n    \
    \        if ($res->[1] < $minSum) {\n                $minPath = $res->[0];\n \
    \               $minSum = $res->[1];\n            }\n            $visited->[$i][$j]\
    \ = 0;\n        }\n    }\n    return $minPath;\n}", "    my $n = @$grid;\n   \
    \ my $minPath = [];\n    my $minSum = $n * $n * $k;\n    my $visited = [];\n \
    \   for my $i (0 .. $n - 1) {\n        for my $j (0 .. $n - 1) {\n           \
    \ $visited->[$i][$j] = 0;\n        }\n    }\n    for my $i (0 .. $n - 1) {\n \
    \       for my $j (0 .. $n - 1) {\n            dfs($grid, $i, $j, $k, $minPath,\
    \ $minSum, $visited, []);\n        }\n    }\n    return $minPath;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
