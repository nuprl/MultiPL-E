name: HumanEval_112_reverse_delete
language: pl
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return a tuple containing the result string and True/False\
  \ for the check.\n# Example\nsub reverse_delete {\n    my($s, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n\
  \        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"\
  abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n    return ($s_copy,\
    \ $s_copy eq reverse $s_copy);\n}", "    my $r = reverse $s;\n    $s =~ s/[$c]//g;\n\
    \    return ($s, $s eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my %c = map { $_ => 1 } split //, $c;\n  \
    \  my $r = join '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = reverse $s;\n    my %c = map { $_ => 1 } split //, $c;\n\
    \    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return ($s, $s eq $r);\n}", " \
    \   my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}",
  "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $is_palindrome = $result\
    \ eq reverse $result;\n    return ($result, $is_palindrome);\n}", "    my %c =\
    \ map {$_ => 1} split //, $c;\n    my $r = join '', grep {!$c{$_}} split //, $s;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    my $p = $r eq reverse $r;\n    return ($r, $p);\n}", "    my $r = $s;\n \
    \   $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return ($r, $p);\n}",
  "    my %hash;\n    my $result = '';\n    for my $char (split //, $c) {\n      \
    \  $hash{$char} = 1;\n    }\n    for my $char (split //, $s) {\n        if (!$hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    return ($result, $result\
    \ eq reverse $result);\n}", "    my %chars = map { $_ => 1 } split //, $c;\n \
    \   my $result = join '', grep { !$chars{$_} } split //, $s;\n    return ($result,\
    \ $result eq reverse $result);\n}", "    my $result = $s;\n    for my $char (split\
    \ //, $c) {\n        $result =~ s/$char//g;\n    }\n    return ($result, $result\
    \ eq reverse $result);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = reverse $s;\n    my $p = $s eq $r;\n\
    \    my $d = $s;\n    $d =~ s/[$c]//g;\n    return ($d, $p);\n}", "    my $r =\
    \ $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r\
    \ = reverse $s;\n    my $p = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return ($p, $p eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = reverse $s;\n    my $t = $s;\n   \
    \ $t =~ s/[$c]//g;\n    return ($t, $t eq $r);\n}", "    my $res = $s;\n    $res\
    \ =~ s/[$c]//g;\n    return ($res, $res eq reverse $res);\n}", "    my %c = map\
    \ { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $s_copy = $s;\n    $s_copy =~\
    \ s/[$c]//g;\n    my $s_copy_reverse = reverse $s_copy;\n    return ($s_copy,\
    \ $s_copy eq $s_copy_reverse);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n \
    \   return ($r, $r eq reverse $r);\n}", "    my $r = reverse $s;\n    my %c =\
    \ map { $_ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n\
    \    return ($s, $s eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = reverse $s;\n    my $p = $s eq $r;\n\
    \    my $d = $s;\n    $d =~ s/[$c]//g;\n    return ($d, $p);\n}", "    my $r =\
    \ $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my @s\
    \ = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n\
    \    my @res = grep { !$c{$_} } @s;\n    my $res = join '', @res;\n    my $is_palindrome\
    \ = $res eq reverse $res;\n    return ($res, $is_palindrome);\n}", "    my $r\
    \ = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my\
    \ $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "  \
    \  my $r = join('', reverse(split(//, $s)));\n    my $t = join('', reverse(split(//,\
    \ $c)));\n    my $p = join('', reverse(split(//, $s)));\n    my $q = join('',\
    \ reverse(split(//, $c)));\n    my $res = $s;\n    my $res1 = $c;\n    my $res2\
    \ = $r;\n    my $res3 = $t;\n    my $res4 = $p;\n    my $res5 = $q;\n    my $res6\
    \ = $s;\n    my $res7 = $c;\n    my $res8 = $r;\n    my $res9 = $t;\n    my $res10\
    \ = $p;\n    my $res11 = $q;\n    my $res12 = $s;\n    my $res13 = $c;\n    my\
    \ $res14 = $r;\n    my $res15 = $t;\n    my $res16 = $p;\n    my $res17 = $q;\n\
    \    my $res18 = $s;\n    my $res19 = $c;\n    my $res20 = $r;\n    my $res21\
    \ = $t;\n    my $res22 = $p;\n    my $res23 = $q;\n    my $res24 = $s;\n    my\
    \ $res25 = $c;\n    my $res26 = $r;\n    my $res27 = $t;\n    my $res28 = $p;\n\
    \    my $res29 = $q;\n    my $res30 = $s;\n    my $res31 = $c;\n    my $res32\
    \ = $r;\n    my $res33 = $t;\n    my $res34 = $p;\n    my $res35 = $q;\n    my\
    \ $res36 = $s;\n    my $res37 = $c;\n    my $res38 = $r;\n    my $res39 = $t;\n\
    \    my $res40 = $p;\n    my $res41 = $q;\n    my $res42 = $s;\n    my $res43\
    \ =", "    my $r = reverse $s;\n    my %c = map {$_ => 1} split //, $c;\n    my\
    \ $s2 = join '', grep {!$c{$_}} split //, $s;\n    my $r2 = join '', grep {!$c{$_}}\
    \ split //, $r;\n    return ($s2, $s2 eq $r2);\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $res = $s;\n   \
    \ $res =~ s/[$c]//g;\n    my $rev = reverse $res;\n    return ($res, $res eq $rev);\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = join '', grep { index($c, $_) == -1\
    \ } split //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my $r = reverse\
    \ $s;\n    my %c = map { $_ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n    $r\
    \ =~ s/[$c]//g;\n    return ($s, $s eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    my $p = $r eq reverse $r;\n    return ($r, $p);\n}", "    my $r = $s;\n \
    \   for my $c (split '', $c) {\n        $r =~ s/$c//g;\n    }\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n\
    \    my %c = map {$_ => 1} @c;\n    my @r;\n    for my $i (@s) {\n        push\
    \ @r, $i unless $c{$i};\n    }\n    my $r = join '', @r;\n    return ($r, $r eq\
    \ reverse $r);\n}", "    my %hash = map { $_ => 1 } split //, $c;\n    my $r =\
    \ join '', grep { !$hash{$_} } split //, $s;\n    return ($r, $r eq reverse $r);\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n\
    }", "    my $r = reverse $s;\n    my %h;\n    for my $c (split //, $c) {\n   \
    \     $h{$c} = 1;\n    }\n    my $t = join '', grep { !$h{$_} } split //, $s;\n\
    \    return ($t, $t eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n\
    \    my $s_copy_reverse = reverse $s_copy;\n    return ($s_copy, $s_copy eq $s_copy_reverse);\n\
    }", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_}\
    \ } split //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n\
    \    for my $c (split //, $c) {\n        $r =~ s/$c//g;\n    }\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = reverse $s;\n    my %c = map { $_ => 1\
    \ } split //, $c;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return ($s,\
    \ $s eq $r);\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse $r);\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}",
  "    my %c = map {$_ => 1} split(//, $c);\n    my $r = join('', grep {!$c{$_}} split(//,\
    \ $s));\n    return ($r, $r eq reverse($r));\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $result = $s;\n\
    \    for my $char (split //, $c) {\n        $result =~ s/$char//g;\n    }\n  \
    \  return ($result, $result eq reverse $result);\n}", "    my $r = $s;\n    $r\
    \ =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my %c = map { $_\
    \ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $s_copy = $s;\n    $s_copy =~\
    \ s/[$c]//g;\n    return ($s_copy, $s_copy eq reverse $s_copy);\n}", "    my %c\
    \ = map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split\
    \ //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return ($r, $r eq reverse $r);\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}",
  "    my $r = reverse $s;\n    my %c = map { $_ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n\
    \    $r =~ s/[$c]//g;\n    return ($s, $s eq $r);\n}", "    my $r = $s;\n    $r\
    \ =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n  \
    \  $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = reverse\
    \ $s;\n    my %c = map { $_ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n    $r\
    \ =~ s/[$c]//g;\n    return ($s, $s eq $r);\n}", "    my %c = map { $_ => 1 }\
    \ split //, $c;\n    $s =~ s/[$c]//g;\n    return ($s, $s eq reverse $s);\n}",
  "    my $result = $s;\n    for my $char (split //, $c) {\n        $result =~ s/$char//g;\n\
    \    }\n    return ($result, $result eq reverse $result);\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse\
    \ $r;\n    return ($r, $p);\n}", "    my $r = reverse $s;\n    my %c = map { $_\
    \ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return\
    \ ($s, $s eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n \
    \   my $s_copy_reverse = reverse $s_copy;\n    return ($s_copy, $s_copy eq $s_copy_reverse);\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n  \
    \  return ($r, $p);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r\
    \ = join '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse $r);\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n\
    }", "    my %c = map { $_ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n    return\
    \ ($s, $s eq reverse $s);\n}", "    my $r = reverse $s;\n    my %hash = map {\
    \ $_ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return\
    \ ($s, $s eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p =\
    \ $r eq reverse $r;\n    return ($r, $p);\n}", "    my $r = reverse $s;\n    my\
    \ %c = map { $_ => 1 } split //, $c;\n    my $t = join '', grep { !$c{$_} } split\
    \ //, $s;\n    return ($t, $t eq $r);\n}", "    my $result = $s;\n    for my $char\
    \ (split //, $c) {\n        $result =~ s/$char//g;\n    }\n    return ($result,\
    \ $result eq reverse $result);\n}", "    my $r = join '', grep { index($c, $_)\
    \ == -1 } split //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my $r =\
    \ reverse $s;\n    my %h;\n    @h{split //, $c} = ();\n    $s =~ s/[$c]//g;\n\
    \    return ($s, $s eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my %c = map { $_ => 1 } split //, $c;\n  \
    \  my $r = join '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $re = join('|', split(//, $c));\n    my $res = $s;\n    $res\
    \ =~ s/$re//g;\n    return ($res, $res eq reverse($res));\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $s1 = $s;\n    $s1 =~ s/[$c]//g;\n    my $s2 = reverse $s1;\n\
    \    return ($s1, $s1 eq $s2);\n}", "    my $s1 = $s;\n    $s1 =~ s/[$c]//g;\n\
    \    return ($s1, $s1 eq reverse $s1);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    my $p = $r eq reverse $r;\n    return ($r, $p);\n}", "    my %c = map { $_\
    \ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $s_copy = $s;\n    $s_copy =~\
    \ s/[$c]//g;\n    my $s_copy_rev = reverse $s_copy;\n    return ($s_copy, $s_copy\
    \ eq $s_copy_rev);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    my $s_copy = $s;\n    for my $char (split //, $c)\
    \ {\n        $s_copy =~ s/$char//g;\n    }\n    return ($s_copy, $s_copy eq reverse\
    \ $s_copy);\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse $r);\n}",
  "    my %c = map {$_ => 1} split //, $c;\n    my $r = join '', grep {!$c{$_}} split\
    \ //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my %c = map { $_ => 1\
    \ } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my %c = map { $_ => 1 } split //, $c;\n  \
    \  my $r = join '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my %c\
    \ = map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split\
    \ //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n   \
    \ return ($r, $r eq reverse $r);\n}", "    my @s = split //, $s;\n    my @c =\
    \ split //, $c;\n    my %c = map { $_ => 1 } @c;\n    @s = grep { !$c{$_} } @s;\n\
    \    my $s = join '', @s;\n    my $r = reverse $s;\n    return ($s, $s eq $r);\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n\
    }", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_}\
    \ } split //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $result\
    \ = $s;\n    $result =~ s/[$c]//g;\n    return ($result, $result eq reverse $result);\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my %c = map { $_ => 1 } split //, $c;\n  \
    \  my $r = join '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = reverse $s;\n    my %c = map { $_ => 1 } split //, $c;\n\
    \    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return ($s, $s eq $r);\n}", " \
    \   my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}",
  "    my $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n    my $s_reverse = reverse $s_copy;\n\
    \    return ($s_copy, $s_copy eq $s_reverse);\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r\
    \ =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $result = $s;\n\
    \    $result =~ s/[$c]//g;\n    return ($result, $result eq reverse $result);\n\
    }", "    my $r = join '', reverse split //, $s;\n    my $t = join '', reverse\
    \ split //, $c;\n    my $p = join '', reverse split //, $r;\n    my $q = join\
    \ '', reverse split //, $t;\n    my $res = $r =~ s/$t//g;\n    my $res1 = $p =~\
    \ s/$q//g;\n    return ($res, $res eq $res1);\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = reverse $s;\n\
    \    my %c = map { $_ => 1 } split //, $c;\n    my $t = join '', grep { !$c{$_}\
    \ } split //, $s;\n    return ($t, $t eq $r);\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r\
    \ =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n  \
    \  $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my %c = map\
    \ {$_ => 1} split //, $c;\n    my $r = join '', grep {!$c{$_}} split //, $s;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = reverse $s;\n    my %c =\
    \ map { $_ => 1 } split //, $c;\n    my $i = 0;\n    my $j = 0;\n    while ($i\
    \ < length $s and $j < length $r) {\n        if ($c{substr($s, $i, 1)}) {\n  \
    \          $i++;\n        } elsif ($c{substr($r, $j, 1)}) {\n            $j++;\n\
    \        } else {\n            return ($s, 0) if substr($s, $i, 1) ne substr($r,\
    \ $j, 1);\n            $i++;\n            $j++;\n        }\n    }\n    return\
    \ ($s, 1);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq\
    \ reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r\
    \ eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r,\
    \ $r eq reverse $r);\n}", "    $s =~ s/[$c]//g;\n    my $r = reverse $s;\n   \
    \ return ($s, $s eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my\
    \ $p = $r eq reverse $r;\n    return ($r, $p);\n}", "    my @s = split //, $s;\n\
    \    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r = grep\
    \ { !$c{$_} } @s;\n    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n \
    \   return ($r, $p);\n}", "    my $s_copy = $s;\n    for my $c_char (split //,\
    \ $c) {\n        $s_copy =~ s/$c_char//g;\n    }\n    return ($s_copy, $s_copy\
    \ eq reverse $s_copy);\n}", "    my $r = join '', grep { index($c, $_) == -1 }\
    \ split //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my $t = $s;\n  \
    \  $t =~ s/[$c]//g;\n    return ($t, $t eq reverse $t);\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $result\
    \ = $s;\n    $result =~ s/[$c]//g;\n    return ($result, $result eq reverse $result);\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n  \
    \  return ($r, $p);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $r2 =\
    \ reverse $r;\n    return ($r, $r eq $r2);\n}", "    my $s_copy = $s;\n    $s_copy\
    \ =~ s/[$c]//g;\n    my $s_copy_reverse = reverse $s_copy;\n    return ($s_copy,\
    \ $s_copy eq $s_copy_reverse);\n}", "    my $r = join('', reverse(split('', $s)));\n\
    \    my $t = $s;\n    $t =~ s/[$c]//g;\n    return ($t, $t eq $r);\n}", "    my\
    \ $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return ($r,\
    \ $p);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = reverse $s;\n    my $p = $s eq $r;\n    $s =~ s/[$c]//g;\n\
    \    return ($s, $p);\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my\
    \ $r = join '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = reverse $s;\n    my %h =\
    \ map {$_ => 1} split //, $c;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n  \
    \  return ($s, $s eq $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my\
    \ $p = $r eq reverse $r;\n    return ($r, $p);\n}", "    my %c = map { $_ => 1\
    \ } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = reverse $s;\n    $s =~ s/[$c]//g;\n\
    \    $r =~ s/[$c]//g;\n    return ($s, $s eq $r);\n}", "    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n   \
    \ return ($r, $r eq reverse $r);\n}", "    my $r = join '', grep { index($c, $_)\
    \ == -1 } split //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my @s =\
    \ split '', $s;\n    my @c = split '', $c;\n    my %c = map { $_ => 1 } @c;\n\
    \    my @res = grep { !$c{$_} } @s;\n    my $res = join '', @res;\n    return\
    \ ($res, $res eq reverse $res);\n}", "    my %c = map { $_ => 1 } split //, $c;\n\
    \    my $r = join '', grep { !$c{$_} } split //, $s;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return ($r, $r eq reverse\
    \ $r);\n}", "    my $r = $s;\n    my %c = map { $_ => 1 } split //, $c;\n    $r\
    \ =~ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return ($r, $r eq reverse $r);\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my\
    \ $p = $r eq reverse $r;\n    return ($r, $p);\n}", "    my $r = reverse $s;\n\
    \    my %c = map { $_ => 1 } split //, $c;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n\
    \    return ($s, $s eq $r);\n}", "    my $r = join '', grep { index($c, $_) ==\
    \ -1 } split //, $s;\n    return ($r, $r eq reverse $r);\n}", "    my %c = map\
    \ {$_ => 1} split //, $c;\n    my $r = join '', grep {!$c{$_}} split //, $s;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my %c = map { $_ => 1 } split //,\
    \ $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return ($r, $r\
    \ eq reverse $r);\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    return\
    \ ($result, $result eq reverse $result);\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return ($r, $r eq reverse $r);\n}", "    my %c = map { $_ => 1 } split '',\
    \ $c;\n    my $r = join '', grep { !$c{$_} } split '', $s;\n    return ($r, $r\
    \ eq reverse $r);\n}", "    my $r = reverse $s;\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    $s =~ s/[$c]//g;\n    $r =~ s/[$c]//g;\n    return ($s, $s eq $r);\n\
    }", "    my $res = $s;\n    $res =~ s/[$c]//g;\n    return ($res, $res eq reverse\
    \ $res);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
