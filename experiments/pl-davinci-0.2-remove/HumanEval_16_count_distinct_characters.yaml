name: HumanEval_16_count_distinct_characters
language: pl
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\nsub count_distinct_characters {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry\
  \ jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n}\n\ntesthumaneval();"
completions: ["    my %characters = ();\n    foreach my $char (split //, $string)\
    \ {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %characters;\n    foreach my $char (split //, $string) {\n       \
    \ $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n}",
  "    my %chars;\n    foreach my $char (split //, lc $string) {\n        $chars{$char}\
    \ = 1;\n    }\n    return scalar keys %chars;\n}", "    my %characters;\n    foreach\
    \ my $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n\
    \    return scalar keys %characters;\n}", "    my %hash = ();\n    foreach my\
    \ $char (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return\
    \ scalar keys %hash;\n}", "    my %hash;\n    foreach my $char (split //, $string)\
    \ {\n        $hash{lc $char} = 1;\n    }\n    return scalar keys %hash;\n}", " \
    \   my %characters;\n    foreach my $char (split //, $string) {\n        $characters{lc\
    \ $char} = 1;\n    }\n    return scalar keys %characters;\n}", "    my %hash =\
    \ ();\n    my @array = split(//, $string);\n    foreach my $char (@array) {\n\
    \        $hash{$char} = 1;\n    }\n    return scalar(keys %hash);\n}", "    my\
    \ %characters;\n    foreach my $char (split //, $string) {\n        $characters{lc\
    \ $char} = 1;\n    }\n    return scalar keys %characters;\n}", "    my %seen;\n\
    \    my @chars = split //, $string;\n    foreach my $char (@chars) {\n       \
    \ $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", "    my %characters;\n\
    \    foreach my $char (split //, $string) {\n        $characters{lc $char} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %characters;\n    foreach\
    \ my $character (split //, $string) {\n        $characters{lc $character} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %characters;\n    foreach\
    \ my $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n\
    \    return scalar keys %characters;\n}", "    my %characters;\n    foreach my\
    \ $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n   \
    \ return scalar keys %characters;\n}", "    my %characters;\n    foreach my $char\
    \ (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n    return\
    \ scalar keys %characters;\n}", "    my %hash;\n    foreach my $char (split //,\
    \ $string) {\n        $hash{lc $char} = 1;\n    }\n    return scalar keys %hash;\n\
    }", "    my %chars;\n    foreach my $char (split //, $string) {\n        $chars{lc\
    \ $char} = 1;\n    }\n    return scalar keys %chars;\n}", "    my %chars;\n  \
    \  foreach my $char (split //, $string) {\n        $chars{lc $char} = 1;\n   \
    \ }\n    return scalar keys %chars;\n}", "    my %characters;\n    foreach my\
    \ $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n   \
    \ return scalar keys %characters;\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $char (@chars) {\n        $seen{$char} = 1;\n    }\n\
    \    return scalar(keys %seen);\n}", "    my %seen;\n    my @chars = split //,\
    \ $string;\n    foreach my $char (@chars) {\n        $seen{lc $char} = 1;\n  \
    \  }\n    return scalar keys %seen;\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n\
    \    }\n    return scalar(keys %seen);\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $c (@chars) {\n        $seen{lc($c)} = 1;\n    }\n\
    \    return scalar(keys %seen);\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n\
    \    }\n    return scalar(keys %seen);\n}", "    my %hash = ();\n    foreach my\
    \ $char (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return\
    \ scalar keys %hash;\n}", "    my %characters;\n    foreach my $char (split //,\
    \ $string) {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys\
    \ %characters;\n}", "    my @chars = split(//, $string);\n    my %seen;\n    my\
    \ $count = 0;\n    foreach my $char (@chars) {\n        if (!$seen{lc($char)})\
    \ {\n            $count++;\n            $seen{lc($char)} = 1;\n        }\n   \
    \ }\n    return $count;\n}", "    my %chars;\n    foreach my $char (split //,\
    \ $string) {\n        $chars{lc $char} = 1;\n    }\n    return scalar keys %chars;\n\
    }", "    my %characters;\n    foreach my $char (split(//, $string)) {\n      \
    \  $characters{lc($char)} = 1;\n    }\n    return scalar(keys %characters);\n}",
  "    my %hash;\n    foreach my $char (split //, $string) {\n        $hash{lc $char}\
    \ = 1;\n    }\n    return scalar keys %hash;\n}", "    my %seen;\n    my @chars\
    \ = split(//, $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)}\
    \ = 1;\n    }\n    return scalar(keys %seen);\n}", "    my %hash;\n    foreach\
    \ my $char (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return\
    \ scalar keys %hash;\n}", "    my %hash = ();\n    foreach my $char (split //,\
    \ $string) {\n        $hash{lc $char} = 1;\n    }\n    return scalar keys %hash;\n\
    }", "    my %characters;\n    foreach my $char (split //, $string) {\n       \
    \ $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n}",
  "    my %seen;\n    my @chars = split //, $string;\n    for my $char (@chars) {\n\
    \        $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", "   \
    \ my %characters;\n    foreach my $char (split //, $string) {\n        $characters{lc\
    \ $char} = 1;\n    }\n    return scalar keys %characters;\n}", "    my %seen;\n\
    \    my @chars = split //, $string;\n    foreach my $char (@chars) {\n       \
    \ $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", "    my %characters;\n\
    \    foreach my $char (split //, $string) {\n        $characters{lc $char} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %chars = ();\n    foreach\
    \ my $char (split(//, $string)) {\n        $chars{lc($char)} = 1;\n    }\n   \
    \ return scalar(keys %chars);\n}", "    my %characters;\n    foreach my $char\
    \ (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n    return\
    \ scalar keys %characters;\n}", "    my %hash;\n    my @array = split(//, $string);\n\
    \    foreach my $char (@array) {\n        $hash{$char} = 1;\n    }\n    return\
    \ scalar(keys %hash);\n}", "    my %characters;\n    foreach my $char (split //,\
    \ $string) {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys\
    \ %characters;\n}", "    my %characters;\n    foreach my $character (split(//,\
    \ $string)) {\n        $characters{lc($character)} = 1;\n    }\n    return scalar(keys\
    \ %characters);\n}", "    my %characters;\n    foreach my $char (split //, $string)\
    \ {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %seen;\n    $seen{lc $_}++ for split //, $string;\n    return scalar\
    \ keys %seen;\n}", "    my %seen;\n    my @chars = split //, $string;\n    foreach\
    \ my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return scalar\
    \ keys %seen;\n}", "    my %characters;\n    foreach my $character (split(//,\
    \ $string)) {\n        $characters{lc($character)} = 1;\n    }\n    return scalar(keys\
    \ %characters);\n}", "    my %hash;\n    my @array = split(//, $string);\n   \
    \ foreach my $char (@array) {\n        $hash{lc($char)} = 1;\n    }\n    return\
    \ scalar(keys %hash);\n}", "    my %seen;\n    my @chars = split //, $string;\n\
    \    foreach my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return\
    \ scalar keys %seen;\n}", "    my %characters;\n    foreach my $character (split\
    \ //, $string) {\n        $characters{lc $character} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}", "    my %seen;\n    my @chars = split(//, $string);\n\
    \    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n    }\n    return\
    \ scalar(keys %seen);\n}", "    my %characters;\n    foreach my $char (split //,\
    \ $string) {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys\
    \ %characters;\n}", "    my $count = 0;\n    my %seen;\n    foreach my $char (split\
    \ //, $string) {\n        $seen{lc $char}++;\n    }\n    $count = scalar keys\
    \ %seen;\n    return $count;\n}", "    my %characters = ();\n    foreach my $char\
    \ (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n    return\
    \ scalar keys %characters;\n}", "    my %seen;\n    my @chars = split(//, $string);\n\
    \    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n    }\n    return\
    \ scalar(keys %seen);\n}", "    my %characters;\n    foreach my $character (split\
    \ //, $string) {\n        $characters{lc $character} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}", "    my %seen;\n    my @chars = split //, $string;\n\
    \    foreach my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return\
    \ scalar keys %seen;\n}", "    my %seen;\n    my @chars = split //, $string;\n\
    \    foreach my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return\
    \ scalar keys %seen;\n}", "    my %characters;\n    foreach my $char (split(//,\
    \ $string)) {\n        $characters{lc($char)} = 1;\n    }\n    return scalar(keys\
    \ %characters);\n}", "    my %seen;\n    my @chars = split //, $string;\n    foreach\
    \ my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return scalar\
    \ keys %seen;\n}", "    my %characters;\n    foreach my $char (split //, $string)\
    \ {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %hash;\n    my @array = split(//, $string);\n    foreach my $char\
    \ (@array) {\n        $hash{$char} = 1;\n    }\n    return scalar(keys %hash);\n\
    }", "    my %characters;\n    foreach my $char (split //, $string) {\n       \
    \ $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n}",
  "    my %hash;\n    my @array = split(//, $string);\n    foreach my $char (@array)\
    \ {\n        $hash{lc($char)} = 1;\n    }\n    return scalar(keys %hash);\n}",
  "    my %seen;\n    my @chars = split //, $string;\n    foreach my $char (@chars)\
    \ {\n        $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", " \
    \   my %characters;\n    foreach my $char (split //, $string) {\n        $characters{lc\
    \ $char} = 1;\n    }\n    return scalar keys %characters;\n}", "    my %characters;\n\
    \    foreach my $char (split //, $string) {\n        $characters{lc $char} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %seen;\n    my @chars\
    \ = split //, $string;\n    foreach my $char (@chars) {\n        $seen{$char}\
    \ = 1;\n    }\n    return scalar keys %seen;\n}", "    my %characters;\n    for\
    \ my $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n\
    \    return scalar keys %characters;\n}", "    my %count;\n    foreach my $char\
    \ (split //, $string) {\n        $count{lc $char}++;\n    }\n    return scalar\
    \ keys %count;\n}", "    my $count = 0;\n    my %seen;\n    foreach my $char (split\
    \ //, $string) {\n        if (!$seen{lc $char}) {\n            $count++;\n   \
    \         $seen{lc $char} = 1;\n        }\n    }\n    return $count;\n}", "  \
    \  my %count;\n    foreach my $char (split //, $string) {\n        $count{lc $char}\
    \ = 1;\n    }\n    return scalar keys %count;\n}", "    my %seen;\n    return\
    \ scalar grep { !$seen{lc $_}++ } split //, $string;\n}", "    my %hash;\n   \
    \ foreach my $char (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n\
    \    return scalar keys %hash;\n}", "    my %characters;\n    foreach my $char\
    \ (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n    return\
    \ scalar keys %characters;\n}", "    my %characters;\n    foreach my $char (split\
    \ //, $string) {\n        $characters{lc $char} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}", "    my %characters = ();\n    foreach my $char (split(//,\
    \ $string)) {\n        $characters{lc($char)} = 1;\n    }\n    return scalar(keys\
    \ %characters);\n}", "    my %seen;\n    my @chars = split //, $string;\n    foreach\
    \ my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return scalar\
    \ keys %seen;\n}", "    my %characters;\n    foreach my $char (split //, $string)\
    \ {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %seen;\n    $seen{lc $_}++ for split //, $string;\n    return scalar\
    \ keys %seen;\n}", "    my %characters;\n    foreach my $char (split //, $string)\
    \ {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %char_count;\n    foreach my $char (split //, $string) {\n       \
    \ $char_count{lc $char}++;\n    }\n    return scalar keys %char_count;\n}", " \
    \   my %characters;\n    foreach my $character (split //, $string) {\n       \
    \ $characters{lc $character} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %characters;\n    foreach my $char (split //, $string) {\n       \
    \ $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n}",
  "    my %characters;\n    foreach my $char (split //, $string) {\n        $characters{lc\
    \ $char} = 1;\n    }\n    return scalar keys %characters;\n}", "    my %seen;\n\
    \    return scalar grep { !$seen{lc $_}++ } split //, $string;\n}", "    my %characters;\n\
    \    foreach my $char (split //, $string) {\n        $characters{lc $char} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %seen;\n    $seen{lc\
    \ $_}++ for split //, $string;\n    return scalar keys %seen;\n}", "    my %chars;\n\
    \    foreach my $char (split //, $string) {\n        $chars{lc $char} = 1;\n \
    \   }\n    return scalar keys %chars;\n}", "    my %characters;\n    foreach my\
    \ $character (split //, $string) {\n        $characters{lc $character} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %seen;\n    my @chars\
    \ = split //, $string;\n    foreach my $char (@chars) {\n        $seen{lc $char}\
    \ = 1;\n    }\n    return scalar keys %seen;\n}", "    my %hash;\n    foreach\
    \ my $char (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return\
    \ scalar keys %hash;\n}", "    my %characters;\n    foreach my $char (split(//,\
    \ $string)) {\n        $characters{lc($char)} = 1;\n    }\n    return scalar(keys\
    \ %characters);\n}", "    my %characters;\n    foreach my $char (split //, $string)\
    \ {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %characters;\n    my @characters = split(//, $string);\n    foreach\
    \ my $character (@characters) {\n        $characters{lc($character)} = 1;\n  \
    \  }\n    return scalar(keys %characters);\n}", "    my %characters;\n    $characters{lc\
    \ $_} = 1 for split //, $string;\n    return scalar keys %characters;\n}", " \
    \   my %chars;\n    foreach my $char (split //, $string) {\n        $chars{lc\
    \ $char} = 1;\n    }\n    return scalar keys %chars;\n}", "    my %hash;\n   \
    \ foreach my $char (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n\
    \    return scalar keys %hash;\n}", "    my %characters;\n    foreach my $char\
    \ (split(//, $string)) {\n        $characters{lc($char)} = 1;\n    }\n    return\
    \ scalar(keys %characters);\n}", "    my %characters;\n    foreach my $char (split\
    \ //, $string) {\n        $characters{lc $char} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}", "    my %characters;\n    foreach my $character (split(//,\
    \ $string)) {\n        $characters{lc($character)} = 1;\n    }\n    return scalar(keys\
    \ %characters);\n}", "    my %seen;\n    my @chars = split //, $string;\n    foreach\
    \ my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return scalar\
    \ keys %seen;\n}", "    my %characters;\n    foreach my $char (split //, $string)\
    \ {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %seen;\n    my @chars = split //, $string;\n    foreach my $char (@chars)\
    \ {\n        $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", " \
    \   my %seen;\n    my @chars = split //, $string;\n    foreach my $char (@chars)\
    \ {\n        $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", " \
    \   my %characters;\n    foreach my $char (split //, $string) {\n        $characters{lc\
    \ $char} = 1;\n    }\n    return scalar keys %characters;\n}", "    my %characters\
    \ = ();\n    my @characters = split(//, $string);\n    foreach my $character (@characters)\
    \ {\n        $characters{lc($character)} = 1;\n    }\n    return scalar(keys %characters);\n\
    }", "    my %characters;\n    my @chars = split //, $string;\n    foreach my $char\
    \ (@chars) {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys\
    \ %characters;\n}", "    my %seen;\n    my @chars = split //, $string;\n    foreach\
    \ my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return scalar\
    \ keys %seen;\n}", "    my %characters;\n    foreach my $character (split //,\
    \ $string) {\n        $characters{lc $character} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}", "    my %characters;\n    foreach my $char (split //,\
    \ $string) {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys\
    \ %characters;\n}", "    my %characters;\n    foreach my $char (split //, $string)\
    \ {\n        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %seen;\n    my @chars = split(//, $string);\n    foreach my $char\
    \ (@chars) {\n        $seen{lc($char)} = 1;\n    }\n    return scalar(keys %seen);\n\
    }", "    my $count = 0;\n    my %hash = ();\n    foreach my $char (split //, $string)\
    \ {\n        $hash{lc $char} = 1;\n    }\n    $count = scalar keys %hash;\n  \
    \  return $count;\n}", "    my %characters;\n    foreach my $char (split(//, $string))\
    \ {\n        $characters{lc($char)} = 1;\n    }\n    return scalar(keys %characters);\n\
    }", "    my %seen;\n    my @chars = split(//, $string);\n    foreach my $char\
    \ (@chars) {\n        $seen{lc($char)} = 1;\n    }\n    return scalar(keys %seen);\n\
    }", "    my %characters;\n    foreach my $char (split //, $string) {\n       \
    \ $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n}",
  "    my %seen;\n    my @chars = split //, $string;\n    foreach my $char (@chars)\
    \ {\n        $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", " \
    \   my %characters;\n    foreach my $char (split //, $string) {\n        $characters{lc\
    \ $char} = 1;\n    }\n    return scalar keys %characters;\n}", "    my $count\
    \ = 0;\n    my %seen = ();\n    foreach my $char (split(//, $string)) {\n    \
    \    if (!$seen{lc($char)}) {\n            $count++;\n            $seen{lc($char)}\
    \ = 1;\n        }\n    }\n    return $count;\n}", "    my %characters;\n    foreach\
    \ my $character (split //, $string) {\n        $characters{lc $character} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %characters;\n    foreach\
    \ my $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n\
    \    return scalar keys %characters;\n}", "    my %hash;\n    foreach my $char\
    \ (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return scalar\
    \ keys %hash;\n}", "    my %characters;\n    foreach my $character (split //,\
    \ $string) {\n        $characters{lc $character} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}", "    my %seen;\n    my @chars = split //, $string;\n\
    \    foreach my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return\
    \ scalar keys %seen;\n}", "    my %hash;\n    foreach my $char (split //, $string)\
    \ {\n        $hash{lc $char} = 1;\n    }\n    return scalar keys %hash;\n}", " \
    \   my %chars;\n    foreach my $char (split //, $string) {\n        $chars{lc\
    \ $char} = 1;\n    }\n    return scalar keys %chars;\n}", "    my %characters\
    \ = ();\n    foreach my $char (split //, $string) {\n        $characters{lc $char}\
    \ = 1;\n    }\n    return scalar keys %characters;\n}", "    my %seen;\n    $seen{lc\
    \ $_}++ for split //, $string;\n    return scalar keys %seen;\n}", "    my %seen;\n\
    \    my @chars = split //, $string;\n    foreach my $char (@chars) {\n       \
    \ $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", "    my %seen;\n\
    \    $seen{lc $_}++ for split //, $string;\n    return scalar keys %seen;\n}",
  "    my %seen;\n    my @chars = split(//, $string);\n    foreach my $char (@chars)\
    \ {\n        $seen{lc($char)} = 1;\n    }\n    return scalar(keys %seen);\n}",
  "    my %hash;\n    foreach my $char (split //, $string) {\n        $hash{lc $char}\
    \ = 1;\n    }\n    return scalar keys %hash;\n}", "    my %seen;\n    my @chars\
    \ = split //, $string;\n    foreach my $char (@chars) {\n        $seen{lc $char}\
    \ = 1;\n    }\n    return scalar keys %seen;\n}", "    my %seen;\n    my @chars\
    \ = split //, $string;\n    foreach my $char (@chars) {\n        $seen{lc $char}\
    \ = 1;\n    }\n    return scalar keys %seen;\n}", "    my %characters;\n    foreach\
    \ my $char (split(//, $string)) {\n        $characters{lc($char)} = 1;\n    }\n\
    \    return scalar(keys %characters);\n}", "    my %characters;\n    foreach my\
    \ $char (split(//, $string)) {\n        $characters{lc($char)} = 1;\n    }\n \
    \   return scalar(keys %characters);\n}", "    my %characters;\n    foreach my\
    \ $char (split(//, $string)) {\n        $characters{lc($char)} = 1;\n    }\n \
    \   return scalar(keys %characters);\n}", "    my %seen;\n    my @chars = split\
    \ //, $string;\n    foreach my $char (@chars) {\n        $seen{lc $char}++;\n\
    \    }\n    return scalar keys %seen;\n}", "    my %characters = ();\n    foreach\
    \ my $character (split //, $string) {\n        $characters{lc $character} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %seen;\n    my @chars\
    \ = split //, $string;\n    foreach my $char (@chars) {\n        $seen{lc $char}\
    \ = 1;\n    }\n    return scalar keys %seen;\n}", "    my %chars;\n    foreach\
    \ my $char (split //, $string) {\n        $chars{lc $char} = 1;\n    }\n    return\
    \ scalar keys %chars;\n}", "    my %hash;\n    $hash{$_} = 1 for split //, lc\
    \ $string;\n    return scalar keys %hash;\n}", "    my $count = 0;\n    my %hash;\n\
    \    foreach my $char (split //, $string) {\n        $hash{lc $char} = 1;\n  \
    \  }\n    $count = scalar keys %hash;\n    return $count;\n}", "    my %characters;\n\
    \    foreach my $char (split(//, $string)) {\n        $characters{lc($char)} =\
    \ 1;\n    }\n    return scalar(keys %characters);\n}", "    my %seen;\n    my\
    \ @chars = split //, $string;\n    foreach my $char (@chars) {\n        $seen{lc\
    \ $char} = 1;\n    }\n    return scalar keys %seen;\n}", "    my %seen;\n    my\
    \ @chars = split(//, $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)}\
    \ = 1;\n    }\n    return scalar(keys %seen);\n}", "    my %characters;\n    foreach\
    \ my $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n\
    \    return scalar keys %characters;\n}", "    my %characters;\n    foreach my\
    \ $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n   \
    \ return scalar keys %characters;\n}", "    my %characters;\n    foreach my $char\
    \ (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n    return\
    \ scalar keys %characters;\n}", "    my %seen;\n    my @chars = split //, $string;\n\
    \    foreach my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return\
    \ scalar keys %seen;\n}", "    my %characters;\n    $characters{lc($_)}++ for\
    \ split //, $string;\n    return scalar keys %characters;\n}", "    my %characters;\n\
    \    foreach my $character (split //, $string) {\n        $characters{lc $character}\
    \ = 1;\n    }\n    return scalar keys %characters;\n}", "    my %char_hash;\n\
    \    foreach my $char (split(//, $string)) {\n        $char_hash{lc($char)} =\
    \ 1;\n    }\n    return scalar(keys %char_hash);\n}", "    my %characters;\n \
    \   foreach my $char (split(//, $string)) {\n        $characters{lc($char)} =\
    \ 1;\n    }\n    return scalar(keys %characters);\n}", "    my %characters;\n\
    \    foreach my $character (split(//, $string)) {\n        $characters{lc($character)}\
    \ = 1;\n    }\n    return scalar(keys %characters);\n}", "    my %seen;\n    my\
    \ @chars = split(//, $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)}\
    \ = 1;\n    }\n    return scalar(keys %seen);\n}", "    my %hash;\n    foreach\
    \ my $char (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return\
    \ scalar keys %hash;\n}", "    my $count = 0;\n    my %seen;\n    foreach my $char\
    \ (split //, $string) {\n        $seen{lc $char} = 1;\n    }\n    return scalar\
    \ keys %seen;\n}", "    my %characters;\n    my @chars = split(//, $string);\n\
    \    foreach my $char (@chars) {\n        $characters{lc($char)} = 1;\n    }\n\
    \    return scalar(keys %characters);\n}", "    my %seen;\n    my @chars = split\
    \ //, $string;\n    foreach my $char (@chars) {\n        $seen{lc $char} = 1;\n\
    \    }\n    return scalar keys %seen;\n}", "    my $count = 0;\n    my %seen;\n\
    \    foreach my $char (split //, $string) {\n        $seen{lc $char}++;\n    }\n\
    \    $count = scalar keys %seen;\n    return $count;\n}", "    my %characters;\n\
    \    foreach my $char (split(//, $string)) {\n        $characters{lc($char)} =\
    \ 1;\n    }\n    return scalar(keys %characters);\n}", "    my %hash;\n    foreach\
    \ (split //, $string) {\n        $hash{lc $_}++;\n    }\n    return scalar keys\
    \ %hash;\n}", "    my %characters;\n    foreach my $char (split //, $string) {\n\
    \        $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n\
    }", "    my %characters;\n    foreach my $char (split //, $string) {\n       \
    \ $characters{lc $char} = 1;\n    }\n    return scalar keys %characters;\n}",
  "    my %seen;\n    my @chars = split //, $string;\n    foreach my $char (@chars)\
    \ {\n        $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", " \
    \   my %seen;\n    my @chars = split(//, $string);\n    foreach my $char (@chars)\
    \ {\n        $seen{lc($char)} = 1;\n    }\n    return scalar(keys %seen);\n}",
  "    my %chars = ();\n    my @chars = split(//, $string);\n    foreach my $char\
    \ (@chars) {\n        $chars{lc($char)} = 1;\n    }\n    return scalar(keys %chars);\n\
    }", "    my %hash;\n    foreach my $char (split(//, $string)) {\n        $hash{lc($char)}++;\n\
    \    }\n    return scalar(keys %hash);\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n\
    \    }\n    return scalar(keys %seen);\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n\
    \    }\n    return scalar(keys %seen);\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n\
    \    }\n    return scalar(keys %seen);\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n\
    \    }\n    return scalar(keys %seen);\n}", "    my %characters;\n    foreach\
    \ my $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n\
    \    return scalar keys %characters;\n}", "    my %hash;\n    foreach my $char\
    \ (split //, $string) {\n        $hash{lc $char} = 1;\n    }\n    return scalar\
    \ keys %hash;\n}", "    my %seen;\n    my @chars = split //, $string;\n    foreach\
    \ my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return scalar\
    \ keys %seen;\n}", "    my %characters;\n    foreach my $character (split //,\
    \ $string) {\n        $characters{lc $character} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}", "    my %hash;\n    foreach my $char (split //, $string)\
    \ {\n        $hash{lc $char} = 1;\n    }\n    return scalar keys %hash;\n}", " \
    \   my %seen;\n    my @chars = split //, $string;\n    foreach my $char (@chars)\
    \ {\n        $seen{lc $char} = 1;\n    }\n    return scalar keys %seen;\n}", " \
    \   my %characters;\n    foreach my $char (split //, $string) {\n        $characters{lc\
    \ $char} = 1;\n    }\n    return scalar keys %characters;\n}", "    my %chars\
    \ = ();\n    foreach my $char (split(//, $string)) {\n        $chars{lc($char)}\
    \ = 1;\n    }\n    return scalar(keys %chars);\n}", "    my %characters;\n   \
    \ foreach my $char (split //, $string) {\n        $characters{lc $char} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %characters;\n    foreach\
    \ my $character (split //, $string) {\n        $characters{lc $character} = 1;\n\
    \    }\n    return scalar keys %characters;\n}", "    my %characters;\n    foreach\
    \ my $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n\
    \    return scalar keys %characters;\n}", "    my %char_count;\n    foreach my\
    \ $char (split //, $string) {\n        $char_count{lc $char}++;\n    }\n    return\
    \ scalar keys %char_count;\n}", "    my %seen;\n    my @chars = split(//, $string);\n\
    \    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n    }\n    return\
    \ scalar(keys %seen);\n}", "    my %seen;\n    my @chars = split //, $string;\n\
    \    foreach my $char (@chars) {\n        $seen{lc $char} = 1;\n    }\n    return\
    \ scalar keys %seen;\n}", "    my %hash;\n    foreach my $char (split //, $string)\
    \ {\n        $hash{lc $char} = 1;\n    }\n    return scalar keys %hash;\n}", " \
    \   my %characters;\n    $characters{lc($_)}++ for split //, $string;\n    return\
    \ scalar keys %characters;\n}", "    my %seen;\n    my @chars = split(//, $string);\n\
    \    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n    }\n    return\
    \ scalar(keys %seen);\n}", "    my %characters;\n    foreach my $character (split\
    \ //, $string) {\n        $characters{lc $character} = 1;\n    }\n    return scalar\
    \ keys %characters;\n}", "    my $count = 0;\n    my %seen;\n    foreach my $char\
    \ (split //, $string) {\n        $seen{lc $char} = 1;\n    }\n    $count = scalar\
    \ keys %seen;\n    return $count;\n}", "    my %seen;\n    my @chars = split(//,\
    \ $string);\n    foreach my $char (@chars) {\n        $seen{lc($char)} = 1;\n\
    \    }\n    return scalar(keys %seen);\n}", "    my %characters;\n    foreach\
    \ my $char (split //, $string) {\n        $characters{lc $char} = 1;\n    }\n\
    \    return scalar keys %characters;\n}", "    my %characters;\n    foreach my\
    \ $character (split(//, $string)) {\n        $characters{lc($character)} = 1;\n\
    \    }\n    return scalar(keys %characters);\n}", "    my %hash;\n    my @array\
    \ = split(//, $string);\n    foreach my $char (@array) {\n        $hash{lc($char)}\
    \ = 1;\n    }\n    return scalar(keys %hash);\n}", "    my %characters = ();\n\
    \    foreach my $character (split //, $string) {\n        $characters{lc $character}\
    \ = 1;\n    }\n    return scalar keys %characters;\n}", "    my %characters;\n\
    \    foreach my $char (split(//, $string)) {\n        $characters{lc($char)} =\
    \ 1;\n    }\n    return scalar(keys %characters);\n}", "    my %seen;\n    my\
    \ @chars = split //, $string;\n    foreach my $char (@chars) {\n        $seen{lc\
    \ $char} = 1;\n    }\n    return scalar keys %seen;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
