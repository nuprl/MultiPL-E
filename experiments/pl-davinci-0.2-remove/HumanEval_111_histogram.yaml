name: HumanEval_111_histogram
language: pl
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\nsub histogram {\n    my($test) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    return %hist;\n}", "    my %hash;\n    foreach my $char (split //,\
    \ $test) {\n        $hash{$char}++;\n    }\n    my $max = (sort {$hash{$b} <=>\
    \ $hash{$a}} keys %hash)[0];\n    my @max_keys = grep { $hash{$_} == $hash{$max}\
    \ } keys %hash;\n    my %result;\n    foreach my $key (@max_keys) {\n        $result{$key}\
    \ = $hash{$key};\n    }\n    return %result;\n}", "    my %hash = ();\n    my\
    \ @letters = split(/ /, $test);\n    foreach my $letter (@letters) {\n       \
    \ $hash{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters = ();\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_letters = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push(@max_letters, $key);\n        }\n    }\n    my\
    \ %result = ();\n    foreach my $letter (@max_letters) {\n        $result{$letter}\
    \ = $max;\n    }\n    return %result;\n}", "    my %hash;\n    my @array = split(//,\
    \ $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my $max\
    \ = 0;\n    my @max_keys;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n            @max_keys = ($key);\n\
    \        } elsif ($hash{$key} == $max) {\n            push @max_keys, $key;\n\
    \        }\n    }\n    my %result;\n    foreach my $key (@max_keys) {\n      \
    \  $result{$key} = $max;\n    }\n    return %result;\n}", "    my @test = split(//,\
    \ $test);\n    my %hash;\n    foreach my $i (@test) {\n        $hash{$i}++;\n\
    \    }\n    my $max = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n        }\n    }\n    my @max;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n    \
    \        push @max, $key;\n        }\n    }\n    return {@max => $max};\n}", " \
    \   my %hist;\n    foreach my $letter (split(//, $test)) {\n        $hist{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %hist)\
    \ {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($hist{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %hist;\n    foreach my $char (split\
    \ //, $test) {\n        $hist{$char}++;\n    }\n    return \\%hist;\n}", "   \
    \ my %histo;\n    foreach my $letter (split //, $test) {\n        $histo{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histo)\
    \ {\n        if ($histo{$letter} > $max) {\n            $max = $histo{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histo{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %hash;\n    my @array = split(/\
    \ /, $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my\
    \ $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hash) {\n        if\
    \ ($hash{$key} > $max) {\n            $max = $hash{$key};\n            @max_keys\
    \ = ($key);\n        } elsif ($hash{$key} == $max) {\n            push @max_keys,\
    \ $key;\n        }\n    }\n    my %result;\n    foreach my $key (@max_keys) {\n\
    \        $result{$key} = $max;\n    }\n    return %result;\n}", "    my %hash\
    \ = ();\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hash{$letter}++;\n    }\n    my @keys = sort { $hash{$b} <=> $hash{$a}\
    \ } keys %hash;\n    my $max_value = $hash{$keys[0]};\n    my @max_keys = ();\n\
    \    foreach my $key (@keys) {\n        if ($hash{$key} == $max_value) {\n   \
    \         push(@max_keys, $key);\n        }\n    }\n    my %result = ();\n   \
    \ $result{$_} = $max_value foreach (@max_keys);\n    return %result;\n}", "  \
    \  my %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hist)\
    \ {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hist{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my @test = split(//, $test);\n    my %hash;\n    foreach\
    \ my $i (@test) {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @result;\n\
    \    foreach my $i (keys %hash) {\n        if ($hash{$i} > $max) {\n         \
    \   $max = $hash{$i};\n            @result = ($i);\n        } elsif ($hash{$i}\
    \ == $max) {\n            push(@result, $i);\n        }\n    }\n    return @result;\n\
    }", "    my %hash;\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter\
    \ (split //, $test) {\n        $hash{$letter}++;\n        if ($hash{$letter} >\
    \ $max) {\n            $max = $hash{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($hash{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    return %hist;\n}", "    my %hist;\n    my $max = 0;\n    my @max_letters;\n\
    \    for my $letter (split //, $test) {\n        $hist{$letter}++;\n        if\
    \ ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n            @max_letters\
    \ = ($letter);\n        } elsif ($hist{$letter} == $max) {\n            push @max_letters,\
    \ $letter;\n        }\n    }\n    return { map { $_ => $hist{$_} } @max_letters\
    \ };\n}", "    my %count;\n    my @letters = split(//, $test);\n    foreach my\
    \ $letter (@letters) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n\
    \    my @max_letters;\n    foreach my $letter (keys %count) {\n        if ($count{$letter}\
    \ > $max) {\n            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %count;\n    foreach my $char (split //, $test) {\n        $count{$char}++;\n\
    \    }\n    my $max = (sort {$count{$b} <=> $count{$a}} keys %count)[0];\n   \
    \ my @maxes = grep {$count{$_} == $count{$max}} keys %count;\n    return {map\
    \ {$_ => $count{$_}} @maxes};\n}", "    my @letters = split(/ /, $test);\n   \
    \ my %counts;\n    foreach my $letter (@letters) {\n        $counts{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %counts)\
    \ {\n        if ($counts{$letter} > $max) {\n            $max = $counts{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($counts{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %histo;\n    foreach my $char (split\
    \ //, $test) {\n        $histo{$char}++;\n    }\n    my $max = max(values %histo);\n\
    \    my @max_keys = grep { $histo{$_} == $max } keys %histo;\n    return { map\
    \ { $_ => $histo{$_} } @max_keys };\n}", "    my @letters = split(/ /, $test);\n\
    \    my %count;\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n\
    \    }\n    return %count;\n}", "    my %count;\n    my @letters = split('', $test);\n\
    \    foreach my $letter (@letters) {\n        $count{$letter}++;\n    }\n    my\
    \ $max = 0;\n    foreach my $letter (keys %count) {\n        if ($count{$letter}\
    \ > $max) {\n            $max = $count{$letter};\n        }\n    }\n    my @max_letters;\n\
    \    foreach my $letter (keys %count) {\n        if ($count{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %hash;\n    my @array = split(/\
    \ /, $test);\n    foreach my $word (@array) {\n        $hash{$word}++;\n    }\n\
    \    my $max = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n        }\n    }\n    my @result;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n    \
    \        push(@result, $key);\n        }\n    }\n    return @result;\n}", "  \
    \  my %histogram;\n    foreach my $letter (split //, $test) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "    my %hist;\n    for my $char (split //,\
    \ $test) {\n        $hist{$char}++;\n    }\n    return \\%hist;\n}", "    my %hash\
    \ = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array) {\n  \
    \      $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys = ();\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    return\
    \ { map { $_ => $max } @max_keys };\n}", "    my %hash;\n    my @array = split('',\
    \ $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my $max\
    \ = 0;\n    my @keys;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n            @keys = ($key);\n  \
    \      } elsif ($hash{$key} == $max) {\n            push(@keys, $key);\n     \
    \   }\n    }\n    return { map { $_ => $max } @keys };\n}", "    my %hash = ();\n\
    \    my @letters = split('', $test);\n    foreach my $letter (@letters) {\n  \
    \      $hash{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters = ();\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n     \
    \       $max = $hash{$key};\n            @max_letters = ($key);\n        } elsif\
    \ ($hash{$key} == $max) {\n            push(@max_letters, $key);\n        }\n\
    \    }\n    return { map { $_ => $max } @max_letters };\n}", "    my %histo;\n\
    \    my $max = 0;\n    my @max_letters;\n    for my $letter (split //, $test)\
    \ {\n        $histo{$letter}++;\n        if ($histo{$letter} > $max) {\n     \
    \       $max = $histo{$letter};\n            @max_letters = ($letter);\n     \
    \   } elsif ($histo{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return {\n        count => $max,\n        letters => \\\
    @max_letters,\n    };\n}", "    my %hash = ();\n    foreach my $char (split //,\
    \ $test) {\n        $hash{$char}++;\n    }\n    my $max = 0;\n    my @max_keys\
    \ = ();\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif\
    \ ($hash{$key} == $max) {\n            push @max_keys, $key;\n        }\n    }\n\
    \    return { map { $_ => $max } @max_keys };\n}", "    my %hash = ();\n    my\
    \ @array = split(\" \", $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n\
    \    }\n    my $max = 0;\n    my @keys = ();\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n    \
    \        @keys = ($key);\n        } elsif ($hash{$key} == $max) {\n          \
    \  push(@keys, $key);\n        }\n    }\n    my %result = ();\n    foreach my\
    \ $key (@keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n}",
  "    my %hash;\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hash{$letter}++;\n    }\n    my $max = (sort {$hash{$b} <=> $hash{$a}}\
    \ keys %hash)[0];\n    my @max_letters;\n    foreach my $letter (keys %hash) {\n\
    \        if ($hash{$letter} == $hash{$max}) {\n            push @max_letters,\
    \ $letter;\n        }\n    }\n    return {$max => $hash{$max}, letters => \\@max_letters};\n\
    }", "    my %histogram;\n    my $max = 0;\n    my @max_letters;\n    my @letters\
    \ = split(//, $test);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            push @max_letters, $letter;\n        }\n    }\n    return\
    \ { map { $_ => $histogram{$_} } @max_letters };\n}", "    my %hash;\n    my @array\
    \ = split(/ /, $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n \
    \   }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hash) {\n\
    \        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n        \
    \    @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n          \
    \  push @max_keys, $key;\n        }\n    }\n    my %result;\n    foreach my $key\
    \ (@max_keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n}",
  "    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array) {\n\
    \        $hash{$i}++;\n    }\n    return %hash;\n}", "    my %count;\n    my @letters\
    \ = split(//, $test);\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n\
    \    }\n    return \\%count;\n}", "    my %hash;\n    my @array = split('', $test);\n\
    \    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my $max = (sort\
    \ {$hash{$b} <=> $hash{$a}} keys %hash)[0];\n    my @keys = grep { $hash{$_} ==\
    \ $hash{$max} } keys %hash;\n    return { map { $_ => $hash{$_} } @keys };\n}\n\
    print Dumper(histogram(\"abcccccddddeeeee\"));", "    my %hash;\n    my @arr =\
    \ split(//, $test);\n    foreach my $i (@arr) {\n        $hash{$i}++;\n    }\n\
    \    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hash) {\n   \
    \     if ($hash{$key} > $max) {\n            $max = $hash{$key};\n           \
    \ @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n            push\
    \ @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max } @max_keys\
    \ };\n}", "    my %count;\n    foreach my $letter (split //, $test) {\n      \
    \  $count{$letter}++;\n    }\n    my $max = (sort {$count{$b} <=> $count{$a}}\
    \ keys %count)[0];\n    my @max_letters = grep {$count{$_} == $count{$max}} keys\
    \ %count;\n    return {map {$_ => $count{$_}} @max_letters};\n}", "    my %count;\n\
    \    my @letters = split(//, $test);\n    foreach my $letter (@letters) {\n  \
    \      $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n   \
    \ foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash = ();\n    foreach my $char (split //, $test) {\n        $hash{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys = ();\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my(%hash);\n    my(@array) = split(/ /, $test);\n \
    \   foreach my $i (@array) {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n\
    \        } else {\n            $hash{$i} = 1;\n        }\n    }\n    my(@keys)\
    \ = keys %hash;\n    my(@values) = values %hash;\n    my($max) = max @values;\n\
    \    my(@max_keys);\n    foreach my $i (@keys) {\n        if ($hash{$i} == $max)\
    \ {\n            push(@max_keys, $i);\n        }\n    }\n    return @max_keys;\n\
    }", "    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}", "    my %hist;\n    foreach my $c (split //, $test) {\n\
    \        $hist{$c}++;\n    }\n    return %hist;\n}", "    my %hash;\n    my @array\
    \ = split(/ /, $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n \
    \   }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hash) {\n\
    \        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n        \
    \    @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n          \
    \  push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max } @max_keys\
    \ };\n}", "    my(%h);\n    my($max) = 0;\n    foreach my $c (split(//, $test))\
    \ {\n        $h{$c}++;\n        $max = $h{$c} if $h{$c} > $max;\n    }\n    my(@r);\n\
    \    foreach my $k (keys %h) {\n        push(@r, $k) if $h{$k} == $max;\n    }\n\
    \    return { map { $_ => $max } @r };\n}", "    my %histo;\n    my @letters =\
    \ split(/ /, $test);\n    foreach my $letter (@letters) {\n        $histo{$letter}++;\n\
    \    }\n    return %histo;\n}", "    my %hist;\n    my @letters = split(//, $test);\n\
    \    foreach my $letter (@letters) {\n        $hist{$letter}++;\n    }\n    return\
    \ %hist;\n}", "    my %hist;\n    my $max = 0;\n    my @max_letters;\n    foreach\
    \ my $letter (split(//, $test)) {\n        $hist{$letter}++;\n        if ($hist{$letter}\
    \ > $max) {\n            $max = $hist{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %histogram;\n    foreach my $letter (split //, $test) {\n        $histogram{$letter}++;\n\
    \    }\n    my $max = (sort {$b <=> $a} values %histogram)[0];\n    my @result;\n\
    \    foreach my $key (keys %histogram) {\n        if ($histogram{$key} == $max)\
    \ {\n            push @result, $key;\n        }\n    }\n    return @result;\n}",
  "    my %count;\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter\
    \ (split //, $test) {\n        $count{$letter}++;\n        if ($count{$letter}\
    \ > $max) {\n            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $count{$_} } @max_letters };\n}",
  "    my %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array) {\n\
    \        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}", "    my %hist;\n    foreach my $char (split //, $test)\
    \ {\n        $hist{$char}++;\n    }\n    my $max = 0;\n    my @max_keys;\n   \
    \ foreach my $key (keys %hist) {\n        if ($hist{$key} > $max) {\n        \
    \    $max = $hist{$key};\n            @max_keys = ($key);\n        } elsif ($hist{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    return\
    \ { map { $_ => $max } @max_keys };\n}", "    my %hash = ();\n    my @array =\
    \ split(/ /, $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n   \
    \ }\n    my $max = 0;\n    my @max_keys = ();\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    my %result = ();\n    foreach\
    \ my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n\
    }", "    my %hash = ();\n    foreach my $char (split //, $test) {\n        $hash{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys = ();\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    return {$max_keys[0] => $max};\n\
    }", "    my %hash;\n    my @array = split('', $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = (sort {$hash{$b} <=> $hash{$a}}\
    \ keys %hash)[0];\n    my @max_array;\n    foreach my $key (keys %hash) {\n  \
    \      if ($hash{$key} == $hash{$max}) {\n            push @max_array, $key;\n\
    \        }\n    }\n    my %max_hash;\n    foreach my $i (@max_array) {\n     \
    \   $max_hash{$i} = $hash{$i};\n    }\n    return %max_hash;\n}", "    my %hash;\n\
    \    my @array = split(/ /, $test);\n    foreach my $letter (@array) {\n     \
    \   $hash{$letter}++;\n    }\n    my $max = 0;\n    my @keys;\n    foreach my\
    \ $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \            @keys = ($key);\n        } elsif ($hash{$key} == $max) {\n      \
    \      push @keys, $key;\n        }\n    }\n    return { map { $_ => $max } @keys\
    \ };\n}", "    my %histogram;\n    foreach my $letter (split(//, $test)) {\n \
    \       $histogram{$letter}++;\n    }\n    return %histogram;\n}", "    my %hist;\n\
    \    foreach my $char (split //, $test) {\n        $hist{$char}++;\n    }\n  \
    \  my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hist) {\n     \
    \   if ($hist{$key} > $max) {\n            $max = $hist{$key};\n            @max_keys\
    \ = ($key);\n        } elsif ($hist{$key} == $max) {\n            push @max_keys,\
    \ $key;\n        }\n    }\n    return { map { $_ => $max } @max_keys };\n}", " \
    \   my %hash = ();\n    my $max = 0;\n    my @max_keys = ();\n    foreach my $char\
    \ (split //, $test) {\n        $hash{$char}++;\n        if ($hash{$char} > $max)\
    \ {\n            $max = $hash{$char};\n            @max_keys = ($char);\n    \
    \    } elsif ($hash{$char} == $max) {\n            push @max_keys, $char;\n  \
    \      }\n    }\n    return { map { $_ => $hash{$_} } @max_keys };\n}", "    my\
    \ @letters = split(/ /, $test);\n    my %count;\n    foreach my $letter (@letters)\
    \ {\n        $count{$letter}++;\n    }\n    my $max = (sort {$count{$b} <=> $count{$a}}\
    \ keys %count)[0];\n    my @max_letters = grep { $count{$_} == $count{$max} }\
    \ keys %count;\n    return { map { $_ => $count{$_} } @max_letters };\n}", " \
    \   my %count;\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash;\n    my @array = split('', $test);\n    foreach my $i (@array) {\n  \
    \      $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach my\
    \ $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \            @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n  \
    \          push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my %histogram;\n    my @letters = split(//, $test);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return \\%histogram;\n}", "    my %histogram;\n    foreach my $char (split\
    \ //, $test) {\n        $histogram{$char}++;\n    }\n    my $max = (sort {$b <=>\
    \ $a} values %histogram)[0];\n    my @max_keys = grep {$histogram{$_} == $max}\
    \ keys %histogram;\n    return { map { $_ => $histogram{$_} } @max_keys };\n}",
  "    my %histo;\n    foreach my $char (split //, $test) {\n        $histo{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %histo)\
    \ {\n        if ($histo{$key} > $max) {\n            $max = $histo{$key};\n  \
    \          @max_keys = ($key);\n        } elsif ($histo{$key} == $max) {\n   \
    \         push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my @letters = split(//, $test);\n    my %histogram;\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram)\
    \ {\n        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            push @max_letters, $letter;\n        }\n    }\n    return\
    \ { map { $_ => $max } @max_letters };\n}", "    my %count;\n    my @letters =\
    \ split(//, $test);\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %count)\
    \ {\n        if ($count{$letter} > $max) {\n            $max = $count{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($count{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %count;\n    my $max = 0;\n    my\
    \ @max_letters;\n    foreach my $letter (split //, $test) {\n        $count{$letter}++;\n\
    \        if ($count{$letter} > $max) {\n            $max = $count{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($count{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $count{$_} } @max_letters };\n}", "    my %histo;\n    my $max = 0;\n\
    \    my @max_letters;\n    foreach my $letter (split(//, $test)) {\n        $histo{$letter}++;\n\
    \        if ($histo{$letter} > $max) {\n            $max = $histo{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histo{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $histo{$_} } @max_letters };\n}", "    my %hist;\n    foreach my $char\
    \ (split(//, $test)) {\n        $hist{$char}++;\n    }\n    return \\%hist;\n}",
  "    my %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %hist)\
    \ {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($hist{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %hash;\n    my @array = split(/\
    \ /, $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my\
    \ $max = max values %hash;\n    my @keys = grep { $hash{$_} == $max } keys %hash;\n\
    \    return { map { $_ => $hash{$_} } @keys };\n}", "    my %hist;\n    foreach\
    \ my $char (split //, $test) {\n        $hist{$char}++;\n    }\n    my $max =\
    \ 0;\n    my @max_keys;\n    foreach my $key (keys %hist) {\n        if ($hist{$key}\
    \ > $max) {\n            $max = $hist{$key};\n            @max_keys = ($key);\n\
    \        } elsif ($hist{$key} == $max) {\n            push @max_keys, $key;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_keys };\n}", "    my %count;\n\
    \    my @letters = split(//, $test);\n    foreach my $letter (@letters) {\n  \
    \      $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n   \
    \ foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash;\n    my @array = split(/ /, $test);\n    foreach my $i (@array) {\n \
    \       $hash{$i}++;\n    }\n    my $max = max(values %hash);\n    my @keys =\
    \ grep { $hash{$_} == $max } keys %hash;\n    return \\@keys;\n}", "    my %hash\
    \ = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array) {\n  \
    \      if (exists $hash{$i}) {\n            $hash{$i} += 1;\n        } else {\n\
    \            $hash{$i} = 1;\n        }\n    }\n    my $max = 0;\n    my @max_keys\
    \ = ();\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif\
    \ ($hash{$key} == $max) {\n            push(@max_keys, $key);\n        }\n   \
    \ }\n    my %return = ();\n    foreach my $key (@max_keys) {\n        $return{$key}\
    \ = $max;\n    }\n    return %return;\n}", "    my %hist;\n    foreach my $char\
    \ (split //, $test) {\n        $hist{$char}++;\n    }\n    my $max = (sort {$b\
    \ <=> $a} values %hist)[0];\n    my @max_keys = grep {$hist{$_} == $max} keys\
    \ %hist;\n    return { map {$_ => $hist{$_}} @max_keys };\n}", "    my %hash =\
    \ ();\n    foreach my $char (split //, $test) {\n        $hash{$char}++;\n   \
    \ }\n    return \\%hash;\n}", "    my %hash = ();\n    my @arr = split('', $test);\n\
    \    foreach my $i (@arr) {\n        if (exists $hash{$i}) {\n            $hash{$i}\
    \ += 1;\n        } else {\n            $hash{$i} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "    my %hash = ();\n    my $max = 0;\n    my @max_letters = ();\n\
    \    foreach my $letter (split(//, $test)) {\n        $hash{$letter}++;\n    \
    \    if ($hash{$letter} > $max) {\n            $max = $hash{$letter};\n      \
    \      @max_letters = ($letter);\n        } elsif ($hash{$letter} == $max) {\n\
    \            push(@max_letters, $letter);\n        }\n    }\n    return { map\
    \ { $_ => $hash{$_} } @max_letters };\n}", "    my %hist;\n    foreach my $char\
    \ (split //, $test) {\n        $hist{$char}++;\n    }\n    my $max = 0;\n    my\
    \ @max_letters;\n    foreach my $key (keys %hist) {\n        if ($hist{$key} >\
    \ $max) {\n            $max = $hist{$key};\n            @max_letters = ($key);\n\
    \        } elsif ($hist{$key} == $max) {\n            push @max_letters, $key;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash;\n    my $max = 0;\n    my @max_keys;\n    foreach my $char (split //,\
    \ $test) {\n        $hash{$char}++;\n        if ($hash{$char} > $max) {\n    \
    \        $max = $hash{$char};\n            @max_keys = ($char);\n        } elsif\
    \ ($hash{$char} == $max) {\n            push @max_keys, $char;\n        }\n  \
    \  }\n    return { map { $_ => $hash{$_} } @max_keys };\n}", "    my %hist;\n\
    \    foreach my $char (split //, $test) {\n        $hist{$char}++;\n    }\n  \
    \  my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hist) {\n     \
    \   if ($hist{$key} > $max) {\n            $max = $hist{$key};\n            @max_keys\
    \ = ($key);\n        } elsif ($hist{$key} == $max) {\n            push @max_keys,\
    \ $key;\n        }\n    }\n    return { map { $_ => $max } @max_keys };\n}", " \
    \   my %hash = ();\n    my @arr = split('', $test);\n    foreach my $i (@arr)\
    \ {\n        if(exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    my $max = 0;\n    my @max_keys\
    \ = ();\n    foreach my $key (keys %hash) {\n        if($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif($hash{$key}\
    \ == $max) {\n            push(@max_keys, $key);\n        }\n    }\n    my %result\
    \ = ();\n    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n  \
    \  }\n    return %result;\n}", "    my %histo;\n    my $max = 0;\n    my @max_letters;\n\
    \    for my $letter (split //, $test) {\n        $histo{$letter}++;\n        if\
    \ ($histo{$letter} > $max) {\n            $max = $histo{$letter};\n          \
    \  @max_letters = ($letter);\n        } elsif ($histo{$letter} == $max) {\n  \
    \          push @max_letters, $letter;\n        }\n    }\n    return { map { $_\
    \ => $histo{$_} } @max_letters };\n}", "    my %hash;\n    my @arr = split('',\
    \ $test);\n    foreach my $i (@arr) {\n        $hash{$i}++;\n    }\n    return\
    \ %hash;\n}", "    my %hash = ();\n    my @array = split(/ /, $test);\n    foreach\
    \ my $key (@array) {\n        if (exists $hash{$key}) {\n            $hash{$key}++;\n\
    \        } else {\n            $hash{$key} = 1;\n        }\n    }\n    my $max\
    \ = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n        }\n    }\n    my @result = ();\n   \
    \ foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n       \
    \     push(@result, $key);\n        }\n    }\n    return @result;\n}", "    my\
    \ %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    my $max = 0;\n    foreach\
    \ my $i (keys %hash) {\n        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n\
    \        }\n    }\n    my @result = ();\n    foreach my $i (keys %hash) {\n  \
    \      if ($hash{$i} == $max) {\n            push(@result, $i);\n        }\n \
    \   }\n    return \\@result;\n}", "    my %histogram;\n    my @letters = split(//,\
    \ $test);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram)\
    \ {\n        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            push @max_letters, $letter;\n        }\n    }\n    return\
    \ { map { $_ => $max } @max_letters };\n}", "    my %count;\n    foreach my $letter\
    \ (split //, $test) {\n        $count{$letter}++;\n    }\n    return %count;\n\
    }", "    my %hash;\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter\
    \ (split(//, $test)) {\n        $hash{$letter}++;\n        if ($hash{$letter}\
    \ > $max) {\n            $max = $hash{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($hash{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $hash{$_} } @max_letters };\n}", " \
    \   my %hash;\n    my @array = split(/\\s+/, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    return \\%hash;\n}", "    my %hash = ();\n\
    \    my @array = split(/\\s+/, $test);\n    foreach my $i (@array) {\n       \
    \ $hash{$i}++;\n    }\n    return %hash;\n}", "    my %count;\n    my $max = 0;\n\
    \    my @max_letters;\n    foreach my $letter (split //, $test) {\n        $count{$letter}++;\n\
    \        if ($count{$letter} > $max) {\n            $max = $count{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($count{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $count{$_} } @max_letters };\n}", "    my %hash;\n    my @array = split(/\\\
    s+/, $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my\
    \ $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hash) {\n        if\
    \ ($hash{$key} > $max) {\n            $max = $hash{$key};\n            @max_keys\
    \ = ($key);\n        } elsif ($hash{$key} == $max) {\n            push @max_keys,\
    \ $key;\n        }\n    }\n    return { map { $_ => $max } @max_keys };\n}", " \
    \   my %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $key (keys %hist)\
    \ {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n    \
    \        @max_letters = ($key);\n        } elsif ($hist{$key} == $max) {\n   \
    \         push @max_letters, $key;\n        }\n    }\n    return { map { $_ =>\
    \ $max } @max_letters };\n}", "    my @letters = split('', $test);\n    my %counts;\n\
    \    foreach my $letter (@letters) {\n        $counts{$letter}++;\n    }\n   \
    \ my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %counts) {\n\
    \        if ($counts{$letter} > $max) {\n            $max = $counts{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($counts{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return {\n\
    \        map { $_ => $max } @max_letters\n    };\n}", "    my %hist;\n    foreach\
    \ my $char (split //, $test) {\n        $hist{$char}++;\n    }\n    my $max =\
    \ (sort {$b <=> $a} values %hist)[0];\n    my @max_keys = grep {$hist{$_} == $max}\
    \ keys %hist;\n    return {map {$_ => $max} @max_keys};\n}", "    my %histogram;\n\
    \    my @letters = split(//, $test);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter} >\
    \ $max) {\n            $max = $histogram{$letter};\n            @max_letters =\
    \ ($letter);\n        } elsif ($histogram{$letter} == $max) {\n            push\
    \ @max_letters, $letter;\n        }\n    }\n    return {\n        'count' => $max,\n\
    \        'letters' => \\@max_letters,\n    };\n}", "    my %hash;\n    my @arr\
    \ = split(//, $test);\n    foreach my $i (@arr) {\n        $hash{$i}++;\n    }\n\
    \    my $max = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n        }\n    }\n    my @result;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n    \
    \        push(@result, $key);\n        }\n    }\n    return @result;\n}", "  \
    \  my %hash = ();\n    my @array = split(/ /, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys = ();\n \
    \   foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n      \
    \      $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    return\
    \ { map { $_ => $max } @max_keys };\n}", "    my %hash = ();\n    my @letters\
    \ = split(//, $test);\n    foreach my $letter (@letters) {\n        $hash{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters = ();\n    foreach my $key (keys\
    \ %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \            @max_letters = ($key);\n        } elsif ($hash{$key} == $max) {\n\
    \            push(@max_letters, $key);\n        }\n    }\n    my %result = ();\n\
    \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n \
    \   }\n    return %result;\n}", "    my %count;\n    foreach my $letter (split\
    \ //, $test) {\n        $count{$letter}++;\n    }\n    my $max = (sort {$count{$b}\
    \ <=> $count{$a}} keys %count)[0];\n    my @max_letters = grep {$count{$_} ==\
    \ $count{$max}} keys %count;\n    return {map {$_ => $count{$_}} @max_letters};\n\
    }", "    my %hash = ();\n    my @array = split('', $test);\n    foreach my $i\
    \ (@array) {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $key\
    \ (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \        }\n    }\n    my @result = ();\n    foreach my $key (keys %hash) {\n\
    \        if ($hash{$key} == $max) {\n            push @result, $key;\n       \
    \ }\n    }\n    return @result;\n}", "    my %hist;\n    foreach my $char (split\
    \ //, $test) {\n        $hist{$char}++;\n    }\n    my $max = (sort {$b <=> $a}\
    \ values %hist)[0];\n    my @keys = grep {$hist{$_} == $max} keys %hist;\n   \
    \ return {map {$_ => $max} @keys};\n}", "    my %hash;\n    my @array = split('',\
    \ $test);\n    foreach my $letter (@array) {\n        $hash{$letter}++;\n    }\n\
    \    return %hash;\n}", "    my @letters = split(//, $test);\n    my %count;\n\
    \    foreach my $letter (@letters) {\n        $count{$letter}++;\n    }\n    my\
    \ $max = max(values %count);\n    my @max_letters = grep { $count{$_} == $max\
    \ } keys %count;\n    return { map { $_ => $count{$_} } @max_letters };\n}", " \
    \   my %hash = ();\n    my @array = split('', $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys = ();\n \
    \   foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n      \
    \      $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    return\
    \ {\n        map { $_ => $hash{$_} } @max_keys\n    };\n}", "    my %count;\n\
    \    my @letters = split('', $test);\n    foreach my $letter (@letters) {\n  \
    \      $count{$letter}++;\n    }\n    my $max = max(values %count);\n    my @max_letters\
    \ = grep { $count{$_} == $max } keys %count;\n    return { map { $_ => $count{$_}\
    \ } @max_letters };\n}", "    my %histo;\n    foreach my $letter (split //, $test)\
    \ {\n        $histo{$letter}++;\n    }\n    return \\%histo;\n}", "    my %hash;\n\
    \    my @array = split(/ /, $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n\
    \    }\n    my @keys = sort { $hash{$b} <=> $hash{$a} } keys %hash;\n    my $max\
    \ = $hash{$keys[0]};\n    my @max_keys = grep { $hash{$_} == $max } keys %hash;\n\
    \    return \\@max_keys;\n}", "    my %histogram;\n    foreach my $letter (split\
    \ //, $test) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "    my %hash;\n    my @array = split(//, $test);\n    foreach my $i (@array)\
    \ {\n        $hash{$i}++;\n    }\n    my @max = sort {$hash{$b} <=> $hash{$a}}\
    \ keys %hash;\n    my $max = $hash{$max[0]};\n    my @result;\n    foreach my\
    \ $i (keys %hash) {\n        if ($hash{$i} == $max) {\n            push(@result,\
    \ $i);\n        }\n    }\n    return @result;\n}", "    my %hist;\n    foreach\
    \ my $char (split //, $test) {\n        $hist{$char}++;\n    }\n    my $max =\
    \ 0;\n    my @max_keys;\n    foreach my $key (keys %hist) {\n        if ($hist{$key}\
    \ > $max) {\n            $max = $hist{$key};\n            @max_keys = ($key);\n\
    \        } elsif ($hist{$key} == $max) {\n            push @max_keys, $key;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_keys };\n}", "    my %hash\
    \ = ();\n    my @array = split(//, $test);\n    foreach my $i (@array) {\n   \
    \     $hash{$i}++;\n    }\n    my $max = 0;\n    foreach my $i (keys %hash) {\n\
    \        if ($hash{$i} > $max) {\n            $max = $hash{$i};\n        }\n \
    \   }\n    my @result = ();\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ == $max) {\n            push @result, $i;\n        }\n    }\n    return @result;\n\
    }", "    my %count;\n    foreach my $letter (split //, $test) {\n        $count{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %count)\
    \ {\n        if ($count{$letter} > $max) {\n            $max = $count{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($count{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %hash = ();\n    foreach my $letter\
    \ (split(//, $test)) {\n        $hash{$letter}++;\n    }\n    return %hash;\n}",
  "    my %hash;\n    foreach my $char (split //, $test) {\n        $hash{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my %hash;\n    my @array = split(\" \", $test);\n \
    \   foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my @keys = sort\
    \ { $hash{$b} <=> $hash{$a} } keys %hash;\n    my $max = $hash{$keys[0]};\n  \
    \  my @result;\n    foreach my $i (@keys) {\n        if ($hash{$i} == $max) {\n\
    \            push @result, $i;\n        }\n    }\n    return @result;\n}", " \
    \   my %hist;\n    my $max = 0;\n    my @max_keys;\n    foreach my $char (split\
    \ //, $test) {\n        $hist{$char}++;\n        if ($hist{$char} > $max) {\n\
    \            $max = $hist{$char};\n            @max_keys = ($char);\n        }\
    \ elsif ($hist{$char} == $max) {\n            push @max_keys, $char;\n       \
    \ }\n    }\n    return { map { $_ => $hist{$_} } @max_keys };\n}", "    my(%hash,\
    \ @array, $max, $key);\n    foreach my $letter (split(//, $test)) {\n        $hash{$letter}++;\n\
    \    }\n    foreach $key (keys %hash) {\n        push @array, $key if $hash{$key}\
    \ == $max;\n        $max = $hash{$key} if $hash{$key} > $max;\n    }\n    return\
    \ {map { $_ => $max } @array};\n}", "    my %hash;\n    my @array = split(//,\
    \ $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my $max\
    \ = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n        }\n    }\n    my @result;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n            push\
    \ @result, $key;\n        }\n    }\n    return @result;\n}", "    my %count;\n\
    \    my @letters = split(//, $test);\n    foreach my $letter (@letters) {\n  \
    \      $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n   \
    \ foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash = ();\n    my @array = split(/ /, $test);\n    my $max = 0;\n    foreach\
    \ my $word (@array) {\n        $hash{$word}++;\n        if ($hash{$word} > $max)\
    \ {\n            $max = $hash{$word};\n        }\n    }\n    my @keys = ();\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n    \
    \        push(@keys, $key);\n        }\n    }\n    return { map { $_ => $hash{$_}\
    \ } @keys };\n}", "    my %hash;\n    my @array = split('', $test);\n    foreach\
    \ my $letter (@array) {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n\
    \    my @max_letters;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n            @max_letters = ($key);\n\
    \        } elsif ($hash{$key} == $max) {\n            push @max_letters, $key;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return %result;\n}", "    my %count;\n\
    \    my @letters = split //, $test;\n    foreach my $letter (@letters) {\n   \
    \     $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n    foreach\
    \ my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n        \
    \    $max = $count{$letter};\n            @max_letters = ($letter);\n        }\
    \ elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash;\n    my @array = split(\" \", $test);\n    foreach my $letter (@array)\
    \ {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n   \
    \     } else {\n            $hash{$letter} = 1;\n        }\n    }\n    my $max\
    \ = 0;\n    my @max_letters;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n            @max_letters = ($key);\n\
    \        } elsif ($hash{$key} == $max) {\n            push @max_letters, $key;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash = ();\n    my @array = split('', $test);\n    foreach my $i (@array) {\n\
    \        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else {\n\
    \            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}", "    my\
    \ %hist;\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hist{$letter}++;\n    }\n    return \\%hist;\n}", "    my %hash\
    \ = ();\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n   \
    \     } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "    my %count;\n    my @letters = split(//, $test);\n    foreach\
    \ my $letter (@letters) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n\
    \    my @max_letters;\n    foreach my $letter (keys %count) {\n        if ($count{$letter}\
    \ > $max) {\n            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %histogram;\n    foreach my $char (split //, $test) {\n        $histogram{$char}++;\n\
    \    }\n    return %histogram;\n}", "    my %histo;\n    my @letters = split(//,\
    \ $test);\n    foreach my $letter (@letters) {\n        $histo{$letter}++;\n \
    \   }\n    return %histo;\n}", "    my %histogram;\n    my @letters = split(//,\
    \ $test);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "    my %count;\n    foreach my $letter (split\
    \ //, $test) {\n        $count{$letter}++;\n    }\n    return %count;\n}", " \
    \   my %count;\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash = ();\n    my $max = 0;\n    my @max_keys = ();\n    foreach my $char\
    \ (split //, $test) {\n        $hash{$char}++;\n        if ($hash{$char} > $max)\
    \ {\n            $max = $hash{$char};\n            @max_keys = ($char);\n    \
    \    } elsif ($hash{$char} == $max) {\n            push @max_keys, $char;\n  \
    \      }\n    }\n    return { map { $_ => $hash{$_} } @max_keys };\n}", "    my\
    \ %count;\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        $count{$letter}++;\n    }\n    my $max = max(values %count);\n  \
    \  my @max_letters = grep { $count{$_} == $max } keys %count;\n    return { map\
    \ { $_ => $count{$_} } @max_letters };\n}", "    my %count;\n    foreach my $char\
    \ (split //, $test) {\n        $count{$char}++;\n    }\n    return \\%count;\n\
    }", "    my %hash = ();\n    my @array = split(//, $test);\n    foreach my $letter\
    \ (@array) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    my $max\
    \ = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n        }\n    }\n    my @result = ();\n   \
    \ foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n       \
    \     push(@result, $key);\n        }\n    }\n    return @result;\n}", "    my\
    \ %histogram;\n    my @letters = split('', $test);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "    my\
    \ %hash;\n    my @array = split(/ /, $test);\n    foreach my $item (@array) {\n\
    \        $hash{$item}++;\n    }\n    return %hash;\n}", "    my %hist;\n    foreach\
    \ my $char (split //, $test) {\n        $hist{$char}++;\n    }\n    return %hist;\n\
    }", "    my %histo;\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter\
    \ (split //, $test) {\n        $histo{$letter}++;\n        if ($histo{$letter}\
    \ > $max) {\n            $max = $histo{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($histo{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $histo{$_} } @max_letters };\n}",
  "    my %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hist)\
    \ {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hist{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my %count;\n    foreach my $char (split //, $test)\
    \ {\n        $count{$char}++;\n    }\n    my $max = max values %count;\n    my\
    \ @max_letters = grep { $count{$_} == $max } keys %count;\n    return { map {\
    \ $_ => $count{$_} } @max_letters };\n}", "    my %histogram;\n    foreach my\
    \ $letter (split //, $test) {\n        $histogram{$letter}++;\n    }\n    return\
    \ %histogram;\n}", "    my %histo;\n    my @letters = split(/ /, $test);\n   \
    \ foreach my $letter (@letters) {\n        $histo{$letter}++;\n    }\n    return\
    \ \\%histo;\n}", "    my %hash;\n    my @letters = split(/ /, $test);\n    foreach\
    \ my $letter (@letters) {\n        $hash{$letter}++;\n    }\n    return \\%hash;\n\
    }", "    my %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    my $max = (sort {$b <=> $a} values %hist)[0];\n    my @max_letters\
    \ = grep {$hist{$_} == $max} keys %hist;\n    return {map {$_ => $max} @max_letters};\n\
    }", "    my @test = split(//, $test);\n    my %count;\n    foreach my $letter\
    \ (@test) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ @letters = split(//, $test);\n    my %count;\n    foreach my $letter (@letters)\
    \ {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return %result;\n}", "    my %count;\n\
    \    my @letters = split(\"\", $test);\n    foreach my $letter (@letters) {\n\
    \        $count{$letter}++;\n    }\n    my $max = 0;\n    foreach my $key (keys\
    \ %count) {\n        if ($count{$key} > $max) {\n            $max = $count{$key};\n\
    \        }\n    }\n    my @max_letters;\n    foreach my $key (keys %count) {\n\
    \        if ($count{$key} == $max) {\n            push(@max_letters, $key);\n\
    \        }\n    }\n    return {\n        map { $_ => $count{$_} } @max_letters\n\
    \    };\n}", "    my %count;\n    my @letters = split(//, $test);\n    foreach\
    \ my $letter (@letters) {\n        $count{$letter}++;\n    }\n    return %count;\n\
    }", "    my %histo;\n    foreach my $char (split //, $test) {\n        $histo{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_chars;\n    foreach my $char (keys %histo)\
    \ {\n        if ($histo{$char} > $max) {\n            $max = $histo{$char};\n\
    \            @max_chars = ($char);\n        } elsif ($histo{$char} == $max) {\n\
    \            push @max_chars, $char;\n        }\n    }\n    return { map { $_\
    \ => $max } @max_chars };\n}", "    my %histogram;\n    my @letters = split(//,\
    \ $test);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "    my %histogram;\n    foreach my $letter\
    \ (split //, $test) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "    my %histogram;\n    foreach my $letter (split //, $test) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "    my %histogram;\n    foreach my $letter\
    \ (split //, $test) {\n        $histogram{$letter}++;\n    }\n    return \\%histogram;\n\
    }", "    my %hash = ();\n    my @array = split(\" \", $test);\n    foreach my\
    \ $i (@array) {\n        $hash{$i}++;\n    }\n    my $max = 0;\n    my @keys =\
    \ ();\n    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n\
    \            $max = $hash{$key};\n            @keys = ($key);\n        } elsif\
    \ ($hash{$key} == $max) {\n            push(@keys, $key);\n        }\n    }\n\
    \    my %result = ();\n    foreach my $key (@keys) {\n        $result{$key} =\
    \ $max;\n    }\n    return %result;\n}", "    my %histo;\n    foreach my $char\
    \ (split //, $test) {\n        $histo{$char}++;\n    }\n    my $max = 0;\n   \
    \ my @max_letters;\n    foreach my $letter (keys %histo) {\n        if ($histo{$letter}\
    \ > $max) {\n            $max = $histo{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($histo{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hist)\
    \ {\n        if ($hist{$key} > $max) {\n            $max = $hist{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hist{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my(%count);\n    my(@letters) = split(//, $test);\n\
    \    foreach my $letter (@letters) {\n        $count{$letter}++;\n    }\n    my($max)\
    \ = 0;\n    my(@max_letters);\n    foreach my $letter (keys %count) {\n      \
    \  if ($count{$letter} > $max) {\n            $max = $count{$letter};\n      \
    \      @max_letters = ($letter);\n        } elsif ($count{$letter} == $max) {\n\
    \            push(@max_letters, $letter);\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %hist;\n    foreach my $char (split(//,\
    \ $test)) {\n        $hist{$char}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n\
    \            $max = $hist{$letter};\n            @max_letters = ($letter);\n \
    \       } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hist;\n    foreach my $char (split //, $test) {\n        $hist{$char}++;\n\
    \    }\n    my $max = 0;\n    foreach my $key (keys %hist) {\n        if ($hist{$key}\
    \ > $max) {\n            $max = $hist{$key};\n        }\n    }\n    my @max_keys;\n\
    \    foreach my $key (keys %hist) {\n        if ($hist{$key} == $max) {\n    \
    \        push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my %hist;\n    foreach my $char (split //, $test) {\n\
    \        $hist{$char}++;\n    }\n    return %hist;\n}", "    my %hash;\n    my\
    \ @array = split(/ /, $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys;\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    my %result;\n    foreach my\
    \ $key (@max_keys) {\n        $result{$key} = $max;\n    }\n    return %result;\n\
    }", "    my %hash = ();\n    foreach my $char (split //, $test) {\n        $hash{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_keys = ();\n    foreach my $key (keys %hash)\
    \ {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n    \
    \        @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n      \
    \      push @max_keys, $key;\n        }\n    }\n    return {\n        map { $_\
    \ => $hash{$_} } @max_keys\n    };\n}", "    my %histo;\n    foreach my $char\
    \ (split //, $test) {\n        $histo{$char}++;\n    }\n    return %histo;\n}",
  "    my %histogram;\n    my @letters = split(//, $test);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return \\%histogram;\n\
    }", "    my %hash = ();\n    my @array = split('', $test);\n    foreach my $key\
    \ (@array) {\n        $hash{$key}++;\n    }\n    my @max = sort {$hash{$b} <=>\
    \ $hash{$a}} keys %hash;\n    my %result = ();\n    foreach my $key (@max) {\n\
    \        if ($hash{$key} == $hash{$max[0]}) {\n            $result{$key} = $hash{$key};\n\
    \        }\n    }\n    return %result;\n}", "    my %hist;\n    foreach my $char\
    \ (split //, $test) {\n        $hist{$char}++;\n    }\n    my %max;\n    my $max\
    \ = 0;\n    foreach my $key (keys %hist) {\n        if ($hist{$key} > $max) {\n\
    \            $max = $hist{$key};\n            %max = ($key => $hist{$key});\n\
    \        } elsif ($hist{$key} == $max) {\n            $max{$key} = $hist{$key};\n\
    \        }\n    }\n    return %max;\n}", "    my %count;\n    my $max = 0;\n \
    \   my @max_letters;\n    foreach my $letter (split //, $test) {\n        $count{$letter}++;\n\
    \        if ($count{$letter} > $max) {\n            $max = $count{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($count{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $count{$_} } @max_letters };\n}", "    my %hash = ();\n    my @array\
    \ = split('', $test);\n    foreach my $i (@array) {\n        $hash{$i}++;\n  \
    \  }\n    my $max = 0;\n    foreach my $i (keys %hash) {\n        if ($hash{$i}\
    \ > $max) {\n            $max = $hash{$i};\n        }\n    }\n    my @result =\
    \ ();\n    foreach my $i (keys %hash) {\n        if ($hash{$i} == $max) {\n  \
    \          push(@result, $i);\n        }\n    }\n    return @result;\n}", "  \
    \  my %count;\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash = ();\n    my @letters = split(//, $test);\n    foreach my $letter (@letters)\
    \ {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters =\
    \ ();\n    foreach my $letter (keys %hash) {\n        if ($hash{$letter} > $max)\
    \ {\n            $max = $hash{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($hash{$letter} == $max) {\n            push(@max_letters, $letter);\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %count;\n    foreach my $char (split //, $test) {\n        $count{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $char (keys %count)\
    \ {\n        if ($count{$char} > $max) {\n            $max = $count{$char};\n\
    \            @max_letters = ($char);\n        } elsif ($count{$char} == $max)\
    \ {\n            push @max_letters, $char;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %hist;\n    foreach my $letter (split\
    \ //, $test) {\n        $hist{$letter}++;\n    }\n    my $max = (sort {$b <=>\
    \ $a} values %hist)[0];\n    my @max_letters = grep {$hist{$_} == $max} keys %hist;\n\
    \    return {map {$_ => $max} @max_letters};\n}", "    my %hist;\n    foreach\
    \ my $char (split //, $test) {\n        $hist{$char}++;\n    }\n    return %hist;\n\
    }", "    my %count;\n    my @letters = split(//, $test);\n    foreach my $letter\
    \ (@letters) {\n        $count{$letter}++;\n    }\n    return %count;\n}", " \
    \   my %hist;\n    foreach my $letter (split(//, $test)) {\n        $hist{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %hist)\
    \ {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($hist{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my %hash;\n    foreach my $char (split\
    \ //, $test) {\n        $hash{$char}++;\n    }\n    return %hash;\n}", "    my\
    \ %hash = ();\n    foreach my $char (split //, $test) {\n        $hash{$char}++;\n\
    \    }\n    my $max = (sort {$hash{$b} <=> $hash{$a}} keys %hash)[0];\n    my\
    \ @max_keys = grep { $hash{$_} == $hash{$max} } keys %hash;\n    return { map\
    \ { $_ => $hash{$_} } @max_keys };\n}", "    my %hist;\n    foreach my $char (split\
    \ //, $test) {\n        $hist{$char}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %hist) {\n        if ($hist{$letter} > $max) {\n\
    \            $max = $hist{$letter};\n            @max_letters = ($letter);\n \
    \       } elsif ($hist{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %hash;\n    my @array = split('', $test);\n    foreach my $i (@array) {\n  \
    \      $hash{$i}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach my\
    \ $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n\
    \            @max_keys = ($key);\n        } elsif ($hash{$key} == $max) {\n  \
    \          push @max_keys, $key;\n        }\n    }\n    return { map { $_ => $max\
    \ } @max_keys };\n}", "    my %histogram;\n    foreach my $char (split(//, $test))\
    \ {\n        $histogram{$char}++;\n    }\n    my $max = 0;\n    foreach my $key\
    \ (keys %histogram) {\n        if ($histogram{$key} > $max) {\n            $max\
    \ = $histogram{$key};\n        }\n    }\n    my @max_keys = ();\n    foreach my\
    \ $key (keys %histogram) {\n        if ($histogram{$key} == $max) {\n        \
    \    push(@max_keys, $key);\n        }\n    }\n    return { map { $_ => $max }\
    \ @max_keys };\n}", "    my %count;\n    my @letters = split(//, $test);\n   \
    \ foreach my $letter (@letters) {\n        $count{$letter}++;\n    }\n    return\
    \ %count;\n}", "    my %histo;\n    my @letters = split(//, $test);\n    foreach\
    \ my $letter (@letters) {\n        $histo{$letter}++;\n    }\n    return %histo;\n\
    }", "    my %histo;\n    foreach my $letter (split //, $test) {\n        $histo{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histo)\
    \ {\n        if ($histo{$letter} > $max) {\n            $max = $histo{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histo{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $max } @max_letters };\n}", "    my @letters = split(//, $test);\n \
    \   my %histogram;\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "    my %histogram;\n    foreach my $letter\
    \ (split(//, $test)) {\n        $histogram{$letter}++;\n    }\n    my $max = 0;\n\
    \    my @max_letters;\n    foreach my $letter (keys %histogram) {\n        if\
    \ ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n  \
    \          @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            push @max_letters, $letter;\n        }\n    }\n    return\
    \ { map { $_ => $max } @max_letters };\n}", "    my %hist;\n    my $max = 0;\n\
    \    my @max_letters;\n    foreach my $letter (split //, $test) {\n        $hist{$letter}++;\n\
    \        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n  \
    \          @max_letters = ($letter);\n        } elsif ($hist{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { map\
    \ { $_ => $hist{$_} } @max_letters };\n}", "    my %hist;\n    for my $letter\
    \ (split //, $test) {\n        $hist{$letter}++;\n    }\n    my $max = max(values\
    \ %hist);\n    my @max_letters = grep { $hist{$_} == $max } keys %hist;\n    return\
    \ { map { $_ => $max } @max_letters };\n}", "    my %count;\n    my @letters =\
    \ split(//, $test);\n    foreach my $letter (@letters) {\n        $count{$letter}++;\n\
    \    }\n    return %count;\n}", "    my %count;\n    my @letters = split(//, $test);\n\
    \    foreach my $letter (@letters) {\n        $count{$letter}++;\n    }\n    my\
    \ $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %count) {\n  \
    \      if ($count{$letter} > $max) {\n            $max = $count{$letter};\n  \
    \          @max_letters = ($letter);\n        } elsif ($count{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    return { $max\
    \ => \\@max_letters };\n}", "    my %hash;\n    my @array = split(/ /, $test);\n\
    \    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    my $max = 0;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n     \
    \       $max = $hash{$key};\n        }\n    }\n    my %result;\n    foreach my\
    \ $key (keys %hash) {\n        if ($hash{$key} == $max) {\n            $result{$key}\
    \ = $max;\n        }\n    }\n    return %result;\n}", "    my %hash = ();\n  \
    \  my @array = split(/ /, $test);\n    foreach my $i (@array) {\n        if (exists\
    \ $hash{$i}) {\n            $hash{$i}++;\n        } else {\n            $hash{$i}\
    \ = 1;\n        }\n    }\n    my $max = 0;\n    foreach my $key (keys %hash) {\n\
    \        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n        }\n\
    \    }\n    my @result = ();\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ == $max) {\n            push(@result, $key);\n        }\n    }\n    return @result;\n\
    }", "    my %count;\n    my @letters = split(//, $test);\n    foreach my $letter\
    \ (@letters) {\n        $count{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %count) {\n        if ($count{$letter} > $max) {\n\
    \            $max = $count{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($count{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    return { map { $_ => $max } @max_letters };\n}", "    my\
    \ %histogram;\n    foreach my $char (split //, $test) {\n        $histogram{$char}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram)\
    \ {\n        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            push @max_letters, $letter;\n        }\n    }\n    return\
    \ { map { $_ => $max } @max_letters };\n}", "    my %hash;\n    foreach my $char\
    \ (split //, $test) {\n        $hash{$char}++;\n    }\n    my $max = (sort {$hash{$b}\
    \ <=> $hash{$a}} keys %hash)[0];\n    my @max = grep {$hash{$_} == $hash{$max}}\
    \ keys %hash;\n    return {map {$_ => $hash{$_}} @max};\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
