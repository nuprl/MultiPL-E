name: HumanEval_40_triples_sum_to_zero
language: pl
prompt: "# triples_sum_to_zero takes a list of integers as an input.\n# it returns\
  \ True if there are three distinct elements in the list that\n# sum to zero, and\
  \ False otherwise.\nsub triples_sum_to_zero {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triples_sum_to_zero;\n\
  \        if(eq_deeply($candidate->([1, 3, 5, 0]),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5,\
  \ -1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([1, 3, -2, 1]),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 7]),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 5, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([2, 4, -5, 3, 9, 7]),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 3, 5, -100]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([100, 3, 5, -100]),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my($i, $j, $k);\n    for($i = 0; $i < @$l; $i++)\
    \ {\n        for($j = $i + 1; $j < @$l; $j++) {\n            for($k = $j + 1;\
    \ $k < @$l; $k++) {\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my %h;\n    foreach my $i (@$l) {\n        if\
    \ (exists $h{-$i}) {\n            return 1;\n        }\n        $h{$i} = 1;\n\
    \    }\n    return 0;\n}", "    my($i, $j, $k);\n    for($i = 0; $i < @$l; $i++)\
    \ {\n        for($j = $i + 1; $j < @$l; $j++) {\n            for($k = $j + 1;\
    \ $k < @$l; $k++) {\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my %hash;\n    foreach my $i (@$l) {\n       \
    \ if (exists $hash{$i}) {\n            return 1;\n        }\n        $hash{-$i}\
    \ = 1;\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my\
    \ $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1;\
    \ $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n         \
    \       if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my %h;\n    foreach my $i (@$l) {\n        foreach my $j (@$l) {\n       \
    \     if ($i != $j) {\n                $h{$i + $j} = 1;\n            }\n     \
    \   }\n    }\n    foreach my $i (@$l) {\n        if (exists $h{-$i}) {\n     \
    \       return 1;\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n\
    \    my($i, $j, $k);\n    for ($i = 0; $i < @l; $i++) {\n\tfor ($j = $i + 1; $j\
    \ < @l; $j++) {\n\t    for ($k = $j + 1; $k < @l; $k++) {\n\t\tif ($l[$i] + $l[$j]\
    \ + $l[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return\
    \ 0;\n}", "    my $n = @$l;\n    my $i;\n    my $j;\n    my $k;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my %hash;\n    foreach my\
    \ $i (@$l) {\n        if (exists $hash{$i}) {\n            return 1;\n       \
    \ }\n        $hash{-$i} = 1;\n    }\n    return 0;\n}", "    my %hash;\n    foreach\
    \ my $i (@$l) {\n        foreach my $j (@$l) {\n            $hash{$i + $j} = 1;\n\
    \        }\n    }\n    foreach my $i (@$l) {\n        if ($hash{-$i}) {\n    \
    \        return 1;\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n\
    \    my(%h);\n    foreach my $x (@l) {\n        foreach my $y (@l) {\n       \
    \     my $z = -($x + $y);\n            if (exists $h{$z}) {\n                return\
    \ 1;\n            }\n        }\n        $h{$x} = 1;\n    }\n    return 0;\n}",
  "    my($i, $j, $k);\n    for ($i = 0; $i < @$l; $i++) {\n        for ($j = $i +\
    \ 1; $j < @$l; $j++) {\n            for ($k = $j + 1; $k < @$l; $k++) {\n    \
    \            if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my %seen;\n    for my $i (0..$#$l) {\n        for my $j ($i+1..$#$l) {\n \
    \           my $k = -($l->[$i] + $l->[$j]);\n            if ($seen{$k}) {\n  \
    \              return 1;\n            }\n            $seen{$l->[$j]} = 1;\n  \
    \      }\n        undef %seen;\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my %h;\n    foreach\
    \ my $i (@$l) {\n        if (exists $h{-$i}) {\n            return 1;\n      \
    \  }\n        $h{$i} = 1;\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n\
    \    my $k;\n    for ($i = 0; $i < @$l; $i++) {\n        for ($j = $i + 1; $j\
    \ < @$l; $j++) {\n            for ($k = $j + 1; $k < @$l; $k++) {\n          \
    \      if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n\
    \    my($sum);", "    my(@l) = @$l;\n    my(%h);\n    foreach my $i (@l) {\n \
    \       $h{$i} = 1;\n    }\n    foreach my $i (@l) {\n        foreach my $j (@l)\
    \ {\n            my $k = -($i + $j);\n            if ($h{$k} && $i != $j && $j\
    \ != $k && $i != $k) {\n                return 1;\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i <\
    \ $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] +\
    \ $l->[$k] == 0) {\n                    return 1;\n                }\n       \
    \     }\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n\
    \            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my($i, $j, $k);\n\
    \    for($i = 0; $i < @$l; $i++) {\n        for($j = $i + 1; $j < @$l; $j++) {\n\
    \            for($k = $j + 1; $k < @$l; $k++) {\n                if($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n\
    \    my(%hash);\n    my($i, $j, $k);\n    my($sum);", "    my %h;\n    foreach\
    \ my $i (@$l) {\n        if (exists $h{-$i}) {\n            return 1;\n      \
    \  }\n        $h{$i} = 1;\n    }\n    return 0;\n}", "    my(@list) = @$l;\n \
    \   my(%hash);\n    my($i, $j, $k);\n    my($sum);", "    my $n = scalar(@$l);\n\
    \    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    return 1;\n                }\n            }\n    \
    \    }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n    my(%hash);\n    my($i,\
    \ $j, $k);\n    for($i = 0; $i < @list; $i++) {\n\t$hash{$list[$i]} = 1;\n   \
    \ }\n    for($i = 0; $i < @list; $i++) {\n\tfor($j = $i + 1; $j < @list; $j++)\
    \ {\n\t    if(defined($hash{-$list[$i] - $list[$j]})) {\n\t\treturn 1;\n\t   \
    \ }\n\t}\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n    my $k;\n    my\
    \ $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n      \
    \          if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my(@l) = @$l;\n    my(%h);\n    for my $i (0..$#l) {\n        for my $j ($i+1..$#l)\
    \ {\n            my $sum = $l[$i] + $l[$j];\n            if (exists $h{$sum})\
    \ {\n                return 1;\n            }\n            $h{-$sum} = 1;\n  \
    \      }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n\
    \    my $k;\n    my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    return 1;\n                }\n            }\n    \
    \    }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my\
    \ $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1;\
    \ $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n         \
    \       if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my %hash;\n    foreach my $i (@$l) {\n        if (exists $hash{-$i}) {\n \
    \           return 1;\n        }\n        $hash{$i} = 1;\n    }\n    return 0;\n\
    }", "    my($i, $j, $k);\n    for($i = 0; $i < @$l; $i++) {\n        for($j =\
    \ $i + 1; $j < @$l; $j++) {\n            for($k = $j + 1; $k < @$l; $k++) {\n\
    \                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                 \
    \   return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n    my $k;\n    my\
    \ $sum;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                $sum\
    \ = $l->[$i] + $l->[$j] + $l->[$k];\n                if ($sum == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $i;\n    my $j;\n    my $k;\n    my $len = scalar(@$l);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            for ($k = $j + 1; $k < $len; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n\
    \    my(%hash);\n    my($i, $j, $k);\n    my($sum);", "    my $i;\n    my $j;\n\
    \    my $k;\n    for ($i = 0; $i < scalar(@$l); $i++) {\n        for ($j = $i\
    \ + 1; $j < scalar(@$l); $j++) {\n            for ($k = $j + 1; $k < scalar(@$l);\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my %h;\n    foreach my $i (@$l) {\n        return 1 if\
    \ $h{-$i};\n        $h{$i} = 1;\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my %hash;\n  \
    \  foreach my $i (@$l) {\n        if (defined $hash{-$i}) {\n            return\
    \ 1;\n        }\n        $hash{$i} = 1;\n    }\n    return 0;\n}", "    my $i;\n\
    \    my $j;\n    my $k;\n    my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n\
    \    my($sum);", "    my($i, $j, $k);\n    for ($i = 0; $i < @$l; $i++) {\n  \
    \      for ($j = $i + 1; $j < @$l; $j++) {\n            for ($k = $j + 1; $k <\
    \ @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n \
    \                   return 1;\n                }\n            }\n        }\n \
    \   }\n    return 0;\n}", "    my($i, $j, $k);\n    for($i = 0; $i < @$l; $i++)\
    \ {\n        for($j = $i + 1; $j < @$l; $j++) {\n            for($k = $j + 1;\
    \ $k < @$l; $k++) {\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my %hash;\n    my $i;\n    foreach $i (@$l) {\n\
    \        $hash{$i} = 1;\n    }\n    foreach $i (@$l) {\n        my $j;\n     \
    \   foreach $j (@$l) {\n            my $k = -($i + $j);\n            if ($hash{$k}\
    \ && $i != $j && $i != $k && $j != $k) {\n                return 1;\n        \
    \    }\n        }\n    }\n    return 0;\n}", "    my %hash;\n    foreach my $i\
    \ (@$l) {\n        if (exists $hash{-$i}) {\n            return 1;\n        }\n\
    \        $hash{$i} = 1;\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n\
    \    foreach my $i (@l) {\n        foreach my $j (@l) {\n            foreach my\
    \ $k (@l) {\n                if ($i != $j && $j != $k && $i != $k) {\n       \
    \             if ($i + $j + $k == 0) {\n                        return 1;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return 0;\n}", "    my $n = scalar(@$l);\n    for(my $i = 0; $i < $n; $i++)\
    \ {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            for(my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    return 1;\n                }\n            }\n    \
    \    }\n    }\n    return 0;\n}", "    my %h;\n    foreach my $x (@$l) {\n   \
    \     foreach my $y (@$l) {\n            if ($x != $y) {\n                $h{$x\
    \ + $y} = 1;\n            }\n        }\n    }\n    foreach my $z (@$l) {\n   \
    \     if ($h{-$z}) {\n            return 1;\n        }\n    }\n    return 0;\n\
    }", "    my(@l) = @$l;\n    my(%h);\n    foreach my $i (@l) {\n        $h{$i}\
    \ = 1;\n    }\n    foreach my $i (@l) {\n        foreach my $j (@l) {\n      \
    \      my $k = -($i + $j);\n            if ($h{$k} && $i != $j && $j != $k &&\
    \ $i != $k) {\n                return 1;\n            }\n        }\n    }\n  \
    \  return 0;\n}", "    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < @$l;\
    \ $i++) {\n        for ($j = $i + 1; $j < @$l; $j++) {\n            for ($k =\
    \ $j + 1; $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n \
    \   my $j;\n    my $k;\n    for($i = 0; $i < $n; $i++) {\n        for($j = $i\
    \ + 1; $j < $n; $j++) {\n            for($k = $j + 1; $k < $n; $k++) {\n     \
    \           if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my(@list) = @$l;\n    my(%h);\n    for my $i (0..$#list) {\n        for my\
    \ $j ($i+1..$#list) {\n            $h{$list[$i] + $list[$j]} = 1;\n        }\n\
    \    }\n    for my $i (0..$#list) {\n        if ($h{-$list[$i]}) {\n         \
    \   return 1;\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my $n = @$l;\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n\
    \    my(%h);\n    my($i, $j, $k);\n    my($sum);", '    my(@list) = @$l;', " \
    \   my(@list) = @$l;\n    my(%hash);\n    my($i, $j, $k);\n    my($sum);", " \
    \   my %seen;\n    foreach my $x (@$l) {\n        foreach my $y (@$l) {\n    \
    \        foreach my $z (@$l) {\n                if ($x != $y && $y != $z && $x\
    \ != $z && $x + $y + $z == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my %seen;\n  \
    \  foreach my $x (@$l) {\n        foreach my $y (@$l) {\n            foreach my\
    \ $z (@$l) {\n                if ($x != $y && $y != $z && $x != $z && $x + $y\
    \ + $z == 0) {\n                    return 1;\n                }\n           \
    \ }\n        }\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n    my $k;\n\
    \    my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                \
    \    return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my %h;\n    for my $i (0..$#$l) {\n        for my $j ($i+1..$#$l)\
    \ {\n            $h{$l->[$i] + $l->[$j]} = [$i, $j];\n        }\n    }\n    for\
    \ my $i (0..$#$l) {\n        return 1 if exists $h{-$l->[$i]};\n    }\n    return\
    \ 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    for my $i (0..$#l) {\n        for\
    \ my $j ($i+1..$#l) {\n            $h{$l[$i]+$l[$j]} = [$i,$j];\n        }\n \
    \   }\n    for my $i (0..$#l) {\n        if (exists $h{-$l[$i]}) {\n         \
    \   my($j,$k) = @{$h{-$l[$i]}};\n            return 1 if $i != $j && $i != $k;\n\
    \        }\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n    my $k;\n  \
    \  my $n = scalar(@$l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n \
    \               if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                 \
    \   return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my(@list) = @$l;\n    my($i, $j, $k);\n    for ($i = 0; $i < @list;\
    \ $i++) {\n\tfor ($j = $i + 1; $j < @list; $j++) {\n\t    for ($k = $j + 1; $k\
    \ < @list; $k++) {\n\t\tif ($list[$i] + $list[$j] + $list[$k] == 0) {\n\t\t  \
    \  return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return 0;\n}", "    my $i;\n   \
    \ my $j;\n    my $k;\n    for ($i = 0; $i < @$l; $i++) {\n        for ($j = $i\
    \ + 1; $j < @$l; $j++) {\n            for ($k = $j + 1; $k < @$l; $k++) {\n  \
    \              if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                  \
    \  return 1;\n                }\n            }\n        }\n    }\n    return 0;\n\
    }", "    my $i;\n    my $j;\n    my $k;\n    my $n = scalar(@$l);\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n        \
    \    for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n\
    \    my($i, $j, $k);\n    my($sum);", "    my %h;\n    for my $i (0..$#$l) {\n\
    \        for my $j ($i+1..$#$l) {\n            $h{$l->[$i] + $l->[$j]} = [$i,\
    \ $j];\n        }\n    }\n    for my $i (0..$#$l) {\n        return 1 if exists\
    \ $h{-$l->[$i]};\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n\
    \    my($i, $j, $k);\n    my($sum);", "    my(@l) = @$l;\n    my(%h);\n    my($i,\
    \ $j, $k);\n    for($i = 0; $i < @l; $i++) {\n\t$h{$l[$i]} = $i;\n    }\n    for($i\
    \ = 0; $i < @l; $i++) {\n\tfor($j = $i + 1; $j < @l; $j++) {\n\t    if(defined($h{-$l[$i]\
    \ - $l[$j]})) {\n\t\treturn 1;\n\t    }\n\t}\n    }\n    return 0;\n}", "    my(@l)\
    \ = @$l;\n    my(%h);\n    my($i, $j, $k);\n    my($sum);", "    my $n = scalar(@$l);\n\
    \    return 0 if $n < 3;\n    my @sorted = sort {$a <=> $b} @$l;\n    my $i =\
    \ 0;\n    while ($i < $n-2) {\n        my $j = $i+1;\n        my $k = $n-1;\n\
    \        while ($j < $k) {\n            my $sum = $sorted[$i] + $sorted[$j] +\
    \ $sorted[$k];\n            if ($sum == 0) {\n                return 1;\n    \
    \        } elsif ($sum < 0) {\n                $j++;\n            } else {\n \
    \               $k--;\n            }\n        }\n        $i++;\n    }\n    return\
    \ 0;\n}", "    my %hash;\n    foreach my $i (@$l) {\n        if (exists $hash{$i})\
    \ {\n            return 1;\n        }\n        foreach my $j (@$l) {\n       \
    \     if (exists $hash{-$i-$j}) {\n                return 1;\n            }\n\
    \            $hash{$i+$j} = 1;\n        }\n    }\n    return 0;\n}", "    my($i,\
    \ $j, $k);\n    for ($i = 0; $i < @$l; $i++) {\n        for ($j = $i + 1; $j <\
    \ @$l; $j++) {\n            for ($k = $j + 1; $k < @$l; $k++) {\n            \
    \    if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return 0;\n}", "    my(@l)\
    \ = @$l;\n    my(%h);\n    my($i, $j, $k);\n    my($sum);", "    my(@list) = @$l;\n\
    \    my($i, $j, $k);\n    for ($i = 0; $i < @list; $i++) {\n\tfor ($j = $i + 1;\
    \ $j < @list; $j++) {\n\t    for ($k = $j + 1; $k < @list; $k++) {\n\t\tif ($list[$i]\
    \ + $list[$j] + $list[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n  \
    \  }\n    return 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n \
    \   my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n              \
    \  if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return 0;\n}", "    my(@l)\
    \ = @$l;\n    my(%h);\n    my($i, $j, $k);\n    my($sum);", "    my %seen;\n \
    \   foreach my $i (@$l) {\n        foreach my $j (@$l) {\n            foreach\
    \ my $k (@$l) {\n                if ($i != $j && $j != $k && $i != $k) {\n   \
    \                 if ($i + $j + $k == 0) {\n                        return 1;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return 0;\n}", "    my $n = scalar(@$l);\n    if ($n < 3) {\n        return\
    \ 0;\n    }\n    my @sorted = sort {$a <=> $b} @$l;\n    for (my $i = 0; $i <\
    \ $n - 2; $i++) {\n        my $j = $i + 1;\n        my $k = $n - 1;\n        while\
    \ ($j < $k) {\n            my $sum = $sorted[$i] + $sorted[$j] + $sorted[$k];\n\
    \            if ($sum == 0) {\n                return 1;\n            } elsif\
    \ ($sum < 0) {\n                $j++;\n            } else {\n                $k--;\n\
    \            }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n\
    \    my($i, $j, $k);\n    my($s);", "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n\
    \    for($i = 0; $i < $n; $i++) {\n\tfor($j = $i + 1; $j < $n; $j++) {\n\t   \
    \ for($k = $j + 1; $k < $n; $k++) {\n\t\tif($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return 0;\n}", "  \
    \  my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < scalar(@$l) - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < scalar(@$l) - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < scalar(@$l); $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n    my\
    \ $k;\n    my $len = scalar(@$l);\n    for ($i = 0; $i < $len; $i++) {\n     \
    \   for ($j = $i + 1; $j < $len; $j++) {\n            for ($k = $j + 1; $k < $len;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    for my $i (0..$#l) {\n\
    \        for my $j ($i+1..$#l) {\n            my $sum = $l[$i] + $l[$j];\n   \
    \         return 1 if exists $h{-$sum};\n            $h{$l[$j]} = 1;\n       \
    \ }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n\
    \    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n              \
    \  if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return 0;\n}", "    my\
    \ $n = @$l;\n    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n\
    \    my($sum);", "    my($i, $j, $k);\n    for($i = 0; $i < @$l; $i++) {\n   \
    \     for($j = $i + 1; $j < @$l; $j++) {\n            for($k = $j + 1; $k < @$l;\
    \ $k++) {\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n       \
    \             return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j\
    \ + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    return 1;\n                }\n            }\n    \
    \    }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i =\
    \ 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n       \
    \     for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n    my($i,\
    \ $j, $k);\n    for ($i = 0; $i < @list; $i++) {\n\tfor ($j = $i + 1; $j < @list;\
    \ $j++) {\n\t    for ($k = $j + 1; $k < @list; $k++) {\n\t\tif ($list[$i] + $list[$j]\
    \ + $list[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return\
    \ 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n    for($i = 0;\
    \ $i < @l; $i++) {\n\tfor($j = $i + 1; $j < @l; $j++) {\n\t    for($k = $j + 1;\
    \ $k < @l; $k++) {\n\t\tif($l[$i] + $l[$j] + $l[$k] == 0) {\n\t\t    return 1;\n\
    \t\t}\n\t    }\n\t}\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n\
    \    my($i, $j, $k);\n    my($sum);", "    my $n = scalar(@$l);\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n\
    \    my($i, $j, $k);\n    for ($i = 0; $i < @list; $i++) {\n\tfor ($j = $i + 1;\
    \ $j < @list; $j++) {\n\t    for ($k = $j + 1; $k < @list; $k++) {\n\t\tif ($list[$i]\
    \ + $list[$j] + $list[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n  \
    \  }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n;\
    \ $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my\
    \ $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return 0;\n}", "    my($i, $j, $k);\n    for ($i = 0; $i\
    \ < @$l; $i++) {\n        for ($j = $i + 1; $j < @$l; $j++) {\n            for\
    \ ($k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n    my(%hash);\n \
    \   my($i, $j, $k);\n    my($sum);", "    my $n = @$l;\n    my $i;\n    my $j;\n\
    \    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n              \
    \  if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n    }\n    return 0;\n}", "    my\
    \ $i = 0;\n    my $j = 0;\n    my $k = 0;\n    for ($i = 0; $i < scalar(@$l);\
    \ $i++) {\n        for ($j = $i + 1; $j < scalar(@$l); $j++) {\n            for\
    \ ($k = $j + 1; $k < scalar(@$l); $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n\
    \    my($i, $j, $k);\n    my($sum);", "    my $n = scalar(@$l);\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return 0;\n}", "    my($i, $j, $k);\n\
    \    for ($i = 0; $i < @$l; $i++) {\n        for ($j = $i + 1; $j < @$l; $j++)\
    \ {\n            for ($k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n\
    \    my(%hash);\n    my($i, $j, $k);\n    for ($i = 0; $i < @list; $i++) {\n \
    \       for ($j = $i + 1; $j < @list; $j++) {\n            $hash{$list[$i] + $list[$j]}\
    \ = 1;\n        }\n    }\n    for ($k = 0; $k < @list; $k++) {\n        if ($hash{-$list[$k]})\
    \ {\n            return 1;\n        }\n    }\n    return 0;\n}", "    my(@l) =\
    \ @$l;\n    my(%h);\n    my($i, $j, $k);\n    my($sum);", "    my %h;\n    foreach\
    \ my $i (@$l) {\n        if (exists $h{-$i}) {\n            return 1;\n      \
    \  }\n        $h{$i} = 1;\n    }\n    return 0;\n}", "    my(@list) = @$l;\n \
    \   my(%hash);\n    my($i, $j, $k);\n    foreach $i (@list) {\n\t$hash{$i} = 1;\n\
    \    }\n    foreach $i (@list) {\n\tforeach $j (@list) {\n\t    $k = -($i + $j);\n\
    \t    if ($hash{$k}) {\n\t\treturn 1;\n\t    }\n\t}\n    }\n    return 0;\n}",
  "    my($i, $j, $k);\n    for ($i = 0; $i < @$l; $i++) {\n        for ($j = $i +\
    \ 1; $j < @$l; $j++) {\n            for ($k = $j + 1; $k < @$l; $k++) {\n    \
    \            if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my($i, $j, $k);\n    for($i = 0; $i < @$l; $i++) {\n        for($j = $i +\
    \ 1; $j < @$l; $j++) {\n            for($k = $j + 1; $k < @$l; $k++) {\n     \
    \           if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my $n = @$l;\n    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n                    return 1;\n                }\n            }\n    \
    \    }\n    }\n    return 0;\n}", "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n\
    \    for($i = 0; $i < $n; $i++) {\n\tfor($j = $i + 1; $j < $n; $j++) {\n\t   \
    \ for($k = $j + 1; $k < $n; $k++) {\n\t\tif($l->[$i] + $l->[$j] + $l->[$k] ==\
    \ 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return 0;\n}", "  \
    \  my %hash;\n    my $i;\n    my $j;\n    my $k;\n    my $sum;\n    my $size =\
    \ scalar(@$l);\n    for ($i = 0; $i < $size; $i++) {\n        for ($j = $i + 1;\
    \ $j < $size; $j++) {\n            $sum = $l->[$i] + $l->[$j];\n            if\
    \ (exists($hash{$sum})) {\n                for $k (@{$hash{$sum}}) {\n       \
    \             if ($i != $k && $j != $k) {\n                        return 1;\n\
    \                    }\n                }\n            }\n            push(@{$hash{$sum}},\
    \ $i);\n        }\n    }\n    return 0;\n}", "    my $n = @$l;\n    my $i;\n \
    \   my $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n    \
    \            if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n    for($i = 0; $i < @l;\
    \ $i++) {\n\tfor($j = $i + 1; $j < @l; $j++) {\n\t    $h{$l[$i] + $l[$j]} = 1;\n\
    \t}\n    }\n    for($k = 0; $k < @l; $k++) {\n\tif($h{-$l[$k]}) {\n\t    return\
    \ 1;\n\t}\n    }\n    return 0;\n}", "    my %h = ();\n    my $i;\n    my $j;\n\
    \    my $k;\n    my $sum;\n    my $n = scalar(@$l);\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $h{$l->[$i]} = 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = $i + 1; $j < $n; $j++) {\n            $sum = $l->[$i] + $l->[$j];\n\
    \            if (exists($h{-$sum})) {\n                return 1;\n           \
    \ }\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n\
    \    my $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n \
    \               if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                 \
    \   return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my(@list) = @$l;\n    my(%hash);\n    my($i, $j, $k);\n    my($sum);",
  "    my($i, $j, $k);\n    my($n) = scalar(@$l);\n    for($i = 0; $i < $n; $i++)\
    \ {\n\tfor($j = $i + 1; $j < $n; $j++) {\n\t    for($k = $j + 1; $k < $n; $k++)\
    \ {\n\t\tif($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\
    \t    }\n\t}\n    }\n    return 0;\n}", "    my(@list) = @$l;\n    my(%hash);\n\
    \    my($i, $j, $k);\n    my($sum);", "    my %seen;\n    foreach my $i (@$l)\
    \ {\n        foreach my $j (@$l) {\n            my $k = -($i + $j);\n        \
    \    if (exists $seen{$k}) {\n                return 1;\n            }\n     \
    \       $seen{$j} = 1;\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = @$l;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j +\
    \ 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0)\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n    }\n    return 0;\n}", "    my $i;\n    my $j;\n    my $k;\n    my $len\
    \ = scalar(@$l);\n    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i +\
    \ 1; $j < $len; $j++) {\n            for ($k = $j + 1; $k < $len; $k++) {\n  \
    \              if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                  \
    \  return 1;\n                }\n            }\n        }\n    }\n    return 0;\n\
    }", "    my($i, $j, $k);\n    for ($i = 0; $i < @$l - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < @$l - 1; $j++) {\n            for ($k = $j + 1; $k < @$l;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n   \
    \ for($i = 0; $i < @l; $i++) {\n\t$h{$l[$i]} = $i;\n    }\n    for($i = 0; $i\
    \ < @l; $i++) {\n\tfor($j = $i + 1; $j < @l; $j++) {\n\t    if(defined($h{-$l[$i]\
    \ - $l[$j]})) {\n\t\treturn 1;\n\t    }\n\t}\n    }\n    return 0;\n}", "    my(@l)\
    \ = @$l;\n    my(%h);\n    my($i, $j, $k);\n    for($i = 0; $i < @l; $i++) {\n\
    \t$h{$l[$i]} = $i;\n    }\n    for($i = 0; $i < @l; $i++) {\n\tfor($j = $i + 1;\
    \ $j < @l; $j++) {\n\t    if(defined($h{-$l[$i] - $l[$j]})) {\n\t\t$k = $h{-$l[$i]\
    \ - $l[$j]};\n\t\tif($k != $i && $k != $j) {\n\t\t    return 1;\n\t\t}\n\t   \
    \ }\n\t}\n    }\n    return 0;\n}", "    my($i, $j, $k);\n    for ($i = 0; $i\
    \ < @$l; $i++) {\n        for ($j = $i + 1; $j < @$l; $j++) {\n            for\
    \ ($k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n\
    \    my(%h);\n    my($i, $j, $k);\n    my($sum);", "    my %h;\n    foreach my\
    \ $x (@$l) {\n        $h{$x} = 1;\n    }\n    foreach my $x (@$l) {\n        foreach\
    \ my $y (@$l) {\n            if ($x != $y) {\n                my $z = -($x + $y);\n\
    \                if ($h{$z}) {\n                    return 1;\n              \
    \  }\n            }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n\
    \    my(%h);\n    my($i, $j, $k);\n    my($sum);", "    my $i;\n    my $j;\n \
    \   my $k;\n    my $len = scalar(@$l);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        for ($j = $i + 1; $j < $len; $j++) {\n            for ($k = $j + 1; $k\
    \ < $len; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my($i, $j, $k);\n    for ($i = 0; $i < @$l; $i++)\
    \ {\n        for ($j = $i + 1; $j < @$l; $j++) {\n            for ($k = $j + 1;\
    \ $k < @$l; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0)\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n    }\n    return 0;\n}", "    my %h;\n    foreach my $x (@$l) {\n      \
    \  foreach my $y (@$l) {\n            $h{$x + $y}++;\n        }\n    }\n    foreach\
    \ my $x (@$l) {\n        if ($h{-$x} > 0) {\n            return 1;\n        }\n\
    \    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for(my $i = 0; $i <\
    \ $n; $i++) {\n        for(my $j = $i + 1; $j < $n; $j++) {\n            for(my\
    \ $k = $j + 1; $k < $n; $k++) {\n                if($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return 0;\n}", "    my($i, $j, $k);\n    for($i = 0; $i\
    \ < @$l - 2; $i++) {\n        for($j = $i + 1; $j < @$l - 1; $j++) {\n       \
    \     for($k = $j + 1; $k < @$l; $k++) {\n                if($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n    my(%hash);\n\
    \    my($i, $j, $k);\n    my($sum);", "    my $i;\n    my $j;\n    my $k;\n  \
    \  for ($i = 0; $i < @$l; $i++) {\n        for ($j = $i + 1; $j < @$l; $j++) {\n\
    \            for ($k = $j + 1; $k < @$l; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n\
    \    my $i;\n    my $j;\n    my $k;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = @$l;\n    for (my $i = 0; $i < $n; $i++) {\n\
    \        for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j +\
    \ 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0)\
    \ {\n                    return 1;\n                }\n            }\n       \
    \ }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j,\
    \ $k);\n    for ($i = 0; $i < @l; $i++) {\n\t$h{$l[$i]} = $i;\n    }\n    for\
    \ ($i = 0; $i < @l; $i++) {\n\tfor ($j = $i + 1; $j < @l; $j++) {\n\t    if (defined($h{-$l[$i]\
    \ - $l[$j]})) {\n\t\treturn 1;\n\t    }\n\t}\n    }\n    return 0;\n}", "    my\
    \ $n = @$l;\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1;\
    \ $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n      \
    \          if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my(@list) = @$l;\n    my($i, $j, $k);\n    for ($i = 0; $i < @list; $i++)\
    \ {\n\tfor ($j = $i + 1; $j < @list; $j++) {\n\t    for ($k = $j + 1; $k < @list;\
    \ $k++) {\n\t\tif ($list[$i] + $list[$j] + $list[$k] == 0) {\n\t\t    return 1;\n\
    \t\t}\n\t    }\n\t}\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my($i,\
    \ $j, $k);\n    for($i = 0; $i < @l; $i++) {\n\tfor($j = $i + 1; $j < @l; $j++)\
    \ {\n\t    for($k = $j + 1; $k < @l; $k++) {\n\t\tif($l[$i] + $l[$j] + $l[$k]\
    \ == 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return 0;\n}", " \
    \   my($i, $j, $k);\n    for($i = 0; $i < @$l; $i++) {\n        for($j = $i +\
    \ 1; $j < @$l; $j++) {\n            for($k = $j + 1; $k < @$l; $k++) {\n     \
    \           if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my $n = scalar(@$l);\n    my $i;\n    my $j;\n    my $k;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return 0;\n}", "    my(@list) = @$l;\n    my(%hash);\n \
    \   my($i, $j, $k);\n    for ($i = 0; $i < @list; $i++) {\n        for ($j = $i\
    \ + 1; $j < @list; $j++) {\n            $hash{$list[$i] + $list[$j]} = 1;\n  \
    \      }\n    }\n    for ($k = 0; $k < @list; $k++) {\n        if ($hash{-$list[$k]})\
    \ {\n            return 1;\n        }\n    }\n    return 0;\n}", "    my $n =\
    \ scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i\
    \ + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n \
    \               if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                 \
    \   return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n    my($sum);",
  "    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my %h;\n    foreach my $i (@$l) {\n        if (exists $h{-$i})\
    \ {\n            return 1;\n        }\n        $h{$i} = 1;\n    }\n    return\
    \ 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my $n = @$l;\n    for my $i (0..$n-3) {\n    \
    \    for my $j ($i+1..$n-2) {\n            for my $k ($j+1..$n-1) {\n        \
    \        if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                    return\
    \ 1;\n                }\n            }\n        }\n    }\n    return 0;\n}", " \
    \   my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my\
    \ $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my(@l) = @$l;\n    my($i, $j, $k);\n    my($n) = scalar(@l);\n\
    \    for($i = 0; $i < $n; $i++) {\n\tfor($j = $i + 1; $j < $n; $j++) {\n\t   \
    \ for($k = $j + 1; $k < $n; $k++) {\n\t\tif($l[$i] + $l[$j] + $l[$k] == 0) {\n\
    \t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return 0;\n}", "    my(@list)\
    \ = @$l;\n    my(%hash);\n    my($i, $j, $k);\n    for ($i = 0; $i < @list; $i++)\
    \ {\n        for ($j = $i + 1; $j < @list; $j++) {\n            $hash{$list[$i]\
    \ + $list[$j]} = 1;\n        }\n    }\n    for ($k = 0; $k < @list; $k++) {\n\
    \        if ($hash{-$list[$k]}) {\n            return 1;\n        }\n    }\n \
    \   return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n    for($i\
    \ = 0; $i < @l; $i++) {\n\t$h{$l[$i]} = 1;\n    }\n    for($i = 0; $i < @l; $i++)\
    \ {\n\tfor($j = $i + 1; $j < @l; $j++) {\n\t    if(defined($h{-$l[$i] - $l[$j]}))\
    \ {\n\t\treturn 1;\n\t    }\n\t}\n    }\n    return 0;\n}", "    my %seen;\n \
    \   foreach my $i (@$l) {\n        foreach my $j (@$l) {\n            foreach\
    \ my $k (@$l) {\n                return 1 if $i + $j + $k == 0;\n            }\n\
    \        }\n    }\n    return 0;\n}", "    my %h;\n    foreach my $i (@$l) {\n\
    \        if (exists $h{-$i}) {\n            return 1;\n        }\n        $h{$i}\
    \ = 1;\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    if ($n < 3) {\n\
    \        return 0;\n    }\n    my $i;\n    my $j;\n    my $k;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k]\
    \ == 0) {\n                    return 1;\n                }\n            }\n \
    \       }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i\
    \ = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n     \
    \       for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return 0;\n}", "    my %hash;\n    foreach\
    \ my $i (@$l) {\n        if (exists $hash{-$i}) {\n            return 1;\n   \
    \     }\n        $hash{$i} = 1;\n    }\n    return 0;\n}", "    my(@l) = @$l;\n\
    \    my(%l);\n    my($i, $j, $k);\n    for $i (@l) {\n\t$l{$i} = 1;\n    }\n \
    \   for $i (@l) {\n\tfor $j (@l) {\n\t    if ($i != $j) {\n\t\tif ($l{-$i-$j})\
    \ {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return 0;\n}", "    my\
    \ $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n        for (my $j\
    \ = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++)\
    \ {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n            \
    \        return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n    my $k;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n    \
    \        for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my %h;\n    foreach my $i\
    \ (@$l) {\n        foreach my $j (@$l) {\n            if (exists $h{-$i-$j}) {\n\
    \                return 1;\n            }\n        }\n        $h{$i} = 1;\n  \
    \  }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n\
    \    for($i = 0; $i < @l; $i++) {\n\t$h{$l[$i]} = 1;\n    }\n    for($i = 0; $i\
    \ < @l; $i++) {\n\tfor($j = $i + 1; $j < @l; $j++) {\n\t    if(defined($h{-$l[$i]\
    \ - $l[$j]})) {\n\t\treturn 1;\n\t    }\n\t}\n    }\n    return 0;\n}", "    my($i,\
    \ $j, $k);\n    for($i = 0; $i < scalar(@$l); $i++) {\n        for($j = $i + 1;\
    \ $j < scalar(@$l); $j++) {\n            for($k = $j + 1; $k < scalar(@$l); $k++)\
    \ {\n                if($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n             \
    \       return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n    my $k;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n    \
    \        for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n\
    \    my($i, $j, $k);\n    my($sum);", "    my(@l) = @$l;\n    my(%h);\n    my($i,\
    \ $j, $k);\n    my($sum);", "    my $n = scalar(@$l);\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] +\
    \ $l->[$k] == 0) {\n                    return 1;\n                }\n       \
    \     }\n        }\n    }\n    return 0;\n}", "    my %hash;\n    foreach my $i\
    \ (@$l) {\n        $hash{$i} = 1;\n    }\n    foreach my $i (@$l) {\n        foreach\
    \ my $j (@$l) {\n            if (exists $hash{-$i-$j}) {\n                return\
    \ 1;\n            }\n        }\n    }\n    return 0;\n}", "    my($i, $j, $k);\n\
    \    for($i = 0; $i < @$l; $i++) {\n        for($j = $i + 1; $j < @$l; $j++) {\n\
    \            for($k = $j + 1; $k < @$l; $k++) {\n                if($l->[$i] +\
    \ $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n               \
    \ }\n            }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n\
    \    my(%h);\n    my($i, $j, $k);\n    my($sum);", "    my(@l) = @$l;\n    my(%h);\n\
    \    my($i, $j, $k);\n    for($i = 0; $i < @l; $i++) {\n\tfor($j = $i + 1; $j\
    \ < @l; $j++) {\n\t    $h{$l[$i] + $l[$j]} = 1;\n\t}\n    }\n    for($k = 0; $k\
    \ < @l; $k++) {\n\tif($h{-$l[$k]}) {\n\t    return 1;\n\t}\n    }\n    return\
    \ 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i < $n; $i++) {\n  \
    \      for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1;\
    \ $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for (my $i = 0; $i <\
    \ $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n            for\
    \ (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j] +\
    \ $l->[$k] == 0) {\n                    return 1;\n                }\n       \
    \     }\n        }\n    }\n    return 0;\n}", "    my $n = scalar(@$l);\n    for\
    \ (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++) {\n\
    \            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my $i;\n    my\
    \ $j;\n    my $k;\n    for ($i = 0; $i < @$l - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < @$l - 1; $j++) {\n            for ($k = $j + 1; $k < @$l; $k++) {\n\
    \                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n                \
    \    return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}", "    my $n = @$l;\n    for (my $i = 0; $i < $n; $i++) {\n        for\
    \ (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my(@l) = @$l;\n    my(%h);\n    my($i, $j, $k);\n   \
    \ my($sum);", "    my($i, $j, $k);\n    for ($i = 0; $i < @$l; $i++) {\n     \
    \   for ($j = $i + 1; $j < @$l; $j++) {\n            for ($k = $j + 1; $k < @$l;\
    \ $k++) {\n                if ($l->[$i] + $l->[$j] + $l->[$k] == 0) {\n      \
    \              return 1;\n                }\n            }\n        }\n    }\n\
    \    return 0;\n}", "    my $n = scalar(@$l);\n    my $i;\n    my $j;\n    my\
    \ $k;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my(@l) = @$l;\n\
    \    my($i, $j, $k);\n    for ($i = 0; $i < @l; $i++) {\n\tfor ($j = $i + 1; $j\
    \ < @l; $j++) {\n\t    for ($k = $j + 1; $k < @l; $k++) {\n\t\tif ($l[$i] + $l[$j]\
    \ + $l[$k] == 0) {\n\t\t    return 1;\n\t\t}\n\t    }\n\t}\n    }\n    return\
    \ 0;\n}", "    my $i;\n    my $j;\n    my $k;\n    my $n = scalar(@$l);\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n    \
    \        for ($k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i] + $l->[$j]\
    \ + $l->[$k] == 0) {\n                    return 1;\n                }\n     \
    \       }\n        }\n    }\n    return 0;\n}", "    my %hash;\n    foreach my\
    \ $i (@$l) {\n        if (exists $hash{-$i}) {\n            return 1;\n      \
    \  }\n        $hash{$i} = 1;\n    }\n    return 0;\n}", "    my $n = @$l;\n  \
    \  for (my $i = 0; $i < $n; $i++) {\n        for (my $j = $i + 1; $j < $n; $j++)\
    \ {\n            for (my $k = $j + 1; $k < $n; $k++) {\n                if ($l->[$i]\
    \ + $l->[$j] + $l->[$k] == 0) {\n                    return 1;\n             \
    \   }\n            }\n        }\n    }\n    return 0;\n}", "    my %h;\n    foreach\
    \ my $i (@$l) {\n        foreach my $j (@$l) {\n            if ($i != $j) {\n\
    \                my $k = -($i + $j);\n                if (exists $h{$k}) {\n \
    \                   return 1;\n                }\n            }\n        }\n \
    \       $h{$i} = 1;\n    }\n    return 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
