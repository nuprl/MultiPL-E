language: pl
name: HumanEval_77_iscube
results:
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return 0\
    \ if $a < 0;\n    my $b = int(exp(log($a)/3));\n    return $b**3 == $a;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&iscube;\n     \
    \   if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == 0 || int(abs($a) ** (1/3)) ** 3 == abs($a);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n\
    \    return $b == int($b);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp268yem_7.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $x = int(sqrt($a));\n\
    \    return $x * $x * $x == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmptgrkuikp.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(($a)**(1/3));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return ($b * $b * $b == $a);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpz9qs_nsx.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n\
    \    return $b == int($b);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp268yem_7.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(($a)**(1/3));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        return 1 if $i * $i * $i == $a;\n \
    \       $i++;\n    }\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(($a)**(1/3));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = sqrt($a);\n\
    \    return $b == int($b);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmp268yem_7.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $c = int(cbrt($a));\n\
    \    return $c**3 == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpqtvcmq2w.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $c = int(cbrt($a));\n\
    \    return $c * $c * $c == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpl0sn3jfq.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        return 1 if $i * $i * $i == $a;\n \
    \       $i++;\n    }\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $x = int(cbrt($a));\n\
    \    return $x * $x * $x == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmptxqfd69g.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 1
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    for (my $i\
    \ = 1; $i <= $a; $i++) {\n        if ($i ** 3 == $a) {\n            return 1;\n\
    \        }\n    }\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a)) ** 3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpms2vza9t.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    return $a\
    \ == int(sqrt($a))**3;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpn987jor9.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b*$b*$b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpt2sojo5o.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(cbrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::cbrt called at /tmp/tmpoih_efbc.pl line 7.

    '
  stdout: ''
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
- exit_code: 255
  program: "# Write a function that takes an integer a and returns True \n# if this\
    \ ingeger is a cube of some integer number.\n# Note: you may assume the input\
    \ is always valid.\n# Examples:\nsub iscube {\n    my($a) = @_;\n    my $b = int(sqrt($a));\n\
    \    return $b * $b * $b == $a;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&iscube;\n        if(eq_deeply($candidate->(1),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(64),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(180),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1000),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1729),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t take sqrt of -1 at /tmp/tmpx1cja9la.pl line 7.

    '
  stdout: ok!ok!
  timestamp: 1660013058
