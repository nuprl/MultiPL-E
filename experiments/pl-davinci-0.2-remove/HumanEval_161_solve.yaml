name: HumanEval_161_solve
language: pl
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\nsub solve {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&solve;\n\
  \        if(eq_deeply($candidate->(\"AsDf\"),\"aSdF\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1234\"\
  ),\"4321\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"ab\"),\"AB\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"#a@C\"),\"#A@c\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #AsdfW^45\"),\"#aSDFw^45\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"#6@2\"),\"2@6#\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  #$a^D\"),\"#$A^d\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"#ccc\"),\"#CCC\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return reverse $s if $s !~ /[a-z]/i;\n    $s =~ s/([a-z])/uc $1/gei;\n\
    \    $s =~ s/([A-Z])/lc $1/ge;\n    return $s;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @res;\n    for\
    \ my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @res, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @res, lc $c;\n        } else\
    \ {\n            push @res, $c;\n        }\n    }\n    return join '', @res;\n\
    }", "    my $result = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n      \
    \      $result .= lc $c;\n        } else {\n            $result .= $c;\n     \
    \   }\n    }\n    return $result;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n   \
    \ for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .=\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n      \
    \  } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "  \
    \  my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $res = '';\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            $res .= lc $c;\n        } else {\n            $res .= $c;\n     \
    \   }\n    }\n    return $res;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    if ($s =~ /[a-zA-Z]/) {\n\
    \        $s =~ tr/a-zA-Z/A-Za-z/;\n    } else {\n        $s = reverse $s;\n  \
    \  }\n    return $s;\n}", "    $s =~ s/([a-z])/\\U$1/g;\n    $s =~ s/([A-Z])/\\\
    L$1/g;\n    return $s;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for (@s) {\n        if (/[a-z]/) {\n            push @r, uc $_;\n \
    \       } elsif (/[A-Z]/) {\n            push @r, lc $_;\n        } else {\n \
    \           push @r, $_;\n        }\n    }\n    return join '', @r;\n}", "   \
    \ my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my $res = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n      \
    \  } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n        } else {\n \
    \           $res .= $c;\n        }\n    }\n    return $res;\n}", "    my @s =\
    \ split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $res = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res\
    \ .= lc $c;\n        } else {\n            $res .= $c;\n        }\n    }\n   \
    \ return scalar reverse $res;\n}", "    my @s = split //, $s;\n    my @r;\n  \
    \  for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $r = '';\n \
    \   for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .=\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n      \
    \  } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "  \
    \  my $r = reverse $s;\n    return $r if $r eq $s;\n    $r =~ s/([a-zA-Z])/lc($1)\
    \ eq $1 ? uc($1) : lc($1)/ge;\n    return $r;\n}", "    my $r = '';\n    for my\
    \ $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n  \
    \          push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n \
    \   return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for (@s)\
    \ {\n        if (/[a-z]/) {\n            push @r, uc $_;\n        } elsif (/[A-Z]/)\
    \ {\n            push @r, lc $_;\n        } else {\n            push @r, $_;\n\
    \        }\n    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $rev = reverse\
    \ $s;\n    if ($rev =~ /[a-z]/i) {\n        return $rev;\n    }\n    return $s;\n\
    }", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my $res = '';\n    for my $c (split //, $s) {\n      \
    \  if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $res .= lc $c;\n        } else {\n            $res .= $c;\n \
    \       }\n    }\n    return $res;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for (@s) {\n        if (/[a-z]/) {\n            push @r, uc $_;\n       \
    \ } elsif (/[A-Z]/) {\n            push @r, lc $_;\n        } else {\n       \
    \     push @r, $_;\n        }\n    }\n    return join '', @r;\n}", "    my $r\
    \ = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my $result = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n      \
    \      $result .= lc $c;\n        } else {\n            $result .= $c;\n     \
    \   }\n    }\n    return scalar reverse $result;\n}", "    my @chars = split //,\
    \ $s;\n    my @result;\n    for my $char (@chars) {\n        if ($char =~ /[a-z]/)\
    \ {\n            push @result, uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n\
    \            push @result, lc $char;\n        } else {\n            push @result,\
    \ $char;\n        }\n    }\n    return join '', @result;\n}", "    my $r = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n   \
    \     } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", " \
    \   my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    return reverse\
    \ $s if $s !~ /[a-z]/i;\n    return join '', map {\n        if (/[a-z]/) {\n \
    \           tr/a-z/A-Z/;\n        } elsif (/[A-Z]/) {\n            tr/A-Z/a-z/;\n\
    \        } else {\n            $_;\n        }\n    } split //, $s;\n}", "    $s\
    \ = reverse $s if $s !~ /[a-z]/i;\n    $s =~ s/([a-z])/uc $1/gei;\n    $s =~ s/([A-Z])/lc\
    \ $1/gei;\n    return $s;\n}", "    my @s = split //, $s;\n    my @r;\n    for\
    \ my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n  \
    \      } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $res = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n      \
    \  } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n        } else {\n \
    \           $res .= $c;\n        }\n    }\n    return $res;\n}", "    my @s =\
    \ split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n  \
    \          push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n \
    \   return join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $result = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n   \
    \     } elsif ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n        } else\
    \ {\n            $result .= $c;\n        }\n    }\n    return $result;\n}", " \
    \   my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return @r ? join '', @r : reverse $s;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n  \
    \          push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n \
    \   return join '', @r;\n}", "    my @s = split //, $s;\n    my @res;\n    for\
    \ my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @res, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @res, lc $c;\n        } else\
    \ {\n            push @res, $c;\n        }\n    }\n    return join '', @res;\n\
    }", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            push @r, lc $c;\n        } else {\n            push @r, $c;\n\
    \        }\n    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n  \
    \          push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n \
    \   return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my\
    \ $i (0..$#s) {\n        if ($s[$i] =~ /[a-z]/) {\n            $r[$i] = uc $s[$i];\n\
    \        } elsif ($s[$i] =~ /[A-Z]/) {\n            $r[$i] = lc $s[$i];\n    \
    \    } else {\n            $r[$i] = $s[$i];\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n\
    \        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $result = '';\n    for my $c (split //, $s) {\n  \
    \      if ($c =~ /[a-z]/) {\n            $result .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $result .= lc $c;\n        } else {\n           \
    \ $result .= $c;\n        }\n    }\n    return $result;\n}", "    my @s = split\
    \ //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n  \
    \          push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push\
    \ @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n \
    \   return join '', @r;\n}", "    my $r = \"\";\n    for my $c (split //, $s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .=\
    \ $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my\
    \ @res;\n    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-z]/) {\n        \
    \    push @res, uc $s[$i];\n        } elsif ($s[$i] =~ /[A-Z]/) {\n          \
    \  push @res, lc $s[$i];\n        } else {\n            push @res, $s[$i];\n \
    \       }\n    }\n    return join '', @res;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for (my $i = 0; $i < length($s);\
    \ $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $r\
    \ .= lc($c);\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $r = '';\n    for (my $i = 0; $i\
    \ < length($s); $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n \
    \           $r .= lc($c);\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my\
    \ $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n     \
    \   } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n\
    \            push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "  \
    \  my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my\
    \ $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n     \
    \   } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n\
    \            push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "  \
    \  my $r = '';\n    for (my $i = 0; $i < length($s); $i++) {\n        my $c =\
    \ substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else\
    \ {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $res\
    \ = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res .=\
    \ lc $c;\n        } else {\n            $res .= $c;\n        }\n    }\n    return\
    \ $res;\n}", "    my @s = split //, $s;\n    my @r;\n    for (@s) {\n        if\
    \ (/[a-z]/) {\n            push @r, uc $_;\n        } elsif (/[A-Z]/) {\n    \
    \        push @r, lc $_;\n        } else {\n            push @r, $_;\n       \
    \ }\n    }\n    return join '', @r;\n}", "    my @a = split //, $s;\n    my $i\
    \ = 0;\n    while ($i < @a) {\n        if ($a[$i] =~ /[a-z]/) {\n            $a[$i]\
    \ = uc $a[$i];\n        } elsif ($a[$i] =~ /[A-Z]/) {\n            $a[$i] = lc\
    \ $a[$i];\n        }\n        $i++;\n    }\n    return join '', @a;\n}", "   \
    \ my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my @arr = split //, $s;\n    my $flag\
    \ = 0;\n    for my $i (0..$#arr) {\n        if ($arr[$i] =~ /[a-zA-Z]/) {\n  \
    \          $flag = 1;\n            if ($arr[$i] =~ /[a-z]/) {\n              \
    \  $arr[$i] = uc $arr[$i];\n            }\n            else {\n              \
    \  $arr[$i] = lc $arr[$i];\n            }\n        }\n    }\n    if ($flag ==\
    \ 0) {\n        return reverse $s;\n    }\n    return join '', @arr;\n}", "  \
    \  my @a = split //, $s;\n    my $l = 0;\n    for my $i (0..$#a) {\n        $l\
    \ = 1 if $a[$i] =~ /[a-zA-Z]/;\n        $a[$i] =~ tr/a-zA-Z/A-Za-z/;\n    }\n\
    \    $l ? join '', @a : reverse $s;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my $res = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n        } else\
    \ {\n            $res .= $c;\n        }\n    }\n    return $res;\n}", "    my\
    \ @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-z]/) {\n            push\
    \ @r, uc $s[$i];\n        } elsif ($s[$i] =~ /[A-Z]/) {\n            push @r,\
    \ lc $s[$i];\n        } else {\n            push @r, $s[$i];\n        }\n    }\n\
    \    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for\
    \ my $i (0..$#s) {\n        if ($s[$i] =~ /[a-z]/) {\n            push @r, uc\
    \ $s[$i];\n        } elsif ($s[$i] =~ /[A-Z]/) {\n            push @r, lc $s[$i];\n\
    \        } else {\n            push @r, $s[$i];\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s =\
    \ split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $i (0..$#s) {\n        if ($s[$i]\
    \ =~ /[a-z]/) {\n            $r[$i] = uc $s[$i];\n        } elsif ($s[$i] =~ /[A-Z]/)\
    \ {\n            $r[$i] = lc $s[$i];\n        } else {\n            $r[$i] = $s[$i];\n\
    \        }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n \
    \   my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my $l = length($s);\n    my $r = '';\n    for (my $i = 0;\
    \ $i < $l; $i++) {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/)\
    \ {\n            $c = uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $c = lc($c);\n        }\n        $r .= $c;\n    }\n    return $r;\n}", "   \
    \ my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-z]/) {\n\
    \            $r[$i] = uc $s[$i];\n        } elsif ($s[$i] =~ /[A-Z]/) {\n    \
    \        $r[$i] = lc $s[$i];\n        } else {\n            $r[$i] = $s[$i];\n\
    \        }\n    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $result\
    \ = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      $result .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $result\
    \ .= lc $c;\n        } else {\n            $result .= $c;\n        }\n    }\n\
    \    return $result;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n \
    \       if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my $r = reverse $s;\n    $r =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n      \
    \  if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n   \
    \ for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r,\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n   \
    \     } else {\n            push @r, $c;\n        }\n    }\n    return join '',\
    \ @r;\n}", "    my @s = split //, $s;\n    my @r;\n    my $l = 0;\n    for my\
    \ $i (0..$#s) {\n        if ($s[$i] =~ /[a-zA-Z]/) {\n            $l = 1;\n  \
    \          $s[$i] =~ tr/a-zA-Z/A-Za-z/;\n        }\n        push @r, $s[$i];\n\
    \    }\n    if ($l) {\n        return join '', @r;\n    } else {\n        return\
    \ join '', reverse @r;\n    }\n}", "    my @s = split //, $s;\n    my @r;\n  \
    \  for (@s) {\n        if (/[a-z]/) {\n            push @r, uc $_;\n        }\
    \ elsif (/[A-Z]/) {\n            push @r, lc $_;\n        } else {\n         \
    \   push @r, $_;\n        }\n    }\n    return join '', @r;\n}", "    my @s =\
    \ split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split //,\
    \ $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r\
    \ .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n \
    \       } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n\
    \            $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $res = '';\n\
    \    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $res\
    \ .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $res .= lc $c;\n \
    \       } else {\n            $res .= $c;\n        }\n    }\n    return $res;\n\
    }", "    my $result = \"\";\n    my $i = 0;\n    while ($i < length($s)) {\n \
    \       my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n           \
    \ $result .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $result .=\
    \ lc($c);\n        } else {\n            $result .= $c;\n        }\n        $i++;\n\
    \    }\n    return $result;\n}", "    my @s = split //, $s;\n    my @r;\n    my\
    \ $n = scalar @s;\n    for my $i (0..$n-1) {\n        if ($s[$i] =~ /[a-z]/) {\n\
    \            push @r, uc $s[$i];\n        } elsif ($s[$i] =~ /[A-Z]/) {\n    \
    \        push @r, lc $s[$i];\n        } else {\n            push @r, $s[$i];\n\
    \        }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n \
    \   my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my @arr = split //, $s;\n    my $flag = 0;\n    for my $i\
    \ (0..$#arr) {\n        if ($arr[$i] =~ /[a-zA-Z]/) {\n            $flag = 1;\n\
    \            if ($arr[$i] =~ /[a-z]/) {\n                $arr[$i] = uc $arr[$i];\n\
    \            } else {\n                $arr[$i] = lc $arr[$i];\n            }\n\
    \        }\n    }\n    if ($flag == 0) {\n        return reverse $s;\n    }\n\
    \    return join '', @arr;\n}", "    my @s = split //, $s;\n    my @r;\n    for\
    \ my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n  \
    \      } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my\
    \ @result;\n    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-z]/) {\n     \
    \       $s[$i] =~ tr/a-z/A-Z/;\n        } elsif ($s[$i] =~ /[A-Z]/) {\n      \
    \      $s[$i] =~ tr/A-Z/a-z/;\n        }\n        push @result, $s[$i];\n    }\n\
    \    return join '', @result;\n}", "    my @s = split //, $s;\n    my @r;\n  \
    \  for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    $s = reverse $s if $s !~ /[a-z]/i;\n    return join '', map {\n\
    \        if (/[a-z]/) {\n            tr/a-z/A-Z/;\n        } elsif (/[A-Z]/) {\n\
    \            tr/A-Z/a-z/;\n        } else {\n            $_;\n        }\n    }\
    \ split //, $s;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n      \
    \  $r .= $c =~ /[a-z]/ ? uc $c : $c =~ /[A-Z]/ ? lc $c : $c;\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $r = reverse $s;\n    return $r if $r eq $s;\n   \
    \ return join '', map {\n        if (/[a-z]/) {\n            uc $_;\n        }\
    \ elsif (/[A-Z]/) {\n            lc $_;\n        } else {\n            $_;\n \
    \       }\n    } split //, $s;\n}", "    my @s = split //, $s;\n    my @r;\n \
    \   for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my $r = '';\n   \
    \ for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .=\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n      \
    \  } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}", "  \
    \  my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n       \
    \ if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n     \
    \   }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n   \
    \ for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    my $i = 0;\n    while ($i < @s) {\n\
    \        if ($s[$i] =~ /[a-zA-Z]/) {\n            if ($s[$i] =~ /[a-z]/) {\n \
    \               $s[$i] =~ tr/a-z/A-Z/;\n            } else {\n               \
    \ $s[$i] =~ tr/A-Z/a-z/;\n            }\n        }\n        $i++;\n    }\n   \
    \ return join '', @s;\n}", "    my @a = split //, $s;\n    my $r = '';\n    for\
    \ my $c (@a) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n     \
    \   } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n  \
    \          $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split\
    \ //, $s;\n    my @res;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n\
    \            push @res, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n          \
    \  push @res, lc $c;\n        } else {\n            push @res, $c;\n        }\n\
    \    }\n    return join '', @res;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    foreach my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r,\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n   \
    \     } else {\n            push @r, $c;\n        }\n    }\n    return join '',\
    \ @r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = reverse $s;\n    $r =~ tr/a-zA-Z/A-Za-z/;\n\
    \    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for (@s) {\n\
    \        if (/[a-z]/) {\n            push @r, uc $_;\n        } elsif (/[A-Z]/)\
    \ {\n            push @r, lc $_;\n        } else {\n            push @r, $_;\n\
    \        }\n    }\n    return join '', @r;\n}", "    my $result = '';\n    for\
    \ my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n            $result .=\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $result .= lc $c;\n \
    \       } else {\n            $result .= $c;\n        }\n    }\n    return $result;\n\
    }", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c\
    \ =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            push @r, lc $c;\n        } else {\n            push @r, $c;\n\
    \        }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n \
    \   my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my @a = split //, $s;\n    my $i = 0;\n    while ($i < @a)\
    \ {\n        if ($a[$i] =~ /[a-z]/) {\n            $a[$i] = uc $a[$i];\n     \
    \   } elsif ($a[$i] =~ /[A-Z]/) {\n            $a[$i] = lc $a[$i];\n        }\n\
    \        $i++;\n    }\n    return join '', @a;\n}", "    my @s = split //, $s;\n\
    \    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my $str = '';\n    for my $i (0..length($s)-1) {\n       \
    \ my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n            $str .=\
    \ uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $str .= lc($c);\n  \
    \      } else {\n            $str .= $c;\n        }\n    }\n    return $str;\n\
    }", "    my $r = \"\";\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n           \
    \ $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n  \
    \  return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s =\
    \ split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return @r ? join '', @r : reverse $s;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for (@s) {\n        if (/[a-z]/) {\n            push @r,\
    \ uc $_;\n        } elsif (/[A-Z]/) {\n            push @r, lc $_;\n        }\
    \ else {\n            push @r, $_;\n        }\n    }\n    return join '', @r;\n\
    }", "    my @s = split //, $s;\n    my @r;\n    for my $i (0..$#s) {\n       \
    \ if ($s[$i] =~ /[a-z]/) {\n            $r[$i] = uc $s[$i];\n        } elsif ($s[$i]\
    \ =~ /[A-Z]/) {\n            $r[$i] = lc $s[$i];\n        } else {\n         \
    \   $r[$i] = $s[$i];\n        }\n    }\n    return join '', @r;\n}", "    my @s\
    \ = split //, $s;\n    my @r;\n    for (@s) {\n        if (/[a-z]/) {\n      \
    \      push @r, uc $_;\n        } elsif (/[A-Z]/) {\n            push @r, lc $_;\n\
    \        } else {\n            push @r, $_;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n\
    \        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $r = reverse\
    \ $s;\n    return $r if $r eq $s;\n    return join '', map {\n        my $c =\
    \ $_;\n        if ($c =~ /[a-z]/) {\n            uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            lc $c;\n        } else {\n            $c;\n        }\n\
    \    } split //, $s;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c\
    \ (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n   \
    \         push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my\
    \ @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n        \
    \    push @r, lc $c;\n        } else {\n            push @r, $c;\n        }\n\
    \    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my $t = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $t .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $t .=\
    \ lc $c;\n        } else {\n            $t .= $c;\n        }\n    }\n    return\
    \ $t;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~\
    \ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n  \
    \          $r .= lc $c;\n        } else {\n            $r .= $c;\n        }\n\
    \    }\n    return $r;\n}", "    my $r = '';\n    for my $c (split //, $s) {\n\
    \        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n            $r .= $c;\n\
    \        }\n    }\n    return $r;\n}", "    my @s = split //, $s;\n    my @r;\n\
    \    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n\
    \        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else\
    \ {\n            push @r, $c;\n        }\n    }\n    return join '', @r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~\
    \ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n\
    \            push @r, lc $c;\n        } else {\n            push @r, $c;\n   \
    \     }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push @r,\
    \ uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n   \
    \     } else {\n            push @r, $c;\n        }\n    }\n    return join '',\
    \ @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $r = reverse $s;\n    return $r =~ /[a-z]/ ? $r :\
    \ $s;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $r = '';\n    for (my $i = 0; $i < length($s); $i++)\
    \ {\n        my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n      \
    \      $r .= uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my @s = split //, $s;\n    my @r;\n    for (@s) {\n        if (/[a-z]/) {\n\
    \            push @r, uc $_;\n        } elsif (/[A-Z]/) {\n            push @r,\
    \ lc $_;\n        } else {\n            push @r, $_;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $res = '';\n    for my $c (split //, $s) {\n     \
    \   if ($c =~ /[a-z]/) {\n            $res .= uc $c;\n        } elsif ($c =~ /[A-Z]/)\
    \ {\n            $res .= lc $c;\n        } else {\n            $res .= $c;\n \
    \       }\n    }\n    return $res;\n}", "    if ($s =~ /[a-zA-Z]/) {\n       \
    \ $s =~ tr/a-zA-Z/A-Za-z/;\n    } else {\n        $s = reverse $s;\n    }\n  \
    \  return $s;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s =\
    \ split //, $s;\n    my @r;\n    my $r = 0;\n    for my $i (0..$#s) {\n      \
    \  if ($s[$i] =~ /[a-zA-Z]/) {\n            $r = 1;\n            push @r, $s[$i]\
    \ =~ /[a-z]/ ? uc $s[$i] : lc $s[$i];\n        } else {\n            push @r,\
    \ $s[$i];\n        }\n    }\n    return $r ? join '', @r : scalar reverse $s;\n\
    }", "    my @s = split //, $s;\n    my @r;\n    for my $i (0..$#s) {\n       \
    \ if ($s[$i] =~ /[a-z]/) {\n            $r[$i] = uc $s[$i];\n        } elsif ($s[$i]\
    \ =~ /[A-Z]/) {\n            $r[$i] = lc $s[$i];\n        } else {\n         \
    \   $r[$i] = $s[$i];\n        }\n    }\n    return join '', @r;\n}", "    my $r\
    \ = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n\
    \        } else {\n            $r .= $c;\n        }\n    }\n    return $r;\n}",
  "    my $r = '';\n    for my $c (split //, $s) {\n        if ($c =~ /[a-z]/) {\n\
    \            $r .= uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            $r .=\
    \ lc $c;\n        } else {\n            $r .= $c;\n        }\n    }\n    return\
    \ $r;\n}", "    if ($s =~ /[a-zA-Z]/) {\n        $s =~ tr/a-zA-Z/A-Za-z/;\n  \
    \  } else {\n        $s = reverse $s;\n    }\n    return $s;\n}", "    my $r =\
    \ '';\n    my $i = 0;\n    my $l = length($s);\n    while ($i < $l) {\n      \
    \  my $c = substr($s, $i, 1);\n        if ($c =~ /[a-z]/) {\n            $r .=\
    \ uc($c);\n        } elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n    \
    \    } else {\n            $r .= $c;\n        }\n        $i++;\n    }\n    return\
    \ $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n    \
    \    if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c =~\
    \ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my $r =\
    \ '';\n    for (my $i = 0; $i < length($s); $i++) {\n        my $c = substr($s,\
    \ $i, 1);\n        if ($c =~ /[a-z]/) {\n            $r .= uc($c);\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc($c);\n        } else {\n     \
    \       $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s =\
    \ split //, $s;\n    my @res;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/)\
    \ {\n            push @res, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n      \
    \      push @res, lc $c;\n        } else {\n            push @res, $c;\n     \
    \   }\n    }\n    return join '', @res;\n}", "    my $r = '';\n    for my $c (split\
    \ //, $s) {\n        if ($c =~ /[a-z]/) {\n            $r .= uc $c;\n        }\
    \ elsif ($c =~ /[A-Z]/) {\n            $r .= lc $c;\n        } else {\n      \
    \      $r .= $c;\n        }\n    }\n    return $r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $i (0..$#s) {\n        if ($s[$i] =~ /[a-z]/) {\n\
    \            $r[$i] = uc $s[$i];\n        } elsif ($s[$i] =~ /[A-Z]/) {\n    \
    \        $r[$i] = lc $s[$i];\n        } else {\n            $r[$i] = $s[$i];\n\
    \        }\n    }\n    return join '', @r;\n}", "    my @s = split //, $s;\n \
    \   my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n            push\
    \ @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n\
    \        } else {\n            push @r, $c;\n        }\n    }\n    return join\
    \ '', @r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s) {\n\
    \        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif ($c\
    \ =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n            push\
    \ @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @s = split //,\
    \ $s;\n    my @r;\n    for my $c (@s) {\n        if ($c =~ /[a-z]/) {\n      \
    \      push @r, uc $c;\n        } elsif ($c =~ /[A-Z]/) {\n            push @r,\
    \ lc $c;\n        } else {\n            push @r, $c;\n        }\n    }\n    return\
    \ join '', @r;\n}", "    my $r = reverse $s;\n    $r =~ tr/a-zA-Z/A-Za-z/;\n \
    \   return $r;\n}", "    my @s = split //, $s;\n    my @r;\n    for my $c (@s)\
    \ {\n        if ($c =~ /[a-z]/) {\n            push @r, uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            push @r, lc $c;\n        } else {\n         \
    \   push @r, $c;\n        }\n    }\n    return join '', @r;\n}", "    my @chars\
    \ = split //, $s;\n    my @result;\n    for my $char (@chars) {\n        if ($char\
    \ =~ /[a-z]/) {\n            push @result, uc $char;\n        } elsif ($char =~\
    \ /[A-Z]/) {\n            push @result, lc $char;\n        } else {\n        \
    \    push @result, $char;\n        }\n    }\n    return join '', @result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
