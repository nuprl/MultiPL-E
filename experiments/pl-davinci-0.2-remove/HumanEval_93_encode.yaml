name: HumanEval_93_encode
language: pl
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\nsub encode {\n    my($message) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
  \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
  ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
  ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT\
  \ kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    my $vowel_length\
    \ = scalar @vowels;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n    my\
    \ $vowel_to_find = \"\";\n    my $vowel_to_find_index = 0;\n    my $vowel_to_find_next_index\
    \ = 0;\n    my $vowel_to_find_next = \"\";\n    my $vowel_to_find_next_next =\
    \ \"\";\n    my $vowel_to_find_next_next_index = 0;\n    my $vowel_to_find_next_next_next\
    \ = \"\";\n    my $vowel_to_find_next_next_next_index = 0;\n    my $vowel_to_find_next_next_next_next\
    \ = \"\";\n    my $vowel_to_find_next_next_next_next_index = 0;\n    my $vowel_to_find_next_next_next_next_next\
    \ = \"\";\n    my $vowel_to_find_next_next_next_next_next_index = 0;\n    my $vowel_to_find_next_next_next_next_next_next\
    \ = \"\";\n    my $vowel_to_find_next_next_next_next_next_next_index = 0;\n  \
    \  my $vowel_to_find_next_next_next_next_next_next_next = \"\";\n    my $vowel_to_find_next_next_next_next_next_next_next_index\
    \ = 0;\n    my $vowel_to_find_next_next_next_next_next_next_next_next = \"\";\n\
    \    my $vowel_to_find_next_next_next_next_next_next_next_", "    my $encoded\
    \ = \"\";\n    foreach my $char (split //, $message) {\n        if ($char =~ /[a-z]/)\
    \ {\n            $encoded .= chr(ord($char) - 32);\n        } elsif ($char =~\
    \ /[A-Z]/) {\n            $encoded .= chr(ord($char) + 32);\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", " \
    \   my @message = split(//, $message);\n    my @vowels = ('a', 'e', 'i', 'o',\
    \ 'u');\n    my @encoded_message;\n    for my $letter (@message) {\n        if\
    \ (grep {$_ eq $letter} @vowels) {\n            push(@encoded_message, $vowels[(grep\
    \ {$_ eq $letter} @vowels)[0] + 2]);\n        }\n        else {\n            push(@encoded_message,\
    \ $letter);\n        }\n    }\n    return join(\"\", @encoded_message);\n}", " \
    \   my $encoded_message = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n    my %vowel_map = (\n        \"a\" => \"c\",\n        \"e\" => \"\
    g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\"\
    ,\n    );\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc($char);\n\
    \            }\n            else {\n                $char = lc($char);\n     \
    \       }\n        }\n        if (grep {$_ eq lc($char)} @vowels) {\n        \
    \    $char = $vowel_map{lc($char)};\n        }\n        $encoded_message .= $char;\n\
    \    }\n    return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @alphabet\
    \ = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %alphabet\
    \ = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    my $i = 0;\n    for my $c\
    \ (split //, $message) {\n        if ($vowels{lc $c}) {\n            $encoded\
    \ .= $alphabet[($alphabet{lc $c} + 2) % 26];\n        } else {\n            $encoded\
    \ .= $c;\n        }\n    }\n    return $encoded;\n}", "    my @chars = split(//,\
    \ $message);\n    my @encoded_chars = ();\n    foreach my $char (@chars) {\n \
    \       if ($char =~ /[a-z]/) {\n            push(@encoded_chars, chr(ord($char)\
    \ - 32));\n        } elsif ($char =~ /[A-Z]/) {\n            push(@encoded_chars,\
    \ chr(ord($char) + 32));\n        } else {\n            push(@encoded_chars, $char);\n\
    \        }\n    }\n    my $encoded_message = join('', @encoded_chars);\n    $encoded_message\
    \ =~ s/[aeiou]/chr(ord($&) + 2)/eg;\n    return $encoded_message;\n}", "    my\
    \ @message = split //, $message;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my @encoded_message;\n    for my $letter (@message) {\n        if ($letter\
    \ =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n            for my $vowel\
    \ (@vowels) {\n                if ($letter eq $vowel) {\n                    $letter\
    \ = chr(ord($letter) + 2);\n                }\n            }\n        }\n    \
    \    elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n     \
    \       for my $vowel (@vowels) {\n                if ($letter eq $vowel) {\n\
    \                    $letter = chr(ord($letter) + 2);\n                }\n   \
    \         }\n        }\n        push @encoded_message, $letter;\n    }\n    return\
    \ join '', @encoded_message;\n}", "    my $encoded = '';\n    my %vowels = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc $char;\n            } else {\n                $char = lc\
    \ $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n     \
    \       $char = $vowels{lc $char};\n        }\n        $encoded .= $char;\n  \
    \  }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n    my @message_array\
    \ = split(//, $message);\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\"\
    );\n    foreach my $letter (@message_array) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $letter =~ tr/a-z/A-Z/;\n            $encoded_message .= $letter;\n\
    \        }\n        elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n\
    \            $encoded_message .= $letter;\n        }\n        else {\n       \
    \     $encoded_message .= $letter;\n        }\n    }\n    foreach my $vowel (@vowels)\
    \ {\n        my $next_vowel = $vowels[($vowels[$vowel] + 1) % 5];\n        my\
    \ $next_next_vowel = $vowels[($vowels[$vowel] + 2) % 5];\n        $encoded_message\
    \ =~ s/$vowel/$next_next_vowel/g;\n        $encoded_message =~ s/$next_vowel/$next_next_vowel/g;\n\
    \    }\n    return $encoded_message;\n}", "    my $result = '';\n    my %vowels\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $result .= uc $char;\n            } else {\n                $result\
    \ .= lc $char;\n            }\n        } elsif ($char =~ /[aeiou]/i) {\n     \
    \       if ($char =~ /[aeiou]/) {\n                $result .= uc $vowels{lc $char};\n\
    \            } else {\n                $result .= lc $vowels{uc $char};\n    \
    \        }\n        } else {\n            $result .= $char;\n        }\n    }\n\
    \    return $result;\n}", "    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my @encoded;\n\
    \    for my $char (@message) {\n        if ($vowels{lc $char}) {\n           \
    \ my $index = firstidx { $_ eq lc $char } @vowels;\n            $index = ($index\
    \ + 2) % 5;\n            push @encoded, uc $vowels[$index];\n        }\n     \
    \   else {\n            push @encoded, uc $char;\n        }\n    }\n    return\
    \ join '', @encoded;\n}", "    my $encoded_message = '';\n    my %vowels = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    foreach my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            $encoded_message .= $char =~\
    \ /[a-z]/ ? uc $char : lc $char;\n        }\n        else {\n            $encoded_message\
    \ .= $char;\n        }\n    }\n    foreach my $vowel (keys %vowels) {\n      \
    \  $encoded_message =~ s/$vowel/$vowels{$vowel}/g;\n    }\n    return $encoded_message;\n\
    }", "    my $result = \"\";\n    my %vowels = (\n        'a' => 'c',\n       \
    \ 'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    for my $char (split //, $message) {\n        if ($char =~ /[A-Z]/)\
    \ {\n            $result .= lc $char;\n        } elsif ($char =~ /[a-z]/) {\n\
    \            $result .= uc $char;\n        } else {\n            $result .= $char;\n\
    \        }\n    }\n    for my $vowel (keys %vowels) {\n        $result =~ s/$vowel/$vowels{$vowel}/g;\n\
    \    }\n    return $result;\n}", "    my $encoded = '';\n    my %vowels = map\
    \ { $_ => 1 } qw(a e i o u);\n    my @alphabet = ('a'..'z');\n    my %alphabet\
    \ = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    for my $letter (split //,\
    \ $message) {\n        if ($vowels{lc $letter}) {\n            my $index = $alphabet{lc\
    \ $letter};\n            $index += 2;\n            $index -= 26 if $index > 25;\n\
    \            $letter = $alphabet[$index];\n        }\n        $encoded .= uc $letter\
    \ eq $letter ? lc $letter : uc $letter;\n    }\n    return $encoded;\n}", "  \
    \  my $new_message = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash =\
    \ {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    };\n    my $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_hash = {};\n    my $i =\
    \ 0;\n    foreach my $letter (split //, $alphabet) {\n        $alphabet_hash->{$letter}\
    \ = $i;\n        $i++;\n    }\n    foreach my $letter (split //, $message) {\n\
    \        if ($vowels =~ /$letter/) {\n            $new_message .= $vowels_hash->{$letter};\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            my $new_letter = $alphabet_hash->{$letter}\
    \ + 2;\n            $new_letter = $new_letter % 26;\n            $new_message\
    \ .= $alphabet[$new_letter];\n        } elsif ($letter =~ /[A-Z]/) {\n       \
    \     my $new_letter = $alphabet_hash->{lc($letter)} + 2;\n            $new_letter\
    \ = $new_letter % 26;\n            $new_message .= uc($alphabet[$new_letter]);\n\
    \        } else {\n            $new_message .= $letter;\n        }\n    }\n  \
    \  return $new_message;\n}", "    my $encoded_message = \"\";\n    my @alphabet\
    \ = ('a'..'z');\n    my @vowels = ('a','e','i','o','u');\n    my %vowel_map =\
    \ (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o'\
    \ => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter (split(//, $message))\
    \ {\n        if (grep {$_ eq $letter} @vowels) {\n            $encoded_message\
    \ .= $vowel_map{$letter};\n        }\n        elsif (grep {$_ eq $letter} @alphabet)\
    \ {\n            $encoded_message .= uc($letter);\n        }\n        else {\n\
    \            $encoded_message .= $letter;\n        }\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my $vowel_index\
    \ = 0;\n    my @letters = split(//, $message);\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/i) {\n            $letter =~ tr/a-z/A-Z/;\n\
    \            if ($letter =~ /[aeiou]/i) {\n                $vowel_index = index(@vowels,\
    \ lc($letter));\n                $letter = $vowels[($vowel_index + 2) % 5];\n\
    \            }\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }", "    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels = map\
    \ { $vowels[$_] => $vowels[($_ + 2) % 26] } (0..$#vowels);\n    for my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            $encoded .= $char\
    \ =~ /[a-z]/ ? uc $char : lc $char;\n        }\n        else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    $encoded =~ s/([aeiou])/$vowels{$1}/g;\n  \
    \  return $encoded;\n}", "    my $encoded_message = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $vowels_hash = {\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    };\n    my\
    \ $vowels_hash_reverse = {\n        'c' => 'a',\n        'g' => 'e',\n       \
    \ 'k' => 'i',\n        'q' => 'o',\n        'y' => 'u',\n    };\n    my @message_array\
    \ = split(//, $message);\n    foreach my $char (@message_array) {\n        if\
    \ ($char =~ /[a-z]/i) {\n            if ($char =~ /[A-Z]/) {\n               \
    \ $char = lc($char);\n            } else {\n                $char = uc($char);\n\
    \            }\n        }\n        if ($char =~ /[$vowels]/i) {\n            $char\
    \ = $vowels_hash->{$char};\n        }\n        $encoded_message .= $char;\n  \
    \  }\n    return $encoded_message;\n}", "    my @message = split //, $message;\n\
    \    my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my %alphabet = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    my @encoded_message;\n\
    \    for my $letter (@message) {\n        if ($vowels{$letter}) {\n          \
    \  my $index = $alphabet{$letter};\n            $index += 2;\n            $index\
    \ -= 26 if $index > 25;\n            push @encoded_message, $alphabet[$index];\n\
    \        }\n        else {\n            push @encoded_message, $letter;\n    \
    \    }\n    }\n    return join '', @encoded_message;\n}", "    my @letters = split\
    \ //, $message;\n    my $encoded_message = '';\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            $encoded_message .= chr(ord($letter)\
    \ - 32);\n        } elsif ($letter =~ /[A-Z]/) {\n            $encoded_message\
    \ .= chr(ord($letter) + 32);\n        } else {\n            $encoded_message .=\
    \ $letter;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_len = length($alphabet);\n    my $vowels_len = length($vowels);\n\
    \    my $index = 0;\n    my $index_vowel = 0;\n    my $index_alphabet = 0;\n \
    \   my $char = \"\";\n    my $char_vowel = \"\";\n    my $char_alphabet = \"\"\
    ;\n    my $char_encoded = \"\";\n    my $message_len = length($message);\n   \
    \ while ($index < $message_len) {\n        $char = substr($message, $index, 1);\n\
    \        $char_encoded = $char;\n        $index_vowel = 0;\n        while ($index_vowel\
    \ < $vowels_len) {\n            $char_vowel = substr($vowels, $index_vowel, 1);\n\
    \            if ($char_vowel eq $char) {\n                $index_alphabet = index($alphabet,\
    \ $char_vowel);\n                $index_alphabet = ($index_alphabet + 2) % $alphabet_len;\n\
    \                $char_encoded = substr($alphabet, $index_alphabet, 1);\n    \
    \            last;\n            }\n            $index_vowel++;\n        }\n  \
    \      if ($char eq uc($char)) {\n            $char_encoded = uc($char_encoded);\n\
    \        }\n        $encoded = $encoded . $char_encoded;\n        $index++;\n\
    \    }\n    return $encoded;\n}", "    my @message = split //, $message;\n   \
    \ my @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z);\n    my %vowels = map {$_ => 1} @vowels;\n    my\
    \ %alphabet = map {$_ => 1} @alphabet;\n    my $encoded_message = '';\n    foreach\
    \ my $letter (@message) {\n        if ($vowels{$letter}) {\n            my $index\
    \ = 0;\n            my $new_letter = '';\n            foreach my $alpha (@alphabet)\
    \ {\n                if ($alpha eq $letter) {\n                    $new_letter\
    \ = $alphabet[$index + 2];\n                    last;\n                }\n   \
    \             $index++;\n            }\n            $encoded_message .= $new_letter;\n\
    \        }\n        elsif ($alphabet{$letter}) {\n            if ($letter eq lc($letter))\
    \ {\n                $encoded_message .= uc($letter);\n            }\n       \
    \     else {\n                $encoded_message .= lc($letter);\n            }\n\
    \        }\n        else {\n            $encoded_message .= $letter;\n       \
    \ }\n    }\n    return $encoded_message;\n}", "    my $encoded_message = \"\"\
    ;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_hash = map { $_\
    \ => 1 } @vowels;\n    my @alphabet = ('a'..'z');\n    my %alphabet_hash = map\
    \ { $alphabet[$_] => $_ } 0..$#alphabet;\n    my $vowel_index = 0;\n    my $alphabet_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $alphabet_count = 0;\n    my $vowel_key\
    \ = \"\";\n    my $alphabet_key = \"\";\n    my $vowel_value = \"\";\n    my $alphabet_value\
    \ = \"\";\n    my $vowel_next_value = \"\";\n    my $alphabet_next_value = \"\"\
    ;\n    my $vowel_next_next_value = \"\";\n    my $alphabet_next_next_value = \"\
    \";\n    my $vowel_next_next_next_value = \"\";\n    my $alphabet_next_next_next_value\
    \ = \"\";\n    my $vowel_next_next_next_next_value = \"\";\n    my $alphabet_next_next_next_next_value\
    \ = \"\";\n    my $vowel_next_next_next_next_next_value = \"\";\n    my $alphabet_next_next_next_next_next_value\
    \ = \"\";\n    my $vowel_next_next_next_next_next_next_value = \"\";\n    my $alphabet_next_next_next_next_next_next_value\
    \ = \"\";\n    my $vowel_next_next_next_next_next_next_next_value = \"\";\n  \
    \  my $alphabet_next_next_next_next_next_next_next_value = \"\";\n    my $vowel_next_next_next_next_next_next_next_next_value\
    \ = \"\";\n    my $alphabet_next_next_next_next_next_next_next_next", "    my\
    \ $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n        \
    \    if ($char =~ /[a-z]/) {\n                $char = uc $char;\n            }\
    \ else {\n                $char = lc $char;\n            }\n        }\n      \
    \  if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc $char};\n      \
    \  }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", "    my @message\
    \ = split //, $message;\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %vowels = map {\
    \ $vowels[$_] => $vowels[($_ + 2) % 5] } 0..$#vowels;\n    my %alphabet = map\
    \ { $alphabet[$_] => $_ } 0..$#alphabet;\n    my @encoded;\n    for my $letter\
    \ (@message) {\n        if (exists $vowels{$letter}) {\n            push @encoded,\
    \ $vowels{$letter};\n        } elsif (exists $alphabet{$letter}) {\n         \
    \   my $index = $alphabet{$letter};\n            my $new_index = ($index + 2)\
    \ % 26;\n            push @encoded, $alphabet[$new_index];\n        } else {\n\
    \            push @encoded, $letter;\n        }\n    }\n    return join '', @encoded;\n\
    }", "    my $encoded = '';\n    my @vowels = ('a'..'z');\n    my %vowels = map\
    \ { $vowels[$_] => $vowels[($_ + 2) % 26] } (0..$#vowels);\n    foreach my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            $encoded\
    \ .= $char =~ /[a-z]/ ? uc $char : lc $char;\n        } else {\n            $encoded\
    \ .= $vowels{lc $char} || $char;\n        }\n    }\n    return $encoded;\n}",
  "    my @message = split //, $message;\n    my @vowels = qw(a e i o u);\n    my\
    \ @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my\
    \ %vowels = map { $vowels[$_] => $vowels[($_ + 2) % 5] } 0..4;\n    my %alphabet\
    \ = map { $alphabet[$_] => $_ } 0..25;\n    my $encoded = '';\n    for my $letter\
    \ (@message) {\n        if (exists $vowels{$letter}) {\n            $encoded .=\
    \ $vowels{$letter};\n        } elsif (exists $alphabet{$letter}) {\n         \
    \   my $index = $alphabet{$letter};\n            $encoded .= $alphabet[($index\
    \ + 2) % 26];\n        } else {\n            $encoded .= $letter;\n        }\n\
    \    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    foreach my $char\
    \ (split //, $message) {\n        if ($char =~ /[A-Z]/) {\n            $encoded\
    \ .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n            $encoded .=\
    \ uc($char);\n        } else {\n            $encoded .= $char;\n        }\n  \
    \  }\n    foreach my $char (split //, $encoded) {\n        if ($vowels =~ /$char/)\
    \ {\n            my $index = index($vowels, $char);\n            my $new_index\
    \ = ($index + 2) % 5;\n            substr($encoded, $index, 1, substr($vowels,\
    \ $new_index, 1));\n        }\n    }\n    return $encoded;\n}", "    my $encoded\
    \ = \"\";\n    my @letters = split(//, $message);\n    foreach my $letter (@letters)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            $encoded .= chr(ord($letter)\
    \ - 32);\n        } elsif ($letter =~ /[A-Z]/) {\n            $encoded .= chr(ord($letter)\
    \ + 32);\n        } else {\n            $encoded .= $letter;\n        }\n    }\n\
    \    return $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $vowel_index\
    \ = 0;\n    my $alphabet_index = 0;\n    my $vowel_position = 0;\n    my $alphabet_position\
    \ = 0;\n    my $vowel_position_in_alphabet = 0;\n    my $vowel_position_in_alphabet_plus_two\
    \ = 0;\n    my $vowel_position_in_alphabet_plus_two_char = \"\";\n    my $vowel_position_in_alphabet_char\
    \ = \"\";\n    my $vowel_position_in_alphabet_plus_two_index = 0;\n    my $vowel_position_in_alphabet_index\
    \ = 0;\n    my $vowel_position_in_alphabet_plus_two_position = 0;\n    my $vowel_position_in_alphabet_position\
    \ = 0;\n    my $vowel_position_in_alphabet_plus_two_position_in_alphabet = 0;\n\
    \    my $vowel_position_in_alphabet_position_in_alphabet = 0;\n    my $vowel_position_in_alphabet_plus_two_position_in_alphabet_char\
    \ = \"\";\n    my $vowel_position_in_alphabet_position_in_alphabet_char = \"\"\
    ;\n    my $vowel_position_in_alphabet_plus_two_position_in_alphabet_index = 0;\n\
    \    my $vowel_position_in_alphabet_position_in_alphabet_index = 0;\n    my $vowel_position_in_alphabet_plus_two_position_in_alphabet_position\
    \ = 0;\n    my $vowel_position_in_alphabet_position_in_alphabet_position = 0;\n\
    \    my $vowel", "    my $encoded = '';\n    my @vowels = qw(a e i o u);\n   \
    \ my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    for my\
    \ $char (split //, $message) {\n        if ($vowels{lc $char}) {\n           \
    \ $encoded .= $vowels[($vowel_index + 2) % @vowels];\n            $vowel_index\
    \ = ($vowel_index + 1) % @vowels;\n        }\n        else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_2 = \"cgjkqsxz\";\n   \
    \ my $vowels_3 = \"bdfhmnprtvwy\";\n    my $vowels_4 = \"a\";\n    my $vowels_5\
    \ = \"e\";\n    my $vowels_6 = \"i\";\n    my $vowels_7 = \"o\";\n    my $vowels_8\
    \ = \"u\";\n    my $vowels_9 = \"a\";\n    my $vowels_10 = \"e\";\n    my $vowels_11\
    \ = \"i\";\n    my $vowels_12 = \"o\";\n    my $vowels_13 = \"u\";\n    my $vowels_14\
    \ = \"a\";\n    my $vowels_15 = \"e\";\n    my $vowels_16 = \"i\";\n    my $vowels_17\
    \ = \"o\";\n    my $vowels_18 = \"u\";\n    my $vowels_19 = \"a\";\n    my $vowels_20\
    \ = \"e\";\n    my $vowels_21 = \"i\";\n    my $vowels_22 = \"o\";\n    my $vowels_23\
    \ = \"u\";\n    my $vowels_24 = \"a\";\n    my $vowels_25 = \"e\";\n    my $vowels_26\
    \ = \"i\";\n    my $vowels_27 = \"o\";\n    my $vowels_28 = \"u\";\n    my $vowels_29\
    \ = \"a\";\n    my $vowels_30 = \"e\";\n    my $vowels_31 = \"i\";\n    my $vowels_32\
    \ = \"o\";\n    my $vowels_33 = \"u\";\n    my $vowels_34 = \"a\";\n    my $vowels_35\
    \ = \"e\";\n    my $vowels_36 = \"i\";\n    my $vowels_37 = \"o\";\n    my $vowels_",
  "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded =\
    \ \"cgjkmps\";\n    my $vowels_encoded_index = 0;\n    my $letter;\n    my $letter_index;\n\
    \    my $letter_encoded;\n    my $letter_encoded_index;\n    my $is_vowel;\n \
    \   my $is_upper;\n    my $is_lower;\n    my $upper_case_letter;\n    my $lower_case_letter;\n\
    \    my $upper_case_letter_encoded;\n    my $lower_case_letter_encoded;\n    my\
    \ $upper_case_letter_encoded_index;\n    my $lower_case_letter_encoded_index;\n\
    \    my $upper_case_letter_index;\n    my $lower_case_letter_index;\n    my $upper_case_letter_encoded_index;\n\
    \    my $lower_case_letter_encoded_index;\n    my $upper_case_letter_encoded;\n\
    \    my $lower_case_letter_encoded;\n    my $upper_case_letter_encoded_index;\n\
    \    my $lower_case_letter_encoded_index;\n    my $upper_case_letter_index;\n\
    \    my $lower_case_letter_index;\n    my $upper_case_letter_encoded_index;\n\
    \    my $lower_case_letter_encoded_index;\n    my $upper_case_letter_encoded;\n\
    \    my $lower_case_letter_encoded;\n    my $upper_case_letter_encoded_index;\n\
    \    my $lower_case_letter_encoded_index;\n    my $upper_case_letter_index;\n\
    \    my $lower_case_letter_index;\n    my $upper_case_letter_encoded_index;\n\
    \    my $lower_case_letter_encoded_index;\n    my $upper_case_letter_encoded;\n\
    \    my $lower_case_letter_encoded;\n    my $upper_case_letter_encoded_index;\n\
    \    my $lower_", "    my @message = split(//, $message);\n    my @vowels = qw(a\
    \ e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z);\n    my %vowels = map { $vowels[$_] => $_ } 0..$#vowels;\n    my %alphabet\
    \ = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    my $result = \"\";\n    for\
    \ my $letter (@message) {\n        if (exists $vowels{$letter}) {\n          \
    \  $result .= $alphabet[$alphabet{$letter} + 2];\n        } else {\n         \
    \   $result .= $letter;\n        }\n    }\n    return $result;\n}", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for my $letter (split //, $message) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            my $index = index($alphabet, lc($letter));\n            if ($index\
    \ != -1) {\n                $letter = substr($alphabet, ($index + 2) % 26, 1);\n\
    \            }\n            if ($vowels =~ /$letter/i) {\n                $letter\
    \ = uc($letter);\n            }\n        }\n        $encoded .= $letter;\n   \
    \ }\n    return $encoded;\n}", "    my $encoded = '';\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = (\n        'a' => 'c',\n        'b' => 'd',\n        'c' => 'e',\n       \
    \ 'd' => 'f',\n        'e' => 'g',\n        'f' => 'h',\n        'g' => 'i',\n\
    \        'h' => 'j',\n        'i' => 'k',\n        'j' => 'l',\n        'k' =>\
    \ 'm',\n        'l' => 'n',\n        'm' => 'o',\n        'n' => 'p',\n      \
    \  'o' => 'q',\n        'p' => 'r',\n        'q' => 's',\n        'r' => 't',\n\
    \        's' => 'u',\n        't' => 'v',\n        'u' => 'w',\n        'v' =>\
    \ 'x',\n        'w' => 'y',\n        'x' => 'z',\n        'y' => 'a',\n      \
    \  'z' => 'b',\n    );\n    for my $char (split //, $message) {\n        if ($vowels{$char})\
    \ {\n            $encoded .= $alphabet{$char};\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded .= lc $char;\n        } elsif ($char =~ /[a-z]/) {\n\
    \            $encoded .= uc $char;\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\"\
    ;\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map\
    \ { $_ => 1 } @vowels;\n    my %alphabet = map { $_ => 1 } (\"a\"..\"z\");\n \
    \   my @alphabet = (\"a\"..\"z\");\n    for my $char (split //, $message) {\n\
    \        if ($alphabet{$char}) {\n            if ($vowels{$char}) {\n        \
    \        my $index = 0;\n                for my $i (0..$#alphabet) {\n       \
    \             if ($alphabet[$i] eq $char) {\n                        $index =\
    \ $i;\n                        last;\n                    }\n                }\n\
    \                $index += 2;\n                $index %= 26;\n               \
    \ $encoded .= $alphabet[$index];\n            } else {\n                if ($char\
    \ eq uc($char)) {\n                    $encoded .= lc($char);\n              \
    \  } else {\n                    $encoded .= uc($char);\n                }\n \
    \           }\n        } else {\n            $encoded .= $char;\n        }\n \
    \   }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $vowel_index\
    \ = 0;\n    my $alphabet_index = 0;\n    my $vowel_char = \"\";\n    my $alphabet_char\
    \ = \"\";\n    my $char = \"\";\n    my $i = 0;\n    for ($i = 0; $i < length($message);\
    \ $i++) {\n        $char = substr($message, $i, 1);\n        $vowel_index = index($vowels,\
    \ $char);\n        if ($vowel_index >= 0) {\n            $vowel_index = ($vowel_index\
    \ + 2) % $vowels_length;\n            $vowel_char = substr($vowels, $vowel_index,\
    \ 1);\n            $encoded .= $vowel_char;\n        } else {\n            $alphabet_index\
    \ = index($alphabet, $char);\n            if ($alphabet_index >= 0) {\n      \
    \          $alphabet_index = ($alphabet_index + 2) % $alphabet_length;\n     \
    \           $alphabet_char = substr($alphabet, $alphabet_index, 1);\n        \
    \        $encoded .= $alphabet_char;\n            } else {\n                $encoded\
    \ .= $char;\n            }\n        }\n    }\n    return $encoded;\n}", "    my\
    \ @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z);\n    my $encoded_message = '';\n    my $i = 0;\n \
    \   while ($i < length($message)) {\n        my $letter = substr($message, $i,\
    \ 1);\n        if (grep {$_ eq $letter} @vowels) {\n            my $index = 0;\n\
    \            while ($index < @alphabet) {\n                if ($alphabet[$index]\
    \ eq $letter) {\n                    $encoded_message .= $alphabet[$index + 2];\n\
    \                    last;\n                }\n                $index++;\n   \
    \         }\n        }\n        else {\n            $encoded_message .= $letter;\n\
    \        }\n        $i++;\n    }\n    return $encoded_message;\n}", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char\
    \ =~ /[a-z]/) {\n                $char = uc $char;\n            }\n          \
    \  else {\n                $char = lc $char;\n            }\n            if ($vowels\
    \ =~ /$char/i) {\n                $char = $vowel_map{lc $char};\n            }\n\
    \            else {\n                my $index = index($alphabet, lc $char);\n\
    \                $index = ($index + 2) % 26;\n                $char = substr($alphabet,\
    \ $index, 1);\n            }\n        }\n        $encoded .= $char;\n    }\n \
    \   return $encoded;\n}", "    my @message = split(//, $message);\n    my @vowels\
    \ = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z);\n    my %alphabet = map { $alphabet[$_] => $_ } 0..$#alphabet;\n\
    \    my %vowels = map { $vowels[$_] => $_ } 0..$#vowels;\n    my $encoded_message\
    \ = '';\n    for my $letter (@message) {\n        if ($letter =~ /[A-Z]/) {\n\
    \            $encoded_message .= lc($letter);\n        } elsif ($letter =~ /[a-z]/)\
    \ {\n            $encoded_message .= uc($letter);\n        } else {\n        \
    \    $encoded_message .= $letter;\n        }\n    }\n    for my $vowel (@vowels)\
    \ {\n        my $index = $alphabet{$vowel};\n        my $next_vowel = $alphabet[$index\
    \ + 2];\n        $encoded_message =~ s/$vowel/$next_vowel/g;\n    }\n    return\
    \ $encoded_message;\n}", "    my $encoded_message = \"\";\n    my @letters = split(//,\
    \ $message);\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $encoded_message .= chr(ord($letter) - 32);\n        } elsif\
    \ ($letter =~ /[A-Z]/) {\n            $encoded_message .= chr(ord($letter) + 32);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    my $encoded = '';\n    my %vowels = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc $char;\n            } else {\n                $char = lc\
    \ $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n     \
    \       $char = $vowels{lc $char};\n        }\n        $encoded .= $char;\n  \
    \  }\n    return $encoded;\n}", "    my @message = split //, $message;\n    my\
    \ @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ %alphabet = map { $_ => 1 } ('a'..'z');\n    my @alphabet = ('a'..'z');\n  \
    \  my %encoded;\n    my $encoded_message = '';\n    foreach my $letter (@message)\
    \ {\n        if ($vowels{$letter}) {\n            my $index = 0;\n           \
    \ foreach my $vowel (@vowels) {\n                if ($vowel eq $letter) {\n  \
    \                  $encoded{$letter} = $vowels[($index + 2) % 5];\n          \
    \      }\n                $index++;\n            }\n        }\n        else {\n\
    \            $encoded{$letter} = $letter;\n        }\n    }\n    foreach my $letter\
    \ (@message) {\n        if ($alphabet{$letter}) {\n            $encoded_message\
    \ .= uc $encoded{$letter};\n        }\n        else {\n            $encoded_message\
    \ .= lc $encoded{$letter};\n        }\n    }\n    return $encoded_message;\n}",
  "    my $encoded_message = \"\";\n    my @letters = split(//, $message);\n    my\
    \ @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a' =>\
    \ 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n      \
    \  'u' => 'y',\n    );\n    foreach my $letter (@letters) {\n        if (grep(/$letter/,\
    \ @vowels)) {\n            $encoded_message .= $vowel_map{$letter};\n        }\
    \ else {\n            $encoded_message .= $letter;\n        }\n    }\n    return\
    \ $encoded_message;\n}", "    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z);\n    my $encoded_message = \"\";\n    for my $letter (@message)\
    \ {\n        if (grep {$_ eq lc $letter} @vowels) {\n            my $index = 0;\n\
    \            for my $vowel (@vowels) {\n                if ($vowel eq lc $letter)\
    \ {\n                    last;\n                }\n                $index++;\n\
    \            }\n            $encoded_message .= $alphabet[$index + 2];\n     \
    \   }\n        elsif ($letter =~ /[A-Z]/) {\n            $encoded_message .= lc\
    \ $letter;\n        }\n        elsif ($letter =~ /[a-z]/) {\n            $encoded_message\
    \ .= uc $letter;\n        }\n        else {\n            $encoded_message .= $letter;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_length = length($alphabet);\n    my $vowels_length = length($vowels);\n\
    \    my $message_length = length($message);\n    for (my $i = 0; $i < $message_length;\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        my $char_index\
    \ = index($alphabet, $char);\n        if ($char_index != -1) {\n            my\
    \ $new_char_index = ($char_index + 2) % $alphabet_length;\n            my $new_char\
    \ = substr($alphabet, $new_char_index, 1);\n            if (index($vowels, $char)\
    \ != -1) {\n                $encoded_message .= $new_char;\n            } else\
    \ {\n                $encoded_message .= $new_char;\n            }\n        }\
    \ else {\n            $encoded_message .= $char;\n        }\n    }\n    return\
    \ $encoded_message;\n}", "    my @chars = split(//, $message);\n    my @new_chars;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (@chars)\
    \ {\n        if ($char =~ /[a-z]/) {\n            if ($char =~ /[aeiou]/) {\n\
    \                push @new_chars, $vowels{$char};\n            } else {\n    \
    \            push @new_chars, $char;\n            }\n        } else {\n      \
    \      push @new_chars, $char;\n        }\n    }\n    return join('', @new_chars);\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjkmps\";\n    my $vowels_encoded_hash = {};\n    for (my $i = 0; $i <\
    \ length($vowels); $i++) {\n        $vowels_encoded_hash->{substr($vowels, $i,\
    \ 1)} = substr($vowels_encoded, $i, 1);\n    }\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        if (index($vowels,\
    \ $char) != -1) {\n            $encoded .= $vowels_encoded_hash->{$char};\n  \
    \      } elsif ($char =~ /[a-z]/) {\n            $encoded .= chr(ord($char) -\
    \ 32);\n        } elsif ($char =~ /[A-Z]/) {\n            $encoded .= chr(ord($char)\
    \ + 32);\n        } else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}", "    my $encoded = '';\n    my @vowels = qw(a e i o\
    \ u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n \
    \   for my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n  \
    \          $encoded .= $vowels[($vowel_index + 2) % @vowels];\n            $vowel_index\
    \ = ($vowel_index + 1) % @vowels;\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a'\
    \ => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n   \
    \     'u' => 'y',\n    );\n    for my $char (split //, $message) {\n        if\
    \ ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n               \
    \ $char = uc $char;\n            } else {\n                $char = lc $char;\n\
    \            }\n        }\n        if (grep {$_ eq lc $char} @vowels) {\n    \
    \        $char = $vowel_map{lc $char};\n        }\n        $encoded_message .=\
    \ $char;\n    }\n    return $encoded_message;\n}", "    my @chars = split //,\
    \ $message;\n    my @encoded;\n    my %vowels = (\n        'a' => 'c',\n     \
    \   'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    for my $char (@chars) {\n        if ($char =~ /[a-z]/i) {\n     \
    \       if ($char =~ /[a-z]/) {\n                $char = uc $char;\n         \
    \   }\n            else {\n                $char = lc $char;\n            }\n\
    \        }\n        if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc\
    \ $char};\n        }\n        push @encoded, $char;\n    }\n    return join '',\
    \ @encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length = length($alphabet);\n\
    \    my $vowels_length = length($vowels);\n    my $message_length = length($message);\n\
    \    for (my $i = 0; $i < $message_length; $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        my $char_index = index($alphabet, $char);\n        if ($char_index\
    \ != -1) {\n            my $new_char_index = ($char_index + 2) % $alphabet_length;\n\
    \            my $new_char = substr($alphabet, $new_char_index, 1);\n         \
    \   my $vowel_index = index($vowels, $char);\n            if ($vowel_index !=\
    \ -1) {\n                $new_char = uc($new_char);\n            }\n         \
    \   $encoded .= $new_char;\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded_message = '';\n\
    \    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k\
    \ l m n o p q r s t u v w x y z);\n    my $vowel_index = 0;\n    my $alphabet_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $vowel_found = 0;\n    my $vowel_found_index\
    \ = 0;\n    my $vowel_found_index_plus_two = 0;\n    my $vowel_found_index_plus_two_letter\
    \ = '';\n    my $vowel_found_index_plus_two_letter_upper = '';\n    my $vowel_found_index_plus_two_letter_lower\
    \ = '';\n    my $vowel_found_index_plus_two_letter_upper_found = 0;\n    my $vowel_found_index_plus_two_letter_lower_found\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_found = 0;\n    my $vowel_found_index_plus_two_letter_found_index\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_found_index_plus_two = 0;\n\
    \    my $vowel_found_index_plus_two_letter_found_index_plus_two_letter = '';\n\
    \    my $vowel_found_index_plus_two_letter_found_index_plus_two_letter_upper =\
    \ '';\n    my $vowel_found_index_plus_two_letter_found_index_plus_two_letter_lower\
    \ = '';\n    my $vowel_found_index_plus_two_letter_found_index_plus_two_letter_upper_found\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_found_index_plus_two_letter_lower_found\
    \ = 0;\n    my $vowel_found_index_plus_two_letter_found_", "    my @message =\
    \ split //, $message;\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %alphabet = map\
    \ { $alphabet[$_] => $_ } 0..$#alphabet;\n    my %vowels = map { $vowels[$_] =>\
    \ $_ } 0..$#vowels;\n    my @encoded;\n    for my $letter (@message) {\n     \
    \   if (exists $vowels{$letter}) {\n            push @encoded, $vowels[($vowels{$letter}\
    \ + 2) % 5];\n        } elsif (exists $alphabet{$letter}) {\n            push\
    \ @encoded, $alphabet[($alphabet{$letter} + 2) % 26];\n        } else {\n    \
    \        push @encoded, $letter;\n        }\n    }\n    return join '', @encoded;\n\
    }", "    my @chars = split //, $message;\n    my @encoded;\n    foreach my $char\
    \ (@chars) {\n        if ($char =~ /[a-z]/) {\n            $char =~ tr/a-z/A-Z/;\n\
    \            push @encoded, $char;\n        } elsif ($char =~ /[A-Z]/) {\n   \
    \         $char =~ tr/A-Z/a-z/;\n            push @encoded, $char;\n        }\
    \ else {\n            push @encoded, $char;\n        }\n    }\n    my $encoded_message\
    \ = join '', @encoded;\n    $encoded_message =~ s/[aeiou]/chr(ord($&)+2)/eg;\n\
    \    return $encoded_message;\n}", "    my $encoded = '';\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } ('a'..'z');\n    my %alphabet_map = map { $_ => 1 } ('c'..'z',\
    \ 'a'..'b');\n    for my $char (split //, $message) {\n        if ($alphabet{$char})\
    \ {\n            if ($vowels{$char}) {\n                $encoded .= $alphabet_map{$char};\n\
    \            } else {\n                $encoded .= uc $char;\n            }\n\
    \        } else {\n            $encoded .= lc $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    foreach my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char =\
    \ uc $char;\n            } else {\n                $char = lc $char;\n       \
    \     }\n        }\n        if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc\
    \ $char};\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded_message = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    };\n    my $vowels_hash_reverse = {\n\
    \        'c' => 'a',\n        'g' => 'e',\n        'k' => 'i',\n        'q' =>\
    \ 'o',\n        'y' => 'u',\n    };\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc $char;\n            } else {\n                $char = lc\
    \ $char;\n            }\n            if ($vowels =~ /$char/i) {\n            \
    \    $char = $vowels_hash->{lc $char};\n            }\n        }\n        $encoded_message\
    \ .= $char;\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {\n        \"a\"\
    \ => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" =>\
    \ \"q\",\n        \"u\" => \"y\",\n    };\n    my $letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $letters_hash = {};\n    my $i = 0;\n    foreach my $letter (split(//,\
    \ $letters)) {\n        $letters_hash->{$letter} = $letters->[$i];\n        $i++;\n\
    \    }\n    foreach my $letter (split(//, $message)) {\n        if ($vowels =~\
    \ /$letter/) {\n            $encoded_message .= $vowels_hash->{$letter};\n   \
    \     } elsif ($letters =~ /$letter/) {\n            $encoded_message .= $letters_hash->{$letter};\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    return $encoded_message;\n}", "    my $encoded = '';\n    my %vowels = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $letter (split //, $message) {\n\
    \        if (exists $vowels{lc $letter}) {\n            $encoded .= $vowels{lc\
    \ $letter};\n        }\n        elsif ($letter =~ /[a-z]/) {\n            $encoded\
    \ .= uc $letter;\n        }\n        else {\n            $encoded .= $letter;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = '';\n    my $vowels\
    \ = 'aeiou';\n    my $vowels_shifted = 'cgkosw';", "    my @message = split //,\
    \ $message;\n    my @vowels = qw(a e i o u);\n    my @encoded;\n    foreach my\
    \ $letter (@message) {\n        if (grep {$letter eq $_} @vowels) {\n        \
    \    my $index = firstidx {$_ eq $letter} @vowels;\n            push @encoded,\
    \ $vowels[($index + 2) % 5];\n        } else {\n            push @encoded, $letter;\n\
    \        }\n    }\n    return join '', @encoded;\n}", "    my $encoded_message\
    \ = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc $char;\n            } else {\n                $char = lc\
    \ $char;\n            }\n        }\n        if (grep {$_ eq lc $char} @vowels)\
    \ {\n            $char = $vowel_map{lc $char};\n        }\n        $encoded_message\
    \ .= $char;\n    }\n    return $encoded_message;\n}", "    my $encoded = \"\"\
    ;\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_len = length($alphabet);\n    my $vowels_len = length($vowels);\n\
    \    for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        my $char_pos = index($alphabet, $char);\n        if ($char_pos\
    \ >= 0) {\n            if ($char eq uc($char)) {\n                $char = lc($char);\n\
    \            } else {\n                $char = uc($char);\n            }\n   \
    \         $char_pos = index($alphabet, $char);\n            my $vowel_pos = index($vowels,\
    \ $char);\n            if ($vowel_pos >= 0) {\n                $vowel_pos = ($vowel_pos\
    \ + 2) % $vowels_len;\n                $char = substr($vowels, $vowel_pos, 1);\n\
    \            }\n            if ($char eq uc($char)) {\n                $char =\
    \ lc($char);\n            } else {\n                $char = uc($char);\n     \
    \       }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_2 = 'cgjkqsxz';\n\
    \    my $vowels_3 = 'bdfhmnprtvw';\n    my $vowels_4 = 'aeiou';\n    my $vowels_5\
    \ = 'cgjkqsxz';\n    my $vowels_6 = 'bdfhmnprtvw';\n    my $vowels_7 = 'aeiou';\n\
    \    my $vowels_8 = 'cgjkqsxz';\n    my $vowels_9 = 'bdfhmnprtvw';\n    my $vowels_10\
    \ = 'aeiou';\n    my $vowels_11 = 'cgjkqsxz';\n    my $vowels_12 = 'bdfhmnprtvw';\n\
    \    my $vowels_13 = 'aeiou';\n    my $vowels_14 = 'cgjkqsxz';\n    my $vowels_15\
    \ = 'bdfhmnprtvw';\n    my $vowels_16 = 'aeiou';\n    my $vowels_17 = 'cgjkqsxz';\n\
    \    my $vowels_18 = 'bdfhmnprtvw';\n    my $vowels_19 = 'aeiou';\n    my $vowels_20\
    \ = 'cgjkqsxz';\n    my $vowels_21 = 'bdfhmnprtvw';\n    my $vowels_22 = 'aeiou';\n\
    \    my $vowels_23 = 'cgjkqsxz';\n    my $vowels_24 = 'bdfhmnprtvw';\n    my $vowels_25\
    \ = 'aeiou';\n    my $vowels_26 = 'cgjkqsxz';\n    my $vowels_27 = 'bdfhmnprtvw';\n\
    \    my $vowels_28 = 'aeiou';\n    my $vowels_29 = 'cg", "    my $encoded = \"\
    \";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_index = 0;\n \
    \   my $vowel_count = 0;\n    my $vowel_length = @vowels;\n    my $vowel_position\
    \ = 0;\n    my $vowel_found = 0;\n    my $vowel_replacement = \"\";\n    my $vowel_replacement_index\
    \ = 0;\n    my $vowel_replacement_position = 0;\n    my $vowel_replacement_found\
    \ = 0;\n    my $vowel_replacement_count = 0;\n    my $vowel_replacement_length\
    \ = 0;\n    my $vowel_replacement_letter = \"\";\n    my $vowel_replacement_letter_index\
    \ = 0;\n    my $vowel_replacement_letter_position = 0;\n    my $vowel_replacement_letter_found\
    \ = 0;\n    my $vowel_replacement_letter_count = 0;\n    my $vowel_replacement_letter_length\
    \ = 0;\n    my $vowel_replacement_letter_next = \"\";\n    my $vowel_replacement_letter_next_index\
    \ = 0;\n    my $vowel_replacement_letter_next_position = 0;\n    my $vowel_replacement_letter_next_found\
    \ = 0;\n    my $vowel_replacement_letter_next_count = 0;\n    my $vowel_replacement_letter_next_length\
    \ = 0;\n    my $vowel_replacement_letter_next_next = \"\";\n    my $vowel_replacement_letter_next_next_index\
    \ = 0;\n    my $vowel_replacement_letter_next_next_position = 0;\n    my $vowel_replacement_letter_next_next_found\
    \ = 0;\n    my $vowel_replacement_letter_next_next_count = 0;\n    my $vowel_replacement_letter_next",
  "    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_map = 'cdfghjklmnpqrstvwxyz';\n\
    \    my $vowels_map_index = 0;\n    my $char;\n    my $is_upper;\n    my $is_vowel;\n\
    \    my $vowel_index;\n    my $vowel_map_index;\n    my $vowel_map_char;\n   \
    \ my $vowel_map_char_upper;\n    my $vowel_map_char_lower;\n    for (my $i = 0;\
    \ $i < length($message); $i++) {\n        $char = substr($message, $i, 1);\n \
    \       $is_upper = ($char eq uc($char));\n        $is_vowel = index($vowels,\
    \ lc($char)) >= 0;\n        if ($is_vowel) {\n            $vowel_index = index($vowels,\
    \ lc($char));\n            $vowel_map_index = ($vowel_index + 2) % length($vowels);\n\
    \            $vowel_map_char = substr($vowels_map, $vowel_map_index, 1);\n   \
    \         $vowel_map_char_upper = uc($vowel_map_char);\n            $vowel_map_char_lower\
    \ = lc($vowel_map_char);\n            $encoded .= $is_upper ? $vowel_map_char_upper\
    \ : $vowel_map_char_lower;\n        } else {\n            $encoded .= $is_upper\
    \ ? lc($char) : uc($char);\n        }\n    }\n    return $encoded;\n}", "    my\
    \ $encoded = \"\";\n    for my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            $encoded .= $char =~ /[a-z]/ ? uc $char : lc $char;\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my @message = split(\"\", $message);\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my @encoded_message;\n    foreach my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n\
    \            push(@encoded_message, $letter);\n        }\n        elsif ($letter\
    \ =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n            push(@encoded_message,\
    \ $letter);\n        }\n        else {\n            push(@encoded_message, $letter);\n\
    \        }\n    }\n    foreach my $letter (@encoded_message) {\n        if ($letter\
    \ =~ /[aeiou]/) {\n            my $index = 0;\n            foreach my $vowel (@vowels)\
    \ {\n                if ($letter eq $vowel) {\n                    $index = $index\
    \ + 2;\n                    if ($index > 4) {\n                        $index\
    \ = $index - 5;\n                    }\n                    $letter = $vowels[$index];\n\
    \                }\n            }\n        }\n        elsif ($letter =~ /[AEIOU]/)\
    \ {\n            my $index = 0;\n            foreach my $vowel (@vowels) {\n \
    \               if ($letter eq uc($vowel)) {\n                    $index = $index\
    \ + 2;\n                    if ($index > 4) {\n                        $index\
    \ = $index - 5;\n                    }\n                    $letter = uc($vowels[$index]);\n\
    \                }\n            }\n        }\n    }\n    return join(\"\", @encoded_message);\n\
    }", "    my $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc $char;\n\
    \            } else {\n                $char = lc $char;\n            }\n    \
    \    }\n        if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc $char};\n\
    \        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", "   \
    \ my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"\
    cgjkmps\";\n    my $i = 0;\n    while ($i < length($message)) {\n        my $char\
    \ = substr($message, $i, 1);\n        if ($char =~ /[a-z]/i) {\n            if\
    \ ($char =~ /[a-z]/) {\n                $char = uc($char);\n            } else\
    \ {\n                $char = lc($char);\n            }\n            my $vowel_index\
    \ = index($vowels, lc($char));\n            if ($vowel_index >= 0) {\n       \
    \         $char = substr($vowels_encoded, $vowel_index, 1);\n            }\n \
    \       }\n        $encoded .= $char;\n        $i++;\n    }\n    return $encoded;\n\
    }", "    my $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n        'e'\
    \ => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n   \
    \ );\n    foreach my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc $char;\n\
    \            } else {\n                $char = lc $char;\n            }\n    \
    \    }\n        if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc $char};\n\
    \        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", "   \
    \ my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_len = length($alphabet);\n    my $vowels_len = length($vowels);\n\
    \    my $alphabet_index = 0;\n    my $vowels_index = 0;\n    my $char = \"\";\n\
    \    my $is_vowel = 0;\n    my $is_upper = 0;\n    for(my $i = 0; $i < length($message);\
    \ $i++) {\n        $char = substr($message, $i, 1);\n        $is_upper = ($char\
    \ eq uc($char));\n        $char = lc($char);\n        $is_vowel = 0;\n       \
    \ for($vowels_index = 0; $vowels_index < $vowels_len; $vowels_index++) {\n   \
    \         if($char eq substr($vowels, $vowels_index, 1)) {\n                $is_vowel\
    \ = 1;\n                last;\n            }\n        }\n        if($is_vowel)\
    \ {\n            for($alphabet_index = 0; $alphabet_index < $alphabet_len; $alphabet_index++)\
    \ {\n                if($char eq substr($alphabet, $alphabet_index, 1)) {\n  \
    \                  $char = substr($alphabet, ($alphabet_index + 2) % $alphabet_len,\
    \ 1);\n                    last;\n                }\n            }\n        }\n\
    \        if($is_upper) {\n            $char = uc($char);\n        }\n        $encoded\
    \ .= $char;\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ =>\
    \ 1 } @vowels;\n    my %alphabet = (\n        \"a\" => \"c\",\n        \"b\" =>\
    \ \"d\",\n        \"c\" => \"e\",\n        \"d\" => \"f\",\n        \"e\" => \"\
    g\",\n        \"f\" => \"h\",\n        \"g\" => \"i\",\n        \"h\" => \"j\"\
    ,\n        \"i\" => \"k\",\n        \"j\" => \"l\",\n        \"k\" => \"m\",\n\
    \        \"l\" => \"n\",\n        \"m\" => \"o\",\n        \"n\" => \"p\",\n \
    \       \"o\" => \"q\",\n        \"p\" => \"r\",\n        \"q\" => \"s\",\n  \
    \      \"r\" => \"t\",\n        \"s\" => \"u\",\n        \"t\" => \"v\",\n   \
    \     \"u\" => \"w\",\n        \"v\" => \"x\",\n        \"w\" => \"y\",\n    \
    \    \"x\" => \"z\",\n        \"y\" => \"a\",\n        \"z\" => \"b\",\n    );\n\
    \    for my $char (split //, $message) {\n        if ($vowels{$char}) {\n    \
    \        $encoded .= $alphabet{$char};\n        } elsif ($char =~ /[A-Z]/) {\n\
    \            $encoded .= lc($char);\n        } elsif ($char =~ /[a-z]/) {\n  \
    \          $encoded .= uc($char);\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjln\";\n    for my $char\
    \ (split //, $message) {\n        my $index = index($vowels, $char);\n       \
    \ if ($index >= 0) {\n            $encoded .= substr($vowels_encoded, $index,\
    \ 1);\n        } else {\n            $encoded .= $char;\n        }\n    }\n  \
    \  return $encoded;\n}", "    my $encoded = '';\n    my %vowels = (\n        'a'\
    \ => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n   \
    \     'u' => 'y',\n    );\n    foreach my $char (split //, $message) {\n     \
    \   if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n          \
    \      $char = uc $char;\n            }\n            else {\n                $char\
    \ = lc $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n\
    \            $char = $vowels{lc $char};\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}", "    my @message = split //, $message;\n   \
    \ my $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for\
    \ my $letter (@message) {\n        if (exists $vowels{$letter}) {\n          \
    \  $encoded .= $vowels{$letter};\n        } elsif ($letter =~ /[a-z]/) {\n   \
    \         $encoded .= uc $letter;\n        } elsif ($letter =~ /[A-Z]/) {\n  \
    \          $encoded .= lc $letter;\n        } else {\n            $encoded .=\
    \ $letter;\n        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\"\
    ;\n    my @alphabet = ('a'..'z');\n    my %vowels = map { $_ => 1 } qw(a e i o\
    \ u);\n    for my $char (split //, $message) {\n        if ($vowels{lc $char})\
    \ {\n            my $index = (firstidx { $_ eq lc $char } @alphabet) + 2;\n  \
    \          $index -= 26 if $index > 25;\n            $encoded .= $alphabet[$index];\n\
    \        }\n        else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}", "    my $encoded = '';\n    my %vowels = (\n      \
    \  'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n      \
    \  if ($char =~ /[a-z]/i) {\n            $encoded .= $char =~ /[a-z]/ ? uc $char\
    \ : lc $char;\n        }\n        elsif ($char =~ /[aeiou]/i) {\n            $encoded\
    \ .= $vowels{lc $char};\n        }\n        else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my @message = split(//, $message);\n\
    \    my @alphabet = ('a'..'z');\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my $i = 0;\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/i)\
    \ {\n            if ($letter =~ /[a-z]/) {\n                $message[$i] = uc($letter);\n\
    \            } else {\n                $message[$i] = lc($letter);\n         \
    \   }\n        }\n        if ($letter =~ /[aeiou]/i) {\n            my $j = 0;\n\
    \            foreach my $vowel (@vowels) {\n                if ($letter =~ /$vowel/i)\
    \ {\n                    my $index = index($letter, $vowel);\n               \
    \     my $new_letter = $alphabet[$j + 2];\n                    substr($message[$i],\
    \ $index, 1, $new_letter);\n                }\n                $j++;\n       \
    \     }\n        }\n        $i++;\n    }\n    return join('', @message);\n}",
  "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my $vowel_index = 0;\n    for my $char (split\
    \ //, $message) {\n        if ($vowels{lc $char}) {\n            $encoded .= $vowels[($vowel_index\
    \ + 2) % 5];\n            $vowel_index = ($vowel_index + 1) % 5;\n        } else\
    \ {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}",
  "    my $encoded_message = '';\n    my %vowels = (\n        'a' => 'c',\n      \
    \  'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc $char;\n\
    \            } else {\n                $char = lc $char;\n            }\n    \
    \    }\n        if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc $char};\n\
    \        }\n        $encoded_message .= $char;\n    }\n    return $encoded_message;\n\
    }", "    my @message = split //, $message;\n    my @vowels = qw(a e i o u);\n\
    \    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my %vowels = map { $vowels[$_] => $vowels[($_ + 2) % 5] } 0..4;\n    my %alphabet\
    \ = map { $alphabet[$_] => $_ } 0..25;\n    my $encoded_message = '';\n    for\
    \ my $letter (@message) {\n        if ($letter =~ /[a-z]/i) {\n            my\
    \ $letter_index = $alphabet{lc $letter};\n            my $encoded_letter = $alphabet[($letter_index\
    \ + 13) % 26];\n            $encoded_letter = uc $encoded_letter if $letter =~\
    \ /[A-Z]/;\n            $encoded_message .= $encoded_letter;\n        }\n    \
    \    else {\n            $encoded_message .= $letter;\n        }\n    }\n    return\
    \ $encoded_message;\n}", "    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded_message;\n    my $vowel_index;\n    my $vowel_index_plus_two;\n\
    \    my $vowel_index_plus_two_mod_five;\n    my $vowel_index_plus_two_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five;\n    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five_plus_one_mod_five;\n\
    \    my $vowel_index_plus_two_mod_five_plus_one_mod_five_plus_one_mod_", "   \
    \ my $encoded = '';\n    my %vowels = (\n        a => 'c',\n        e => 'g',\n\
    \        i => 'k',\n        o => 'q',\n        u => 'y',\n    );\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[aeiou]/) {\n            $encoded\
    \ .= $vowels{$char};\n        }\n        elsif ($char =~ /[A-Z]/) {\n        \
    \    $encoded .= lc $char;\n        }\n        elsif ($char =~ /[a-z]/) {\n  \
    \          $encoded .= uc $char;\n        }\n        else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\
    \";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkmps\";\n    for\
    \ my $c (split //, $message) {\n        if ($c =~ /[a-z]/i) {\n            $c\
    \ =~ tr/a-z/A-Z/;\n            $c =~ tr/A-Z/a-z/;\n        }\n        if ($c =~\
    \ /[aeiou]/i) {\n            $c =~ tr/aeiou/cgjkmps/;\n        }\n        $encoded\
    \ .= $c;\n    }\n    return $encoded;\n}", "    my $encoded_message = '';\n  \
    \  my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split //,\
    \ $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/)\
    \ {\n                $char = uc $char;\n            } else {\n               \
    \ $char = lc $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i)\
    \ {\n            $char = $vowels{lc $char};\n        }\n        $encoded_message\
    \ .= $char;\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_length = length($alphabet);\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        my $letter = substr($message, $i, 1);\n        my $letter_index\
    \ = index($alphabet, $letter);\n        if ($letter_index != -1) {\n         \
    \   my $encoded_letter_index = ($letter_index + 2) % $alphabet_length;\n     \
    \       my $encoded_letter = substr($alphabet, $encoded_letter_index, 1);\n  \
    \          if (index($vowels, $letter) != -1) {\n                $encoded_message\
    \ .= $encoded_letter;\n            } else {\n                $encoded_message\
    \ .= $encoded_letter;\n            }\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_length = length($alphabet);\n    my $vowels_length = length($vowels);\n\
    \    my $message_length = length($message);\n    my $index = 0;\n    my $vowel_index\
    \ = 0;\n    my $letter = \"\";\n    my $vowel = \"\";\n    my $vowel_position\
    \ = 0;\n    my $new_vowel_position = 0;\n    my $new_vowel = \"\";\n    my $new_letter\
    \ = \"\";\n    my $new_vowel_index = 0;\n    my $new_vowel_index_position = 0;\n\
    \    my $new_vowel_index_position_length = 0;\n    my $new_vowel_index_position_letter\
    \ = \"\";\n    my $new_vowel_index_position_letter_position = 0;\n    my $new_vowel_index_position_letter_position_length\
    \ = 0;\n    my $new_vowel_index_position_letter_position_letter = \"\";\n    my\
    \ $new_vowel_index_position_letter_position_letter_position = 0;\n    my $new_vowel_index_position_letter_position_letter_position_length\
    \ = 0;\n    my $new_vowel_index_position_letter_position_letter_position_letter\
    \ = \"\";\n    my $new_vowel_index_position_letter_position_letter_position_letter_position\
    \ = 0;\n    my $new_vowel_index_position_letter_position_letter_position_letter_position_length\
    \ = 0;\n    my $new_vowel_index_position_letter_position_letter_position_letter_position_letter\
    \ = \"\";\n    my $new_vowel_index_position_letter_position_letter_position_letter_position_letter_position\
    \ = 0;\n    my $new_vowel_index", "    my $encoded = '';\n    my $vowels = 'aeiou';\n\
    \    my $vowels_encoded = 'cgjkmps';\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            $encoded .= $char =~ /[a-z]/ ?\
    \ uc $char : lc $char;\n        }\n        else {\n            my $index = index($vowels,\
    \ lc $char);\n            $encoded .= substr($vowels_encoded, $index, 1);\n  \
    \      }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels\
    \ = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_position = 0;\n    my $vowel_found = 0;\n    my $vowel_next\
    \ = \"\";\n    my $vowel_next_next = \"\";\n    my $vowel_next_next_index = 0;\n\
    \    my $vowel_next_index = 0;\n    my $vowel_next_next_position = 0;\n    my\
    \ $vowel_next_position = 0;\n    my $vowel_position_index = 0;\n    my $vowel_position_next\
    \ = 0;\n    my $vowel_position_next_next = 0;\n    my $vowel_position_next_next_index\
    \ = 0;\n    my $vowel_position_next_index = 0;\n    my $vowel_position_next_next_position\
    \ = 0;\n    my $vowel_position_next_position = 0;\n    my $vowel_position_position\
    \ = 0;\n    my $vowel_position_position_index = 0;\n    my $vowel_position_position_next\
    \ = 0;\n    my $vowel_position_position_next_index = 0;\n    my $vowel_position_position_next_next\
    \ = 0;\n    my $vowel_position_position_next_next_index = 0;\n    my $vowel_position_position_next_next_position\
    \ = 0;\n    my $vowel_position_position_next_position = 0;\n    my $vowel_position_position_position\
    \ = 0;\n    my $vowel_position_position_position_index = 0;\n    my $vowel_position_position_position_next\
    \ = 0;\n    my $vowel_position_position_position_next_index = 0;\n    my $vowel_position_position_position_next_next\
    \ = 0;\n   ", "    my $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    for my $char (split //, $message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            $encoded .= $char =~ /[a-z]/ ? uc $char : lc $char;\n\
    \        }\n        else {\n            $encoded .= $char;\n        }\n    }\n\
    \    $encoded =~ s/([aeiou])/$vowels{$1}/g;\n    return $encoded;\n}", "    my\
    \ $encoded_message = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length = length($alphabet);\n\
    \    my $vowels_length = length($vowels);\n    my $message_length = length($message);\n\
    \    my $vowel_index = 0;\n    my $alphabet_index = 0;\n    my $message_index\
    \ = 0;\n    my $vowel_position = 0;\n    my $alphabet_position = 0;\n    my $message_position\
    \ = 0;\n    my $vowel_found = 0;\n    my $vowel_character = \"\";\n    my $alphabet_character\
    \ = \"\";\n    my $message_character = \"\";\n    my $encoded_character = \"\"\
    ;\n    for ($message_index = 0; $message_index < $message_length; $message_index++)\
    \ {\n        $message_character = substr($message, $message_index, 1);\n     \
    \   $vowel_found = 0;\n        for ($vowel_index = 0; $vowel_index < $vowels_length;\
    \ $vowel_index++) {\n            $vowel_character = substr($vowels, $vowel_index,\
    \ 1);\n            if ($message_character eq $vowel_character) {\n           \
    \     $vowel_found = 1;\n                $vowel_position = $vowel_index;\n   \
    \             last;\n            }\n        }\n        if ($vowel_found) {\n \
    \           $alphabet_position = ($vowel_position + 2) % $alphabet_length;\n \
    \           $encoded_character = substr($alphabet, $alphabet_position, 1);\n \
    \       }\n        else {\n            $encoded_character = $message_character;\n\
    \        }\n        if ($encoded_character eq uc($encoded_character)) {\n    \
    \        $encoded_character = lc($encoded_character);\n        }\n        else\
    \ {\n            $encoded_character = uc($encoded_character", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_length = length($alphabet);\n    my $vowels_length = length($vowels);\n\
    \    my $vowel_index = 0;\n    my $alphabet_index = 0;\n    my $vowel_found =\
    \ 0;\n    my $vowel_found_index = 0;\n    my $vowel_found_index_plus_two = 0;\n\
    \    my $message_length = length($message);\n    my $message_index = 0;\n    my\
    \ $message_char = \"\";\n    my $message_char_lower = \"\";\n    my $message_char_upper\
    \ = \"\";\n    my $message_char_is_upper = 0;\n    my $message_char_is_lower =\
    \ 0;\n    my $message_char_is_vowel = 0;\n    my $message_char_is_not_vowel =\
    \ 0;\n    my $message_char_is_not_letter = 0;\n    my $message_char_is_letter\
    \ = 0;\n    my $message_char_is_not_letter_or_vowel = 0;\n    my $message_char_is_letter_or_vowel\
    \ = 0;\n    my $message_char_is_not_letter_or_vowel_or_upper = 0;\n    my $message_char_is_letter_or_vowel_or_upper\
    \ = 0;\n    my $message_char_is_not_letter_or_vowel_or_lower = 0;\n    my $message_char_is_letter_or_vowel_or_lower\
    \ = 0;\n    my $message_char_is_not_letter_or_vowel_or_upper_or_lower = 0;\n \
    \   my $message_char_is_letter_or_vowel_or_upper_or_lower = 0;\n    my $message_char_is_not_letter_or_vowel_or_",
  "    my @message = split(//, $message);\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my @alphabet = ('a'..'z');\n    my %alphabet = map { $alphabet[$_] => $_\
    \ } 0..$#alphabet;\n    my %vowels = map { $vowels[$_] => $_ } 0..$#vowels;\n\
    \    my $encoded = '';\n    for my $letter (@message) {\n        if (exists $vowels{$letter})\
    \ {\n            $encoded .= $vowels[($vowels{$letter} + 2) % 5];\n        } elsif\
    \ (exists $alphabet{$letter}) {\n            $encoded .= $alphabet[($alphabet{$letter}\
    \ + 13) % 26];\n        } else {\n            $encoded .= $letter;\n        }\n\
    \    }\n    return $encoded;\n}", "    my $encoded = '';\n    my $vowels = 'aeiou';\n\
    \    for my $c (split //, $message) {\n        if ($c =~ /[a-z]/i) {\n       \
    \     $c =~ tr/a-z/A-Z/;\n            if ($c =~ /[$vowels]/i) {\n            \
    \    $c =~ tr/a-z/c-za-b/;\n            }\n        }\n        $encoded .= $c;\n\
    \    }\n    return $encoded;\n}", "    my $encoded_message = '';\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a' => 'c',\n \
    \       'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    for my $char (split //, $message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n                $char = uc\
    \ $char;\n            }\n            else {\n                $char = lc $char;\n\
    \            }\n        }\n        if (grep {$_ eq lc $char} @vowels) {\n    \
    \        $char = $vowel_map{lc $char};\n        }\n        $encoded_message .=\
    \ $char;\n    }\n    return $encoded_message;\n}", "    my $encoded_message =\
    \ \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_hash\
    \ = map { $_ => 1 } @vowels;\n    my @alphabet = (\"a\"..\"z\");\n    my %alphabet_hash\
    \ = map { $_ => 1 } @alphabet;\n    my $vowel_index = 0;\n    my $alphabet_index\
    \ = 0;\n    my $vowel_count = 0;\n    my $alphabet_count = 0;\n    my $vowel_position\
    \ = 0;\n    my $alphabet_position = 0;\n    my $vowel_letter = \"\";\n    my $alphabet_letter\
    \ = \"\";\n    my $vowel_letter_index = 0;\n    my $alphabet_letter_index = 0;\n\
    \    my $vowel_letter_position = 0;\n    my $alphabet_letter_position = 0;\n \
    \   my $vowel_letter_count = 0;\n    my $alphabet_letter_count = 0;\n    my $vowel_letter_next\
    \ = \"\";\n    my $alphabet_letter_next = \"\";\n    my $vowel_letter_next_index\
    \ = 0;\n    my $alphabet_letter_next_index = 0;\n    my $vowel_letter_next_position\
    \ = 0;\n    my $alphabet_letter_next_position = 0;\n    my $vowel_letter_next_count\
    \ = 0;\n    my $alphabet_letter_next_count = 0;\n    my $vowel_letter_next_next\
    \ = \"\";\n    my $alphabet_letter_next_next = \"\";\n    my $vowel_letter_next_next_index\
    \ = 0;\n    my $alphabet_letter_next_next_index = 0;\n    my $vowel_letter_next_next_position\
    \ = 0;\n    my $alphabet_letter_next_next_position = 0;\n    my $vowel_letter_next_next_count\
    \ = 0;\n    my $alphabet_letter_next_next", "    my @letters = split(//, $message);\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 }\
    \ @vowels;\n    my %alphabet = (\n        'a' => 'c',\n        'b' => 'd',\n \
    \       'c' => 'e',\n        'd' => 'f',\n        'e' => 'g',\n        'f' =>\
    \ 'h',\n        'g' => 'i',\n        'h' => 'j',\n        'i' => 'k',\n      \
    \  'j' => 'l',\n        'k' => 'm',\n        'l' => 'n',\n        'm' => 'o',\n\
    \        'n' => 'p',\n        'o' => 'q',\n        'p' => 'r',\n        'q' =>\
    \ 's',\n        'r' => 't',\n        's' => 'u',\n        't' => 'v',\n      \
    \  'u' => 'w',\n        'v' => 'x',\n        'w' => 'y',\n        'x' => 'z',\n\
    \        'y' => 'a',\n        'z' => 'b',\n    );\n    my @encoded;\n    for my\
    \ $letter (@letters) {\n        if ($vowels{$letter}) {\n            push @encoded,\
    \ $alphabet{$letter};\n        } else {\n            push @encoded, $letter;\n\
    \        }\n    }\n    return join('', @encoded);\n}", "    my @message = split\
    \ //, $message;\n    my @vowels = qw(a e i o u);\n    my @encoded_message;\n \
    \   foreach my $letter (@message) {\n        if (lc($letter) eq $letter) {\n \
    \           $letter = uc($letter);\n        } else {\n            $letter = lc($letter);\n\
    \        }\n        if (grep {$_ eq lc($letter)} @vowels) {\n            my $index\
    \ = firstidx {$_ eq lc($letter)} @vowels;\n            $index += 2;\n        \
    \    $index = $index % 5;\n            $letter = $vowels[$index];\n        }\n\
    \        push @encoded_message, $letter;\n    }\n    return join '', @encoded_message;\n\
    }", "    my $encoded_message = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash\
    \ = {\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\"\
    ,\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    };\n    my $alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_hash = {};\n    my $i =\
    \ 0;\n    foreach my $letter (split //, $alphabet) {\n        $alphabet_hash->{$letter}\
    \ = $i;\n        $i++;\n    }\n    foreach my $letter (split //, $message) {\n\
    \        if ($letter =~ /[A-Z]/) {\n            $encoded_message .= lc($letter);\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            $encoded_message .= uc($letter);\n\
    \        } else {\n            $encoded_message .= $letter;\n        }\n    }\n\
    \    foreach my $vowel (split //, $vowels) {\n        my $index = $alphabet_hash->{$vowel};\n\
    \        my $new_index = $index + 2;\n        if ($new_index > 25) {\n       \
    \     $new_index = $new_index - 26;\n        }\n        my $new_vowel = $alphabet[$new_index];\n\
    \        $encoded_message =~ s/$vowel/$new_vowel/g;\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my @letters = split(//, $message);\n    for\
    \ my $letter (@letters) {\n        if ($vowels{lc($letter)}) {\n            $encoded\
    \ .= $vowels[($vowels{lc($letter)} + 2) % 5];\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}", "    my $encoded =\
    \ \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded = \"cgjkmps\";\n\
    \    my $vowels_encoded_hash = {};\n    my $vowels_hash = {};\n    for(my $i =\
    \ 0; $i < length($vowels); $i++) {\n        $vowels_encoded_hash->{substr($vowels,\
    \ $i, 1)} = substr($vowels_encoded, $i, 1);\n        $vowels_hash->{substr($vowels,\
    \ $i, 1)} = 1;\n    }\n    for(my $i = 0; $i < length($message); $i++) {\n   \
    \     my $char = substr($message, $i, 1);\n        if(exists($vowels_hash->{$char}))\
    \ {\n            $encoded .= $vowels_encoded_hash->{$char};\n        } elsif($char\
    \ =~ /[a-z]/) {\n            $encoded .= uc($char);\n        } elsif($char =~\
    \ /[A-Z]/) {\n            $encoded .= lc($char);\n        } else {\n         \
    \   $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded_message\
    \ = \"\";\n    my @alphabet = ('a'..'z');\n    my %vowels = ('a' => 1, 'e' =>\
    \ 1, 'i' => 1, 'o' => 1, 'u' => 1);\n    for my $letter (split //, $message) {\n\
    \        if ($letter =~ /[a-z]/i) {\n            my $index = index($letter, lc($letter));\n\
    \            my $new_letter = $letter;\n            if ($index == 0) {\n     \
    \           $new_letter = uc($letter);\n            } else {\n               \
    \ $new_letter = lc($letter);\n            }\n            if (exists $vowels{lc($letter)})\
    \ {\n                my $vowel_index = index($letter, lc($letter));\n        \
    \        my $vowel_index_in_alphabet = index($alphabet[$vowel_index], lc($letter));\n\
    \                $new_letter = $alphabet[$vowel_index_in_alphabet + 2];\n    \
    \        }\n            $encoded_message .= $new_letter;\n        } else {\n \
    \           $encoded_message .= $letter;\n        }\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    my $vowel_index = 0;\n    my $letter_index = 0;\n    my $letter = '';\n \
    \   my $vowel = '';\n    my $new_letter = '';\n    my $new_vowel = '';\n    my\
    \ $new_vowel_index = 0;\n    my $new_letter_index = 0;\n    my $new_message =\
    \ '';\n    my $new_letter_index = 0;\n    my $new_vowel_index = 0;\n    my $new_letter\
    \ = '';\n    my $new_vowel = '';\n    my $letter_index = 0;\n    my $vowel_index\
    \ = 0;\n    my $letter = '';\n    my $vowel = '';\n    my $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    my $vowels = 'aeiou';\n    my $encoded = '';\n    my($message) = @_;\n  \
    \  my $new_message = '';\n    for my $letter (split //, $message) {\n        $letter_index\
    \ = index($alphabet, $letter);\n        if ($letter_index == -1) {\n         \
    \   $new_message .= $letter;\n        } else {\n            $new_letter_index\
    \ = $letter_index + 2;\n            if ($new_letter_index > 25) {\n          \
    \      $new_letter_index -= 26;\n            }\n            $new_letter = substr($alphabet,\
    \ $new_letter_index, 1);\n            $new_message .= $new_letter;\n        }\n\
    \    }\n    for my $vowel (split //, $vowels) {\n        $vowel_index = index($new_message,\
    \ $vowel);\n        if ($vowel_index == -1) {\n            $encoded .= $vowel;\n\
    \        } else {\n            $new_vow", "    my $encoded_message = \"\";\n \
    \   my @vowels = qw(a e i o u);\n    my %vowel_map = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    my @letters = split //, $message;\n    foreach my $letter\
    \ (@letters) {\n        if (grep {$_ eq $letter} @vowels) {\n            $encoded_message\
    \ .= $vowel_map{$letter};\n        } else {\n            $encoded_message .= $letter;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $encoded = '';\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~\
    \ /[a-z]/) {\n                $char = uc $char;\n            } else {\n      \
    \          $char = lc $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i)\
    \ {\n            $char = $vowels{lc $char};\n        }\n        $encoded .= $char;\n\
    \    }\n    return $encoded;\n}", "    my $encoded_message = '';\n    my %vowels\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message)\
    \ {\n        if (exists $vowels{lc $char}) {\n            $encoded_message .=\
    \ $vowels{lc $char};\n        } elsif ($char =~ /[a-z]/) {\n            $encoded_message\
    \ .= uc $char;\n        } else {\n            $encoded_message .= $char;\n   \
    \     }\n    }\n    return $encoded_message;\n}", "    my @letters = split //,\
    \ $message;\n    my @encoded_letters;\n    my %vowels = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    for my $letter (@letters) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            if ($letter =~ /[aeiou]/) {\n                push @encoded_letters,\
    \ $vowels{$letter};\n            } else {\n                push @encoded_letters,\
    \ $letter;\n            }\n        } elsif ($letter =~ /[A-Z]/) {\n          \
    \  if ($letter =~ /[AEIOU]/) {\n                push @encoded_letters, uc $vowels{lc\
    \ $letter};\n            } else {\n                push @encoded_letters, lc $letter;\n\
    \            }\n        } else {\n            push @encoded_letters, $letter;\n\
    \        }\n    }\n    return join '', @encoded_letters;\n}", "    my $result\
    \ = \"\";\n    my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my @alphabet = ('a'..'z');\n    my %alphabet = map { $alphabet[$_] => $_\
    \ } 0..$#alphabet;\n    my $vowel_index = 0;\n    my $vowel_count = @vowels;\n\
    \    for my $letter (split //, $message) {\n        $letter = lc $letter;\n  \
    \      if ($vowels{$letter}) {\n            $vowel_index = ($alphabet{$letter}\
    \ + 2) % $vowel_count;\n            $letter = $vowels[$vowel_index];\n       \
    \ }\n        $result .= $letter;\n    }\n    return $result;\n}", "    my @message\
    \ = split //, $message;\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my $encoded_message\
    \ = '';\n    for my $letter (@message) {\n        if ($letter =~ /[a-z]/i) {\n\
    \            if ($letter =~ /[a-z]/) {\n                $letter = uc $letter;\n\
    \            } else {\n                $letter = lc $letter;\n            }\n\
    \            if (grep {$_ eq lc $letter} @vowels) {\n                my $index\
    \ = 0;\n                for my $vowel (@vowels) {\n                    if ($vowel\
    \ eq lc $letter) {\n                        $index = $vowels[$index + 2];\n  \
    \                      last;\n                    }\n                    $index++;\n\
    \                }\n                $letter = $index;\n            }\n       \
    \ }\n        $encoded_message .= $letter;\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjkmps\";\n    my $vowels_encoded_hash = {};\n    my $vowels_hash = {};\n\
    \    my $vowels_array = [split(//, $vowels)];\n    my $vowels_encoded_array =\
    \ [split(//, $vowels_encoded)];\n    for (my $i = 0; $i < scalar(@$vowels_array);\
    \ $i++) {\n        $vowels_hash->{$vowels_array->[$i]} = 1;\n        $vowels_encoded_hash->{$vowels_encoded_array->[$i]}\
    \ = 1;\n    }\n    my $message_array = [split(//, $message)];\n    for (my $i\
    \ = 0; $i < scalar(@$message_array); $i++) {\n        my $char = $message_array->[$i];\n\
    \        if ($vowels_hash->{$char}) {\n            $encoded .= $vowels_encoded_array->[$i];\n\
    \        } elsif ($vowels_encoded_hash->{$char}) {\n            $encoded .= $vowels_array->[$i];\n\
    \        } else {\n            if ($char =~ /[a-z]/) {\n                $encoded\
    \ .= chr(ord($char) - 32);\n            } elsif ($char =~ /[A-Z]/) {\n       \
    \         $encoded .= chr(ord($char) + 32);\n            } else {\n          \
    \      $encoded .= $char;\n            }\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjln\";\n    my $alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alpha_encoded\
    \ = \"cdefghijklmnopqrstuvwxyzb\";\n    my $alpha_encoded_upper = \"CDEFGHIJKLMNOPQRSTUVWXYZB\"\
    ;\n    for my $char (split //, $message) {\n        my $index = index($vowels,\
    \ $char);\n        if ($index != -1) {\n            $encoded .= substr($vowels_encoded,\
    \ $index, 1);\n        } else {\n            $index = index($alpha, $char);\n\
    \            if ($index != -1) {\n                $encoded .= substr($alpha_encoded,\
    \ $index, 1);\n            } else {\n                $index = index($alpha, lc($char));\n\
    \                if ($index != -1) {\n                    $encoded .= substr($alpha_encoded_upper,\
    \ $index, 1);\n                } else {\n                    $encoded .= $char;\n\
    \                }\n            }\n        }\n    }\n    return $encoded;\n}",
  "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $vowel_index = 0;\n    my $alphabet_index = 0;\n    my $vowel_index_plus_two\
    \ = 0;\n    my $alphabet_index_plus_two = 0;\n    my $vowel_plus_two = \"\";\n\
    \    my $letter = \"\";\n    my $encoded_letter = \"\";\n    my $message_length\
    \ = length($message);\n    my $vowels_length = length($vowels);\n    my $alphabet_length\
    \ = length($alphabet);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n  \
    \  my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee\
    \ = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n \
    \   my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn\
    \ = 0;\n    my $oo = 0;\n    my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n \
    \   my $ss = 0;\n    my $tt = 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww\
    \ = 0;\n    my $xx = 0;\n   ", "    my $encoded = \"\";\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my $vowel_index = 0;\n    my $vowel_count = @vowels;\n\
    \    my $vowel_found = 0;\n    my $vowel_index_in_message = 0;\n    my $vowel_index_in_vowels\
    \ = 0;\n    my $vowel_index_in_vowels_plus_two = 0;\n    my $vowel_index_in_vowels_plus_two_mod_vowel_count\
    \ = 0;\n    my $vowel_index_in_vowels_plus_two_mod_vowel_count_plus_vowel_index_in_vowels\
    \ = 0;\n    my $vowel_index_in_vowels_plus_two_mod_vowel_count_plus_vowel_index_in_vowels_plus_one\
    \ = 0;\n    my $vowel_index_in_vowels_plus_two_mod_vowel_count_plus_vowel_index_in_vowels_plus_one_plus_vowel_index_in_vowels\
    \ = 0;\n    my $vowel_index_in_vowels_plus_two_mod_vowel_count_plus_vowel_index_in_vowels_plus_one_plus_vowel_index_in_vowels_plus_two\
    \ = 0;\n    my $vowel_index_in_vowels_plus_two_mod_vowel_count_plus_vowel_index_in_vowels_plus_one_plus_vowel_index_in_vowels_plus_two_plus_vowel_index_in_vowels\
    \ = 0;\n    my $vowel_index_in_vowels_plus_two_mod_vowel_count_plus_vowel_index_in_vowels_plus_one_plus_vowel_index_in",
  "    my $encoded = '';\n    my @vowels = qw(a e i o u);\n    my %vowels = map {\
    \ $_ => 1 } @vowels;\n    my %vowels_map = (\n        a => 'c',\n        e =>\
    \ 'g',\n        i => 'k',\n        o => 'q',\n        u => 'y',\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n        \
    \    $encoded .= $vowels_map{lc $char};\n        }\n        elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded .= uc $char;\n        }\n        elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded .= lc $char;\n        }\n        else {\n          \
    \  $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded\
    \ = '';\n    my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %letters = map { $_ => 1 } ('a'..'z');\n    my $vowel_index = 0;\n   \
    \ my $letter_index = 0;\n    my $vowel_count = 0;\n    my $letter_count = 0;\n\
    \    my $vowel_start = 0;\n    my $letter_start = 0;\n    my $vowel_end = 0;\n\
    \    my $letter_end = 0;\n    my $vowel_length = 0;\n    my $letter_length = 0;\n\
    \    my $vowel_substr = '';\n    my $letter_substr = '';\n    my $vowel_replace\
    \ = '';\n    my $letter_replace = '';\n    my $vowel_replace_index = 0;\n    my\
    \ $letter_replace_index = 0;\n    my $vowel_replace_count = 0;\n    my $letter_replace_count\
    \ = 0;\n    my $vowel_replace_start = 0;\n    my $letter_replace_start = 0;\n\
    \    my $vowel_replace_end = 0;\n    my $letter_replace_end = 0;\n    my $vowel_replace_length\
    \ = 0;\n    my $letter_replace_length = 0;\n    my $vowel_replace_substr = '';\n\
    \    my $letter_replace_substr = '';\n    my $vowel_replace_replace = '';\n  \
    \  my $letter_replace_replace = '';\n    my $vowel_replace_replace_index = 0;\n\
    \    my $letter_replace_replace_index = 0;\n    my $vowel_replace_replace_count\
    \ = 0;\n    my $letter_replace_replace_count = 0;\n    my $vowel_replace_replace_start\
    \ = 0;\n    my $letter_replace_replace_start = 0;\n    my $vowel_replace_replace_end\
    \ = 0;\n   ", "    my $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    for my $char (split //, $message) {\n        if (exists $vowels{lc\
    \ $char}) {\n            $encoded .= $vowels{lc $char};\n        } elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded .= uc $char;\n        } else {\n       \
    \     $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "    my\
    \ $encoded = '';\n    my %vowels = (\n        a => 'c',\n        e => 'g',\n \
    \       i => 'k',\n        o => 'q',\n        u => 'y',\n    );\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[aeiou]/) {\n            $encoded\
    \ .= $vowels{$char};\n        }\n        elsif ($char =~ /[A-Z]/) {\n        \
    \    $encoded .= lc $char;\n        }\n        elsif ($char =~ /[a-z]/) {\n  \
    \          $encoded .= uc $char;\n        }\n        else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded_message\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {\n        \"a\"\
    \ => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" =>\
    \ \"q\",\n        \"u\" => \"y\",\n    };\n    for my $char (split //, $message)\
    \ {\n        if ($vowels =~ /$char/) {\n            $encoded_message .= $vowels_hash->{$char};\n\
    \        }\n        elsif ($char =~ /[A-Z]/) {\n            $encoded_message .=\
    \ lc($char);\n        }\n        elsif ($char =~ /[a-z]/) {\n            $encoded_message\
    \ .= uc($char);\n        }\n        else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my $encoded = '';\n\
    \    my @vowels = ('a'..'z');\n    my %vowels = map { $vowels[$_] => $vowels[($_\
    \ + 2) % 26] } (0..25);\n    for my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            $encoded .= $char =~ /[a-z]/ ? uc $char : lc $char;\n\
    \        }\n        else {\n            $encoded .= $vowels{lc $char} || $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   for my $letter (split //, $message) {\n        if ($letter =~ /[a-z]/i) {\n\
    \            if ($letter =~ /[a-z]/) {\n                $letter = uc $letter;\n\
    \            } else {\n                $letter = lc $letter;\n            }\n\
    \            if ($vowels =~ /$letter/i) {\n                my $index = index($alphabet,\
    \ lc $letter);\n                $letter = substr($alphabet, ($index + 2) % 26,\
    \ 1);\n            }\n        }\n        $encoded .= $letter;\n    }\n    return\
    \ $encoded;\n}", "    my @chars = split(//, $message);\n    my @encoded;\n   \
    \ my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $char (@chars)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc($char);\n            } else {\n                $char\
    \ = lc($char);\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n\
    \            $char = $vowels{lc($char)};\n        }\n        push(@encoded, $char);\n\
    \    }\n    return join('', @encoded);\n}", "    my @message = split(//, $message);\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my @encoded_message;\n    foreach\
    \ my $char (@message) {\n        if (grep {$_ eq $char} @vowels) {\n         \
    \   my $index = firstidx {$_ eq $char} @vowels;\n            my $new_index = ($index\
    \ + 2) % 5;\n            push @encoded_message, $vowels[$new_index];\n       \
    \ } else {\n            push @encoded_message, $char;\n        }\n    }\n    return\
    \ join('', @encoded_message);\n}", "    my $encoded = '';\n    my %vowels = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            $encoded .= $char =~ /[a-z]/ ?\
    \ uc $char : lc $char;\n        }\n        else {\n            $encoded .= $char;\n\
    \        }\n    }\n    for my $vowel (keys %vowels) {\n        $encoded =~ s/$vowel/$vowels{$vowel}/g;\n\
    \    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n    my $vowels\
    \ = \"aeiou\";\n    my $i = 0;\n    while ($i < length($message)) {\n        my\
    \ $letter = substr($message, $i, 1);\n        if ($letter =~ /[a-z]/) {\n    \
    \        $letter =~ tr/a-z/A-Z/;\n            $encoded_message .= $letter;\n \
    \       } elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n\
    \            $encoded_message .= $letter;\n        } else {\n            $encoded_message\
    \ .= $letter;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i < length($encoded_message))\
    \ {\n        my $letter = substr($encoded_message, $i, 1);\n        if ($letter\
    \ =~ /[aeiou]/) {\n            my $index = index($vowels, $letter);\n        \
    \    $letter = substr($vowels, ($index + 2) % 5, 1);\n            substr($encoded_message,\
    \ $i, 1) = $letter;\n        }\n        $i++;\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded\
    \ = \"cgjkmps\";\n    for my $char (split //, $message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            $encoded .= $char =~ /[a-z]/ ? uc $char : lc $char;\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    $encoded\
    \ =~ s/([$vowels])/$vowels_encoded/g;\n    return $encoded;\n}", "    my $encoded\
    \ = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n      \
    \  'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char\
    \ (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n            $encoded\
    \ .= $char =~ /[a-z]/ ? uc $char : lc $char;\n        }\n        elsif ($char\
    \ =~ /[aeiou]/i) {\n            $encoded .= $vowels{lc $char};\n        }\n  \
    \      else {\n            $encoded .= $char;\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    my @alphabet = qw(a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z);\n    my %alphabet = map { $alphabet[$_] => $_ }\
    \ 0..$#alphabet;\n    my @alphabet_2 = qw(c d e f g h i j k l m n o p q r s t\
    \ u v w x y z a b);\n    my %alphabet_2 = map { $alphabet[$_] => $alphabet_2[$_]\
    \ } 0..$#alphabet;\n    for my $char (split //, $message) {\n        if ($vowels{$char})\
    \ {\n            $encoded .= $alphabet_2{$char};\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded .= lc $char;\n        } elsif ($char =~ /[a-z]/) {\n\
    \            $encoded .= uc $char;\n        } else {\n            $encoded .=\
    \ $char;\n        }\n    }\n    return $encoded;\n}", "    my @message = split(//,\
    \ $message);\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z);\n    my %vowels = map { $vowels[$_]\
    \ => $alphabet[$_+2] } 0..$#vowels;\n    my %alphabet = map { $alphabet[$_] =>\
    \ $alphabet[$_+2] } 0..$#alphabet;\n    my $encoded = '';\n    for my $letter\
    \ (@message) {\n        if (exists $vowels{$letter}) {\n            $encoded .=\
    \ $vowels{$letter};\n        } elsif (exists $alphabet{$letter}) {\n         \
    \   $encoded .= $alphabet{$letter};\n        } else {\n            $encoded .=\
    \ $letter;\n        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\"\
    ;\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1\
    \ } @vowels;\n    my %vowels_map = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n        \
    \    $encoded .= $vowels_map{lc $char};\n        }\n        elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded .= uc $char;\n        }\n        elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded .= lc $char;\n        }\n        else {\n          \
    \  $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "    my @message\
    \ = split //, $message;\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z);\n    my %vowels = map {\
    \ $vowels[$_] => $vowels[($_ + 2) % 5] } 0..$#vowels;\n    my %alphabet = map\
    \ { $alphabet[$_] => $_ } 0..$#alphabet;\n    my @encoded = map {\n        my\
    \ $letter = lc $_;\n        exists $vowels{$letter} ? $vowels{$letter} : $letter;\n\
    \    } @message;\n    return join '', @encoded;\n}", "    my $encoded = '';\n\
    \    my @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my %alphabet = map { $_ => 1 } ('a'..'z');\n    my %vowel_map = (\n     \
    \   'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 'y',\n    );\n    for my $letter (split //, $message) {\n    \
    \    if ($alphabet{$letter}) {\n            if ($vowels{$letter}) {\n        \
    \        $encoded .= $vowel_map{$letter};\n            }\n            else {\n\
    \                $encoded .= $letter;\n            }\n        }\n        else\
    \ {\n            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n\
    }", "    my @letters = split(//, $message);\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u');\n    my @encoded_letters;\n    foreach my $letter (@letters) {\n\
    \        if (grep {$_ eq $letter} @vowels) {\n            my $index = firstidx\
    \ {$_ eq $letter} @vowels;\n            my $new_index = ($index + 2) % 5;\n  \
    \          push @encoded_letters, $vowels[$new_index];\n        } else {\n   \
    \         push @encoded_letters, $letter;\n        }\n    }\n    return join('',\
    \ @encoded_letters);\n}", "    my $encoded = \"\";\n    my @chars = split(//,\
    \ $message);\n    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n\
    \            $encoded .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n  \
    \          $encoded .= lc($char);\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = '';\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } ('a'..'z');\n    my $next = 'a';\n    for my $char (split\
    \ //, $message) {\n        if ($alphabet{$char}) {\n            if ($vowels{$char})\
    \ {\n                $encoded .= $next;\n                $next = $next eq 'z'\
    \ ? 'a' : chr(ord($next) + 1);\n                $next = $next eq 'z' ? 'a' : chr(ord($next)\
    \ + 1);\n            }\n            else {\n                $encoded .= $char;\n\
    \            }\n        }\n        else {\n            $encoded .= $char;\n  \
    \      }\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowel_map = (\n\
    \        \"a\" => \"c\",\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n \
    \       \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n    for my $char (split\
    \ //, $message) {\n        if (grep {$_ eq $char} @vowels) {\n            $encoded_message\
    \ .= $vowel_map{$char};\n        } else {\n            $encoded_message .= $char;\n\
    \        }\n    }\n    return $encoded_message;\n}", "    my @message = split(//,\
    \ $message);\n    my @encoded_message;\n    my %vowels = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    foreach my $letter (@message) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            push @encoded_message, uc($letter);\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            push @encoded_message, lc($letter);\n        } elsif\
    \ ($letter =~ /[aeiou]/) {\n            push @encoded_message, $vowels{$letter};\n\
    \        } else {\n            push @encoded_message, $letter;\n        }\n  \
    \  }\n    return join('', @encoded_message);\n}", "    my $encoded = \"\";\n \
    \   my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_length = length($alphabet);\n    my $vowels_length = length($vowels);\n\
    \    for (my $i = 0; $i < length($message); $i++) {\n        my $char = substr($message,\
    \ $i, 1);\n        my $char_index = index($alphabet, $char);\n        if ($char_index\
    \ == -1) {\n            $encoded .= $char;\n        } else {\n            my $vowel_index\
    \ = index($vowels, $char);\n            if ($vowel_index == -1) {\n          \
    \      $encoded .= substr($alphabet, ($char_index + $alphabet_length - 1) % $alphabet_length,\
    \ 1);\n            } else {\n                $encoded .= substr($vowels, ($vowel_index\
    \ + $vowels_length + 2) % $vowels_length, 1);\n            }\n        }\n    }\n\
    \    return $encoded;\n}", "    my @letters = split(//, $message);\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    foreach my $letter\
    \ (@letters) {\n        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n\
    \            if ($letter =~ /[aeiou]/) {\n                $letter = $vowels{$letter};\n\
    \            }\n        }\n        elsif ($letter =~ /[A-Z]/) {\n            $letter\
    \ =~ tr/A-Z/a-z/;\n            if ($letter =~ /[AEIOU]/) {\n                $letter\
    \ = $vowels{$letter};\n            }\n        }\n        push @encoded, $letter;\n\
    \    }\n    return join('', @encoded);\n}", "    my $encoded_message = \"\";\n\
    \    my $vowels = \"aeiou\";\n    my $vowels_hash = {\n        \"a\" => \"c\"\
    ,\n        \"e\" => \"g\",\n        \"i\" => \"k\",\n        \"o\" => \"q\",\n\
    \        \"u\" => \"y\",\n    };\n    for my $char (split //, $message) {\n  \
    \      if ($vowels =~ m/$char/i) {\n            $encoded_message .= $vowels_hash->{lc\
    \ $char};\n        } else {\n            $encoded_message .= $char;\n        }\n\
    \    }\n    return $encoded_message;\n}", "    my $encoded = '';\n    my @vowels\
    \ = ('a'..'z');\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet =\
    \ map { $_ => 1 } ('a'..'z');\n    my %alphabet_rev = map { $alphabet{$_} => $_\
    \ } keys %alphabet;\n    my $alphabet_length = scalar(keys %alphabet);\n    for\
    \ my $letter (split //, $message) {\n        if ($vowels{$letter}) {\n       \
    \     my $index = $alphabet{$letter};\n            $index += 2;\n            $index\
    \ -= $alphabet_length if $index > $alphabet_length;\n            $encoded .= $alphabet_rev{$index};\n\
    \        } else {\n            $encoded .= $letter;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my @message = split //, $message;\n    my @vowels = qw(a\
    \ e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z);\n    my %alphabet = map { $alphabet[$_] => $_ } 0..$#alphabet;\n \
    \   my %vowels = map { $vowels[$_] => $_ } 0..$#vowels;\n    my $encoded = '';\n\
    \    for my $char (@message) {\n        if (exists $vowels{$char}) {\n       \
    \     $encoded .= $vowels[($vowels{$char} + 2) % 5];\n        } elsif (exists\
    \ $alphabet{$char}) {\n            $encoded .= $alphabet[($alphabet{$char} + 2)\
    \ % 26];\n        } else {\n            $encoded .= $char;\n        }\n    }\n\
    \    return $encoded;\n}", "    my $encoded = '';\n    my %vowels = (\n      \
    \  'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n\
    \        'u' => 'y',\n    );\n    for my $letter (split //, $message) {\n    \
    \    if (exists $vowels{lc $letter}) {\n            $encoded .= $vowels{lc $letter};\n\
    \        }\n        elsif ($letter =~ /[a-z]/) {\n            $encoded .= uc $letter;\n\
    \        }\n        else {\n            $encoded .= $letter;\n        }\n    }\n\
    \    return $encoded;\n}", "    my $encoded = '';\n    my @vowels = ('a'..'z');\n\
    \    my %vowels = map { $vowels[$_] => $vowels[($_ + 2) % 26] } (0..$#vowels);\n\
    \    for my $c (split //, $message) {\n        if ($c =~ /[a-z]/i) {\n       \
    \     $c =~ tr/a-z/A-Z/ if $c =~ /[a-z]/;\n            $c = $vowels{lc $c} if\
    \ $c =~ /[aeiou]/i;\n        }\n        $encoded .= $c;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    for my $c (split //, $message) {\n    \
    \    if ($c =~ /[a-z]/i) {\n            my $pos = index($alphabet, lc($c));\n\
    \            if ($pos >= 0) {\n                my $new_pos = ($pos + 2) % 26;\n\
    \                $c = substr($alphabet, $new_pos, 1);\n            }\n       \
    \     if ($c =~ /[a-z]/i) {\n                $c = uc($c);\n            }\n   \
    \     }\n        $encoded .= $c;\n    }\n    return $encoded;\n}", "    my @letters\
    \ = split //, $message;\n    my @encoded_letters;\n    my $vowels = \"aeiou\"\
    ;\n    foreach my $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n  \
    \          $letter =~ tr/a-z/A-Z/;\n        }\n        if ($letter =~ /[A-Z]/)\
    \ {\n            $letter =~ tr/A-Z/a-z/;\n        }\n        if ($letter =~ /[$vowels]/)\
    \ {\n            $letter =~ tr/aeiou/eioua/;\n        }\n        push @encoded_letters,\
    \ $letter;\n    }\n    return join '', @encoded_letters;\n}", "    my @message\
    \ = split(//, $message);\n    my @vowels = qw(a e i o u);\n    my @encoded;\n\
    \    for my $letter (@message) {\n        if ($letter =~ /[a-z]/) {\n        \
    \    $letter =~ tr/a-z/A-Z/;\n            push @encoded, $letter;\n        } elsif\
    \ ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n            push\
    \ @encoded, $letter;\n        } else {\n            push @encoded, $letter;\n\
    \        }\n    }\n    my $encoded = join('', @encoded);\n    for my $vowel (@vowels)\
    \ {\n        $encoded =~ s/$vowel/$vowels[($vowels[$vowel] + 2) % 5]/g;\n    }\n\
    \    return $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = qw(a e i\
    \ o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my %alphabet = map { substr($alphabet, $_, 1) => $_ } (0..25);\n    my\
    \ $alphabet_length = length($alphabet);\n    for my $char (split //, $message)\
    \ {\n        if ($vowels{lc $char}) {\n            my $index = $alphabet{lc $char};\n\
    \            $index += 2;\n            $index %= $alphabet_length;\n         \
    \   $char = substr($alphabet, $index, 1);\n        }\n        $encoded .= uc $char;\n\
    \    }\n    return $encoded;\n}", "    my $encoded = '';\n    my @vowels = qw(a\
    \ e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my $vowel_index =\
    \ 0;\n    for my $letter (split //, $message) {\n        if ($vowels{lc $letter})\
    \ {\n            $encoded .= $vowels[$vowel_index++ % @vowels];\n        } else\
    \ {\n            $encoded .= $letter;\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n    my %vowels\
    \ = map { $_ => 1 } @vowels;\n    for my $char (split //, $message) {\n      \
    \  if ($vowels{lc $char}) {\n            my $index = ord($char) - ord('a');\n\
    \            $index = ($index + 2) % 26;\n            $char = chr(ord('a') + $index);\n\
    \        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", "   \
    \ my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    my %letter_map\
    \ = (\n        'a' => 'A',\n        'b' => 'B',\n        'c' => 'C',\n       \
    \ 'd' => 'D',\n        'e' => 'E',\n        'f' => 'F',\n        'g' => 'G',\n\
    \        'h' => 'H',\n        'i' => 'I',\n        'j' => 'J',\n        'k' =>\
    \ 'K',\n        'l' => 'L',\n        'm' => 'M',\n        'n' => 'N',\n      \
    \  'o' => 'O',\n        'p' => 'P',\n        'q' => 'Q',\n        'r' => 'R',\n\
    \        's' => 'S',\n        't' => 'T',\n        'u' => 'U',\n        'v' =>\
    \ 'V',\n        'w' => 'W',\n        'x' => 'X',\n        'y' => 'Y',\n      \
    \  'z' => 'Z',\n    );\n    for my $char (split //, $message) {\n        if (index($vowels,\
    \ $char) != -1) {\n            $encoded .= $vowel_map{$char};\n        } elsif\
    \ (index($alphabet, $char) != -1) {\n            $encoded .= $letter_map{$char};\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n    $message =~ tr/aeiou/cdfghj/;\n\
    \    return $message;\n}", "    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded_message;\n    for my $letter (@message) {\n\
    \        if (grep {$letter eq $_} @vowels) {\n            my $index = index($message,\
    \ $letter);\n            my $vowel_index = index(join('', @vowels), $letter);\n\
    \            my $new_vowel_index = ($vowel_index + 2) % 5;\n            my $new_vowel\
    \ = $vowels[$new_vowel_index];\n            $encoded_message[$index] = $new_vowel;\n\
    \        }\n        else {\n            my $index = index($message, $letter);\n\
    \            my $new_letter = uc $letter;\n            $encoded_message[$index]\
    \ = $new_letter;\n        }\n    }\n    return join('', @encoded_message);\n}",
  "    my $encoded_message = '';\n    my %vowels = (\n        'a' => 'c',\n      \
    \  'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n\
    \    );\n    foreach my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc $char;\n\
    \            } else {\n                $char = lc $char;\n            }\n    \
    \    }\n        if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc $char};\n\
    \        }\n        $encoded_message .= $char;\n    }\n    return $encoded_message;\n\
    }", "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n  \
    \  my %vowels = map {$_ => 1} @vowels;\n    my %alphabet = (\n        'a' => 'c',\n\
    \        'b' => 'd',\n        'c' => 'e',\n        'd' => 'f',\n        'e' =>\
    \ 'g',\n        'f' => 'h',\n        'g' => 'i',\n        'h' => 'j',\n      \
    \  'i' => 'k',\n        'j' => 'l',\n        'k' => 'm',\n        'l' => 'n',\n\
    \        'm' => 'o',\n        'n' => 'p',\n        'o' => 'q',\n        'p' =>\
    \ 'r',\n        'q' => 's',\n        'r' => 't',\n        's' => 'u',\n      \
    \  't' => 'v',\n        'u' => 'w',\n        'v' => 'x',\n        'w' => 'y',\n\
    \        'x' => 'z',\n        'y' => 'a',\n        'z' => 'b',\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($vowels{$char}) {\n           \
    \ $encoded .= $alphabet{$char};\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = '';\n    my @vowels\
    \ = ('a'..'z');\n    my %vowels = map { $vowels[$_] => $vowels[($_ + 2) % 26]\
    \ } (0..25);\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            $encoded .= $char =~ /[a-z]/ ? uc $char : lc $char;\n       \
    \ }\n        elsif ($char =~ /[aeiou]/i) {\n            $encoded .= $char =~ /[a-z]/\
    \ ? uc $vowels{lc $char} : lc $vowels{uc $char};\n        }\n        else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", " \
    \   my @letters = split //, $message;\n    my $encoded = \"\";\n    foreach my\
    \ $letter (@letters) {\n        if ($letter =~ /[a-z]/) {\n            $encoded\
    \ .= chr(ord($letter) - 32);\n        } elsif ($letter =~ /[A-Z]/) {\n       \
    \     $encoded .= chr(ord($letter) + 32);\n        } else {\n            $encoded\
    \ .= $letter;\n        }\n    }\n    return $encoded;\n}", "    my $result = '';\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            $result .= $char\
    \ =~ /[a-z]/ ? uc $char : lc $char;\n        }\n        elsif ($char =~ /[aeiou]/i)\
    \ {\n            $result .= $vowels{lc $char};\n        }\n        else {\n  \
    \          $result .= $char;\n        }\n    }\n    return $result;\n}", "   \
    \ my $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n\
    \        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($char =~ /[a-z]/i) {\n        \
    \    if ($char =~ /[a-z]/) {\n                $char = uc $char;\n            }\
    \ else {\n                $char = lc $char;\n            }\n        }\n      \
    \  if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc $char};\n      \
    \  }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", "    my $encoded_message\
    \ = '';\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z);\n    my %vowel_hash = map { $vowels[$_]\
    \ => $vowels[($_ + 2) % 5] } 0..$#vowels;\n    my %alphabet_hash = map { $alphabet[$_]\
    \ => $_ } 0..$#alphabet;\n    my @message_array = split //, $message;\n    foreach\
    \ my $letter (@message_array) {\n        if (exists $vowel_hash{$letter}) {\n\
    \            $encoded_message .= $vowel_hash{$letter};\n        } elsif (exists\
    \ $alphabet_hash{$letter}) {\n            my $index = $alphabet_hash{$letter};\n\
    \            my $new_index = ($index + 2) % 26;\n            $encoded_message\
    \ .= $alphabet[$new_index];\n        } else {\n            $encoded_message .=\
    \ $letter;\n        }\n    }\n    return $encoded_message;\n}", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_len = length($alphabet);\n    my $vowels_len = length($vowels);\n\
    \    my $message_len = length($message);\n    for (my $i = 0; $i < $message_len;\
    \ $i++) {\n        my $char = substr($message, $i, 1);\n        my $char_pos =\
    \ index($alphabet, $char);\n        if ($char_pos >= 0) {\n            if ($char_pos\
    \ < $alphabet_len - 2) {\n                $char_pos += 2;\n            } else\
    \ {\n                $char_pos -= $alphabet_len - 2;\n            }\n        \
    \    $char = substr($alphabet, $char_pos, 1);\n        }\n        my $vowel_pos\
    \ = index($vowels, $char);\n        if ($vowel_pos >= 0) {\n            if ($vowel_pos\
    \ < $vowels_len - 2) {\n                $vowel_pos += 2;\n            } else {\n\
    \                $vowel_pos -= $vowels_len - 2;\n            }\n            $char\
    \ = substr($vowels, $vowel_pos, 1);\n        }\n        $encoded .= $char;\n \
    \   }\n    return $encoded;\n}", "    my $encoded = '';\n    my %vowels = (\n\
    \        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' =>\
    \ 'q',\n        'u' => 'y',\n    );\n    for my $char (split //, $message) {\n\
    \        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n     \
    \           $char = uc $char;\n            } else {\n                $char = lc\
    \ $char;\n            }\n        }\n        if ($char =~ /[aeiou]/i) {\n     \
    \       $char = $vowels{lc $char};\n        }\n        $encoded .= $char;\n  \
    \  }\n    return $encoded;\n}", "    my $encoded = '';\n    my @vowels = ('a',\
    \ 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    for my\
    \ $char (split //, $message) {\n        if ($vowels{lc $char}) {\n           \
    \ $encoded .= $vowels[($_ + 2) % @vowels] for (0..$#vowels);\n        } else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", " \
    \   my $encoded = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' =>\
    \ 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n\
    \    for my $char (split //, $message) {\n        if ($char =~ /[aeiou]/i) {\n\
    \            $encoded .= $vowels{lc $char};\n        }\n        elsif ($char =~\
    \ /[A-Z]/) {\n            $encoded .= lc $char;\n        }\n        elsif ($char\
    \ =~ /[a-z]/) {\n            $encoded .= uc $char;\n        }\n        else {\n\
    \            $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", " \
    \   my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_encoded =\
    \ \"cgjln\";\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc $char;\n\
    \            } else {\n                $char = lc $char;\n            }\n    \
    \        my $index = index($vowels, lc $char);\n            if ($index != -1)\
    \ {\n                $char = substr($vowels_encoded, $index, 1);\n           \
    \ }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n}", " \
    \   my @message = split //, $message;\n    my @encoded_message;\n    my %vowels\
    \ = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 'y',\n    );\n    for my $letter (@message) {\n\
    \        if (exists $vowels{$letter}) {\n            push @encoded_message, $vowels{$letter};\n\
    \        } elsif ($letter =~ /[a-z]/) {\n            push @encoded_message, uc\
    \ $letter;\n        } elsif ($letter =~ /[A-Z]/) {\n            push @encoded_message,\
    \ lc $letter;\n        } else {\n            push @encoded_message, $letter;\n\
    \        }\n    }\n    return join '', @encoded_message;\n}", "    my $encoded_message\
    \ = \"\";\n    my @alphabet = ('a'..'z');\n    my %vowels = (\n        'a' =>\
    \ 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n      \
    \  'u' => 'y',\n    );\n    for my $char (split //, $message) {\n        if ($char\
    \ =~ /[a-z]/i) {\n            my $index = index(lc($char), $char) == 0 ? index(lc($char),\
    \ $char) : index(uc($char), $char);\n            if (exists $vowels{$char}) {\n\
    \                $encoded_message .= $vowels{$char};\n            } else {\n \
    \               $encoded_message .= $alphabet[$index];\n            }\n      \
    \  } else {\n            $encoded_message .= $char;\n        }\n    }\n    return\
    \ $encoded_message;\n}", "    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my %alphabet\
    \ = map { $_ => 1 } 'a'..'z';\n    my %encoded;\n    for my $letter (@message)\
    \ {\n        if ($vowels{$letter}) {\n            my $index = ord($letter) - ord('a');\n\
    \            $index += 2;\n            $index %= 26;\n            $letter = chr(ord('a')\
    \ + $index);\n        }\n        if ($alphabet{$letter}) {\n            $letter\
    \ = uc $letter;\n        }\n        $encoded{$letter}++;\n    }\n    return join\
    \ '', keys %encoded;\n}", "    my $encoded = '';\n    my $vowels = 'aeiou';\n\
    \    my $vowels_hash = {\n        a => 'c',\n        e => 'i',\n        i => 'o',\n\
    \        o => 'u',\n        u => 'a',\n    };\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[a-z]/i) {\n            if ($char =~ /[a-z]/) {\n \
    \               $char = uc $char;\n            } else {\n                $char\
    \ = lc $char;\n            }\n        }\n        if ($char =~ /[$vowels]/i) {\n\
    \            $char = $vowels_hash->{lc $char};\n        }\n        $encoded .=\
    \ $char;\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my $vowels\
    \ = \"aeiou\";\n    my $vowels_encoded = \"cgjkmps\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_encoded = \"cdefghijklmnopqrstuvwxyzb\";\n    for (my $i =\
    \ 0; $i < length($message); $i++) {\n        my $char = substr($message, $i, 1);\n\
    \        my $index = index($vowels, $char);\n        if ($index != -1) {\n   \
    \         $encoded .= substr($vowels_encoded, $index, 1);\n        } else {\n\
    \            $index = index($alphabet, $char);\n            if ($index != -1)\
    \ {\n                $encoded .= substr($alphabet_encoded, $index, 1);\n     \
    \       } else {\n                $encoded .= $char;\n            }\n        }\n\
    \    }\n    return $encoded;\n}", "    my @message = split //, $message;\n   \
    \ my @vowels = qw(a e i o u);\n    my @encoded;\n    for my $letter (@message)\
    \ {\n        if ($letter =~ /[a-z]/) {\n            $letter =~ tr/a-z/A-Z/;\n\
    \            if (grep {$_ eq $letter} @vowels) {\n                my $index =\
    \ first_index {$_ eq $letter} @vowels;\n                $letter = $vowels[($index\
    \ + 2) % 5];\n            }\n        }\n        push @encoded, $letter;\n    }\n\
    \    return join '', @encoded;\n}", "    my @message = split //, $message;\n \
    \   my @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z);\n    my %vowels = map { $vowels[$_] => $vowels[($_\
    \ + 2) % 5] } 0..4;\n    my %alphabet = map { $alphabet[$_] => $_ } 0..25;\n \
    \   my @encoded;\n    for my $letter (@message) {\n        if (exists $vowels{$letter})\
    \ {\n            push @encoded, $vowels{$letter};\n        } elsif (exists $alphabet{$letter})\
    \ {\n            my $index = $alphabet{$letter};\n            push @encoded, $alphabet[($index\
    \ + 2) % 26];\n        } else {\n            push @encoded, $letter;\n       \
    \ }\n    }\n    return join '', @encoded;\n}", "    my $encoded = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \   my $alphabet_length = length($alphabet);\n    my $vowels_length = length($vowels);\n\
    \    my $vowel_index = 0;\n    my $alphabet_index = 0;\n    my $vowel_found =\
    \ 0;\n    my $vowel_position = 0;\n    my $message_length = length($message);\n\
    \    my $message_index = 0;\n    my $message_char = \"\";\n    my $message_char_lower\
    \ = \"\";\n    my $message_char_upper = \"\";\n    my $message_char_lower_index\
    \ = 0;\n    my $message_char_upper_index = 0;\n    my $message_char_lower_position\
    \ = 0;\n    my $message_char_upper_position = 0;\n    my $message_char_lower_vowel_position\
    \ = 0;\n    my $message_char_upper_vowel_position = 0;\n    my $message_char_lower_vowel_index\
    \ = 0;\n    my $message_char_upper_vowel_index = 0;\n    my $message_char_lower_vowel_found\
    \ = 0;\n    my $message_char_upper_vowel_found = 0;\n    my $message_char_lower_vowel_position_plus_two\
    \ = 0;\n    my $message_char_upper_vowel_position_plus_two = 0;\n    my $message_char_lower_vowel_position_plus_two_mod\
    \ = 0;\n    my $message_char_upper_vowel_position_plus_two_mod = 0;\n    my $message_char_lower_vowel_position_plus_two_mod_index\
    \ = 0;\n    my $message_char_upper_vowel_position_plus_two_mod_index = 0;\n  \
    \  my $message_char_lower_vowel_position_plus_two_mod_char = \"\";", "    my @chars\
    \ = split //, $message;\n    my @encoded;\n    my %vowels = (\n        'a' =>\
    \ 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n      \
    \  'u' => 'y',\n    );\n    for my $char (@chars) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char = uc $char;\n\
    \            } else {\n                $char = lc $char;\n            }\n    \
    \    }\n        if ($char =~ /[aeiou]/i) {\n            $char = $vowels{lc $char};\n\
    \        }\n        push @encoded, $char;\n    }\n    return join '', @encoded;\n\
    }", "    my $encoded = '';\n    my %vowels = (\n        a => 'c',\n        e =>\
    \ 'g',\n        i => 'k',\n        o => 'q',\n        u => 'y',\n    );\n    for\
    \ my $char (split //, $message) {\n        if ($char =~ /[aeiou]/) {\n       \
    \     $encoded .= $vowels{$char};\n        }\n        elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded .= lc $char;\n        }\n        elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded .= uc $char;\n        }\n        else {\n          \
    \  $encoded .= $char;\n        }\n    }\n    return $encoded;\n}", "    my $encoded\
    \ = '';\n    my $vowels = 'aeiou';\n    my $vowels_index = 0;\n    my $vowels_length\
    \ = length($vowels);\n    my $char;\n    my $char_index;\n    my $char_code;\n\
    \    my $char_code_new;\n    my $char_new;\n    for (my $i = 0; $i < length($message);\
    \ $i++) {\n        $char = substr($message, $i, 1);\n        $char_index = index($vowels,\
    \ $char);\n        if ($char_index >= 0) {\n            $char_index = ($char_index\
    \ + 2) % $vowels_length;\n            $char_new = substr($vowels, $char_index,\
    \ 1);\n        } else {\n            $char_code = ord($char);\n            if\
    \ ($char_code >= 65 && $char_code <= 90) {\n                $char_code_new = $char_code\
    \ + 32;\n            } elsif ($char_code >= 97 && $char_code <= 122) {\n     \
    \           $char_code_new = $char_code - 32;\n            } else {\n        \
    \        $char_code_new = $char_code;\n            }\n            $char_new =\
    \ chr($char_code_new);\n        }\n        $encoded .= $char_new;\n    }\n   \
    \ return $encoded;\n}", "    my $new_message = \"\";\n    my @vowels = qw(a e\
    \ i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w\
    \ x y z);\n    my %vowel_hash = map { $vowels[$_] => $vowels[($_ + 2) % 5] } 0..$#vowels;\n\
    \    my %alphabet_hash = map { $alphabet[$_] => $_ } 0..$#alphabet;\n    for my\
    \ $char (split //, $message) {\n        if (exists $vowel_hash{$char}) {\n   \
    \         $new_message .= $vowel_hash{$char};\n        }\n        elsif (exists\
    \ $alphabet_hash{$char}) {\n            my $index = $alphabet_hash{$char};\n \
    \           if ($index == 0) {\n                $new_message .= $alphabet[25];\n\
    \            }\n            else {\n                $new_message .= $alphabet[$index\
    \ - 1];\n            }\n        }\n        else {\n            $new_message .=\
    \ $char;\n        }\n    }\n    return $new_message;\n}", "    my $encoded = '';\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split\
    \ //, $message) {\n        if ($char =~ /[a-z]/i) {\n            $encoded .= $char\
    \ =~ /[a-z]/ ? uc $char : lc $char;\n        }\n        else {\n            $encoded\
    \ .= $char;\n        }\n    }\n    for my $vowel (keys %vowels) {\n        $encoded\
    \ =~ s/$vowel/$vowels{$vowel}/g;\n    }\n    return $encoded;\n}", "    my $encoded\
    \ = '';\n    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n      \
    \  'i' => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char\
    \ (split //, $message) {\n        if (exists $vowels{lc $char}) {\n          \
    \  $encoded .= $vowels{lc $char};\n        } elsif ($char =~ /[a-z]/) {\n    \
    \        $encoded .= uc $char;\n        } else {\n            $encoded .= $char;\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    for my $char (split //, $message) {\n        if ($vowels{lc $char}) {\n \
    \           my $index = ord($char) - ord('a');\n            $index = ($index +\
    \ 2) % 26;\n            $char = chr(ord('a') + $index);\n        }\n        $encoded\
    \ .= $char;\n    }\n    return $encoded;\n}", "    my $encoded = \"\";\n    my\
    \ @vowels = qw(a e i o u);\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ @letters = split //, $message;\n    for my $letter (@letters) {\n        if\
    \ ($vowels{lc $letter}) {\n            my $index = ord($letter) - ord('a');\n\
    \            $index = ($index + 2) % 5;\n            $letter = chr(ord('a') +\
    \ $index);\n        }\n        $encoded .= $letter;\n    }\n    return $encoded;\n\
    }", "    my @message = split //, $message;\n    my @vowels = qw(a e i o u);\n\
    \    my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z);\n\
    \    my $encoded_message = \"\";\n    foreach my $letter (@message) {\n      \
    \  if ($letter =~ /[a-z]/) {\n            my $index = 0;\n            foreach\
    \ my $vowel (@vowels) {\n                if ($letter eq $vowel) {\n          \
    \          my $new_index = index($vowel, $letter) + 2;\n                    $letter\
    \ = $vowels[$new_index];\n                }\n            }\n            $letter\
    \ = uc($letter);\n        }\n        $encoded_message .= $letter;\n    }\n   \
    \ return $encoded_message;\n}", "    my @alphabet = ('a'..'z');\n    my %vowels\
    \ = map { $_ => 1 } qw(a e i o u);\n    my $encoded = '';\n    for my $letter\
    \ (split //, $message) {\n        if ($vowels{lc $letter}) {\n            my $index\
    \ = (index $alphabet[0], lc $letter) + 2;\n            $index -= 26 if $index\
    \ > 25;\n            $encoded .= $alphabet[$index];\n        }\n        else {\n\
    \            $encoded .= lc $letter eq $letter ? uc $letter : lc $letter;\n  \
    \      }\n    }\n    return $encoded;\n}", "    my @chars = split //, $message;\n\
    \    my @encoded;\n    for my $char (@chars) {\n        if ($char =~ /[a-z]/)\
    \ {\n            push @encoded, chr(ord($char) - 32);\n        } elsif ($char\
    \ =~ /[A-Z]/) {\n            push @encoded, chr(ord($char) + 32);\n        } else\
    \ {\n            push @encoded, $char;\n        }\n    }\n    return join '',\
    \ @encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my\
    \ $vowels_encoded = \"cgjln\";\n    for my $char (split //, $message) {\n    \
    \    if ($char =~ /[a-z]/i) {\n            $encoded .= uc($char) eq $char ? lc($char)\
    \ : uc($char);\n        }\n        if ($char =~ /[$vowels]/i) {\n            my\
    \ $index = index($vowels, lc($char));\n            $encoded .= substr($vowels_encoded,\
    \ $index, 1);\n        }\n    }\n    return $encoded;\n}", "    my @chars = split(//,\
    \ $message);\n    my @encoded;\n    my $vowels = 'aeiou';\n    my $vowels_index\
    \ = 0;\n    my $vowels_len = length($vowels);\n    my $char;\n    my $index;\n\
    \    for my $char (@chars) {\n        $index = index($vowels, $char);\n      \
    \  if ($index >= 0) {\n            $index = ($index + 2) % $vowels_len;\n    \
    \        $char = substr($vowels, $index, 1);\n        }\n        $char = uc($char)\
    \ if ($char eq lc($char));\n        push(@encoded, $char);\n    }\n    return\
    \ join('', @encoded);\n}", "    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l\
    \ = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my\
    \ $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n  \
    \  my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $e = 0;\n    my $i = 0;\n    my $o = 0;\n    my $u = 0;\n\
    \    my $A = 0;\n    my $E = 0;\n    my $I = 0;\n    my $O = 0;\n    my $U = 0;\n\
    \    my $message = \"\";\n    my $vowel = \"\";\n    my $letter = \"\";\n    my\
    \ $letter_index = 0;\n    my $vowel_index = 0;\n    my $new_letter = \"\";\n \
    \   my $new_vowel = \"\";\n    my $new_message = \"\";\n    my $new_letter_index\
    \ = 0;\n    my $new_vowel_index = 0;\n    my $new_letter_index_2 = 0;\n    my\
    \ $new_vowel_index_2 = 0;\n    my $new_letter_index_3 = 0;\n    my $new_vowel_index_3\
    \ = 0;\n    my $new_letter_index_4 = 0;\n    my $new_vowel_index_4 = 0;\n    my\
    \ $new_letter_index_5 = 0;\n    my $new_vowel_index_", "    my $result = \"\"\
    ;\n    my @vowels = qw(a e i o u);\n    my @alphabet = qw(a b c d e f g h i j\
    \ k l m n o p q r s t u v w x y z);\n    my %vowel_map = (\n        a => 'c',\n\
    \        e => 'g',\n        i => 'k',\n        o => 'q',\n        u => 'y',\n\
    \    );\n    for my $char (split //, $message) {\n        if ($char =~ /[a-z]/i)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $result .= uc $char;\n\
    \            } else {\n                $result .= lc $char;\n            }\n \
    \       } elsif ($char =~ /[aeiou]/i) {\n            if ($char =~ /[aeiou]/) {\n\
    \                $result .= uc $vowel_map{lc $char};\n            } else {\n \
    \               $result .= lc $vowel_map{uc $char};\n            }\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }", "    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    my %vowel_map = (\n        'a' => 'c',\n\
    \        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n        'u' =>\
    \ 'y',\n    );\n    for my $c (split //, $message) {\n        if ($c =~ /[A-Z]/)\
    \ {\n            $c = lc($c);\n        } elsif ($c =~ /[a-z]/) {\n           \
    \ $c = uc($c);\n        }\n        if ($vowels =~ /$c/) {\n            $c = $vowel_map{$c};\n\
    \        }\n        $encoded .= $c;\n    }\n    return $encoded;\n}", "    my\
    \ $encoded = \"\";\n    my $i = 0;\n    my $char;\n    my $vowels = \"aeiou\"\
    ;\n    my $vowel_index;\n    my $vowel_offset;\n    my $vowel_offset_index;\n\
    \    my $vowel_offset_char;\n    my $vowel_offset_char_code;\n    my $vowel_offset_char_code_offset;\n\
    \    my $vowel_offset_char_code_offset_char;\n    my $vowel_offset_char_code_offset_char_code;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset;\n    my $vowel_offset_char_code_offset_char_code_offset_char;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset_char_code;\n    my $vowel_offset_char_code_offset_char_code_offset_char_code_offset;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset_char_code_offset_char;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset_char_code_offset_char_code;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset_char_code_offset_char_code_offset;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset_char_code_offset_char_code_offset_char;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset_char_code_offset_char_code_offset_char_code;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset_char_code_offset_char_code_offset_char_code_offset;\n\
    \    my $vowel_offset_char_code_offset_char_code_offset_char_code_offset_char_code_offset_char_code_offset_char;\n\
    \    my $vowel_offset_char_", "    my @letters = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded_letters;\n    foreach my $letter (@letters)\
    \ {\n        my $encoded_letter = $letter;\n        if ($letter =~ /[a-z]/) {\n\
    \            $encoded_letter =~ tr/a-z/A-Z/;\n        }\n        elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded_letter =~ tr/A-Z/a-z/;\n        }\n    \
    \    if (grep {$letter eq $_} @vowels) {\n            my $index = first_index\
    \ {$_ eq $letter} @vowels;\n            $index += 2;\n            $index = $index\
    \ % 5;\n            $encoded_letter = $vowels[$index];\n        }\n        push\
    \ @encoded_letters, $encoded_letter;\n    }\n    return join '', @encoded_letters;\n\
    }", "    my $encoded_message = \"\";\n    my @vowels = qw(a e i o u);\n    my\
    \ %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n\
    \        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (split //,\
    \ $message) {\n        if (grep { $char eq $_ } @vowels) {\n            $encoded_message\
    \ .= $vowel_map{$char};\n        } elsif ($char =~ /[a-z]/) {\n            $encoded_message\
    \ .= chr(ord($char) + 2);\n        } elsif ($char =~ /[A-Z]/) {\n            $encoded_message\
    \ .= chr(ord($char) + 2 - ord('A') + ord('a'));\n        } else {\n          \
    \  $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }", "    my $encoded_message = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my %vowel_map = (\n        'a' => 'c',\n        'e' => 'g',\n        'i'\
    \ => 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char\
    \ (split //, $message) {\n        if (grep { $_ eq $char } @vowels) {\n      \
    \      $encoded_message .= $vowel_map{$char};\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            $encoded_message .= lc($char);\n        } elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded_message .= uc($char);\n        } else {\n          \
    \  $encoded_message .= $char;\n        }\n    }\n    return $encoded_message;\n\
    }", "    my $new_message = '';\n    my @vowels = ('a'..'z');\n    my %vowels =\
    \ map { $_ => 1 } @vowels;\n    my @letters = ('a'..'z');\n    my %letters = map\
    \ { $_ => 1 } @letters;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my\
    \ $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n  \
    \  my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n\
    \    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;", "    my $encoded = \"\";\n    my $vowels = \"\
    aeiou\";\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n\
    \    my $g;\n    my $h;\n    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my\
    \ $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n\
    \    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my\
    \ $z;\n    my $a", "    my $encoded = '';\n    my $vowels = 'aeiou';\n    my $vowels_encoded\
    \ = 'cgjkmps';\n    my $vowels_encoded_index = 0;\n    my $vowels_index = 0;\n\
    \    my $char;\n    foreach $char (split //, $message) {\n        if ($char =~\
    \ /[a-z]/i) {\n            $encoded .= uc($char) eq $char ? lc($char) : uc($char);\n\
    \        }\n        if ($char =~ /[aeiou]/i) {\n            $vowels_index = index($vowels,\
    \ lc($char));\n            $vowels_encoded_index = ($vowels_index + 2) % 5;\n\
    \            $encoded .= uc($char) eq $char ? uc(substr($vowels_encoded, $vowels_encoded_index,\
    \ 1)) : substr($vowels_encoded, $vowels_encoded_index, 1);\n        }\n    }\n\
    \    return $encoded;\n}", "    my $encoded = \"\";\n    my $vowels = \"aeiou\"\
    ;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $alphabet_length\
    \ = length($alphabet);\n    my $vowels_length = length($vowels);\n    my $message_length\
    \ = length($message);\n    my $index;\n    my $i;\n    my $j;\n    my $k;\n  \
    \  my $l;\n    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my\
    \ $r;\n    my $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n\
    \    my $y;\n    my $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my\
    \ $e;\n    my $f;\n    my $g;\n    my $h;\n    my $j;\n    my $k;\n    my $l;\n\
    \    my $m;\n    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my\
    \ $s;\n    my $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n\
    \    my $z;\n    my $a;\n    my $b;\n    my $c;\n    my $d;\n    my $e;\n    my\
    \ $f;\n    my $g;\n    my $h;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n\
    \    my $n;\n    my $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my\
    \ $t;\n    my $u;\n    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n\
    \    my $a;\n    my $b"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
