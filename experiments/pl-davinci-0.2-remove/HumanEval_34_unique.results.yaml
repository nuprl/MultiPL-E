language: pl
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [ sort keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) { $h{$_} = 1; }\n    foreach (sort keys\
    \ %h) { push(@u, $_); }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [ sort keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return sort @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ \\@uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u\
    \ = sort keys %h;\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!exists($h{$e}))\
    \ {\n            $h{$e} = 1;\n            push(@u, $e);\n        }\n    }\n  \
    \  return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u\
    \ = sort keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u\
    \ = sort keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my @u = sort { $a <=> $b } @$l;\n    my @r;\n    for (my $i = 0; $i\
    \ < @u; $i++) {\n        if ($i == 0 || $u[$i] != $u[$i-1]) {\n            push\
    \ @r, $u[$i];\n        }\n    }\n    return @r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, $e);\n    foreach $e (@$l) {\n\t$h{$e} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [ sort keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h);\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u\
    \ = sort keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!$h{$e})\
    \ {\n            $h{$e} = 1;\n            push(@u, $e);\n        }\n    }\n  \
    \  return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h);\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n  \
    \  return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ \\@uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, $e, @r);\n    foreach $e (@$l) {\n        $h{$e} = 1;\n    }\n\
    \    @r = sort keys %h;\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n\
    \    @u = sort keys %h;\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u\
    \ = sort keys %h;\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = ();\n    foreach my $e (@$l) {\n   \
    \     unless ($seen{$e}) {\n            push(@uniq, $e);\n            $seen{$e}\
    \ = 1;\n        }\n    }\n    return @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!$h{$e})\
    \ {\n            $h{$e} = 1;\n            push(@u, $e);\n        }\n    }\n  \
    \  return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!defined($h{$e}))\
    \ {\n            $h{$e} = 1;\n            push(@u, $e);\n        }\n    }\n  \
    \  return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = ();\n    foreach my $e (@$l) {\n   \
    \     unless ($seen{$e}) {\n            push(@uniq, $e);\n            $seen{$e}\
    \ = 1;\n        }\n    }\n    return @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ \\@uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    my @u;\n    foreach (@$l) {\n        push(@u, $_) unless\
    \ $h{$_};\n        $h{$_} = 1;\n    }\n    return @u;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    @h{@$l} = ();\n    return [ sort keys %h ];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 255
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h);\n    my($e);\n    my(@u);\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Missing right curly or square bracket at /tmp/tmppfc0i8jp.pl line 18, at
    end of line

    syntax error at /tmp/tmppfc0i8jp.pl line 18, at EOF

    Execution of /tmp/tmppfc0i8jp.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %s;\n    my @u;\n    foreach my $e (@$l) {\n        push(@u, $e)\
    \ unless $s{$e}++;\n    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @r);\n    foreach (@$l) {\n        push(@r, $_) unless $h{$_}++;\n\
    \    }\n    return \\@r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [ sort keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        if (!$h{$_}) {\n        \
    \    $h{$_} = 1;\n            push(@u, $_);\n        }\n    }\n    return @u;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        next if $h{$e};\n\
    \        $h{$e} = 1;\n        push @u, $e;\n    }\n    return @u;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    my @u;\n    foreach my $e (@$l) {\n        if (!exists($h{$e}))\
    \ {\n            $h{$e} = 1;\n            push(@u, $e);\n        }\n    }\n  \
    \  return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %s;\n    foreach (@$l) {\n\t$s{$_} = 1;\n    }\n    return sort\
    \ keys %s;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @unique = grep { ! $seen{$_} ++ } @$l;\n   \
    \ return @unique;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n\
    \    @u = sort keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u\
    \ = sort keys %h;\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, $e, @u);\n    foreach $e (@$l) {\n\t$h{$e} = 1;\n    }\n   \
    \ @u = sort keys %h;\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    @u\
    \ = sort keys %h;\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    return\
    \ sort keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [ sort keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n   \
    \ return [sort keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [ sort\
    \ keys %h ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    map { $h{$_} = 1 } @$l;\n    return sort keys %h;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n   \
    \     if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
    \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return [sort\
    \ keys %h];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %h;\n    foreach (@$l) {\n\t$h{$_} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my %seen = ();\n    my @uniq = grep { ! $seen{$_} ++ } @$l;\n    return\
    \ @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
- exit_code: 1
  program: "# Return sorted unique elements in a list\nsub unique {\n    my($l) =\
    \ @_;\n    my(%h, @u);\n    foreach (@$l) {\n        push(@u, $_) unless $h{$_}++;\n\
    \    }\n    return @u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012698
