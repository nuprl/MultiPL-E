language: pl
name: HumanEval_151_double_the_difference
results:
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^[0-9]+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if (int($num)\
    \ == $num && $num > 0) {\n            $sum += $num * $num;\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for my $num (@$lst) {\n        if ($num =~ /^\\\
    d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n    }\n \
    \   return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    return 0 unless @$lst;\n    my $max = $lst->[0];\n    my $min = $lst->[0];\n\
    \    for my $i (@$lst) {\n        $max = $i if $i > $max;\n        $min = $i if\
    \ $i < $min;\n    }\n    return 2 * ($max - $min);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num > 0) {\n            $sum += $num**2;\n        }\n    }\n  \
    \  return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i > 0) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if (int($i) ==\
    \ $i and $i > 0) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 255
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if (is_odd($num))\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_odd called at /tmp/tmphunlmibe.pl line 8.

    '
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i % 2 ==\
    \ 1) {\n            $sum += $i * $i;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^[0-9]+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i ** 2;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    # your code here\n    my $sum = 0;\n    foreach my $num (@$lst) {\n\
    \        if ($num % 2 == 1) {\n            $sum += $num * $num;\n        }\n \
    \   }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x >= 0) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if (int($num)\
    \ == $num && $num >= 0) {\n            $sum += $num ** 2;\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i >= 0) {\n            $sum += $i**2;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for my $i (@$lst) {\n        if ($i =~ /^[0-9]+$/\
    \ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i >= 0) {\n            $sum += $i**2;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    # YOUR CODE HERE\n    my $sum = 0;\n    foreach my $i (@$lst) {\n\
    \        if ($i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $item (@$lst) {\n        if ($item =~\
    \ /^\\d+$/ && $item % 2 == 1) {\n            $sum += $item * $item;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for my $i (@$lst) {\n        if ($i > 0 && $i ==\
    \ int($i)) {\n            $sum += $i * $i;\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^[0-9]+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if (int($x) ==\
    \ $x and $x >= 0) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x ** 2;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    # your code here\n    my $sum = 0;\n    foreach my $num (@$lst) {\n\
    \        if ($num =~ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num *\
    \ $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if (int($num)\
    \ == $num && $num > 0) {\n            $sum += $num * $num;\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for my $n (@$lst) {\n        if ($n =~ /^\\d+$/\
    \ and $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^[0-9]+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    # your code here\n    my $sum = 0;\n    foreach my $i (@$lst) {\n\
    \        if ($i % 2 == 1) {\n            $sum += $i ** 2;\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if (int($num)\
    \ == $num && $num >= 0) {\n            if ($num % 2 == 1) {\n                $sum\
    \ += $num * $num;\n            }\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n     \
    \   if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if (int($num)\
    \ == $num && $num >= 0) {\n            $sum += $num ** 2;\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i > 0) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if (int($n) ==\
    \ $n && $n >= 0) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 255
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if (is_odd($num))\
    \ {\n            $sum += $num * $num;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_odd called at /tmp/tmphunlmibe.pl line 8.

    '
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i > 0 &&\
    \ $i == int($i)) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n >= 0) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n >= 0) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if (int($num)\
    \ == $num && $num >= 0) {\n            $sum += $num * $num;\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    my $count = 0;\n    foreach my $num (@$lst) {\n\
    \        if ($num =~ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num *\
    \ $num;\n            $count++;\n        }\n    }\n    return $sum * 2;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    # your code here\n    my $sum = 0;\n    foreach my $num (@$lst) {\n\
    \        if ($num =~ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num *\
    \ $num;\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $item (@$lst) {\n        if ($item =~\
    \ /^\\d+$/ && $item % 2 == 1) {\n            $sum += $item * $item;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 1
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i % 2 ==\
    \ 1) {\n            $sum += $i * $i;\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $n (@$lst) {\n        if ($n =~ /^\\\
    d+$/ && $n % 2 == 1) {\n            $sum += $n * $n;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $x (@$lst) {\n        if ($x =~ /^\\\
    d+$/ && $x % 2 == 1) {\n            $sum += $x * $x;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012762
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n  \
    \  }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0)) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num =~\
    \ /^\\d+$/ && $num % 2 == 1) {\n            $sum += $num * $num;\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&double_the_difference;\n        if(eq_deeply($candidate->([]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5.0,\
    \ 4.0]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([0.1, 0.2, 0.3]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10.0,\
    \ -20.0, -30.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n        if(eq_deeply($candidate->([-1.0, -2.0, 8.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.2,\
    \ 3.0, 5.0]),34)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0,\
    \ 7.0, 9.0]),165)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
- exit_code: 0
  program: "# Given a list of numbers, return the sum of squares of the numbers\n\
    # in the list that are odd. Ignore numbers that are negative or not integers.\n\
    # If the input list is empty, return 0.\nsub double_the_difference {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (@$lst) {\n        if ($i =~ /^\\\
    d+$/ && $i % 2 == 1) {\n            $sum += $i * $i;\n        }\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&double_the_difference;\n\
    \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([5.0, 4.0]),25))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.1,\
    \ 0.2, 0.3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-10.0, -20.0, -30.0]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
    \ -2.0, 8.0]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0.2, 3.0, 5.0]),34)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660012761
