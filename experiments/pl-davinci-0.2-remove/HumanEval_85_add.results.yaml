language: pl
name: HumanEval_85_add
results:
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    foreach my $i (0..$#$lst) {\n        $sum += $lst->[$i] if $i % 2 ==\
    \ 1 && $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < @lst; $i++) {\n        if\
    \ ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < @lst; $i++) {\n        if\
    \ ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n  \
    \      if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n  \
    \      if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @arr =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @arr; $i++) {\n  \
    \      if ($i % 2 == 1 && $arr[$i] % 2 == 0) {\n            $sum += $arr[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n  \
    \      if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i < scalar @lst; $i++) {\n   \
    \     if($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 != 0\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < @lst; $i++) {\n        if\
    \ ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i < scalar @lst; $i++) {\n   \
    \     if($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < @$lst; $i++) {\n        if($i % 2 == 1) {\n    \
    \        $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    my $i = 0;\n    foreach my $item (@$lst) {\n        if ($i % 2 == 1\
    \ && $item % 2 == 0) {\n            $sum += $item;\n        }\n        $i++;\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < @lst; $i++) {\n        if\
    \ ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i < scalar @lst; $i++) {\n   \
    \     if($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        $sum += $lst->[$i]\
    \ if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 != 0)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i < scalar @lst; $i++) {\n   \
    \     if($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n  \
    \      if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $res =\
    \ 0;\n    for (my $i = 1; $i < scalar @$lst; $i += 2) {\n        $res += $lst->[$i]\
    \ if $lst->[$i] % 2 == 0;\n    }\n    return $res;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n  \
    \      if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 != 0)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n  \
    \      if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i += 2) {\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < @lst; $i++) {\n        if\
    \ ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < @$lst; $i++) {\n        if($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @lst; $i++) {\n  \
    \      if ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i += 2) {\n        $sum += $lst->[$i];\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my @lst =\
    \ @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < @lst; $i++) {\n        if\
    \ ($i % 2 == 1 && $lst[$i] % 2 == 0) {\n            $sum += $lst[$i];\n      \
    \  }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar @$lst; $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        $sum += $lst->[$i]\
    \ if ($i % 2 == 1 && $lst->[$i] % 2 == 0);\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1\
    \ && $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < scalar(@$lst); $i++) {\n        if ($i % 2 == 1)\
    \ {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n      \
    \  if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1) {\n  \
    \          $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for (my $i = 0; $i < @$lst; $i++) {\n        if ($i % 2 == 1 && $lst->[$i]\
    \ % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\nsub add {\n    my($lst) = @_;\n    my $sum =\
    \ 0;\n    for(my $i = 0; $i < scalar(@$lst); $i++) {\n        if($i % 2 == 1 &&\
    \ $lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n    }\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660015384
