name: HumanEval_132_is_nested
language: pl
prompt: "# Create a function that takes a string as input which contains only square\
  \ brackets.\n# The function should return True if and only if there is a valid subsequence\
  \ of brackets \n# where at least one bracket in the subsequence is nested.\nsub\
  \ is_nested {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nested;\n\
  \        if(eq_deeply($candidate->(\"[[]]\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[]]]]]]][[[[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  [][]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"[]\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[[[]]]]\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]]]]]]]]]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->(\"[][][[]]\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[]\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  []]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"[[]][[\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"[[][]]\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"[[[[[[[[\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"]]]]]]]]\"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    for my $char (split //, $string) {\n      \
    \  if ($char eq '[') {\n            $count++;\n        } elsif ($char eq ']')\
    \ {\n            $count--;\n        }\n        return 0 if $count < 0;\n    }\n\
    \    return $count == 0;\n}", "    my $count = 0;\n    for my $char (split //,\
    \ $string) {\n        if ($char eq '[') {\n            $count++;\n        }\n\
    \        elsif ($char eq ']') {\n            $count--;\n        }\n        return\
    \ 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my $nested = 0;\n\
    \    my $open = 0;\n    my $close = 0;\n    my $valid = 0;\n    my $i = 0;\n \
    \   while ($i < length($string)) {\n        my $char = substr($string, $i, 1);\n\
    \        if ($char eq '[') {\n            $open++;\n            $nested++;\n \
    \       } elsif ($char eq ']') {\n            $close++;\n            $nested--;\n\
    \        }\n        if ($nested < 0) {\n            $valid = 0;\n            last;\n\
    \        }\n        if ($nested > 0) {\n            $valid = 1;\n        }\n \
    \       $i++;\n    }\n    if ($open == $close && $valid == 1) {\n        return\
    \ 1;\n    } else {\n        return 0;\n    }\n}", "    my $count = 0;\n    my\
    \ $nested = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            $count++;\n            $nested = 1 if $count > 1;\n        }\n\
    \        elsif ($char eq ']') {\n            $count--;\n        }\n    }\n   \
    \ return $count == 0 && $nested;\n}", "    my @stack;\n    my $i = 0;\n    while($i\
    \ < length($string)) {\n        my $c = substr($string, $i, 1);\n        if($c\
    \ eq '[') {\n            push(@stack, $c);\n        } elsif($c eq ']') {\n   \
    \         if(scalar(@stack) == 0) {\n                return 0;\n            }\n\
    \            my $top = pop(@stack);\n            if($top ne '[') {\n         \
    \       return 0;\n            }\n        }\n        $i++;\n    }\n    return\
    \ scalar(@stack) == 0;\n}", "    my $stack = [];\n    my $open = {\n        '('\
    \ => 1,\n        '[' => 1,\n        '{' => 1,\n    };\n    my $close = {\n   \
    \     ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    };\n    for my\
    \ $char (split //, $string) {\n        if ($open->{$char}) {\n            push\
    \ @$stack, $char;\n        }\n        elsif ($close->{$char}) {\n            if\
    \ ($stack->[-1] eq $close->{$char}) {\n                pop @$stack;\n        \
    \    }\n            else {\n                return 0;\n            }\n       \
    \ }\n    }\n    return @$stack ? 0 : 1;\n}", "    my $count = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return 0;\n        }\n    }\n    return\
    \ $count == 0;\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        return 0 if $count < 0;\n\
    \    }\n    return $count == 0;\n}", "    my $count = 0;\n    my $nested = 0;\n\
    \    for my $c (split //, $string) {\n        if ($c eq '[') {\n            $count++;\n\
    \            $nested = 1 if $count > 1;\n        } elsif ($c eq ']') {\n     \
    \       $count--;\n        }\n    }\n    return $count == 0 && $nested;\n}", " \
    \   my @stack;\n    my $len = length($string);\n    for(my $i = 0; $i < $len;\
    \ $i++) {\n        my $char = substr($string, $i, 1);\n        if($char eq '[')\
    \ {\n            push(@stack, $char);\n        } elsif($char eq ']') {\n     \
    \       if(scalar(@stack) == 0) {\n                return 0;\n            } else\
    \ {\n                pop(@stack);\n            }\n        }\n    }\n    return\
    \ scalar(@stack) == 0;\n}", "    my $stack = [];\n    for my $char (split //,\
    \ $string) {\n        if ($char eq '(') {\n            push @$stack, $char;\n\
    \        } elsif ($char eq ')') {\n            return 1 if @$stack;\n        \
    \    pop @$stack;\n        }\n    }\n    return 0;\n}", "    my $count = 0;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '[') {\n       \
    \     $count++;\n        } elsif ($char eq ']') {\n            $count--;\n   \
    \     }\n        if ($count < 0) {\n            return 0;\n        }\n    }\n\
    \    return $count == 0;\n}", "    my @stack;\n    my $i = 0;\n    while ($i <\
    \ length($string)) {\n        my $char = substr($string, $i, 1);\n        if ($char\
    \ eq '[') {\n            push(@stack, $char);\n        }\n        elsif ($char\
    \ eq ']') {\n            if (scalar(@stack) == 0) {\n                return 0;\n\
    \            }\n            else {\n                pop(@stack);\n           \
    \ }\n        }\n        $i++;\n    }\n    return scalar(@stack) == 0;\n}", " \
    \   my $count = 0;\n    foreach my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            $count++;\n        } elsif ($char eq ']') {\n       \
    \     $count--;\n        }\n        if ($count < 0) {\n            return 0;\n\
    \        }\n    }\n    return $count == 0;\n}", "    my $n = length($string);\n\
    \    my $count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 0;\n        }\n    }\n\
    \    return $count > 0 ? 0 : 1;\n}", "    my @stack;\n    my @chars = split //,\
    \ $string;\n    for my $char (@chars) {\n        if ($char eq '(') {\n       \
    \     push @stack, $char;\n        }\n        elsif ($char eq ')') {\n       \
    \     if (@stack && $stack[-1] eq '(') {\n                pop @stack;\n      \
    \      }\n            else {\n                return 0;\n            }\n     \
    \   }\n    }\n    return @stack ? 0 : 1;\n}", "    my @stack;\n    my $n = length($string);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        my $c = substr($string, $i, 1);\n\
    \        if ($c eq '(') {\n            push(@stack, $c);\n        } elsif ($c\
    \ eq ')') {\n            if (scalar(@stack) == 0) {\n                return 0;\n\
    \            } else {\n                pop(@stack);\n            }\n        }\n\
    \    }\n    return scalar(@stack) > 0;\n}", "    my @stack;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '(') {\n            push @stack,\
    \ ')';\n        }\n        elsif ($char eq '[') {\n            push @stack, ']';\n\
    \        }\n        elsif ($char eq '{') {\n            push @stack, '}';\n  \
    \      }\n        elsif ($char eq ')' || $char eq ']' || $char eq '}') {\n   \
    \         return 0 if !@stack || $char ne pop @stack;\n        }\n    }\n    return\
    \ !@stack;\n}", "    my $n = length($string);\n    my $i = 0;\n    my $j = 0;\n\
    \    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n\
    \    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n\
    \    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n\
    \    my $z = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd\
    \ = 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n \
    \   my $ii = 0;\n    my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm\
    \ = 0;\n    my $nn = 0;\n    my $oo = 0;\n    my $pp = 0;\n    my $qq = 0;\n \
    \   my $rr = 0;\n    my $ss = 0;\n    my $tt = 0;\n    my $uu = 0;\n    my $vv\
    \ = 0;\n    my $ww = 0;\n    my $xx = 0;\n    my $yy = 0;\n    my $zz = 0;\n \
    \   my $aaa = 0;\n    my $bbb = 0;\n    my $ccc = 0;\n    my $ddd = 0;\n    my\
    \ $eee = 0;\n    my $fff = 0;\n    my $ggg = 0;\n    my $hhh = 0;\n    my $iii\
    \ = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my $lll = 0;\n    my $mmm = 0;\n\
    \    my $nnn = 0;\n    my $ooo = 0;\n    my $ppp = 0;\n    my $qqq = 0;\n    my",
  "    my $count = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[')\
    \ {\n            $count++;\n        } elsif ($c eq ']') {\n            $count--;\n\
    \        }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}",
  "    my $count = 0;\n    for my $char (split //, $string) {\n        if ($char eq\
    \ '[') {\n            $count++;\n        }\n        elsif ($char eq ']') {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $count == 0;\n}", "    my $nested = 0;\n  \
    \  my $depth = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[')\
    \ {\n            $depth++;\n            $nested = 1 if $depth > 1;\n        }\
    \ elsif ($c eq ']') {\n            $depth--;\n        }\n    }\n    return $nested\
    \ && $depth == 0;\n}", "    my $nested = 0;\n    my $open = 0;\n    my $close\
    \ = 0;\n    for my $char (split //, $string) {\n        if ($char eq '(') {\n\
    \            $open++;\n            $nested = 1 if $close;\n        } elsif ($char\
    \ eq ')') {\n            $close++;\n            $nested = 1 if $open;\n      \
    \  }\n    }\n    return $nested;\n}", "    my $nested = 0;\n    my $open = 0;\n\
    \    my $close = 0;\n    my $valid = 0;\n    my $prev = '';\n    my $next = '';\n\
    \    my $i = 0;\n    my $len = length($string);\n    while ($i < $len) {\n   \
    \     $next = substr($string, $i, 1);\n        if ($next eq '(') {\n         \
    \   $open++;\n            if ($prev eq ')') {\n                $nested++;\n  \
    \          }\n        }\n        elsif ($next eq ')') {\n            $close++;\n\
    \            if ($prev eq '(') {\n                $nested++;\n            }\n\
    \        }\n        $prev = $next;\n        $i++;\n    }\n    if ($open == $close)\
    \ {\n        $valid = 1;\n    }\n    return ($valid && $nested);\n}", "    my\
    \ $count = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            $count++;\n        }\n        elsif ($char eq ']') {\n      \
    \      $count--;\n        }\n        return 0 if $count < 0;\n    }\n    return\
    \ $count == 0;\n}", "    my $count = 0;\n    my $nested = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \            $nested = 1 if $count > 1;\n        }\n        elsif ($char eq ']')\
    \ {\n            $count--;\n        }\n    }\n    return $count == 0 && $nested;\n\
    }", "    my $count = 0;\n    for my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            $count++;\n        }\n        elsif ($char eq ']') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $count == 0;\n}", "    my $stack = [];\n  \
    \  my $open = {'(' => 1, '[' => 1, '{' => 1};\n    my $close = {')' => '(', ']'\
    \ => '[', '}' => '{'};\n    for my $char (split //, $string) {\n        if (exists\
    \ $open->{$char}) {\n            push @$stack, $char;\n        }\n        elsif\
    \ (exists $close->{$char}) {\n            return 0 if $stack->[-1] ne $close->{$char};\n\
    \            pop @$stack;\n        }\n    }\n    return 0 if @$stack;\n    return\
    \ 1;\n}", "    my $n = length($string);\n    my $count = 0;\n    for (my $i =\
    \ 0; $i < $n; $i++) {\n        if (substr($string, $i, 1) eq '[') {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return 0;\n        }\n    }\n    return $count ==\
    \ 0;\n}", "    my $n = length($string);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $count = 0;\n    while ($i < $n && $j >= 0) {\n        if (substr($string,\
    \ $i, 1) eq '(') {\n            $count++;\n        }\n        elsif (substr($string,\
    \ $i, 1) eq ')') {\n            $count--;\n        }\n        if (substr($string,\
    \ $j, 1) eq ')') {\n            $count++;\n        }\n        elsif (substr($string,\
    \ $j, 1) eq '(') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            return 0;\n        }\n        $i++;\n        $j--;\n    }\n \
    \   return 1;\n}", "    my $stack = [];\n    my $open = {\n        '[' => 1,\n\
    \        '{' => 1,\n        '(' => 1,\n    };\n    my $close = {\n        ']'\
    \ => '[',\n        '}' => '{',\n        ')' => '(',\n    };\n    for my $char\
    \ (split //, $string) {\n        if (exists $open->{$char}) {\n            push\
    \ @$stack, $char;\n        }\n        elsif (exists $close->{$char}) {\n     \
    \       return 0 if !@$stack;\n            return 0 if $close->{$char} ne pop\
    \ @$stack;\n        }\n    }\n    return 0 if @$stack;\n    return 1;\n}", " \
    \   my $stack = [];\n    my $open_brackets = {'(' => 1, '[' => 1, '{' => 1};\n\
    \    my $close_brackets = {')' => '(', ']' => '[', '}' => '{'};\n    for my $char\
    \ (split //, $string) {\n        if (exists $open_brackets->{$char}) {\n     \
    \       push @$stack, $char;\n        } elsif (exists $close_brackets->{$char})\
    \ {\n            my $open_bracket = pop @$stack;\n            return 0 if $open_bracket\
    \ ne $close_brackets->{$char};\n        }\n    }\n    return 0 if @$stack;\n \
    \   return 1;\n}", "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '[') {\n       \
    \     $open++;\n            $nested++;\n        }\n        elsif ($char eq ']')\
    \ {\n            $close++;\n            $nested--;\n        }\n        if ($nested\
    \ < 0) {\n            return 0;\n        }\n    }\n    return $open == $close;\n\
    }", "    my $n = length($string);\n    my $i = 0;\n    my $j = 0;\n    my $count\
    \ = 0;\n    while ($i < $n) {\n        if (substr($string, $i, 1) eq \"[\") {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if ($count < 0) {\n            $j = $i + 1;\n            $count = 0;\n\
    \        }\n        $i++;\n    }\n    $count = 0;\n    while ($j < $n) {\n   \
    \     if (substr($string, $j, 1) eq \"[\") {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return 0;\n        }\n        $j++;\n    }\n    return 1;\n}", "    my\
    \ $count = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            $count++;\n        } elsif ($char eq ']') {\n            $count--;\n\
    \        }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}",
  "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $open++;\n        \
    \    $nested++;\n        }\n        elsif ($char eq ']') {\n            $close++;\n\
    \            $nested--;\n        }\n        if ($nested < 0) {\n            return\
    \ 0;\n        }\n    }\n    if ($open == $close) {\n        return 1;\n    }\n\
    \    else {\n        return 0;\n    }\n}", "    my $nested = 0;\n    my $open\
    \ = 0;\n    my $close = 0;\n    my $valid = 0;\n    my $i = 0;\n    my $len =\
    \ length($string);\n    while ($i < $len) {\n        if (substr($string, $i, 1)\
    \ eq '[') {\n            $open++;\n            $valid++;\n        }\n        if\
    \ (substr($string, $i, 1) eq ']') {\n            $close++;\n            $valid--;\n\
    \        }\n        if ($valid < 0) {\n            return 0;\n        }\n    \
    \    if ($open > 0 && $close > 0) {\n            $nested = 1;\n        }\n   \
    \     $i++;\n    }\n    if ($valid == 0 && $nested == 1) {\n        return 1;\n\
    \    }\n    return 0;\n}", "    my $n = length($string);\n    my $count = 0;\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        if (substr($string, $i, 1) eq '[')\
    \ {\n            $count++;\n        }\n        elsif (substr($string, $i, 1) eq\
    \ ']') {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return 0;\n        }\n    }\n    return 1;\n}", "    my $count = 0;\n \
    \   for my $c (split //, $string) {\n        if ($c eq '[') {\n            $count++;\n\
    \        }\n        elsif ($c eq ']') {\n            $count--;\n        }\n  \
    \      return 0 if $count < 0;\n    }\n    return $count > 0 ? 0 : 1;\n}", " \
    \   my @stack;\n    my $is_nested = 0;\n    foreach my $c (split //, $string)\
    \ {\n        if ($c eq '[') {\n            push @stack, $c;\n        }\n     \
    \   elsif ($c eq ']') {\n            if (scalar @stack > 0) {\n              \
    \  pop @stack;\n                $is_nested = 1;\n            }\n            else\
    \ {\n                return 0;\n            }\n        }\n    }\n    return $is_nested;\n\
    }", "    my $count = 0;\n    for my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            $count++;\n        }\n        elsif ($char eq ']') {\n\
    \            $count--;\n        }\n        return 0 if $count < 0;\n    }\n  \
    \  return $count == 0;\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        return 0 if $count < 0;\n\
    \    }\n    return 0 if $count != 0;\n    return 1;\n}", "    my @stack;\n   \
    \ for my $c (split //, $string) {\n        if ($c eq '(') {\n            push\
    \ @stack, $c;\n        } elsif ($c eq ')') {\n            return 0 if !@stack;\n\
    \            pop @stack;\n        }\n    }\n    return @stack == 0;\n}", "   \
    \ my $stack = [];\n    my $i = 0;\n    while ($i < length($string)) {\n      \
    \  my $char = substr($string, $i, 1);\n        if ($char eq '[') {\n         \
    \   push(@$stack, $char);\n        }\n        elsif ($char eq ']') {\n       \
    \     if (scalar(@$stack) == 0) {\n                return 0;\n            }\n\
    \            else {\n                pop(@$stack);\n            }\n        }\n\
    \        $i++;\n    }\n    return scalar(@$stack) == 0;\n}", "    my @stack;\n\
    \    for my $c (split //, $string) {\n        if ($c eq '(') {\n            push\
    \ @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack ==\
    \ 0) {\n                return 0;\n            } else {\n                pop @stack;\n\
    \            }\n        }\n    }\n    return scalar @stack == 0;\n}", "    my\
    \ $n = length($string);\n    my $count = 0;\n    for (my $i = 0; $i < $n; $i++)\
    \ {\n        if (substr($string, $i, 1) eq '[') {\n            $count++;\n   \
    \     } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return 0;\n        }\n    }\n    return $count != 0 ? 0 : 1;\n}",
  "    my $n = length($string);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s =",
  "    my @stack;\n    my $i = 0;\n    while ($i < length($string)) {\n        my\
    \ $char = substr($string, $i, 1);\n        if ($char eq '[') {\n            push(@stack,\
    \ $char);\n        } elsif ($char eq ']') {\n            if (scalar(@stack) ==\
    \ 0) {\n                return 0;\n            }\n            my $top = pop(@stack);\n\
    \            if ($top ne '[') {\n                return 0;\n            }\n  \
    \      }\n        $i++;\n    }\n    return scalar(@stack) == 0;\n}", "    my $nest\
    \ = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            $nest++;\n        }\n        elsif ($char eq ']') {\n           \
    \ $nest--;\n        }\n        if ($nest < 0) {\n            return 0;\n     \
    \   }\n    }\n    return $nest > 0 ? 0 : 1;\n}", "    my $count = 0;\n    for\
    \ my $char (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return 0;\n        }\n    }\n    return\
    \ $count == 0;\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        return 0 if $count < 0;\n\
    \    }\n    return 1;\n}", "    my @stack;\n    for my $c (split //, $string)\
    \ {\n        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c\
    \ eq ')') {\n            if (@stack && $stack[-1] eq '(') {\n                pop\
    \ @stack;\n            } else {\n                return 0;\n            }\n  \
    \      }\n    }\n    return @stack == 0;\n}", "    my @stack;\n    my @chars =\
    \ split //, $string;\n    for my $char (@chars) {\n        if ($char eq '[') {\n\
    \            push @stack, $char;\n        }\n        elsif ($char eq ']') {\n\
    \            if (scalar @stack == 0) {\n                return 0;\n          \
    \  }\n            else {\n                pop @stack;\n            }\n       \
    \ }\n    }\n    return scalar @stack == 0;\n}", "    my @stack;\n    foreach my\
    \ $char (split //, $string) {\n        if ($char eq '(') {\n            push @stack,\
    \ $char;\n        } elsif ($char eq ')') {\n            if (@stack) {\n      \
    \          pop @stack;\n            } else {\n                return 0;\n    \
    \        }\n        }\n    }\n    return @stack ? 0 : 1;\n}", "    my @stack;\n\
    \    my @chars = split(//, $string);\n    foreach my $char (@chars) {\n      \
    \  if ($char eq '(') {\n            push(@stack, $char);\n        } elsif ($char\
    \ eq ')') {\n            if (scalar(@stack) == 0) {\n                return 0;\n\
    \            } else {\n                pop(@stack);\n            }\n        }\n\
    \    }\n    return scalar(@stack) == 0;\n}", "    my $count = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return 0;\n        }\n    }\n    return\
    \ $count == 0;\n}", "    my @stack;\n    for my $c (split //, $string) {\n   \
    \     if ($c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ']')\
    \ {\n            if (@stack && $stack[-1] eq '[') {\n                pop @stack;\n\
    \            } else {\n                return 0;\n            }\n        }\n \
    \   }\n    return @stack ? 0 : 1;\n}", "    my $stack = [];\n    my $open_brackets\
    \ = {\n        '(' => 1,\n        '[' => 1,\n        '{' => 1,\n    };\n    my\
    \ $close_brackets = {\n        ')' => '(',\n        ']' => '[',\n        '}' =>\
    \ '{',\n    };\n    for my $char (split //, $string) {\n        if (exists $open_brackets->{$char})\
    \ {\n            push @$stack, $char;\n        } elsif (exists $close_brackets->{$char})\
    \ {\n            my $open_bracket = pop @$stack;\n            return 0 if $open_bracket\
    \ ne $close_brackets->{$char};\n        }\n    }\n    return 0 if @$stack;\n \
    \   return 1;\n}", "    my @stack;\n    for my $c (split //, $string) {\n    \
    \    if ($c eq '[') {\n            push @stack, $c;\n        } elsif ($c eq ']')\
    \ {\n            if (!@stack) {\n                return 0;\n            }\n  \
    \          pop @stack;\n        }\n    }\n    return @stack ? 0 : 1;\n}", "  \
    \  my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $open++;\n        \
    \    $nested++;\n        }\n        elsif ($char eq ']') {\n            $close++;\n\
    \            $nested--;\n        }\n        if ($nested < 0) {\n            return\
    \ 0;\n        }\n    }\n    if ($open == $close) {\n        return 1;\n    }\n\
    \    else {\n        return 0;\n    }\n}", "    my @stack;\n    my @chars = split(//,\
    \ $string);\n    for my $char (@chars) {\n        if ($char eq '[') {\n      \
    \      push @stack, $char;\n        } elsif ($char eq ']') {\n            if (scalar\
    \ @stack == 0) {\n                return 0;\n            } else {\n          \
    \      pop @stack;\n            }\n        }\n    }\n    return scalar @stack\
    \ == 0;\n}", "    my $stack = [];\n    my $open = {\n        '[' => 1,\n     \
    \   '{' => 1,\n        '(' => 1,\n    };\n    my $close = {\n        ']' => '[',\n\
    \        '}' => '{',\n        ')' => '(',\n    };\n    my $nested = 0;\n    for\
    \ my $char (split //, $string) {\n        if (exists $open->{$char}) {\n     \
    \       push @$stack, $char;\n        }\n        elsif (exists $close->{$char})\
    \ {\n            my $last = pop @$stack;\n            if ($last eq $close->{$char})\
    \ {\n                $nested = 1;\n            }\n            else {\n       \
    \         return 0;\n            }\n        }\n    }\n    return $nested;\n}",
  "    my $stack = [];\n    my %brackets = (\n        '[' => ']',\n        '{' =>\
    \ '}',\n        '(' => ')',\n    );\n    foreach my $char (split(//, $string))\
    \ {\n        if(exists $brackets{$char}) {\n            push(@$stack, $char);\n\
    \        }\n        elsif(@$stack && $brackets{$stack->[-1]} eq $char) {\n   \
    \         pop(@$stack);\n        }\n        else {\n            return 0;\n  \
    \      }\n    }\n    return @$stack ? 0 : 1;\n}", "    my $count = 0;\n    for\
    \ my $char (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        return 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my\
    \ $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $open++;\n        \
    \    $nested = 1 if $close > 0;\n        }\n        elsif ($char eq ']') {\n \
    \           $close++;\n            $nested = 1 if $open > 0;\n        }\n    }\n\
    \    return $nested;\n}", "    my @stack;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            push @stack, $char;\n        }\n\
    \        elsif ($char eq ']') {\n            if (@stack) {\n                pop\
    \ @stack;\n            }\n            else {\n                return 0;\n    \
    \        }\n        }\n    }\n    return @stack ? 0 : 1;\n}", "    my @stack;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '(') {\n       \
    \     push @stack, $char;\n        }\n        elsif ($char eq ')') {\n       \
    \     if (scalar @stack == 0) {\n                return 0;\n            }\n  \
    \          else {\n                pop @stack;\n            }\n        }\n   \
    \ }\n    return scalar @stack == 0;\n}", "    my @stack;\n    my @chars = split\
    \ //, $string;\n    for my $c (@chars) {\n        if ($c eq '(') {\n         \
    \   push @stack, $c;\n        } elsif ($c eq ')') {\n            if (scalar @stack\
    \ == 0) {\n                return 0;\n            } else {\n                pop\
    \ @stack;\n            }\n        }\n    }\n    return scalar @stack == 0;\n}",
  "    my $stack = [];\n    my $open = {\n        '[' => 1,\n        '{' => 1,\n \
    \       '(' => 1,\n    };\n    my $close = {\n        ']' => '[',\n        '}'\
    \ => '{',\n        ')' => '(',\n    };\n    foreach my $char (split //, $string)\
    \ {\n        if (exists $open->{$char}) {\n            push @$stack, $char;\n\
    \        }\n        elsif (exists $close->{$char}) {\n            return 0 if\
    \ scalar @$stack == 0;\n            my $top = pop @$stack;\n            return\
    \ 0 if $top ne $close->{$char};\n        }\n    }\n    return scalar @$stack ==\
    \ 0;\n}", "    my @stack;\n    for my $char (split //, $string) {\n        if\
    \ ($char eq '(') {\n            push @stack, $char;\n        } elsif ($char eq\
    \ ')') {\n            if (@stack && $stack[-1] eq '(') {\n                pop\
    \ @stack;\n            } else {\n                return 0;\n            }\n  \
    \      }\n    }\n    return @stack ? 0 : 1;\n}", "    my @stack;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            push @stack,\
    \ $char;\n        }\n        elsif ($char eq ']') {\n            if (scalar @stack\
    \ == 0) {\n                return 0;\n            }\n            else {\n    \
    \            pop @stack;\n            }\n        }\n    }\n    return scalar @stack\
    \ == 0;\n}", "    my @stack;\n    my $n = length($string);\n    for (my $i = 0;\
    \ $i < $n; $i++) {\n        my $c = substr($string, $i, 1);\n        if ($c eq\
    \ '[') {\n            push(@stack, $c);\n        } else {\n            if (@stack\
    \ == 0) {\n                return 0;\n            } else {\n                pop(@stack);\n\
    \            }\n        }\n    }\n    return @stack == 0;\n}", "    my $nested\
    \ = 0;\n    my $open = 0;\n    my $close = 0;\n    my $valid = 0;\n    my $invalid\
    \ = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my\
    \ $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n  \
    \  my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n\
    \    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n\
    \    my $g = 0;\n    my $h = 0;\n    my $ii = 0;\n    my $jj = 0;\n    my $kk\
    \ = 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn = 0;\n    my $oo = 0;\n \
    \   my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n    my $ss = 0;\n    my $tt\
    \ = 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww = 0;\n    my $xx = 0;\n \
    \   my $yy = 0;\n    my $zz = 0;\n    my $aa = 0;\n    my $bb = 0;\n    my $cc\
    \ = 0;\n    my $dd = 0;\n    my $ee = 0;\n    my $ff = 0;\n    my $gg = 0;\n \
    \   my $hh = 0;\n    my $iii = 0;\n    my $jjj = 0;\n    my $kkk = 0;\n    my\
    \ $lll = 0;\n    my $mmm = 0;\n    my $nnn = 0;\n   ", "    my $stack = [];\n\
    \    my $open = {\n        '[' => 1,\n        '(' => 1,\n        '{' => 1,\n \
    \   };\n    my $close = {\n        ']' => '[',\n        ')' => '(',\n        '}'\
    \ => '{',\n    };\n    for my $c (split //, $string) {\n        if (exists $open->{$c})\
    \ {\n            push @$stack, $c;\n        }\n        elsif (exists $close->{$c})\
    \ {\n            return 0 if $stack->[-1] ne $close->{$c};\n            pop @$stack;\n\
    \        }\n    }\n    return 0 if @$stack;\n    return 1;\n}", "    my $count\
    \ = 0;\n    my $nested = 0;\n    for my $char (split //, $string) {\n        if\
    \ ($char eq '[') {\n            $count++;\n            $nested = 1 if $count >\
    \ 1;\n        }\n        elsif ($char eq ']') {\n            $count--;\n     \
    \   }\n    }\n    return $count == 0 && $nested;\n}", "    my $stack = [];\n \
    \   my $open = {'(' => 1, '[' => 1, '{' => 1};\n    my $close = {')' => '(', ']'\
    \ => '[', '}' => '{'};\n    for my $c (split //, $string) {\n        if (exists\
    \ $open->{$c}) {\n            push @$stack, $c;\n        } elsif (exists $close->{$c})\
    \ {\n            return 0 if scalar @$stack == 0;\n            my $top = pop @$stack;\n\
    \            return 0 if $top ne $close->{$c};\n        }\n    }\n    return scalar\
    \ @$stack == 0;\n}", "    my $nested = 0;\n    my $open = 0;\n    my $close =\
    \ 0;\n    my $valid = 0;\n    my $invalid = 0;\n    my $nested_open = 0;\n   \
    \ my $nested_close = 0;\n    my $nested_valid = 0;\n    my $nested_invalid = 0;\n\
    \    my $nested_valid_open = 0;\n    my $nested_valid_close = 0;\n    my $nested_invalid_open\
    \ = 0;\n    my $nested_invalid_close = 0;\n    my $nested_valid_open_close = 0;\n\
    \    my $nested_invalid_open_close = 0;\n    my $nested_valid_open_close_invalid\
    \ = 0;\n    my $nested_invalid_open_close_valid = 0;\n    my $nested_valid_open_close_valid\
    \ = 0;\n    my $nested_invalid_open_close_invalid = 0;\n    my $nested_valid_open_close_invalid_open\
    \ = 0;\n    my $nested_invalid_open_close_valid_open = 0;\n    my $nested_valid_open_close_valid_open\
    \ = 0;\n    my $nested_invalid_open_close_invalid_open = 0;\n    my $nested_valid_open_close_invalid_open_close\
    \ = 0;\n    my $nested_invalid_open_close_valid_open_close = 0;\n    my $nested_valid_open_close_valid_open_close\
    \ = 0;\n    my $nested_invalid_open_close_invalid_open_close = 0;\n    my $nested_valid_open_close_invalid_open_close_invalid\
    \ = 0;\n    my $nested_invalid_open_close_valid_open_close_invalid = 0;\n    my\
    \ $nested_valid_open_close_valid_open_close_invalid = 0;\n    my $nested_invalid_open_close_invalid_open_close_invalid\
    \ = 0;", "    my $count = 0;\n    for my $char (split //, $string) {\n       \
    \ $count++ if $char eq '[';\n        $count-- if $char eq ']';\n        return\
    \ 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my $count = 0;\n\
    \    for my $char (split //, $string) {\n        $count++ if $char eq '[';\n \
    \       $count-- if $char eq ']';\n        return 0 if $count < 0;\n    }\n  \
    \  return $count == 0;\n}", "    my $n = length($string);\n    my $i = 0;\n  \
    \  my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n\
    \    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n\
    \    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n\
    \    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n\
    \    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n\
    \    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n\
    \    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n\
    \    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s =", "    my $count = 0;\n    for my $char (split //,\
    \ $string) {\n        if ($char eq '[') {\n            $count++;\n        }\n\
    \        elsif ($char eq ']') {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return 0;\n        }\n    }\n    return $count ==\
    \ 0;\n}", "    my $stack = [];\n    my $open = {\n        '(' => 1,\n        '['\
    \ => 1,\n        '{' => 1,\n    };\n    my $close = {\n        ')' => '(',\n \
    \       ']' => '[',\n        '}' => '{',\n    };\n    for my $char (split //,\
    \ $string) {\n        if (exists $open->{$char}) {\n            push @$stack,\
    \ $char;\n        } elsif (exists $close->{$char}) {\n            return 0 if\
    \ $stack->[-1] ne $close->{$char};\n            pop @$stack;\n        }\n    }\n\
    \    return 0 if @$stack;\n    return 1;\n}", "    my @stack;\n    for my $c (split\
    \ //, $string) {\n        if ($c eq '[') {\n            push @stack, $c;\n   \
    \     }\n        elsif ($c eq ']') {\n            if (scalar @stack > 0 && $stack[-1]\
    \ eq '[') {\n                pop @stack;\n            }\n            else {\n\
    \                return 0;\n            }\n        }\n    }\n    return scalar\
    \ @stack == 0;\n}", "    my $count = 0;\n    for my $c (split //, $string) {\n\
    \        $count++ if $c eq '[';\n        $count-- if $c eq ']';\n        return\
    \ 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my $count = 0;\n\
    \    for my $char (split //, $string) {\n        $count++ if $char eq '[';\n \
    \       $count-- if $char eq ']';\n        return 0 if $count < 0;\n    }\n  \
    \  return 0 if $count;\n    return 1;\n}", "    my $count = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        } elsif ($char eq ']') {\n            $count--;\n        }\n        return\
    \ 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my $count = 0;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '[') {\n       \
    \     $count++;\n        }\n        elsif ($char eq ']') {\n            $count--;\n\
    \        }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}",
  "    my @stack;\n    my @chars = split(//, $string);\n    foreach my $char (@chars)\
    \ {\n        if ($char eq '[') {\n            push(@stack, $char);\n        }\n\
    \        elsif ($char eq ']') {\n            if (scalar(@stack) == 0) {\n    \
    \            return 0;\n            }\n            else {\n                pop(@stack);\n\
    \            }\n        }\n    }\n    return scalar(@stack) == 0;\n}", "    my\
    \ $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $open++;\n        \
    \    $nested++;\n        }\n        if ($char eq ']') {\n            $close++;\n\
    \            $nested--;\n        }\n        if ($nested < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $open == $close && $nested > 0;\n}", "    my\
    \ $count = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            $count++;\n        }\n        elsif ($char eq ']') {\n      \
    \      $count--;\n        }\n        return 0 if $count < 0;\n    }\n    return\
    \ $count == 0;\n}", "    my $stack = [];\n    my $open = {'(' => 1, '[' => 1,\
    \ '{' => 1};\n    my $close = {')' => '(', ']' => '[', '}' => '{'};\n    for my\
    \ $c (split //, $string) {\n        if (exists $open->{$c}) {\n            push\
    \ @$stack, $c;\n        } elsif (exists $close->{$c}) {\n            return 0\
    \ if $close->{$c} ne pop @$stack;\n        }\n    }\n    return 0 if @$stack;\n\
    \    return 1;\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         return 0;\n        }\n    }\n    return $count == 0;\n}", "    my $nesting\
    \ = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            $nesting++;\n        }\n        elsif ($char eq ']') {\n        \
    \    $nesting--;\n        }\n        if ($nesting < 0) {\n            return 0;\n\
    \        }\n    }\n    return $nesting > 0;\n}", "    my $nested = 0;\n    my\
    \ $open = 0;\n    my $close = 0;\n    for my $char (split //, $string) {\n   \
    \     if ($char eq '[') {\n            $open++;\n            $nested = 1 if $close;\n\
    \        }\n        elsif ($char eq ']') {\n            $close++;\n          \
    \  $nested = 1 if $open;\n        }\n    }\n    return $nested;\n}", "    my $stack\
    \ = [];\n    my $open = { '(' => 1, '[' => 1, '{' => 1 };\n    my $close = { ')'\
    \ => '(', ']' => '[', '}' => '{' };\n    for my $c (split //, $string) {\n   \
    \     if (exists $open->{$c}) {\n            push @$stack, $c;\n        } elsif\
    \ (exists $close->{$c}) {\n            if (@$stack && $stack->[-1] eq $close->{$c})\
    \ {\n                pop @$stack;\n            } else {\n                return\
    \ 0;\n            }\n        }\n    }\n    return @$stack ? 0 : 1;\n}", "    my\
    \ @stack;\n    my $i = 0;\n    while ($i < length($string)) {\n        my $char\
    \ = substr($string, $i, 1);\n        if ($char eq '[') {\n            push(@stack,\
    \ $char);\n        } elsif ($char eq ']') {\n            if (scalar(@stack) >\
    \ 0) {\n                pop(@stack);\n            } else {\n                return\
    \ 0;\n            }\n        }\n        $i++;\n    }\n    return scalar(@stack)\
    \ == 0;\n}", "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n   \
    \ for my $char (split //, $string) {\n        if ($char eq '[') {\n          \
    \  $open++;\n            $nested++;\n        } elsif ($char eq ']') {\n      \
    \      $close++;\n            $nested--;\n        }\n        return 0 if $nested\
    \ < 0;\n    }\n    return 0 if $open != $close;\n    return 1;\n}", "    my $count\
    \ = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            $count++;\n        } elsif ($char eq ']') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 0;\n        }\n    }\n\
    \    return $count == 0;\n}", "    my @stack;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '(') {\n            push @stack, $char;\n        }\n\
    \        elsif ($char eq ')') {\n            if (@stack) {\n                pop\
    \ @stack;\n            }\n            else {\n                return 0;\n    \
    \        }\n        }\n    }\n    return @stack ? 0 : 1;\n}", "    my $count =\
    \ 0;\n    for my $c (split //, $string) {\n        if ($c eq '[') {\n        \
    \    $count++;\n        } elsif ($c eq ']') {\n            $count--;\n       \
    \ }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}", "  \
    \  my $count = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[')\
    \ {\n            $count++;\n        } elsif ($c eq ']') {\n            $count--;\n\
    \        }\n        return 0 if $count < 0;\n    }\n    return 0 if $count !=\
    \ 0;\n    return 1;\n}", "    my $stack = [];\n    for my $c (split //, $string)\
    \ {\n        if ($c eq '(') {\n            push @$stack, $c;\n        } elsif\
    \ ($c eq ')') {\n            if (scalar @$stack == 0) {\n                return\
    \ 0;\n            } else {\n                pop @$stack;\n            }\n    \
    \    }\n    }\n    return scalar @$stack == 0;\n}", "    my $stack = [];\n   \
    \ my %open = (\n        '[' => 1,\n        '{' => 1,\n        '(' => 1,\n    );\n\
    \    my %close = (\n        ']' => '[',\n        '}' => '{',\n        ')' => '(',\n\
    \    );\n    for my $char (split //, $string) {\n        if (exists $open{$char})\
    \ {\n            push @$stack, $char;\n        }\n        elsif (exists $close{$char})\
    \ {\n            return 0 if $stack->[-1] ne $close{$char};\n            pop @$stack;\n\
    \        }\n    }\n    return 0 if @$stack;\n    return 1;\n}", "    my @stack;\n\
    \    my $i = 0;\n    my $len = length($string);\n    while($i < $len) {\n    \
    \    my $char = substr($string, $i, 1);\n        if($char eq '[') {\n        \
    \    push(@stack, $char);\n        }\n        elsif($char eq ']') {\n        \
    \    if(scalar(@stack) == 0) {\n                return 0;\n            }\n   \
    \         else {\n                my $top = pop(@stack);\n                if($top\
    \ eq '[') {\n                    return 1;\n                }\n              \
    \  else {\n                    return 0;\n                }\n            }\n \
    \       }\n        $i++;\n    }\n    return 0;\n}", "    my @stack;\n    for my\
    \ $char (split //, $string) {\n        if ($char eq '[') {\n            push @stack,\
    \ $char;\n        } elsif ($char eq ']') {\n            if (@stack && $stack[-1]\
    \ eq '[') {\n                pop @stack;\n            } else {\n             \
    \   return 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}",
  "    my $count = 0;\n    for my $char (split //, $string) {\n        if ($char eq\
    \ '[') {\n            $count++;\n        } elsif ($char eq ']') {\n          \
    \  $count--;\n        }\n        return 0 if $count < 0;\n    }\n    return 0\
    \ if $count != 0;\n    return 1;\n}", "    my @stack;\n    my $i = 0;\n    while\
    \ ($i < length($string)) {\n        my $char = substr($string, $i, 1);\n     \
    \   if ($char eq '[') {\n            push(@stack, $char);\n        } elsif ($char\
    \ eq ']') {\n            if (scalar(@stack) == 0) {\n                return 0;\n\
    \            } else {\n                pop(@stack);\n            }\n        }\n\
    \        $i++;\n    }\n    return scalar(@stack) == 0;\n}", "    my $nested =\
    \ 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $open++;\n            $nested =\
    \ 1 if $close;\n        }\n        elsif ($char eq ']') {\n            $close++;\n\
    \            return 0 if $close > $open;\n        }\n    }\n    return 0 if $open\
    \ != $close;\n    return $nested;\n}", "    my $count = 0;\n    for my $c (split\
    \ //, $string) {\n        if ($c eq '[') {\n            $count++;\n        } elsif\
    \ ($c eq ']') {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return 0;\n        }\n    }\n    return $count == 0;\n}", "    my\
    \ $nesting = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[') {\n\
    \            $nesting++;\n        } elsif ($c eq ']') {\n            $nesting--;\n\
    \        }\n        return 0 if $nesting < 0;\n    }\n    return 0 if $nesting\
    \ > 0;\n    return 1;\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        return 0 if $count < 0;\n\
    \    }\n    return $count == 0;\n}", "    my @stack;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '(') {\n            push @stack, $char;\n\
    \        } elsif ($char eq ')') {\n            return 1 if @stack;\n         \
    \   return 0;\n        }\n    }\n    return 0;\n}", "    my $count = 0;\n    for\
    \ my $char (split //, $string) {\n        $count++ if $char eq '[';\n        $count--\
    \ if $char eq ']';\n        return 0 if $count < 0;\n    }\n    return 1;\n}",
  "    my $count = 0;\n    for my $char (split //, $string) {\n        if ($char eq\
    \ '[') {\n            $count++;\n        }\n        elsif ($char eq ']') {\n \
    \           $count--;\n        }\n        return 0 if $count < 0;\n    }\n   \
    \ return $count == 0;\n}", "    my @stack;\n    my $result = 0;\n    my $i = 0;\n\
    \    my $len = length($string);\n    while ($i < $len) {\n        my $char = substr($string,\
    \ $i, 1);\n        if ($char eq '[') {\n            push(@stack, $char);\n   \
    \     } elsif ($char eq ']') {\n            if (scalar(@stack) > 0) {\n      \
    \          pop(@stack);\n                $result = 1;\n            } else {\n\
    \                $result = 0;\n                last;\n            }\n        }\n\
    \        $i++;\n    }\n    return $result;\n}", "    my $stack = [];\n    for\
    \ my $char (split //, $string) {\n        if ($char eq '[') {\n            push\
    \ @$stack, $char;\n        }\n        elsif ($char eq ']') {\n            return\
    \ 1 if @$stack;\n            pop @$stack;\n        }\n    }\n    return 0;\n}",
  "    my $count = 0;\n    for my $char (split //, $string) {\n        if ($char eq\
    \ '[') {\n            $count++;\n        } elsif ($char eq ']') {\n          \
    \  $count--;\n        }\n        if ($count < 0) {\n            return 0;\n  \
    \      }\n    }\n    return $count == 0;\n}", "    my @stack;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '(') {\n            push @stack,\
    \ $char;\n        } elsif ($char eq ')') {\n            return 0 if !@stack;\n\
    \            pop @stack;\n        }\n    }\n    return !@stack;\n}", "    my $count\
    \ = 0;\n    my $nested = 0;\n    for my $c (split //, $string) {\n        if ($c\
    \ eq '[') {\n            $count++;\n            $nested = 1 if $count > 1;\n \
    \       } elsif ($c eq ']') {\n            $count--;\n        }\n    }\n    return\
    \ $count == 0 && $nested;\n}", "    my $nested = 0;\n    my $open = 0;\n    my\
    \ $close = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            $open++;\n            $nested = 1 if $close;\n        }\n   \
    \     elsif ($char eq ']') {\n            $close++;\n            $nested = 1 if\
    \ $open;\n        }\n    }\n    return $nested;\n}", "    my $nested = 0;\n  \
    \  my $open = 0;\n    my $close = 0;\n    for my $char (split //, $string) {\n\
    \        if ($char eq '[') {\n            $open++;\n            $nested++;\n \
    \       }\n        if ($char eq ']') {\n            $close++;\n            $nested--;\n\
    \        }\n        if ($nested < 0) {\n            return 0;\n        }\n   \
    \ }\n    if ($open == $close) {\n        return 1;\n    }\n    return 0;\n}",
  "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $open++;\n        \
    \    $nested++;\n        }\n        elsif ($char eq ']') {\n            $close++;\n\
    \            $nested--;\n        }\n        if ($nested < 0) {\n            return\
    \ 0;\n        }\n    }\n    if ($open == $close) {\n        return 1;\n    }\n\
    \    else {\n        return 0;\n    }\n}", "    my $count = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        } elsif ($char eq ']') {\n            $count--;\n        }\n        return\
    \ 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my $stack = [];\n\
    \    my $open = {\n        '(' => 1,\n        '[' => 1,\n        '{' => 1,\n \
    \   };\n    my $close = {\n        ')' => '(',\n        ']' => '[',\n        '}'\
    \ => '{',\n    };\n    for my $c (split //, $string) {\n        if (exists $open->{$c})\
    \ {\n            push @$stack, $c;\n        } elsif (exists $close->{$c}) {\n\
    \            return 0 if !@$stack || $close->{$c} ne pop @$stack;\n        }\n\
    \    }\n    return 0 if @$stack;\n    return 1;\n}", "    my $count = 0;\n   \
    \ for my $char (split //, $string) {\n        $count++ if $char eq '[';\n    \
    \    $count-- if $char eq ']';\n        return 0 if $count < 0;\n    }\n    return\
    \ 1;\n}", "    my $count = 0;\n    for my $char (split //, $string) {\n      \
    \  if ($char eq '[') {\n            $count++;\n        } elsif ($char eq ']')\
    \ {\n            $count--;\n        }\n        return 0 if $count < 0;\n    }\n\
    \    return $count == 0;\n}", "    my $n = length($string);\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n\
    \    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n\
    \    my $y = 0;\n    my $z = 0;\n    while ($i < $n) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $j++;\n        }\n        if (substr($string,\
    \ $i, 1) eq ']') {\n            $k++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '{') {\n            $l++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '}') {\n            $m++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '(') {\n            $n++;\n        }\n        if (substr($string,\
    \ $i, 1) eq ')') {\n            $o++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '<') {\n            $p++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '>') {\n            $q++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '|') {\n            $r++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '^') {\n            $s++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '_') {\n            $t++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '`') {\n            $u++;\n        }\n        if (substr($string,\
    \ $i, 1) eq '~') {\n            $v++;\n", "    my @stack;\n    for my $c (split\
    \ //, $string) {\n        if ($c eq '(') {\n            push @stack, $c;\n   \
    \     } elsif ($c eq ')') {\n            if (@stack) {\n                pop @stack;\n\
    \            } else {\n                return 0;\n            }\n        }\n \
    \   }\n    return @stack ? 0 : 1;\n}", "    my $count = 0;\n    my $nested = 0;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '[') {\n       \
    \     $count++;\n            $nested = 1 if $count > 1;\n        }\n        elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n    }\n    return $count\
    \ == 0 && $nested;\n}", "    my $stack = [];\n    my $open = {'(' => 1, '[' =>\
    \ 1, '{' => 1};\n    my $close = {')' => '(', ']' => '[', '}' => '{'};\n    for\
    \ my $char (split //, $string) {\n        if (exists $open->{$char}) {\n     \
    \       push @$stack, $char;\n        }\n        elsif (exists $close->{$char})\
    \ {\n            return 0 if $stack->[-1] ne $close->{$char};\n            pop\
    \ @$stack;\n        }\n    }\n    return 0 if @$stack;\n    return 1;\n}", " \
    \   my $count = 0;\n    for my $char (split //, $string) {\n        $count++ if\
    \ $char eq '[';\n        $count-- if $char eq ']';\n        return 0 if $count\
    \ < 0;\n    }\n    return $count == 0;\n}", "    my $count = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        return 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my\
    \ $count = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[') {\n\
    \            $count++;\n        }\n        elsif ($c eq ']') {\n            $count--;\n\
    \        }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}",
  "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $open++;\n        \
    \    $nested = 1 if $close;\n        }\n        elsif ($char eq ']') {\n     \
    \       $close++;\n            $nested = 1 if $open;\n        }\n    }\n    return\
    \ $nested;\n}", "    my $count = 0;\n    for my $char (split //, $string) {\n\
    \        if ($char eq '[') {\n            $count++;\n        } elsif ($char eq\
    \ ']') {\n            $count--;\n        }\n        return 0 if $count < 0;\n\
    \    }\n    return $count == 0;\n}", "    my @stack;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '(') {\n            push @stack, $char;\n\
    \        } elsif ($char eq ')') {\n            return 0 if !@stack;\n        \
    \    pop @stack;\n        }\n    }\n    return @stack ? 0 : 1;\n}", "    my $count\
    \ = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[') {\n      \
    \      $count++;\n        } elsif ($c eq ']') {\n            $count--;\n     \
    \   }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}", " \
    \   my $n = length($string);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n\
    \    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n\
    \    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n\
    \    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $aa = 0;\n    my $bb = 0;\n    my $cc = 0;\n    my $dd = 0;\n    my $ee\
    \ = 0;\n    my $ff = 0;\n    my $gg = 0;\n    my $hh = 0;\n    my $ii = 0;\n \
    \   my $jj = 0;\n    my $kk = 0;\n    my $ll = 0;\n    my $mm = 0;\n    my $nn\
    \ = 0;\n    my $oo = 0;\n    my $pp = 0;\n    my $qq = 0;\n    my $rr = 0;\n \
    \   my $ss = 0;\n    my $tt = 0;\n    my $uu = 0;\n    my $vv = 0;\n    my $ww\
    \ = 0;\n    my $xx = 0;\n    my $yy = 0;\n    my $zz = 0;\n    my $aaa = 0;\n\
    \    my $bbb = 0;\n    my $ccc = 0;\n    my $ddd = 0;\n    my $eee = 0;\n    my\
    \ $fff = 0;\n    my $ggg = 0;\n    my $hhh = 0;\n    my $iii = 0;\n    my $jjj\
    \ = 0;\n    my $kkk = 0;\n    my $lll = 0;\n    my $mmm = 0;\n    my $nnn = 0;\n\
    \    my $ooo = 0;\n    my $ppp = 0;\n    my $qqq = 0;\n    my", "    my $stack\
    \ = [];\n    my %brackets = (\n        '[' => ']',\n        '{' => '}',\n    \
    \    '(' => ')',\n    );\n    my %closing_brackets = reverse %brackets;\n    for\
    \ my $char (split //, $string) {\n        if (exists $brackets{$char}) {\n   \
    \         push @$stack, $char;\n        }\n        elsif (exists $closing_brackets{$char})\
    \ {\n            return 0 if !@$stack;\n            return 0 if $closing_brackets{$char}\
    \ ne pop @$stack;\n        }\n    }\n    return @$stack == 0;\n}", "    my $n\
    \ = length($string);\n    my $count = 0;\n    for(my $i = 0; $i < $n; $i++) {\n\
    \        if(substr($string, $i, 1) eq '[') {\n            $count++;\n        }\n\
    \        elsif(substr($string, $i, 1) eq ']') {\n            $count--;\n     \
    \   }\n        if($count < 0) {\n            return 0;\n        }\n    }\n   \
    \ return $count == 0;\n}", "    my @stack;\n    my $i = 0;\n    while ($i < length($string))\
    \ {\n        my $char = substr($string, $i, 1);\n        if ($char eq \"(\") {\n\
    \            push(@stack, $char);\n        } elsif ($char eq \")\") {\n      \
    \      if (scalar(@stack) > 0) {\n                pop(@stack);\n            }\
    \ else {\n                return 0;\n            }\n        }\n        $i++;\n\
    \    }\n    return scalar(@stack) == 0;\n}", "    my @stack;\n    my $i = 0;\n\
    \    while ($i < length($string)) {\n        my $char = substr($string, $i, 1);\n\
    \        if ($char eq '(') {\n            push(@stack, $char);\n        } elsif\
    \ ($char eq ')') {\n            if (scalar(@stack) == 0) {\n                return\
    \ 0;\n            } else {\n                pop(@stack);\n            }\n    \
    \    }\n        $i++;\n    }\n    return scalar(@stack) == 0;\n}", "    my @stack;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '(') {\n       \
    \     push @stack, $char;\n        } elsif ($char eq ')') {\n            if (@stack)\
    \ {\n                pop @stack;\n            } else {\n                return\
    \ 0;\n            }\n        }\n    }\n    return @stack ? 0 : 1;\n}", "    my\
    \ $count = 0;\n    for my $char (split //, $string) {\n        $count++ if $char\
    \ eq '[';\n        $count-- if $char eq ']';\n        return 0 if $count < 0;\n\
    \    }\n    return $count == 0;\n}", "    my $stack = [];\n    my $i = 0;\n  \
    \  my $len = length($string);\n    while ($i < $len) {\n        my $char = substr($string,\
    \ $i, 1);\n        if ($char eq '[') {\n            push @$stack, $char;\n   \
    \     } elsif ($char eq ']') {\n            if (scalar(@$stack) > 0) {\n     \
    \           pop @$stack;\n            } else {\n                return 0;\n  \
    \          }\n        }\n        $i++;\n    }\n    return scalar(@$stack) == 0;\n\
    }", "    my @stack;\n    foreach my $char (split //, $string) {\n        if ($char\
    \ eq '(') {\n            push @stack, $char;\n        }\n        elsif ($char\
    \ eq ')') {\n            if (scalar @stack == 0) {\n                return 0;\n\
    \            }\n            pop @stack;\n        }\n    }\n    return scalar @stack\
    \ == 0;\n}", "    my $count = 0;\n    for my $char (split //, $string) {\n   \
    \     if ($char eq '[') {\n            $count++;\n        }\n        elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         return 0;\n        }\n    }\n    return $count == 0;\n}", "    my $stack\
    \ = [];\n    foreach my $char (split //, $string) {\n        if ($char eq '(')\
    \ {\n            push @$stack, $char;\n        } elsif ($char eq ')') {\n    \
    \        if (scalar @$stack == 0) {\n                return 0;\n            }\n\
    \            pop @$stack;\n        }\n    }\n    return scalar @$stack == 0;\n\
    }", "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    my $valid\
    \ = 0;\n    my $i = 0;\n    my $len = length($string);\n    while ($i < $len)\
    \ {\n        my $char = substr($string, $i, 1);\n        if ($char eq '[') {\n\
    \            $open++;\n            $valid++;\n        } elsif ($char eq ']') {\n\
    \            $close++;\n            $valid--;\n        }\n        if ($valid <\
    \ 0) {\n            return 0;\n        }\n        if ($valid > 0) {\n        \
    \    $nested = 1;\n        }\n        $i++;\n    }\n    if ($open == $close &&\
    \ $nested) {\n        return 1;\n    }\n    return 0;\n}", "    my $count = 0;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '[') {\n       \
    \     $count++;\n        }\n        elsif ($char eq ']') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 0;\n        }\n    }\n\
    \    return $count == 0;\n}", "    my $count = 0;\n    for my $char (split //,\
    \ $string) {\n        if ($char eq '[') {\n            $count++;\n        }\n\
    \        elsif ($char eq ']') {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return 0;\n        }\n    }\n    return $count ==\
    \ 0;\n}", "    my @stack;\n    for my $char (split //, $string) {\n        if\
    \ ($char eq '(') {\n            push @stack, $char;\n        } elsif ($char eq\
    \ ')') {\n            if (scalar @stack == 0) {\n                return 0;\n \
    \           } else {\n                pop @stack;\n            }\n        }\n\
    \    }\n    return scalar @stack == 0;\n}", "    my $count = 0;\n    for my $c\
    \ (split //, $string) {\n        if ($c eq '[') {\n            $count++;\n   \
    \     }\n        elsif ($c eq ']') {\n            $count--;\n        }\n     \
    \   return 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my $nested\
    \ = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $open++;\n            $nested =\
    \ 1 if $close;\n        }\n        elsif ($char eq ']') {\n            $close++;\n\
    \            $nested = 1 if $open;\n        }\n    }\n    return $nested;\n}",
  "    my $n = length($string);\n    my $count = 0;\n    for (my $i = 0; $i < $n;\
    \ $i++) {\n        if (substr($string, $i, 1) eq '[') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return 0;\n        }\n    }\n    return $count > 0 ? 0 : 1;\n}",
  "    my $stack = [];\n    my $nested = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '(') {\n            push @$stack, $char;\n        }\
    \ elsif ($char eq ')') {\n            if (@$stack) {\n                pop @$stack;\n\
    \                $nested = 1;\n            } else {\n                return 0;\n\
    \            }\n        }\n    }\n    return $nested;\n}", "    my $count = 0;\n\
    \    for my $char (split //, $string) {\n        if ($char eq '[') {\n       \
    \     $count++;\n        } elsif ($char eq ']') {\n            $count--;\n   \
    \     }\n        return 0 if $count < 0;\n    }\n    return 0 if $count > 0;\n\
    \    return 1;\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         return 0;\n        }\n    }\n    return $count == 0;\n}", "    my $count\
    \ = 0;\n    for my $c (split //, $string) {\n        if ($c eq '[') {\n      \
    \      $count++;\n        } elsif ($c eq ']') {\n            $count--;\n     \
    \   }\n        return 0 if $count < 0;\n    }\n    return 1;\n}", "    my $count\
    \ = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            $count++;\n        } elsif ($char eq ']') {\n            $count--;\n\
    \        }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}",
  "    my $stack = [];\n    for my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            push @$stack, $char;\n        } elsif ($char eq ']')\
    \ {\n            return 1 if @$stack;\n            pop @$stack;\n        }\n \
    \   }\n    return 0;\n}", "    my $count = 0;\n    for my $c (split //, $string)\
    \ {\n        $count++ if $c eq '[';\n        $count-- if $c eq ']';\n        return\
    \ 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my $count = 0;\n\
    \    for my $c (split //, $string) {\n        if ($c eq '[') {\n            $count++;\n\
    \        }\n        elsif ($c eq ']') {\n            $count--;\n        }\n  \
    \      return 0 if $count < 0;\n    }\n    return $count > 0 ? 0 : 1;\n}", " \
    \   my $nested = 0;\n    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         $nested = 1;\n        }\n    }\n    return $nested;\n}", "    my $nested\
    \ = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $open++;\n            $nested++;\n\
    \        }\n        elsif ($char eq ']') {\n            $close++;\n          \
    \  $nested--;\n        }\n        return 0 if $nested < 0;\n    }\n    return\
    \ 0 if $open != $close;\n    return 1;\n}", "    my $count = 0;\n    for my $char\
    \ (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        } elsif ($char eq ']') {\n            $count--;\n        }\n        return\
    \ 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my $nested = 0;\n\
    \    my $open = 0;\n    my $close = 0;\n    for my $char (split //, $string) {\n\
    \        if ($char eq '(') {\n            $open++;\n            $nested++;\n \
    \       } elsif ($char eq ')') {\n            $close++;\n            $nested--;\n\
    \        }\n        return 0 if $nested < 0;\n    }\n    return 0 if $open !=\
    \ $close;\n    return 1;\n}", "    my $count = 0;\n    for my $char (split //,\
    \ $string) {\n        if ($char eq '[') {\n            $count++;\n        } elsif\
    \ ($char eq ']') {\n            $count--;\n        }\n        return 0 if $count\
    \ < 0;\n    }\n    return $count == 0;\n}", "    my $n = length($string);\n  \
    \  my $count = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        if (substr($string,\
    \ $i, 1) eq '(') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 0;\n        }\n    }\n\
    \    return $count == 0;\n}", "    my $stack = [];\n    my $open = {\n       \
    \ '(' => 1,\n        '[' => 1,\n        '{' => 1,\n    };\n    my $close = {\n\
    \        ')' => '(',\n        ']' => '[',\n        '}' => '{',\n    };\n    for\
    \ my $char (split //, $string) {\n        if (exists $open->{$char}) {\n     \
    \       push @$stack, $char;\n        }\n        elsif (exists $close->{$char})\
    \ {\n            return 0 if !@$stack;\n            return 0 if $close->{$char}\
    \ ne pop @$stack;\n        }\n    }\n    return 0 if @$stack;\n    return 1;\n\
    }", "    my $n = length($string);\n    my $count = 0;\n    for (my $i = 0; $i\
    \ < $n; $i++) {\n        if (substr($string, $i, 1) eq '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return 0;\n        }\n    }\n    return $count == 0;\n}", "    my\
    \ $nested = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $open++;\n        \
    \    $nested++;\n        }\n        elsif ($char eq ']') {\n            $close++;\n\
    \            $nested--;\n        }\n        if ($nested < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $open == $close ? 1 : 0;\n}", "    my $nested\
    \ = 0;\n    my $open = 0;\n    my $close = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $open++;\n            $nested =\
    \ 1 if $close;\n        }\n        elsif ($char eq ']') {\n            $close++;\n\
    \            $nested = 1 if $open;\n        }\n    }\n    return $nested;\n}",
  "    my @stack;\n    for my $char (split //, $string) {\n        if ($char eq '(')\
    \ {\n            push @stack, $char;\n        } elsif ($char eq ')') {\n     \
    \       if (@stack) {\n                pop @stack;\n            } else {\n   \
    \             return 0;\n            }\n        }\n    }\n    return @stack ?\
    \ 0 : 1;\n}", "    my $nested = 0;\n    my $open = 0;\n    my $close = 0;\n  \
    \  for my $c (split //, $string) {\n        if ($c eq '[') {\n            $open++;\n\
    \            $nested++;\n        } elsif ($c eq ']') {\n            $close++;\n\
    \            $nested--;\n        }\n        if ($nested < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $open == $close ? 1 : 0;\n}", "    my @stack;\n\
    \    my $i = 0;\n    while($i < length($string)) {\n        my $char = substr($string,\
    \ $i, 1);\n        if($char eq '(') {\n            push(@stack, $char);\n    \
    \    }\n        elsif($char eq ')') {\n            if(scalar(@stack) == 0) {\n\
    \                return 0;\n            }\n            else {\n              \
    \  pop(@stack);\n            }\n        }\n        $i++;\n    }\n    return scalar(@stack)\
    \ == 0;\n}", "    my $count = 0;\n    for my $char (split //, $string) {\n   \
    \     if ($char eq '[') {\n            $count++;\n        } elsif ($char eq ']')\
    \ {\n            $count--;\n        }\n        return 0 if $count < 0;\n    }\n\
    \    return $count == 0;\n}", "    my $nested = 0;\n    my $open = 0;\n    my\
    \ $close = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[')\
    \ {\n            $open++;\n            $nested++;\n        } elsif ($char eq ']')\
    \ {\n            $close++;\n            $nested--;\n        }\n        return\
    \ 0 if $nested < 0;\n    }\n    return 0 if $open != $close;\n    return 1;\n}",
  "    my $count = 0;\n    for my $char (split //, $string) {\n        if ($char eq\
    \ '[') {\n            $count++;\n        } elsif ($char eq ']') {\n          \
    \  $count--;\n        }\n        return 0 if $count < 0;\n    }\n    return 0\
    \ if $count != 0;\n    return 1;\n}", "    my $count = 0;\n    for my $char (split\
    \ //, $string) {\n        if ($char eq '[') {\n            $count++;\n       \
    \ }\n        elsif ($char eq ']') {\n            $count--;\n        }\n      \
    \  return 0 if $count < 0;\n    }\n    return 0 if $count != 0;\n    return 1;\n\
    }", "    my $count = 0;\n    for my $char (split //, $string) {\n        if ($char\
    \ eq '[') {\n            $count++;\n        }\n        elsif ($char eq ']') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 0;\n        }\n    }\n    return $count == 0;\n}", "    my $count = 0;\n   \
    \ for my $char (split //, $string) {\n        if ($char eq '[') {\n          \
    \  $count++;\n        } elsif ($char eq ']') {\n            $count--;\n      \
    \  }\n        return 0 if $count < 0;\n    }\n    return $count == 0;\n}", " \
    \   my @stack;\n    for my $char (split //, $string) {\n        if ($char eq '(')\
    \ {\n            push @stack, $char;\n        } elsif ($char eq ')') {\n     \
    \       return 0 if !@stack;\n            pop @stack;\n        }\n    }\n    return\
    \ !@stack;\n}", "    my @stack;\n    my $len = length($string);\n    for(my $i\
    \ = 0; $i < $len; $i++) {\n        my $char = substr($string, $i, 1);\n      \
    \  if($char eq '[') {\n            push(@stack, $char);\n        } elsif($char\
    \ eq ']') {\n            if(scalar(@stack) == 0) {\n                return 0;\n\
    \            } else {\n                my $top = pop(@stack);\n              \
    \  if($top ne '[') {\n                    return 0;\n                }\n     \
    \       }\n        }\n    }\n    return scalar(@stack) == 0;\n}", "    my $count\
    \ = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            $count++;\n        }\n        elsif ($char eq ']') {\n          \
    \  $count--;\n        }\n        return 0 if $count < 0;\n    }\n    return $count\
    \ == 0;\n}", "    my $count = 0;\n    for my $char (split //, $string) {\n   \
    \     if ($char eq '[') {\n            $count++;\n        } elsif ($char eq ']')\
    \ {\n            $count--;\n        }\n        return 0 if $count < 0;\n    }\n\
    \    return 0 if $count > 0;\n    return 1;\n}", "    my $nested = 0;\n    my\
    \ $open = 0;\n    my $close = 0;\n    my $valid = 0;\n    my $i = 0;\n    while\
    \ ($i < length($string)) {\n        if (substr($string, $i, 1) eq '[') {\n   \
    \         $open++;\n            $nested++;\n        }\n        elsif (substr($string,\
    \ $i, 1) eq ']') {\n            $close++;\n            $nested--;\n        }\n\
    \        if ($nested < 0) {\n            return 0;\n        }\n        $i++;\n\
    \    }\n    if ($open == $close) {\n        return 1;\n    }\n    else {\n   \
    \     return 0;\n    }\n}", "    my $nested = 0;\n    my $open = 0;\n    my $close\
    \ = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            $open++;\n            $nested++;\n        }\n        elsif ($char\
    \ eq ']') {\n            $close++;\n            $nested--;\n        }\n      \
    \  if ($nested < 0) {\n            return 0;\n        }\n    }\n    return $open\
    \ == $close ? 1 : 0;\n}", "    my $count = 0;\n    for my $char (split //, $string)\
    \ {\n        if ($char eq '[') {\n            $count++;\n        } elsif ($char\
    \ eq ']') {\n            $count--;\n        }\n        return 0 if $count < 0;\n\
    \    }\n    return $count == 0;\n}", "    my @stack;\n    for my $c (split //,\
    \ $string) {\n        if ($c eq '(') {\n            push @stack, $c;\n       \
    \ } elsif ($c eq ')') {\n            if (@stack && $stack[-1] eq '(') {\n    \
    \            pop @stack;\n            } else {\n                return 0;\n  \
    \          }\n        }\n    }\n    return @stack ? 0 : 1;\n}", "    my $count\
    \ = 0;\n    for my $char (split //, $string) {\n        if ($char eq '[') {\n\
    \            $count++;\n        }\n        elsif ($char eq ']') {\n          \
    \  $count--;\n        }\n        return 0 if $count < 0;\n    }\n    return $count\
    \ == 0;\n}", "    my $stack = [];\n    foreach my $char (split //, $string) {\n\
    \        if ($char eq '(') {\n            push @$stack, $char;\n        } elsif\
    \ ($char eq ')') {\n            if (@$stack) {\n                pop @$stack;\n\
    \            } else {\n                return 0;\n            }\n        }\n \
    \   }\n    return @$stack ? 0 : 1;\n}", "    my @stack;\n    for my $c (split\
    \ //, $string) {\n        if ($c eq '(') {\n            push @stack, ')';\n  \
    \      } elsif ($c eq '[') {\n            push @stack, ']';\n        } elsif ($c\
    \ eq '{') {\n            push @stack, '}';\n        } elsif ($c eq ')' || $c eq\
    \ ']' || $c eq '}') {\n            return 0 if !@stack || $c ne pop @stack;\n\
    \        }\n    }\n    return !@stack;\n}", "    my $nested = 0;\n    my $open\
    \ = 0;\n    my $close = 0;\n    my $valid = 0;\n    my $i = 0;\n    while ($i\
    \ < length($string)) {\n        if (substr($string, $i, 1) eq '(') {\n       \
    \     $open++;\n            $valid++;\n        }\n        elsif (substr($string,\
    \ $i, 1) eq ')') {\n            $close++;\n            $valid++;\n        }\n\
    \        if ($open > 0 && $close > 0) {\n            $nested = 1;\n        }\n\
    \        $i++;\n    }\n    if ($valid % 2 != 0) {\n        return 0;\n    }\n\
    \    return $nested;\n}", "    my @stack;\n    my $i = 0;\n    while($i < length($string))\
    \ {\n        my $char = substr($string, $i, 1);\n        if($char eq '(') {\n\
    \            push(@stack, $char);\n        }\n        elsif($char eq ')') {\n\
    \            if(scalar(@stack) == 0) {\n                return 0;\n          \
    \  }\n            else {\n                pop(@stack);\n            }\n      \
    \  }\n        $i++;\n    }\n    return scalar(@stack) == 0;\n}", "    my $n =\
    \ length($string);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l\
    \ = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my\
    \ $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n  \
    \  my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n\
    \    my $A = 0;\n    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n\
    \    my $F = 0;\n    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n\
    \    my $K = 0;\n    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n\
    \    my $P = 0;\n    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n\
    \    my $U = 0;\n    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n\
    \    my $Z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n\
    \    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n\
    \    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n\
    \    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s =",
  "    my @stack;\n    my @chars = split //, $string;\n    for my $c (@chars) {\n\
    \        if ($c eq '(') {\n            push @stack, $c;\n        } elsif ($c eq\
    \ ')') {\n            if (@stack && $stack[-1] eq '(') {\n                pop\
    \ @stack;\n            } else {\n                return 0;\n            }\n  \
    \      }\n    }\n    return @stack ? 0 : 1;\n}", "    my $n = length($string);\n\
    \    my $depth = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        if (substr($string,\
    \ $i, 1) eq '[') {\n            $depth++;\n        } else {\n            $depth--;\n\
    \        }\n        if ($depth < 0) {\n            return 0;\n        }\n    }\n\
    \    return $depth == 0;\n}", "    my @stack;\n    for my $c (split //, $string)\
    \ {\n        if ($c eq '[') {\n            push @stack, $c;\n        } elsif ($c\
    \ eq ']') {\n            if (@stack && $stack[-1] eq '[') {\n                pop\
    \ @stack;\n            } else {\n                return 0;\n            }\n  \
    \      }\n    }\n    return @stack ? 0 : 1;\n}", "    my $count = 0;\n    for\
    \ my $char (split //, $string) {\n        if ($char eq '[') {\n            $count++;\n\
    \        }\n        elsif ($char eq ']') {\n            $count--;\n        }\n\
    \        return 0 if $count < 0;\n    }\n    return $count == 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
