language: pl
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    foreach my $i (1..$n) {\n        $result *= factorial($i);\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpxfo0fum5.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n\
    \    for (my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n   \
    \ return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $fact =\
    \ 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $fact *= $i;\n    }\n    return\
    \ $fact;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    my $i = $n;\n    while ($i > 0) {\n        $factorial *= $i;\n   \
    \     $i--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n    return $factorial;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
    \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $fact =\
    \ 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $fact *= $i;\n    }\n    for\
    \ (my $i = $n - 1; $i > 0; $i--) {\n        $fact *= $i;\n    }\n    return $fact;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
    \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for(my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $fact =\
    \ 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $fact *= $i;\n    }\n    return\
    \ $fact;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    my $i = $n;\n    while ($i > 0) {\n        $factorial *= $i;\n   \
    \     $i--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for(my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n \
    \   for(my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    my $i = 1;\n    while ($i <= $n) {\n        $factorial *= $i;\n  \
    \      $i++;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    my $i = 1;\n    while ($i <= $n) {\n        $factorial *= $i;\n  \
    \      $i++;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $f = 1;\n\
    \    for (my $i = $n; $i > 0; $i--) {\n        $f *= $i;\n    }\n    for (my $i\
    \ = $n - 1; $i > 0; $i--) {\n        $f *= $i;\n    }\n    return $f;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
    \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    foreach (1..$n) {\n        $result *= factorial($_);\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpzi121djj.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpkctdjxof.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpkctdjxof.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpkctdjxof.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for(my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    foreach my $i (1..$n) {\n        $factorial *= factorial($i);\n  \
    \  }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpcl97j8is.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpkctdjxof.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $f = 1;\n\
    \    while ($n > 0) {\n        $f *= factorial($n);\n        $n--;\n    }\n  \
    \  return $f;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpf50cyn2r.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    foreach my $i (1..$n) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    for (my $i = 1; $i < $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpkctdjxof.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    for (my $i = 1; $i < $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpkctdjxof.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    foreach my $i (1..$n) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $fact =\
    \ 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $fact *= $i;\n    }\n    return\
    \ $fact;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    return 1 if\
    \ $n == 0;\n    return $n * special_factorial($n - 1);\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n        $n--;\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpa0da6n_n.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmphix8ofc0.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= $n;\n        $n--;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpkctdjxof.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $result\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpsrsvp6ul.pl line
    10.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpkctdjxof.pl line
    11.

    '
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# The function\
    \ will receive an integer as input and should return the special\n# factorial\
    \ of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my $factorial\
    \ = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013539
