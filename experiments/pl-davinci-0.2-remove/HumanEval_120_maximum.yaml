name: HumanEval_120_maximum
language: pl
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Example\
  \ 2:\n# Example 3:\n# Note:\n# 1. The length of the array will be in the range of\
  \ [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n\
  # 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr, $k) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
  \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
  \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
  \ 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
  \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n \
    \   my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p\
    \ > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i,\
    \ $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = $n - $k;\n    while($i < $j)\
    \ {\n        my $m = partition($arr, $i, $j);\n        if($m < $p) {\n       \
    \     $i = $m + 1;\n        }\n        elsif($m > $p) {\n            $j = $m -\
    \ 1;\n        }\n        else {\n            last;\n        }\n    }\n    return\
    \ [@$arr[$p..$n-1]];\n}", "    my $len = scalar(@$arr);\n    my @res;\n    for(my\
    \ $i = 0; $i < $len; $i++) {\n        if($i < $k) {\n            push @res, $arr->[$i];\n\
    \        } else {\n            my $min = $res[0];\n            my $min_idx = 0;\n\
    \            for(my $j = 1; $j < $k; $j++) {\n                if($res[$j] < $min)\
    \ {\n                    $min = $res[$j];\n                    $min_idx = $j;\n\
    \                }\n            }\n            if($arr->[$i] > $min) {\n     \
    \           $res[$min_idx] = $arr->[$i];\n            }\n        }\n    }\n  \
    \  return \\@res;\n}", "    my $n = scalar(@$arr);\n    my @res;\n    for (my\
    \ $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\\
    @res;\n}", "    my @res;\n    for my $i (0..$#{$arr}) {\n        if (@res < $k)\
    \ {\n            push @res, $arr->[$i];\n            next;\n        }\n      \
    \  my $j = $k - 1;\n        while ($j >= 0 && $res[$j] < $arr->[$i]) {\n     \
    \       $res[$j + 1] = $res[$j];\n            $j--;\n        }\n        $res[$j\
    \ + 1] = $arr->[$i];\n    }\n    return \\@res;\n}", "    my @result;\n    my\
    \ $n = scalar(@$arr);\n    for(my $i = 0; $i < $n; $i++) {\n        my $x = $arr->[$i];\n\
    \        if(scalar(@result) < $k) {\n            push @result, $x;\n         \
    \   next;\n        }\n        my $j = scalar(@result) - 1;\n        while($j >=\
    \ 0 && $result[$j] < $x) {\n            $result[$j + 1] = $result[$j];\n     \
    \       $j--;\n        }\n        $result[$j + 1] = $x;\n    }\n    return \\\
    @result;\n}", "    my @res;\n    for my $i (0..$k-1) {\n        my $max = -1e9;\n\
    \        my $max_idx = -1;\n        for my $j ($i..$#{$arr}) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        push @res, $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }", "    my @result;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while ($i\
    \ < $n) {\n        my $j = $i + 1;\n        while ($j < $n && $arr->[$j] > $arr->[$i])\
    \ {\n            $j++;\n        }\n        if ($j - $i >= $k) {\n            push\
    \ @result, splice(@$arr, $i, $k);\n            $n -= $k;\n        } else {\n \
    \           push @result, splice(@$arr, $i, $j - $i);\n            $n -= $j -\
    \ $i;\n            $k -= $j - $i;\n        }\n    }\n    return \\@result;\n}",
  "    my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i < $n; $i++) {\n\
    \        if(scalar(@res) < $k) {\n            push @res, $arr->[$i];\n       \
    \ } else {\n            my $j = 0;\n            while($j < $k && $res[$j] > $arr->[$i])\
    \ {\n                $j++;\n            }\n            if($j < $k) {\n       \
    \         splice(@res, $j, 0, $arr->[$i]);\n                pop @res;\n      \
    \      }\n        }\n    }\n    return \\@res;\n}", "    my $len = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    my $p = $len - $k;\n    while($i <\
    \ $j) {\n        my $m = partition($arr, $i, $j);\n        if($m == $p) {\n  \
    \          last;\n        } elsif($m < $p) {\n            $i = $m + 1;\n     \
    \   } else {\n            $j = $m - 1;\n        }\n    }\n    my @result = @$arr[$p..$len-1];\n\
    \    return \\@result;\n}", "    my @result;\n    my $n = scalar(@$arr);\n   \
    \ for(my $i = 0; $i < $n; $i++) {\n        my $j = scalar(@result) - 1;\n    \
    \    while($j >= 0 && $arr->[$i] > $result[$j]) {\n            $j--;\n       \
    \ }\n        if($j < $k - 1) {\n            splice(@result, $j + 1, 0, $arr->[$i]);\n\
    \            pop(@result) if(scalar(@result) > $k);\n        }\n    }\n    return\
    \ \\@result;\n}", "    my @res;\n    for my $i (0..$#{$arr}) {\n        if (@res\
    \ < $k) {\n            push @res, $arr->[$i];\n            if (@res == $k) {\n\
    \                @res = sort {$b <=> $a} @res;\n            }\n        } else\
    \ {\n            if ($arr->[$i] > $res[-1]) {\n                pop @res;\n   \
    \             push @res, $arr->[$i];\n                @res = sort {$b <=> $a}\
    \ @res;\n            }\n        }\n    }\n    return \\@res;\n}", "    my $len\
    \ = scalar(@$arr);\n    my $i = 0;\n    my $j = $len - 1;\n    my $p = partition($arr,\
    \ $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k - 1) {\n         \
    \   $j = $p - 1;\n            $p = partition($arr, $i, $j);\n        } else {\n\
    \            $i = $p + 1;\n            $p = partition($arr, $i, $j);\n       \
    \ }\n    }\n    my @res = @$arr[0..$p];\n    return \\@res;\n}", "    my $n =\
    \ scalar(@$arr);\n    my $max = $arr->[0];\n    my $max_idx = 0;\n    my $i =\
    \ 0;\n    my @result;\n    while($i < $k) {\n        for(my $j = 0; $j < $n; $j++)\
    \ {\n            if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        push @result,\
    \ $max;\n        $arr->[$max_idx] = -1;\n        $max = -1;\n        $i++;\n \
    \   }\n    return \\@result;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    while ($i < $j) {\n        my $p = partition($arr, $i,\
    \ $j);\n        if ($p == $k - 1) {\n            last;\n        } elsif ($p <\
    \ $k - 1) {\n            $i = $p + 1;\n        } else {\n            $j = $p -\
    \ 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        my $p = partition($arr,\
    \ $i, $j);\n        if ($p == $k - 1) {\n            last;\n        } elsif ($p\
    \ < $k - 1) {\n            $i = $p + 1;\n        } else {\n            $j = $p\
    \ - 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my $len = scalar(@$arr);\n\
    \    my $res = [];\n    for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for (my $j = $i + 1; $j < $len; $j++) {\n\
    \            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n  \
    \              $max_idx = $j;\n            }\n        }\n        $res->[$i] =\
    \ $max;\n        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n\
    \    }\n    return $res;\n}", "    my $len = scalar(@$arr);\n    my $ret = [];\n\
    \    for(my $i = 0; $i < $k; $i++) {\n        my $max = -1;\n        my $max_idx\
    \ = -1;\n        for(my $j = 0; $j < $len; $j++) {\n            if($$arr[$j] >\
    \ $max) {\n                $max = $$arr[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        push @$ret, $max;\n        $$arr[$max_idx]\
    \ = -1;\n    }\n    return $ret;\n}", "    my @result;\n    my $size = scalar\
    \ @$arr;\n    for(my $i = 0; $i < $size; $i++) {\n        my $num = $arr->[$i];\n\
    \        if($i < $k) {\n            push @result, $num;\n            next;\n \
    \       }\n        my $min = $result[0];\n        my $min_index = 0;\n       \
    \ for(my $j = 1; $j < $k; $j++) {\n            if($result[$j] < $min) {\n    \
    \            $min = $result[$j];\n                $min_index = $j;\n         \
    \   }\n        }\n        if($num > $min) {\n            $result[$min_index] =\
    \ $num;\n        }\n    }\n    return \\@result;\n}", "    my @res;\n    for my\
    \ $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n \
    \       for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n   \
    \             $max = $arr->[$j];\n                $max_idx = $j;\n           \
    \ }\n        }\n        $res[$i] = $max;\n        $arr->[$max_idx] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n    }\n    return \\@res;\n}", "    my @result;\n\
    \    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_index = $j;\n  \
    \          }\n        }\n        $result[$i] = $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\@result;\n}", "   \
    \ my @res;\n    my $len = scalar(@$arr);\n    if($len == 0) {\n        return\
    \ @res;\n    }\n    if($len <= $k) {\n        return sort {$b <=> $a} @$arr;\n\
    \    }\n    for(my $i = 0; $i < $k; $i++) {\n        $res[$i] = $arr->[$i];\n\
    \    }\n    @res = sort {$b <=> $a} @res;\n    for(my $i = $k; $i < $len; $i++)\
    \ {\n        if($arr->[$i] > $res[$k - 1]) {\n            $res[$k - 1] = $arr->[$i];\n\
    \            @res = sort {$b <=> $a} @res;\n        }\n    }\n    return @res;\n\
    }", "    my @ret;\n    my $n = scalar(@$arr);\n    return @$arr if $k >= $n;\n\
    \    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_idx\
    \ = $i;\n        for my $j ($i+1..$n-1) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $ret[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return @ret;\n}", "    my @res;\n\
    \    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_index = $j;\n  \
    \          }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\@res;\n}", "    my\
    \ @res;\n    for my $i (0..$#{$arr}) {\n        if (@res < $k) {\n           \
    \ push @res, $arr->[$i];\n            @res = sort {$b <=> $a} @res;\n        }\
    \ else {\n            if ($arr->[$i] > $res[-1]) {\n                pop @res;\n\
    \                push @res, $arr->[$i];\n                @res = sort {$b <=> $a}\
    \ @res;\n            }\n        }\n    }\n    return \\@res;\n}", "    my $n =\
    \ scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr,\
    \ $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k - 1) {\n         \
    \   $j = $p - 1;\n            $p = partition($arr, $i, $j);\n        } else {\n\
    \            $i = $p + 1;\n            $p = partition($arr, $i, $j);\n       \
    \ }\n    }\n    return [@$arr[0..$p]];\n}", "    my @result;\n    my $n = scalar(@$arr);\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        if($i < $k) {\n            push\
    \ @result, $arr->[$i];\n        } else {\n            my $min = $result[0];\n\
    \            my $min_index = 0;\n            for(my $j = 1; $j < $k; $j++) {\n\
    \                if($result[$j] < $min) {\n                    $min = $result[$j];\n\
    \                    $min_index = $j;\n                }\n            }\n    \
    \        if($arr->[$i] > $min) {\n                $result[$min_index] = $arr->[$i];\n\
    \            }\n        }\n    }\n    return \\@result;\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p != $k\
    \ - 1) {\n        if ($p > $k - 1) {\n            $j = $p - 1;\n            $p\
    \ = partition($arr, $i, $j);\n        } else {\n            $i = $p + 1;\n   \
    \         $p = partition($arr, $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n\
    }", "    my @ret;\n    my $len = scalar(@$arr);\n    if ($len == 0) {\n      \
    \  return @ret;\n    }\n    if ($len <= $k) {\n        return sort {$b <=> $a}\
    \ @$arr;\n    }\n    my $min = $arr->[0];\n    for (my $i = 1; $i < $k; $i++)\
    \ {\n        if ($arr->[$i] < $min) {\n            $min = $arr->[$i];\n      \
    \  }\n    }\n    for (my $i = $k; $i < $len; $i++) {\n        if ($arr->[$i] >\
    \ $min) {\n            my $j = 0;\n            for (; $j < $k; $j++) {\n     \
    \           if ($arr->[$i] > $arr->[$j]) {\n                    last;\n      \
    \          }\n            }\n            for (my $l = $k - 1; $l > $j; $l--) {\n\
    \                $arr->[$l] = $arr->[$l - 1];\n            }\n            $arr->[$j]\
    \ = $arr->[$i];\n            $min = $arr->[$k - 1];\n        }\n    }\n    return\
    \ @$arr[0..$k - 1];\n}", "    my @max = sort {$b <=> $a} @$arr[0..$k-1];\n   \
    \ for my $i ($k..@$arr-1) {\n        if ($arr->[$i] > $max[-1]) {\n          \
    \  for my $j (0..$k-1) {\n                if ($arr->[$i] > $max[$j]) {\n     \
    \               splice @max, $j, 0, $arr->[$i];\n                    pop @max;\n\
    \                    last;\n                }\n            }\n        }\n    }\n\
    \    return \\@max;\n}", "    my $n = scalar(@$arr);\n    my @ret;\n    for (my\
    \ $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx\
    \ = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        $ret[$i] = $max;\n        $arr->[$max_idx]\
    \ = $arr->[$i];\n        $arr->[$i] = $max;\n    }\n    return \\@ret;\n}", " \
    \   my @res;\n    for my $i (0..$k-1) {\n        $res[$i] = $arr->[$i];\n    }\n\
    \    @res = sort {$b <=> $a} @res;\n    for my $i ($k..@$arr-1) {\n        if\
    \ ($arr->[$i] < $res[$k-1]) {\n            $res[$k-1] = $arr->[$i];\n        \
    \    @res = sort {$b <=> $a} @res;\n        }\n    }\n    return \\@res;\n}",
  "    my @res;\n    for my $i (0..$k-1) {\n        my $max = -1e9;\n        my $max_idx\
    \ = -1;\n        for my $j ($i..$#{$arr}) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}", "    my $n\
    \ = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr,\
    \ $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k - 1) {\n         \
    \   $j = $p - 1;\n            $p = partition($arr, $i, $j);\n        } else {\n\
    \            $i = $p + 1;\n            $p = partition($arr, $i, $j);\n       \
    \ }\n    }\n    return [@$arr[0..$p]];\n}", "    my @res;\n    my $n = scalar(@$arr);\n\
    \    if ($k == 0) {\n        return @res;\n    }\n    if ($k == $n) {\n      \
    \  return @$arr;\n    }\n    my $i = 0;\n    while ($i < $k) {\n        my $j\
    \ = $i;\n        while ($j < $n) {\n            if ($arr->[$j] > $arr->[$i]) {\n\
    \                my $tmp = $arr->[$i];\n                $arr->[$i] = $arr->[$j];\n\
    \                $arr->[$j] = $tmp;\n            }\n            $j++;\n      \
    \  }\n        $i++;\n    }\n    return @$arr[0..$k-1];\n}", "    my @result;\n\
    \    my $n = scalar(@$arr);\n    my $i = 0;\n    while ($i < $n) {\n        if\
    \ (scalar(@result) == 0) {\n            push @result, $arr->[$i];\n        } else\
    \ {\n            my $j = scalar(@result) - 1;\n            while ($j >= 0 && $arr->[$i]\
    \ > $result[$j]) {\n                $j--;\n            }\n            if ($j <\
    \ $k - 1) {\n                splice @result, $j + 1, 0, $arr->[$i];\n        \
    \        if (scalar(@result) > $k) {\n                    pop @result;\n     \
    \           }\n            }\n        }\n        $i++;\n    }\n    return \\@result;\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my @result;\n    while ($i\
    \ < $k) {\n        my $j = $i;\n        while ($j < $n) {\n            if ($arr->[$j]\
    \ > $arr->[$i]) {\n                ($arr->[$j], $arr->[$i]) = ($arr->[$i], $arr->[$j]);\n\
    \            }\n            $j++;\n        }\n        push @result, $arr->[$i];\n\
    \        $i++;\n    }\n    return \\@result;\n}", "    my @ret;\n    for my $i\
    \ (0..$k-1) {\n        my $max = $arr->[$i];\n        my $idx = $i;\n        for\
    \ my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n             \
    \   $max = $arr->[$j];\n                $idx = $j;\n            }\n        }\n\
    \        $ret[$i] = $max;\n        $arr->[$idx] = $arr->[$i];\n        $arr->[$i]\
    \ = $max;\n    }\n    return \\@ret;\n}", "    my @result;\n    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    while ($i < $n) {\n        my $j = $i + 1;\n        while\
    \ ($j < $n && $arr->[$j] > $arr->[$i]) {\n            $j++;\n        }\n     \
    \   if ($j - $i >= $k) {\n            push @result, splice(@$arr, $i, $k);\n \
    \           $n -= $k;\n        } else {\n            push @result, splice(@$arr,\
    \ $i, $j - $i);\n            $n -= $j - $i;\n            $k -= $j - $i;\n    \
    \    }\n    }\n    return \\@result;\n}", "    my $n = scalar(@$arr);\n    my\
    \ @res;\n    for (my $i = 0; $i < $k; $i++) {\n        my $max = -1e9;\n     \
    \   my $max_idx = -1;\n        for (my $j = 0; $j < $n; $j++) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        push @res, $max;\n        $arr->[$max_idx]\
    \ = -1e9;\n    }\n    return \\@res;\n}", "    my @result;\n    my @heap;\n  \
    \  foreach my $num (@$arr) {\n        if(@heap < $k) {\n            push @heap,\
    \ $num;\n            if(@heap == $k) {\n                @heap = sort {$b <=> $a}\
    \ @heap;\n            }\n        } else {\n            if($num > $heap[0]) {\n\
    \                $heap[0] = $num;\n                @heap = sort {$b <=> $a} @heap;\n\
    \            }\n        }\n    }\n    return \\@heap;\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    while($i < $j) {\n        my $m = partition($arr,\
    \ $i, $j);\n        if($m == $k - 1) {\n            last;\n        } elsif($m\
    \ > $k - 1) {\n            $j = $m - 1;\n        } else {\n            $i = $m\
    \ + 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @res;\n  \
    \  my $n = scalar(@$arr);\n    for(my $i = 0; $i < $n; $i++) {\n        my $j\
    \ = $#res;\n        while($j >= 0 && $arr->[$i] > $res[$j]) {\n            $j--;\n\
    \        }\n        if($j < $k - 1) {\n            splice(@res, $j + 1, 0, $arr->[$i]);\n\
    \            pop(@res) if(scalar(@res) > $k);\n        }\n    }\n    return \\\
    @res;\n}", "    my @res;\n    for my $i (0..$#{$arr}) {\n        if($i < $k) {\n\
    \            push @res, $arr->[$i];\n        } else {\n            my $min = $res[0];\n\
    \            my $min_idx = 0;\n            for my $j (1..$#res) {\n          \
    \      if($res[$j] < $min) {\n                    $min = $res[$j];\n         \
    \           $min_idx = $j;\n                }\n            }\n            if($arr->[$i]\
    \ > $min) {\n                $res[$min_idx] = $arr->[$i];\n            }\n   \
    \     }\n    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i\
    \ = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p\
    \ != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p - 1;\n       \
    \     $p = partition($arr, $i, $j);\n        } else {\n            $i = $p + 1;\n\
    \            $p = partition($arr, $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p\
    \ = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k\
    \ - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i, $j);\n\
    \        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    my $p = 0;\n    while ($i < $j) {\n        $p = partition($arr,\
    \ $i, $j);\n        if ($p == $k - 1) {\n            last;\n        } elsif ($p\
    \ < $k - 1) {\n            $i = $p + 1;\n        } else {\n            $j = $p\
    \ - 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my $n = scalar(@$arr);\n\
    \    my @res;\n    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n   \
    \         if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n      \
    \          $max_idx = $j;\n            }\n        }\n        $res[$i] = $max;\n\
    \        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n  \
    \  }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n  \
    \  my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p != $k\
    \ - 1) {\n        if ($p > $k - 1) {\n            $j = $p - 1;\n            $p\
    \ = partition($arr, $i, $j);\n        } else {\n            $i = $p + 1;\n   \
    \         $p = partition($arr, $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n\
    }", "    my $len = scalar(@$arr);\n    my $i = 0;\n    my $j = $len - 1;\n   \
    \ while($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if($p ==\
    \ $k - 1) {\n            last;\n        }\n        elsif($p < $k - 1) {\n    \
    \        $i = $p + 1;\n        }\n        else {\n            $j = $p - 1;\n \
    \       }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @ret;\n    my $size\
    \ = scalar(@$arr);\n    return [] if $size == 0;\n    return $arr if $size <=\
    \ $k;\n    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n  \
    \      my $max_index = $i;\n        for(my $j = $i + 1; $j < $size; $j++) {\n\
    \            if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n   \
    \             $max_index = $j;\n            }\n        }\n        ($arr->[$i],\
    \ $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n        push @ret,\
    \ $arr->[$i];\n    }\n    return \\@ret;\n}", "    my @res;\n    my $n = scalar(@$arr);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        my $num = $arr->[$i];\n       \
    \ if (scalar(@res) < $k) {\n            push @res, $num;\n            next;\n\
    \        }\n        my $min = min(@res);\n        if ($num > $min) {\n       \
    \     my $j = 0;\n            for (; $j < $k; $j++) {\n                if ($res[$j]\
    \ == $min) {\n                    last;\n                }\n            }\n  \
    \          $res[$j] = $num;\n        }\n    }\n    return \\@res;\n}", "    my\
    \ @result;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n       \
    \ my $max_index = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        $result[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\\
    @result;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if\
    \ ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my @res;\n\
    \    for my $i (0..$k-1) {\n        $res[$i] = $arr->[$i];\n    }\n    @res =\
    \ sort {$b <=> $a} @res;\n    for my $i ($k..@$arr-1) {\n        if ($arr->[$i]\
    \ > $res[$k-1]) {\n            $res[$k-1] = $arr->[$i];\n            @res = sort\
    \ {$b <=> $a} @res;\n        }\n    }\n    return \\@res;\n}", "    my @res;\n\
    \    my $i = 0;\n    while($i < $k) {\n        my $max = $arr->[$i];\n       \
    \ my $max_index = $i;\n        for(my $j = $i + 1; $j < @$arr; $j++) {\n     \
    \       if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n        \
    \        $max_index = $j;\n            }\n        }\n        push @res, $max;\n\
    \        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n      \
    \  $i++;\n    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i\
    \ = 0;\n    my @res;\n    while($i < $k) {\n        my $max = $arr->[$i];\n  \
    \      my $max_i = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n       \
    \     if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n          \
    \      $max_i = $j;\n            }\n        }\n        $res[$i] = $max;\n    \
    \    $arr->[$max_i] = $arr->[$i];\n        $i++;\n    }\n    return \\@res;\n}",
  "    my @result;\n    my $n = scalar(@$arr);\n    if ($k == 0) {\n        return\
    \ @result;\n    }\n    if ($k == $n) {\n        return @$arr;\n    }\n    my $i\
    \ = 0;\n    my $j = $k - 1;\n    while ($i <= $j) {\n        my $max = $i;\n \
    \       for (my $m = $i + 1; $m <= $j; $m++) {\n            if ($arr->[$m] > $arr->[$max])\
    \ {\n                $max = $m;\n            }\n        }\n        my $tmp = $arr->[$i];\n\
    \        $arr->[$i] = $arr->[$max];\n        $arr->[$max] = $tmp;\n        $i++;\n\
    \    }\n    for (my $i = 0; $i < $k; $i++) {\n        push @result, $arr->[$i];\n\
    \    }\n    return @result;\n}", "    my $n = scalar(@$arr);\n    my $i = $n -\
    \ $k;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p\
    \ != $i) {\n        if ($p < $i) {\n            $i = $p + 1;\n            $p =\
    \ partition($arr, $i, $j);\n        } else {\n            $j = $p - 1;\n     \
    \       $p = partition($arr, $i, $j);\n        }\n    }\n    return [@$arr[$p..$n-1]];\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p\
    \ = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k\
    \ - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i, $j);\n\
    \        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my @res;\n    my $len = scalar(@$arr);\n\
    \    return [] if $len == 0;\n    return $arr if $len <= $k;\n    for my $i (0..$k-1)\
    \ {\n        $res[$i] = $arr->[$i];\n    }\n    @res = sort {$a <=> $b} @res;\n\
    \    for my $i ($k..$len-1) {\n        if ($arr->[$i] > $res[0]) {\n         \
    \   $res[0] = $arr->[$i];\n            @res = sort {$a <=> $b} @res;\n       \
    \ }\n    }\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$k-1) {\n\
    \        my $max = $arr->[$i];\n        my $max_idx = $i;\n        for my $j ($i+1..$#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        $res[$i] =\
    \ $max;\n        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n\
    \    }\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$k-1) {\n   \
    \     my $max = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i+1..$#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $res[$i]\
    \ = $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n\
    \    }\n    return \\@res;\n}", "    my @result;\n    my $n = scalar(@$arr);\n\
    \    for (my $i = 0; $i < $n; $i++) {\n        if ($i < $k) {\n            push\
    \ @result, $arr->[$i];\n        } else {\n            my $j = 0;\n           \
    \ while ($j < $k && $result[$j] > $arr->[$i]) {\n                $j++;\n     \
    \       }\n            if ($j < $k) {\n                splice @result, $j, 0,\
    \ $arr->[$i];\n                pop @result;\n            }\n        }\n    }\n\
    \    return \\@result;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my\
    \ $j = $n - 1;\n    while ($i < $j) {\n        my $m = partition($arr, $i, $j);\n\
    \        if ($m == $k - 1) {\n            last;\n        } elsif ($m < $k - 1)\
    \ {\n            $i = $m + 1;\n        } else {\n            $j = $m - 1;\n  \
    \      }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my $n = scalar(@$arr);\n\
    \    my @res;\n    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n   \
    \         if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n      \
    \          $max_idx = $j;\n            }\n        }\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n        push @res, $arr->[$i];\n    }\n \
    \   return \\@res;\n}", "    my $len = scalar(@$arr);\n    my $ret = [];\n   \
    \ for(my $i = 0; $i < $k; $i++) {\n        my $max = -1;\n        my $max_idx\
    \ = -1;\n        for(my $j = 0; $j < $len; $j++) {\n            if($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        push @$ret, $max;\n        $arr->[$max_idx]\
    \ = -1;\n    }\n    return $ret;\n}", "    my @res;\n    for my $i (0..$k-1) {\n\
    \        my $max = $arr->[$i];\n        my $max_i = $i;\n        for my $j ($i+1..$#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_i = $j;\n            }\n        }\n        ($arr->[$i],\
    \ $arr->[$max_i]) = ($arr->[$max_i], $arr->[$i]);\n        push @res, $arr->[$i];\n\
    \    }\n    return \\@res;\n}", "    my $len = scalar(@$arr);\n    my @res;\n\
    \    for(my $i = 0; $i < $len; $i++) {\n        if($i < $k) {\n            push\
    \ @res, $arr->[$i];\n        } else {\n            my $min = $res[0];\n      \
    \      my $min_idx = 0;\n            for(my $j = 1; $j < $k; $j++) {\n       \
    \         if($res[$j] < $min) {\n                    $min = $res[$j];\n      \
    \              $min_idx = $j;\n                }\n            }\n            if($arr->[$i]\
    \ > $min) {\n                $res[$min_idx] = $arr->[$i];\n            }\n   \
    \     }\n    }\n    return \\@res;\n}", "    my @res;\n    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    while($i < $n) {\n        my $j = $i + 1;\n        while($j\
    \ < $n && $arr->[$j] == $arr->[$i]) {\n            $j++;\n        }\n        my\
    \ $count = $j - $i;\n        if($count > $k) {\n            $count = $k;\n   \
    \     }\n        for(my $m = 0; $m < $count; $m++) {\n            push @res, $arr->[$i];\n\
    \        }\n        $k -= $count;\n        $i = $j;\n    }\n    return \\@res;\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p\
    \ = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k\
    \ - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i, $j);\n\
    \        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my @res;\n    for my $i (0..$k-1) {\n  \
    \      my $max = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i+1..$#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $res[$i]\
    \ = $max;\n        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $res = [];\n\
    \    for(my $i = 0; $i < $k; $i++) {\n        my $max = -1e9;\n        my $max_idx\
    \ = -1;\n        for(my $j = 0; $j < $n; $j++) {\n            if($arr->[$j] >\
    \ $max) {\n                $max = $arr->[$j];\n                $max_idx = $j;\n\
    \            }\n        }\n        push @$res, $max;\n        $arr->[$max_idx]\
    \ = -1e9;\n    }\n    return $res;\n}", "    my $n = scalar(@$arr);\n    my $i\
    \ = 0;\n    my @res;\n    while($i < $k) {\n        my $max = $arr->[$i];\n  \
    \      my $max_idx = $i;\n        for(my $j = $i+1; $j < $n; $j++) {\n       \
    \     if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n          \
    \      $max_idx = $j;\n            }\n        }\n        push @res, $max;\n  \
    \      $arr->[$max_idx] = $arr->[$i];\n        $arr->[$i] = $max;\n        $i++;\n\
    \    }\n    return \\@res;\n}", "    my @result;\n    for my $i (0..$k-1) {\n\
    \        my $max = $arr->[$i];\n        my $max_index = $i;\n        for my $j\
    \ ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_index = $j;\n            }\n        }\n\
    \        $result[$i] = $max;\n        $arr->[$max_index] = $arr->[$i];\n     \
    \   $arr->[$i] = $max;\n    }\n    return \\@result;\n}", "    my @max;\n    for\
    \ my $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n    }\n    for my $i (0..$k-1)\
    \ {\n        for my $j ($i+1..$k-1) {\n            if ($max[$j] > $max[$i]) {\n\
    \                my $tmp = $max[$i];\n                $max[$i] = $max[$j];\n \
    \               $max[$j] = $tmp;\n            }\n        }\n    }\n    for my\
    \ $i ($k..@$arr-1) {\n        for my $j (0..$k-1) {\n            if ($arr->[$i]\
    \ > $max[$j]) {\n                my $tmp = $max[$j];\n                $max[$j]\
    \ = $arr->[$i];\n                $arr->[$i] = $tmp;\n                last;\n \
    \           }\n        }\n    }\n    return \\@max;\n}", "    my @ret;\n    my\
    \ $len = scalar(@$arr);\n    for(my $i = 0; $i < $k; $i++) {\n        my $max\
    \ = $arr->[$i];\n        my $max_index = $i;\n        for(my $j = $i + 1; $j <\
    \ $len; $j++) {\n            if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $ret[$i]\
    \ = $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n\
    \    }\n    return \\@ret;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    while ($i < $j) {\n        my $m = partition($arr, $i,\
    \ $j);\n        if ($m == $k - 1) {\n            last;\n        } elsif ($m <\
    \ $k - 1) {\n            $i = $m + 1;\n        } else {\n            $j = $m -\
    \ 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @res;\n    my\
    \ $n = @$arr;\n    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n   \
    \         if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n      \
    \          $max_idx = $j;\n            }\n        }\n        $res[$i] = $max;\n\
    \        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n  \
    \  }\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$k-1) {\n     \
    \   my $max = $arr->[$i];\n        my $max_idx = $i;\n        for my $j ($i+1..$#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        $res[$i] =\
    \ $max;\n        $arr->[$max_idx] = $arr->[$i];\n        $arr->[$i] = $max;\n\
    \    }\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$#{$arr}) {\n\
    \        if (@res < $k) {\n            push @res, $arr->[$i];\n            next;\n\
    \        }\n        my $j = $k - 1;\n        while ($j >= 0 && $res[$j] < $arr->[$i])\
    \ {\n            $res[$j + 1] = $res[$j];\n            $j--;\n        }\n    \
    \    $res[$j + 1] = $arr->[$i];\n    }\n    return \\@res;\n}", "    my @res;\n\
    \    my $n = scalar(@$arr);\n    for(my $i = 0; $i < $n; $i++) {\n        if($i\
    \ < $k) {\n            push @res, $arr->[$i];\n        } else {\n            my\
    \ $j = 0;\n            while($j < $k && $res[$j] > $arr->[$i]) {\n           \
    \     $j++;\n            }\n            if($j < $k) {\n                splice\
    \ @res, $j, 0, $arr->[$i];\n                pop @res;\n            }\n       \
    \ }\n    }\n    return \\@res;\n}", "    my @result;\n    my $n = scalar(@$arr);\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        if($i < $k) {\n            push\
    \ @result, $arr->[$i];\n        } else {\n            my $j = 0;\n           \
    \ while($j < $k && $result[$j] > $arr->[$i]) {\n                $j++;\n      \
    \      }\n            if($j < $k) {\n                splice(@result, $j, 0, $arr->[$i]);\n\
    \                pop @result;\n            }\n        }\n    }\n    return \\\
    @result;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while($i < $j) {\n        my $m = partition($arr, $i, $j);\n        if($m\
    \ == $k - 1) {\n            last;\n        } elsif($m > $k - 1) {\n          \
    \  $j = $m - 1;\n        } else {\n            $i = $m + 1;\n        }\n    }\n\
    \    return [@$arr[0..$k-1]];\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p != $k\
    \ - 1) {\n        if ($p > $k - 1) {\n            $j = $p - 1;\n            $p\
    \ = partition($arr, $i, $j);\n        } else {\n            $i = $p + 1;\n   \
    \         $p = partition($arr, $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n\
    }", "    my $len = scalar(@$arr);\n    my $i = 0;\n    my $j = $len - 1;\n   \
    \ my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p\
    \ > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i,\
    \ $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my @res;\n\
    \    my $len = scalar(@$arr);\n    if ($len == 0) {\n        return @res;\n  \
    \  }\n    if ($len <= $k) {\n        return sort {$b <=> $a} @$arr;\n    }\n \
    \   my $i = 0;\n    while ($i < $k) {\n        $res[$i] = $arr->[$i];\n      \
    \  $i++;\n    }\n    @res = sort {$b <=> $a} @res;\n    while ($i < $len) {\n\
    \        if ($arr->[$i] > $res[$k - 1]) {\n            $res[$k - 1] = $arr->[$i];\n\
    \            @res = sort {$b <=> $a} @res;\n        }\n        $i++;\n    }\n\
    \    return @res;\n}", "    my $len = scalar(@$arr);\n    return [] if $len ==\
    \ 0;\n    return [@$arr] if $len <= $k;\n    my @res = ();\n    for my $i (0..$k-1)\
    \ {\n        push @res, $arr->[$i];\n    }\n    @res = sort {$a <=> $b} @res;\n\
    \    for my $i ($k..$len-1) {\n        if ($arr->[$i] > $res[0]) {\n         \
    \   $res[0] = $arr->[$i];\n            @res = sort {$a <=> $b} @res;\n       \
    \ }\n    }\n    return \\@res;\n}", "    my @res;\n    my $len = scalar(@$arr);\n\
    \    if ($len == 0) {\n        return @res;\n    }\n    if ($len <= $k) {\n  \
    \      return sort {$b <=> $a} @$arr;\n    }\n    for (my $i = 0; $i < $k; $i++)\
    \ {\n        $res[$i] = $arr->[$i];\n    }\n    @res = sort {$b <=> $a} @res;\n\
    \    for (my $i = $k; $i < $len; $i++) {\n        if ($arr->[$i] > $res[$k - 1])\
    \ {\n            $res[$k - 1] = $arr->[$i];\n            @res = sort {$b <=> $a}\
    \ @res;\n        }\n    }\n    return @res;\n}", "    my @res;\n    for my $i\
    \ (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_index = $i;\n  \
    \      for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n    \
    \            $max = $arr->[$j];\n                $max_index = $j;\n          \
    \  }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\@res;\n}", "    my\
    \ $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j)\
    \ {\n        my $m = partition($arr, $i, $j);\n        if ($m == $k - 1) {\n \
    \           last;\n        } elsif ($m < $k - 1) {\n            $i = $m + 1;\n\
    \        } else {\n            $j = $m - 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n\
    }", "    my @res;\n    for my $i (0..$#{$arr}) {\n        if (@res < $k) {\n \
    \           push @res, $arr->[$i];\n            next;\n        }\n        my $j\
    \ = $k - 1;\n        while ($j >= 0 && $res[$j] < $arr->[$i]) {\n            $res[$j\
    \ + 1] = $res[$j];\n            $j--;\n        }\n        $res[$j + 1] = $arr->[$i];\n\
    \    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    my $p = $n - $k;\n    while($i < $j) {\n        my $m\
    \ = partition($arr, $i, $j);\n        if($m == $p) {\n            last;\n    \
    \    } elsif($m < $p) {\n            $i = $m + 1;\n        } else {\n        \
    \    $j = $m - 1;\n        }\n    }\n    return [@$arr[$p..$n-1]];\n}", "    my\
    \ $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr,\
    \ $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k - 1) {\n         \
    \   $j = $p - 1;\n            $p = partition($arr, $i, $j);\n        } else {\n\
    \            $i = $p + 1;\n            $p = partition($arr, $i, $j);\n       \
    \ }\n    }\n    return [@$arr[0..$p]];\n}", "    my @result;\n    my @heap;\n\
    \    for my $i (0..$k-1) {\n        push @heap, $arr->[$i];\n    }\n    build_max_heap(\\\
    @heap);\n    for my $i ($k..@$arr-1) {\n        if ($arr->[$i] > $heap[0]) {\n\
    \            $heap[0] = $arr->[$i];\n            max_heapify(\\@heap, 0);\n  \
    \      }\n    }\n    for my $i (0..$k-1) {\n        push @result, pop @heap;\n\
    \    }\n    return \\@result;\n}", "    my @res;\n    my $len = scalar(@$arr);\n\
    \    return [] if $len == 0;\n    return [@$arr] if $len <= $k;\n    for(my $i\
    \ = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $idx = $i;\n\
    \        for(my $j = $i + 1; $j < $len; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $idx = $j;\n        \
    \    }\n        }\n        $res[$i] = $max;\n        $arr->[$idx] = $arr->[$i];\n\
    \    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    while ($i < $j) {\n        my $m = partition($arr, $i,\
    \ $j);\n        if ($m == $k - 1) {\n            last;\n        } elsif ($m <\
    \ $k - 1) {\n            $i = $m + 1;\n        } else {\n            $j = $m -\
    \ 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @res;\n    my\
    \ $n = scalar(@$arr);\n    for (my $i = 0; $i < $n; $i++) {\n        if ($i <\
    \ $k) {\n            push @res, $arr->[$i];\n        } else {\n            my\
    \ $j = 0;\n            while ($j < $k && $res[$j] > $arr->[$i]) {\n          \
    \      $j++;\n            }\n            if ($j < $k) {\n                splice\
    \ @res, $j, 0, $arr->[$i];\n                pop @res;\n            }\n       \
    \ }\n    }\n    return \\@res;\n}", "    my @result;\n    my $n = scalar(@$arr);\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        my $j = scalar(@result) - 1;\n \
    \       while($j >= 0 && $arr->[$i] > $result[$j]) {\n            $j--;\n    \
    \    }\n        if($j < $k - 1) {\n            splice(@result, $j + 1, 0, $arr->[$i]);\n\
    \            pop(@result) if(scalar(@result) > $k);\n        }\n    }\n    return\
    \ \\@result;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n\
    \ - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n   \
    \     if ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my @res;\n\
    \    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_idx\
    \ = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}", "    my @result;\n\
    \    my $len = scalar(@$arr);\n    for(my $i = 0; $i < $k; $i++) {\n        my\
    \ $max = $arr->[$i];\n        my $index = $i;\n        for(my $j = $i + 1; $j\
    \ < $len; $j++) {\n            if($arr->[$j] > $max) {\n                $max =\
    \ $arr->[$j];\n                $index = $j;\n            }\n        }\n      \
    \  $result[$i] = $max;\n        my $temp = $arr->[$i];\n        $arr->[$i] = $arr->[$index];\n\
    \        $arr->[$index] = $temp;\n    }\n    return \\@result;\n}", "    my $n\
    \ = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr,\
    \ $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k - 1) {\n         \
    \   $j = $p - 1;\n            $p = partition($arr, $i, $j);\n        } else {\n\
    \            $i = $p + 1;\n            $p = partition($arr, $i, $j);\n       \
    \ }\n    }\n    return [@$arr[0..$p]];\n}", "    my @res;\n    my $n = scalar(@$arr);\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        my $j = $i;\n        while($j >\
    \ 0 && $res[$j - 1] < $arr->[$i]) {\n            $res[$j] = $res[$j - 1];\n  \
    \          $j--;\n        }\n        $res[$j] = $arr->[$i];\n        if(scalar(@res)\
    \ > $k) {\n            pop(@res);\n        }\n    }\n    return \\@res;\n}", " \
    \   my @res;\n    my $n = scalar(@$arr);\n    for(my $i = 0; $i < $n; $i++) {\n\
    \        my $num = $arr->[$i];\n        if(scalar(@res) < $k) {\n            push\
    \ @res, $num;\n            next;\n        }\n        my $min = $res[0];\n    \
    \    my $min_idx = 0;\n        for(my $j = 1; $j < $k; $j++) {\n            if($res[$j]\
    \ < $min) {\n                $min = $res[$j];\n                $min_idx = $j;\n\
    \            }\n        }\n        if($num > $min) {\n            $res[$min_idx]\
    \ = $num;\n        }\n    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    while ($i < $j) {\n        my $p = partition($arr, $i,\
    \ $j);\n        if ($p == $k - 1) {\n            last;\n        } elsif ($p <\
    \ $k - 1) {\n            $i = $p + 1;\n        } else {\n            $j = $p -\
    \ 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @res;\n    my\
    \ $n = scalar(@$arr);\n    my $i = 0;\n    while($i < $n) {\n        my $j = $i\
    \ + 1;\n        while($j < $n && $arr->[$j] < $arr->[$j - 1]) {\n            $j++;\n\
    \        }\n        if($j - $i >= $k) {\n            push @res, @$arr[$i .. $i\
    \ + $k - 1];\n            return \\@res;\n        }\n        $i = $j;\n    }\n\
    \    push @res, @$arr[$n - $k .. $n - 1];\n    return \\@res;\n}", "    my $len\
    \ = scalar(@$arr);\n    return [] if $len == 0;\n    return $arr if $len <= $k;\n\
    \    my @res = ();\n    for(my $i = 0; $i < $k; $i++) {\n        $res[$i] = $arr->[$i];\n\
    \    }\n    for(my $i = $k; $i < $len; $i++) {\n        my $j = $k - 1;\n    \
    \    while($j >= 0 && $res[$j] < $arr->[$i]) {\n            $res[$j + 1] = $res[$j];\n\
    \            $j--;\n        }\n        $res[$j + 1] = $arr->[$i];\n    }\n   \
    \ return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j =\
    \ $n - 1;\n    my $p = partition($arr, $i, $j);\n    while($p != $k - 1) {\n \
    \       if($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my @res;\n    while($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_i = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n     \
    \       if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n        \
    \        $max_i = $j;\n            }\n        }\n        $res[$i] = $max;\n  \
    \      $arr->[$max_i] = $arr->[$i];\n        $i++;\n    }\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$#{$arr}) {\n        if (@res < $k) {\n \
    \           push @res, $arr->[$i];\n            next;\n        }\n        my $j\
    \ = 0;\n        while ($j < $k && $res[$j] > $arr->[$i]) {\n            $j++;\n\
    \        }\n        if ($j < $k) {\n            splice @res, $j, 0, $arr->[$i];\n\
    \            pop @res;\n        }\n    }\n    return @res;\n}", "    my $n = scalar(@$arr);\n\
    \    return [] if $n == 0;\n    my $result = [];\n    my $i = 0;\n    while ($i\
    \ < $k) {\n        $result->[$i] = $arr->[$i];\n        $i++;\n    }\n    $i =\
    \ $k - 1;\n    while ($i > 0) {\n        my $j = $i - 1;\n        while ($j >=\
    \ 0) {\n            if ($result->[$j] < $result->[$i]) {\n                my $tmp\
    \ = $result->[$j];\n                $result->[$j] = $result->[$i];\n         \
    \       $result->[$i] = $tmp;\n            }\n            $j--;\n        }\n \
    \       $i--;\n    }\n    for (my $i = $k; $i < $n; $i++) {\n        my $j = $k\
    \ - 1;\n        while ($j >= 0) {\n            if ($result->[$j] < $arr->[$i])\
    \ {\n                my $tmp = $result->[$j];\n                $result->[$j] =\
    \ $arr->[$i];\n                $arr->[$i] = $tmp;\n            }\n           \
    \ $j--;\n        }\n    }\n    return $result;\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n    my $res = [];\n\
    \    for(my $i = 0; $i < $k; $i++) {\n        $res->[$i] = $arr->[$i];\n    }\n\
    \    my $heap = new Heap::Binary(order => '<', elements => $res);\n    for(my\
    \ $i = $k; $i < $n; $i++) {\n        if($arr->[$i] > $heap->top) {\n         \
    \   $heap->pop;\n            $heap->push($arr->[$i]);\n        }\n    }\n    return\
    \ $heap->elements;\n}", "    my @res;\n    for my $i (0..$#{$arr}) {\n       \
    \ if ($i < $k) {\n            push @res, $arr->[$i];\n        } else {\n     \
    \       my $j = $k - 1;\n            while ($j >= 0 && $res[$j] < $arr->[$i])\
    \ {\n                $res[$j + 1] = $res[$j];\n                $j--;\n       \
    \     }\n            $res[$j + 1] = $arr->[$i];\n        }\n    }\n    return\
    \ \\@res;\n}", "    my $len = scalar(@$arr);\n    my $res = [];\n    my $i = 0;\n\
    \    while($i < $k) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $len; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res->[$i] = $max;\n        $arr->[$max_idx] =\
    \ $arr->[$i];\n        $i++;\n    }\n    return $res;\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my @res;\n    while ($i < $k) {\n        my $max = $arr->[$i];\n\
    \        my $max_i = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n    \
    \        if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n      \
    \          $max_i = $j;\n            }\n        }\n        $res[$i] = $max;\n\
    \        $arr->[$max_i] = $arr->[$i];\n        $i++;\n    }\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..@$arr-1) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }", "    my @res;\n    my $n = @$arr;\n    for(my $i = 0; $i < $k; $i++) {\n \
    \       my $max = $arr->[$i];\n        my $max_idx = $i;\n        for(my $j =\
    \ $i + 1; $j < $n; $j++) {\n            if($arr->[$j] > $max) {\n            \
    \    $max = $arr->[$j];\n                $max_idx = $j;\n            }\n     \
    \   }\n        @res = (@res, $max);\n        $arr->[$max_idx] = $arr->[$i];\n\
    \        $arr->[$i] = $max;\n    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n\
    \    my $max = $arr->[0];\n    for(my $i = 1; $i < $n; $i++) {\n        $max =\
    \ $arr->[$i] if $arr->[$i] > $max;\n    }\n    my $bucket = [];\n    for(my $i\
    \ = 0; $i < $n; $i++) {\n        my $index = int(($arr->[$i] + $max) / ($max +\
    \ 1) * $k);\n        push @{$bucket->[$index]}, $arr->[$i];\n    }\n    my $ret\
    \ = [];\n    for(my $i = $k - 1; $i >= 0; $i--) {\n        if(defined $bucket->[$i])\
    \ {\n            my $tmp = $bucket->[$i];\n            my $m = scalar(@$tmp);\n\
    \            for(my $j = 0; $j < $m; $j++) {\n                push @$ret, $tmp->[$j];\n\
    \                last if scalar(@$ret) == $k;\n            }\n        }\n    }\n\
    \    return $ret;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my @res;\n\
    \    while($i < $k) {\n        my $max = $arr->[$i];\n        my $max_i = $i;\n\
    \        for(my $j = $i+1; $j < $n; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_i = $j;\n      \
    \      }\n        }\n        $res[$i] = $max;\n        $arr->[$max_i] = $arr->[$i];\n\
    \        $i++;\n    }\n    return \\@res;\n}", "    my @ret;\n    for my $i (0..$k-1)\
    \ {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n        for my\
    \ $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n                $max\
    \ = $arr->[$j];\n                $max_idx = $j;\n            }\n        }\n  \
    \      push @ret, $max;\n        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx],\
    \ $arr->[$i]);\n    }\n    return \\@ret;\n}", "    my $n = scalar(@$arr);\n \
    \   my $i = 0;\n    my @res;\n    while($i < $k) {\n        my $j = $i;\n    \
    \    while($j < $n) {\n            if($arr->[$j] > $arr->[$i]) {\n           \
    \     my $tmp = $arr->[$j];\n                $arr->[$j] = $arr->[$i];\n      \
    \          $arr->[$i] = $tmp;\n            }\n            $j++;\n        }\n \
    \       push @res, $arr->[$i];\n        $i++;\n    }\n    return \\@res;\n}",
  "    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n      \
    \  my $idx = $i;\n        for my $j ($i+1..@$arr-1) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $idx = $j;\n\
    \            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$idx])\
    \ = ($arr->[$idx], $arr->[$i]);\n    }\n    return \\@res;\n}", "    my @max;\n\
    \    for my $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n    }\n    for my\
    \ $i (0..$k-1) {\n        for my $j ($i+1..$k-1) {\n            if ($max[$j] >\
    \ $max[$i]) {\n                my $tmp = $max[$i];\n                $max[$i] =\
    \ $max[$j];\n                $max[$j] = $tmp;\n            }\n        }\n    }\n\
    \    for my $i ($k..@$arr-1) {\n        for my $j (0..$k-1) {\n            if\
    \ ($arr->[$i] > $max[$j]) {\n                my $tmp = $max[$j];\n           \
    \     $max[$j] = $arr->[$i];\n                $arr->[$i] = $tmp;\n           \
    \     last;\n            }\n        }\n    }\n    return \\@max;\n}", "    my\
    \ @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my\
    \ $max_index = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $max_index =\
    \ $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\\
    @res;\n}", "    my @res;\n    for my $i (0..$k-1) {\n        my $max = -1000;\n\
    \        my $index = -1;\n        for my $j ($i..@$arr-1) {\n            if ($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $index = $j;\n\
    \            }\n        }\n        $res[$i] = $max;\n        $arr->[$index] =\
    \ -1000;\n    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i\
    \ = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        my $t = $arr->[$i];\n\
    \        $arr->[$i] = $arr->[$j];\n        $arr->[$j] = $t;\n        $i++;\n \
    \       $j--;\n    }\n    my $m = $n - $k;\n    $i = 0;\n    $j = $n - 1;\n  \
    \  while ($i < $j) {\n        my $p = $i;\n        my $q = $j;\n        my $v\
    \ = $arr->[$p];\n        while ($p < $q) {\n            while ($p < $q && $arr->[$q]\
    \ <= $v) {\n                $q--;\n            }\n            $arr->[$p] = $arr->[$q];\n\
    \            while ($p < $q && $arr->[$p] >= $v) {\n                $p++;\n  \
    \          }\n            $arr->[$q] = $arr->[$p];\n        }\n        $arr->[$p]\
    \ = $v;\n        if ($p == $m) {\n            last;\n        } elsif ($p < $m)\
    \ {\n            $i = $p + 1;\n        } else {\n            $j = $p - 1;\n  \
    \      }\n    }\n    my @ret;\n    for (my $i = $n - $k; $i < $n; $i++) {\n  \
    \      push @ret, $arr->[$i];\n    }\n    return \\@ret;\n}", "    my $n = scalar(@$arr);\n\
    \    my $heap = Heap::Simple->new(\n        order => '<',\n        elements =>\
    \ 'Array',\n        data => [],\n    );\n    for my $i (0..$k-1) {\n        $heap->insert([$arr->[$i],\
    \ $i]);\n    }\n    for my $i ($k..$n-1) {\n        my $top = $heap->top;\n  \
    \      if ($arr->[$i] > $top->[0]) {\n            $heap->extract_top;\n      \
    \      $heap->insert([$arr->[$i], $i]);\n        }\n    }\n    my @ret;\n    while\
    \ ($heap->size) {\n        my $top = $heap->extract_top;\n        push @ret, $top->[0];\n\
    \    }\n    return \\@ret;\n}", "    my $len = scalar(@$arr);\n    my $res = [];\n\
    \    my $i = 0;\n    my $j = 0;\n    while($i < $k) {\n        $res->[$i] = $arr->[$i];\n\
    \        $i++;\n    }\n    $i = $k / 2 - 1;\n    while($i >= 0) {\n        $res\
    \ = heapify($res, $i, $k);\n        $i--;\n    }\n    while($j < $len) {\n   \
    \     if($arr->[$j] > $res->[0]) {\n            $res->[0] = $arr->[$j];\n    \
    \        $res = heapify($res, 0, $k);\n        }\n        $j++;\n    }\n    return\
    \ $res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my @res;\n    while($i\
    \ < $k) {\n        my $max = -1;\n        my $max_idx = -1;\n        for(my $j\
    \ = $i; $j < $n; $j++) {\n            if($arr->[$j] > $max) {\n              \
    \  $max = $arr->[$j];\n                $max_idx = $j;\n            }\n       \
    \ }\n        $res[$i] = $max;\n        $arr->[$max_idx] = -1;\n        $i++;\n\
    \    }\n    return \\@res;\n}", "    my @res;\n    foreach my $i (0..$#{$arr})\
    \ {\n        if ($i < $k) {\n            push @res, $arr->[$i];\n        } else\
    \ {\n            my $j = 0;\n            while ($j < $k && $res[$j] > $arr->[$i])\
    \ {\n                $j++;\n            }\n            if ($j < $k) {\n      \
    \          splice @res, $j, 0, $arr->[$i];\n                pop @res;\n      \
    \      }\n        }\n    }\n    return \\@res;\n}", "    my @result;\n    my @sorted\
    \ = sort {$b <=> $a} @$arr;\n    for (my $i = 0; $i < $k; $i++) {\n        push\
    \ @result, $sorted[$i];\n    }\n    return \\@result;\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    while ($i < $j) {\n        my $m = partition($arr,\
    \ $i, $j);\n        if ($m == $k - 1) {\n            last;\n        } elsif ($m\
    \ < $k - 1) {\n            $i = $m + 1;\n        } else {\n            $j = $m\
    \ - 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @res;\n  \
    \  for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_i = $i;\n\
    \        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n  \
    \              $max = $arr->[$j];\n                $max_i = $j;\n            }\n\
    \        }\n        ($arr->[$i], $arr->[$max_i]) = ($arr->[$max_i], $arr->[$i]);\n\
    \        push @res, $arr->[$i];\n    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n\
    \    my @res;\n    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n   \
    \         if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n      \
    \          $max_idx = $j;\n            }\n        }\n        $res[$i] = $max;\n\
    \        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n  \
    \  }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $max = $arr->[0];\n\
    \    for(my $i = 1; $i < $n; $i++) {\n        $max = $arr->[$i] if $arr->[$i]\
    \ > $max;\n    }\n    my @buckets = ();\n    for(my $i = 0; $i < $n; $i++) {\n\
    \        my $index = int(($arr->[$i] / $max) * ($k - 1));\n        push @{$buckets[$index]},\
    \ $arr->[$i];\n    }\n    my @result = ();\n    for(my $i = $k - 1; $i >= 0; $i--)\
    \ {\n        if(defined $buckets[$i]) {\n            my @temp = sort {$b <=> $a}\
    \ @{$buckets[$i]};\n            push @result, @temp;\n        }\n    }\n    return\
    \ @result;\n}", "    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }", "    my @res;\n    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for my $j ($i+1..$#$arr) {\n            if\
    \ ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n                $max_idx\
    \ = $j;\n            }\n        }\n        $res[$i] = $max;\n        ($arr->[$i],\
    \ $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n\
    }", "    my $len = scalar(@$arr);\n    return [] if $len == 0;\n    my $res =\
    \ [];\n    for(my $i = 0; $i < $k; $i++) {\n        $res->[$i] = $arr->[$i];\n\
    \    }\n    my $pq = new PriorityQueue(sub {$b <=> $a});\n    for(my $i = 0; $i\
    \ < $k; $i++) {\n        $pq->enqueue($res->[$i]);\n    }\n    for(my $i = $k;\
    \ $i < $len; $i++) {\n        my $top = $pq->top();\n        if($top < $arr->[$i])\
    \ {\n            $pq->dequeue();\n            $pq->enqueue($arr->[$i]);\n    \
    \    }\n    }\n    my $i = $k - 1;\n    while(!$pq->isEmpty()) {\n        $res->[$i]\
    \ = $pq->dequeue();\n        $i--;\n    }\n    return $res;\n}", "    my $n =\
    \ scalar(@$arr);\n    my $i = 0;\n    my @result;\n    while ($i < $k) {\n   \
    \     my $j = $i;\n        while ($j < $n) {\n            if ($arr->[$j] > $arr->[$i])\
    \ {\n                my $tmp = $arr->[$i];\n                $arr->[$i] = $arr->[$j];\n\
    \                $arr->[$j] = $tmp;\n            }\n            $j++;\n      \
    \  }\n        $result[$i] = $arr->[$i];\n        $i++;\n    }\n    return \\@result;\n\
    }", "    my @result;\n    my $n = scalar(@$arr);\n    my $i = 0;\n    while($i\
    \ < $n) {\n        my $j = $i + 1;\n        while($j < $n && $arr->[$j] == $arr->[$i])\
    \ {\n            $j++;\n        }\n        my $count = $j - $i;\n        if($count\
    \ > $k) {\n            $count = $k;\n        }\n        for(my $l = 0; $l < $count;\
    \ $l++) {\n            push @result, $arr->[$i];\n        }\n        $k -= $count;\n\
    \        $i = $j;\n    }\n    return \\@result;\n}", "    my @res;\n    my $len\
    \ = scalar(@$arr);\n    my $i = 0;\n    while($i < $len) {\n        if(scalar(@res)\
    \ == 0) {\n            push @res, $arr->[$i];\n        } else {\n            my\
    \ $j = scalar(@res) - 1;\n            while($j >= 0 && $arr->[$i] > $res[$j])\
    \ {\n                $j--;\n            }\n            if($j < $k - 1) {\n   \
    \             splice @res, $j + 1, 0, $arr->[$i];\n                if(scalar(@res)\
    \ > $k) {\n                    pop @res;\n                }\n            }\n \
    \       }\n        $i++;\n    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n\
    \    my $res = [];\n    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n\
    \        my $max_idx = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n   \
    \         if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n      \
    \          $max_idx = $j;\n            }\n        }\n        $res->[$i] = $max;\n\
    \        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n  \
    \  }\n    return $res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my\
    \ $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while($p != $k - 1)\
    \ {\n        if($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while($p != $k - 1) {\n        if($p > $k - 1) {\n            $j = $p - 1;\n\
    \            $p = partition($arr, $i, $j);\n        } else {\n            $i =\
    \ $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n    return\
    \ [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n    my $result = [];\n   \
    \ for (my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my\
    \ $max_index = $i;\n        for (my $j = $i + 1; $j < $n; $j++) {\n          \
    \  if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $result->[$i] = $max;\n\
    \        $arr->[$max_index] = $arr->[$i];\n    }\n    return $result;\n}", " \
    \   my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr,\
    \ $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k - 1) {\n         \
    \   $j = $p - 1;\n            $p = partition($arr, $i, $j);\n        } else {\n\
    \            $i = $p + 1;\n            $p = partition($arr, $i, $j);\n       \
    \ }\n    }\n    my @res = ();\n    for (my $i = 0; $i < $k; $i++) {\n        push\
    \ @res, $arr->[$i];\n    }\n    return \\@res;\n}", "    my @res;\n    my $len\
    \ = scalar(@$arr);\n    if($len == 0 || $k == 0) {\n        return @res;\n   \
    \ }\n    my $i = 0;\n    while($i < $k) {\n        $res[$i] = $arr->[$i];\n  \
    \      $i++;\n    }\n    $i = $k - 1;\n    while($i > 0) {\n        my $j = $i\
    \ - 1;\n        while($j >= 0) {\n            if($res[$j] < $res[$i]) {\n    \
    \            my $tmp = $res[$j];\n                $res[$j] = $res[$i];\n     \
    \           $res[$i] = $tmp;\n            }\n            $j--;\n        }\n  \
    \      $i--;\n    }\n    my $j = $k;\n    while($j < $len) {\n        my $i =\
    \ 0;\n        while($i < $k) {\n            if($res[$i] < $arr->[$j]) {\n    \
    \            my $tmp = $res[$i];\n                $res[$i] = $arr->[$j];\n   \
    \             $arr->[$j] = $tmp;\n            }\n            $i++;\n        }\n\
    \        $j++;\n    }\n    return @res;\n}", "    my @result;\n    my $n = scalar(@$arr);\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        my $j = $i + 1;\n        while($j\
    \ < $n && $arr->[$j] > $arr->[$i]) {\n            $j++;\n        }\n        if($j\
    \ - $i >= $k) {\n            push @result, @$arr[$i..$i+$k-1];\n            return\
    \ \\@result;\n        }\n    }\n    return \\@result;\n}", "    my $len = scalar(@$arr);\n\
    \    my @res;\n    for(my $i = 0; $i < $len; $i++) {\n        my $num = $arr->[$i];\n\
    \        if($i < $k) {\n            push @res, $num;\n            if($i == $k\
    \ - 1) {\n                @res = sort {$b <=> $a} @res;\n            }\n     \
    \   } else {\n            if($num > $res[$k - 1]) {\n                $res[$k -\
    \ 1] = $num;\n                @res = sort {$b <=> $a} @res;\n            }\n \
    \       }\n    }\n    return \\@res;\n}", "    my @result;\n    my $len = scalar(@$arr);\n\
    \    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my\
    \ $max_index = $i;\n        for(my $j = $i + 1; $j < $len; $j++) {\n         \
    \   if($arr->[$j] > $max) {\n                $max = $arr->[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $result[$i] = $max;\n\
    \        $arr->[$max_index] = $arr->[$i];\n        $arr->[$i] = $max;\n    }\n\
    \    return \\@result;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my\
    \ @res;\n    while($i < $k) {\n        my $j = $i;\n        while($j < $n) {\n\
    \            if($j + $k - $i <= $n) {\n                my $max = $arr->[$j];\n\
    \                my $max_idx = $j;\n                for(my $m = $j + 1; $m < $j\
    \ + $k - $i; $m++) {\n                    if($arr->[$m] > $max) {\n          \
    \              $max = $arr->[$m];\n                        $max_idx = $m;\n  \
    \                  }\n                }\n                $arr->[$max_idx] = $arr->[$j];\n\
    \                $arr->[$j] = $max;\n            }\n            $j += $k;\n  \
    \      }\n        $res[$i] = $arr->[$i];\n        $i++;\n    }\n    return \\\
    @res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    my $p = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if\
    \ ($p > $k - 1) {\n            $j = $p - 1;\n            $p = partition($arr,\
    \ $i, $j);\n        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while($p != $k - 1) {\n        if($p > $k - 1) {\n            $j = $p - 1;\n\
    \            $p = partition($arr, $i, $j);\n        } else {\n            $i =\
    \ $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n    return\
    \ [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j\
    \ = $n - 1;\n    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n\
    \        if ($p == $k - 1) {\n            last;\n        } elsif ($p < $k - 1)\
    \ {\n            $i = $p + 1;\n        } else {\n            $j = $p - 1;\n  \
    \      }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @res;\n    for my $i\
    \ (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n    \
    \    for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max) {\n      \
    \          $max = $arr->[$j];\n                $max_idx = $j;\n            }\n\
    \        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx]) =\
    \ ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}", "    my $n =\
    \ scalar(@$arr);\n    my $i = 0;\n    my @res;\n    while($i < $k) {\n       \
    \ my $j = $i;\n        while($j < $n) {\n            if($arr->[$j] > $arr->[$i])\
    \ {\n                my $tmp = $arr->[$j];\n                $arr->[$j] = $arr->[$i];\n\
    \                $arr->[$i] = $tmp;\n            }\n            $j++;\n      \
    \  }\n        $res[$i] = $arr->[$i];\n        $i++;\n    }\n    return \\@res;\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p\
    \ = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k\
    \ - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i, $j);\n\
    \        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my @res;\n\
    \    for my $num (@$arr) {\n        if(@res < $k) {\n            push @res, $num;\n\
    \            @res = sort {$b <=> $a} @res;\n        } else {\n            if($num\
    \ > $res[-1]) {\n                pop @res;\n                push @res, $num;\n\
    \                @res = sort {$b <=> $a} @res;\n            }\n        }\n   \
    \ }\n    return \\@res;\n}", "    my $len = scalar(@$arr);\n    my $max = $len\
    \ - $k;\n    my $i = 0;\n    while ($i < $max) {\n        if ($arr->[$i] < $arr->[$i\
    \ + $k]) {\n            splice(@$arr, $i, 1);\n            $max--;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $arr;\n}", "    my @max;\n\
    \    for my $i (0..$k-1) {\n        $max[$i] = $arr->[$i];\n    }\n    for my\
    \ $i (0..$#{$arr}) {\n        if ($i < $k) {\n            next;\n        }\n \
    \       my $j = 0;\n        while ($j < $k && $max[$j] > $arr->[$i]) {\n     \
    \       $j++;\n        }\n        if ($j < $k) {\n            splice(@max, $j,\
    \ 0, $arr->[$i]);\n            pop(@max);\n        }\n    }\n    return \\@max;\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p\
    \ = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k\
    \ - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i, $j);\n\
    \        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    while ($i < $j) {\n        my $m = partition($arr, $i,\
    \ $j);\n        if ($m == $k - 1) {\n            last;\n        } elsif ($m <\
    \ $k - 1) {\n            $i = $m + 1;\n        } else {\n            $j = $m -\
    \ 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my @res;\n    for my $i (0..$k-1) {\n  \
    \      my $max = $arr->[$i];\n        my $max_idx = $i;\n        for my $j ($i+1..$#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        $res[$i] =\
    \ $max;\n        ($arr->[$i], $arr->[$max_idx]) = ($arr->[$max_idx], $arr->[$i]);\n\
    \    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    return [] if\
    \ $n == 0;\n    my $res = [];\n    my $i = 0;\n    while($i < $k) {\n        my\
    \ $j = $i;\n        while($j < $n) {\n            if($j + $n - $i <= $k) {\n \
    \               $res->[$i] = $arr->[$j];\n                last;\n            }\n\
    \            my $m = $j + $n - $i - $k;\n            if($arr->[$j] > $res->[$m])\
    \ {\n                $res->[$m] = $arr->[$j];\n            }\n            $j++;\n\
    \        }\n        $i++;\n    }\n    return $res;\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my @res;\n    while ($i < $k) {\n        my $max = -1;\n\
    \        my $max_idx = -1;\n        for (my $j = $i; $j < $n; $j++) {\n      \
    \      if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n        \
    \        $max_idx = $j;\n            }\n        }\n        $res[$i] = $max;\n\
    \        $arr->[$max_idx] = -1;\n        $i++;\n    }\n    return \\@res;\n}",
  "    my $n = scalar(@$arr);\n    return [] if $n == 0;\n    my $res = [];\n    my\
    \ $i = 0;\n    while ($i < $k) {\n        $res->[$i] = $arr->[$i];\n        $i++;\n\
    \    }\n    for (my $j = $k / 2 - 1; $j >= 0; $j--) {\n        heapify($res, $j,\
    \ $k);\n    }\n    for (my $j = $k; $j < $n; $j++) {\n        if ($arr->[$j] >\
    \ $res->[0]) {\n            $res->[0] = $arr->[$j];\n            heapify($res,\
    \ 0, $k);\n        }\n    }\n    return $res;\n}", "    my @res;\n    my $len\
    \ = scalar(@$arr);\n    return [] if $len == 0 || $k == 0;\n    for(my $i = 0;\
    \ $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my $max_idx = $i;\n\
    \        for(my $j = $i + 1; $j < $len; $j++) {\n            if($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_idx = $j;\n    \
    \        }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_idx])\
    \ = ($arr->[$max_idx], $arr->[$i]);\n    }\n    return \\@res;\n}", "    my @res;\n\
    \    for my $i (0..$k-1) {\n        my $max = $arr->[$i];\n        my $max_index\
    \ = $i;\n        for my $j ($i+1..$#$arr) {\n            if ($arr->[$j] > $max)\
    \ {\n                $max = $arr->[$j];\n                $max_index = $j;\n  \
    \          }\n        }\n        $res[$i] = $max;\n        ($arr->[$i], $arr->[$max_index])\
    \ = ($arr->[$max_index], $arr->[$i]);\n    }\n    return \\@res;\n}", "    my\
    \ @res;\n    my $len = scalar(@$arr);\n    if($len == 0) {\n        return @res;\n\
    \    }\n    if($len <= $k) {\n        return sort {$b <=> $a} @$arr;\n    }\n\
    \    my $i = 0;\n    while($i < $k) {\n        $res[$i] = $arr->[$i];\n      \
    \  $i++;\n    }\n    @res = sort {$b <=> $a} @res;\n    for($i = $k; $i < $len;\
    \ $i++) {\n        if($arr->[$i] > $res[$k - 1]) {\n            $res[$k - 1] =\
    \ $arr->[$i];\n            @res = sort {$b <=> $a} @res;\n        }\n    }\n \
    \   return @res;\n}", "    my @ret;\n    for my $i (0..$#$arr) {\n        if (@ret\
    \ < $k) {\n            push @ret, $arr->[$i];\n            @ret = sort {$b <=>\
    \ $a} @ret;\n        } else {\n            if ($arr->[$i] > $ret[-1]) {\n    \
    \            pop @ret;\n                push @ret, $arr->[$i];\n             \
    \   @ret = sort {$b <=> $a} @ret;\n            }\n        }\n    }\n    return\
    \ \\@ret;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n\
    \    while ($i < $j) {\n        my $p = partition($arr, $i, $j);\n        if ($p\
    \ == $k - 1) {\n            return [@$arr[0..$p]];\n        } elsif ($p > $k -\
    \ 1) {\n            $j = $p - 1;\n        } else {\n            $i = $p + 1;\n\
    \        }\n    }\n    return [@$arr[0..$i]];\n}", "    my @res;\n    for my $i\
    \ (0..$#{$arr}) {\n        if(@res < $k) {\n            push @res, $arr->[$i];\n\
    \            @res = sort {$b <=> $a} @res;\n        } else {\n            if($arr->[$i]\
    \ > $res[$k-1]) {\n                $res[$k-1] = $arr->[$i];\n                @res\
    \ = sort {$b <=> $a} @res;\n            }\n        }\n    }\n    return \\@res;\n\
    }", "    my $n = scalar(@$arr);\n    return [] if $n == 0;\n    my $res = [];\n\
    \    for(my $i = 0; $i < $k; $i++) {\n        my $max = $arr->[$i];\n        my\
    \ $idx = $i;\n        for(my $j = $i + 1; $j < $n; $j++) {\n            if($arr->[$j]\
    \ > $max) {\n                $max = $arr->[$j];\n                $idx = $j;\n\
    \            }\n        }\n        splice(@$arr, $idx, 1);\n        push @$res,\
    \ $max;\n    }\n    return $res;\n}", "    my $n = scalar(@$arr);\n    my $heap\
    \ = Heap::Simple->new(\n        order => '<',\n        elements => 'Num',\n  \
    \  );\n    for my $i (0..$k-1) {\n        $heap->insert($arr->[$i]);\n    }\n\
    \    for my $i ($k..$n-1) {\n        if ($arr->[$i] > $heap->top) {\n        \
    \    $heap->extract_top;\n            $heap->insert($arr->[$i]);\n        }\n\
    \    }\n    my @res;\n    while (!$heap->is_empty) {\n        push @res, $heap->extract_top;\n\
    \    }\n    return \\@res;\n}", "    my $len = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    while($i < $j) {\n        my $m = partition($arr,\
    \ $i, $j);\n        if($m == $k - 1) {\n            last;\n        } elsif($m\
    \ > $k - 1) {\n            $j = $m - 1;\n        } else {\n            $i = $m\
    \ + 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my $n = scalar(@$arr);\n\
    \    my $i = 0;\n    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n \
    \   while ($p != $k - 1) {\n        if ($p > $k - 1) {\n            $j = $p -\
    \ 1;\n            $p = partition($arr, $i, $j);\n        } else {\n          \
    \  $i = $p + 1;\n            $p = partition($arr, $i, $j);\n        }\n    }\n\
    \    return [@$arr[0..$p]];\n}", "    my @res;\n    for my $i (0..$k-1) {\n  \
    \      my $max = $arr->[$i];\n        my $max_index = $i;\n        for my $j ($i+1..$#$arr)\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $res[$i]\
    \ = $max;\n        ($arr->[$i], $arr->[$max_index]) = ($arr->[$max_index], $arr->[$i]);\n\
    \    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    while ($i < $j) {\n        my $p = partition($arr, $i,\
    \ $j);\n        if ($p == $k - 1) {\n            last;\n        } elsif ($p <\
    \ $k - 1) {\n            $i = $p + 1;\n        } else {\n            $j = $p -\
    \ 1;\n        }\n    }\n    return [@$arr[0..$k-1]];\n}", "    my @res;\n    my\
    \ $n = scalar(@$arr);\n    for(my $i = 0; $i < $n; $i++) {\n        if($i < $k)\
    \ {\n            push @res, $arr->[$i];\n        }\n        else {\n         \
    \   my $j = $k - 1;\n            while($j >= 0 && $res[$j] < $arr->[$i]) {\n \
    \               $res[$j + 1] = $res[$j];\n                $j--;\n            }\n\
    \            $res[$j + 1] = $arr->[$i];\n        }\n    }\n    return \\@res;\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p\
    \ = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k\
    \ - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i, $j);\n\
    \        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my @res;\n\
    \    my @heap;\n    for my $i (0..$k-1) {\n        push @heap, $arr->[$i];\n \
    \   }\n    @heap = sort {$b <=> $a} @heap;\n    for my $i ($k..@$arr-1) {\n  \
    \      if ($arr->[$i] > $heap[0]) {\n            shift @heap;\n            push\
    \ @heap, $arr->[$i];\n            @heap = sort {$b <=> $a} @heap;\n        }\n\
    \    }\n    return \\@heap;\n}", "    my @res;\n    for my $i (0..$#{$arr}) {\n\
    \        if ($i < $k) {\n            push @res, $arr->[$i];\n        } else {\n\
    \            my $j = $k - 1;\n            while ($j >= 0 && $res[$j] < $arr->[$i])\
    \ {\n                $res[$j + 1] = $res[$j];\n                $j--;\n       \
    \     }\n            $res[$j + 1] = $arr->[$i];\n        }\n    }\n    return\
    \ \\@res;\n}", "    my @res;\n    for my $i (0..$k-1) {\n        push @res, $arr->[$i];\n\
    \    }\n    @res = sort {$b <=> $a} @res;\n    for my $i ($k..$#$arr) {\n    \
    \    if ($arr->[$i] > $res[-1]) {\n            $res[-1] = $arr->[$i];\n      \
    \      @res = sort {$b <=> $a} @res;\n        }\n    }\n    return \\@res;\n}",
  "    my $len = scalar(@$arr);\n    my @res;\n    for(my $i = 0; $i < $len; $i++)\
    \ {\n        my $num = $arr->[$i];\n        my $j = $i - 1;\n        while($j\
    \ >= 0 && $res[$j] < $num) {\n            $res[$j + 1] = $res[$j];\n         \
    \   $j--;\n        }\n        $res[$j + 1] = $num;\n        if($i >= $k) {\n \
    \           pop(@res);\n        }\n    }\n    return \\@res;\n}", "    my $n =\
    \ scalar(@$arr);\n    return [] if $n == 0;\n    my $res = [];\n    for (my $i\
    \ = 0; $i < $k; $i++) {\n        $res->[$i] = $arr->[$i];\n    }\n    my $heap\
    \ = new Heap(sub {$b <=> $a});\n    for (my $i = 0; $i < $k; $i++) {\n       \
    \ $heap->push($res->[$i]);\n    }\n    for (my $i = $k; $i < $n; $i++) {\n   \
    \     if ($arr->[$i] > $heap->top()) {\n            $heap->pop();\n          \
    \  $heap->push($arr->[$i]);\n        }\n    }\n    for (my $i = $k - 1; $i >=\
    \ 0; $i--) {\n        $res->[$i] = $heap->pop();\n    }\n    return $res;\n}",
  "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p = $n\
    \ - $k;\n    while ($i < $j) {\n        my $m = partition($arr, $i, $j);\n   \
    \     if ($m == $p) {\n            last;\n        } elsif ($m < $p) {\n      \
    \      $i = $m + 1;\n        } else {\n            $j = $m - 1;\n        }\n \
    \   }\n    return [@$arr[$p..$n-1]];\n}", "    my @res;\n    for (my $i = 0; $i\
    \ < @$arr; $i++) {\n        my $j = @res - 1;\n        while ($j >= 0 && $arr->[$i]\
    \ > $res[$j]) {\n            $j--;\n        }\n        splice(@res, $j + 1, 0,\
    \ $arr->[$i]);\n        if (@res > $k) {\n            pop(@res);\n        }\n\
    \    }\n    return \\@res;\n}", "    my $n = scalar(@$arr);\n    my $i = 0;\n\
    \    my $j = $n - 1;\n    my $p = partition($arr, $i, $j);\n    while ($p != $k\
    \ - 1) {\n        if ($p > $k - 1) {\n            $j = $p - 1;\n            $p\
    \ = partition($arr, $i, $j);\n        } else {\n            $i = $p + 1;\n   \
    \         $p = partition($arr, $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n\
    }", "    my $n = scalar(@$arr);\n    my $i = 0;\n    my $j = $n - 1;\n    my $p\
    \ = partition($arr, $i, $j);\n    while ($p != $k - 1) {\n        if ($p > $k\
    \ - 1) {\n            $j = $p - 1;\n            $p = partition($arr, $i, $j);\n\
    \        } else {\n            $i = $p + 1;\n            $p = partition($arr,\
    \ $i, $j);\n        }\n    }\n    return [@$arr[0..$p]];\n}", "    my @res;\n\
    \    my $n = scalar(@$arr);\n    for(my $i = 0; $i < $n; $i++) {\n        my $num\
    \ = $arr->[$i];\n        my $j = $i - 1;\n        while($j >= 0 && $res[$j] <\
    \ $num) {\n            $res[$j + 1] = $res[$j];\n            $j--;\n        }\n\
    \        $res[$j + 1] = $num;\n        if($i >= $k) {\n            pop(@res);\n\
    \        }\n    }\n    return \\@res;\n}", "    my @res;\n    for my $i (0..$k-1)\
    \ {\n        my $max = -1;\n        my $max_idx = -1;\n        for my $j ($i..$#{$arr})\
    \ {\n            if ($arr->[$j] > $max) {\n                $max = $arr->[$j];\n\
    \                $max_idx = $j;\n            }\n        }\n        $res[$i] =\
    \ $max;\n        $arr->[$max_idx] = -1;\n    }\n    return \\@res;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
