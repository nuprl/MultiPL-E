name: HumanEval_110_exchange
language: swift
prompt: "\n/// In this problem, you will implement a function that takes two lists\
  \ of numbers,\n/// and determines whether it is possible to perform an exchange\
  \ of elements\n/// between them to make lst1 a list of only even numbers.\n/// There\
  \ is no limit on the number of exchanged elements between lst1 and lst2.\n/// If\
  \ it is possible to exchange elements between the lst1 and lst2 to make\n/// all\
  \ the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return \"NO\"\
  .\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\n\
  /// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n/// \"NO\"\
  \n/// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1:\
  \ [Int], lst2: [Int]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2,\
  \ 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) ==\
  \ \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\n\
  assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1:\
  \ [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8,\
  \ 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2:\
  \ [200, 200]) == \"YES\")"
completions: []
stop_tokens:
- "\n}"
