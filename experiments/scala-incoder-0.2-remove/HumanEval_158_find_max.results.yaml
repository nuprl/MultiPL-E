language: scala
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n        })\n        uniqueChars.toSeq.sortWith((a, b) => a._2 > b._2).head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphokpdtpw.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphokpdtpw.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxWordCount = words.count(_.toCharArray.contains(maxChars))\n   \
    \     if (maxWordCount == 1) {\n            maxWord\n        } else {\n      \
    \      val maxWordIndex = words.indexOf(maxWord)\n            val maxWordChars\
    \ = chars.filter(_.toString.contains(maxChars))\n            val maxWordCharCount\
    \ = maxWordChars.count(_.toString.contains(maxChars))\n            if (maxWordCharCount\
    \ == 1) {\n                words.take(maxWordIndex + 1)(maxWordIndex + 1)\n  \
    \          } else {\n                words.take(maxWordIndex + 1)\n          \
    \  }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphkkzh4x8.scala:23:26\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                words.take(maxWordIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2 >\
    \ _._2)\n        val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey\
    \ = maxCharsSorted.keySet().toSeq.head\n        val maxCharsSortedFirstValue =\
    \ maxCharsSorted.valueSet().toSeq.head\n        val maxCharsSortedFirstKeyValue\
    \ = maxCharsSorted.get(maxCharsSortedFirstKey)\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValue.toString\n        val maxCharsSortedFirstKeyValueChar\
    \ = maxCharsSortedFirstKeyValue.toChar\n        val maxCharsSortedFirstKeyValueCharString\
    \ = maxCharsSortedFirstKeyValueChar.toString\n        val maxCharsSortedFirstKeyValueCharString\
    \ = maxCharsSortedFirstKeyValueCharString.toUpperCase\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjjtup17b.scala:39:57 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirstKeyValueCharStringLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjjtup17b.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirstKeyValueCharString\e[0m\
    \ = maxCharsSortedFirstKeyValueCharString.toUpperCase\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstKeyValueCharString is already defined as\
    \ \e[33mvalue\e[0m \e[35mmaxCharsSortedFirstKeyValueCharString\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjjtup17b.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharsSortedFirstKeyValueCharStringLength\e[0m = maxCharsSortedFirstKeyValueCharString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstKeyValueCharStringLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxCharsSortedFirstKeyValueCharStringLength\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjjtup17b.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirstKeyValueCharStringLength\e\
    [0m = maxCharsSortedFirstKeyValueCharString.length\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).head\n        val maxWordWithCount = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordWithCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(_.length\
    \ == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptk74pdd9.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptk74pdd9.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val charCount = mutable.Map[Char, Int]()\n\
    \        val maxCharCount = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[Char,\
    \ String]()\n        words.foreach(word => {\n            word.foreach(char =>\
    \ {\n                charCount(char) += 1\n            })\n        })\n      \
    \  charCount.foreach(c => {\n            if (maxCharCount(c._1) < c._2) {\n  \
    \              maxCharCount(c._1) = c._2\n                maxWord(c._1) = c._1\n\
    \            }\n        })\n        maxWord.foreach(c => {\n            if (maxCharCount(c._1)\
    \ < c._2) {\n                maxCharCount(c._1) = c._2\n                maxWord(c._1)\
    \ = c._1\n            }\n        })\n        maxWord.keys.toList.sortWith(_ <\
    \ _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfaej76g.scala:9:24 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mcharCount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfaej76g.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxCharCount\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfaej76g.scala:11:22\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWord\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String,\
    \ Int]()\n        for (word <- words) {\n            for (char <- word) {\n  \
    \              uniqueChars += (char -> 1)\n            }\n        }\n        for\
    \ (word <- words) {\n            val maxCount = uniqueChars.values.max\n     \
    \       val maxChars = uniqueChars.filter(_._2 == maxCount).map(_._1)\n      \
    \      val maxWords = uniqueChars.filter(_._2 == maxCount).map(_._1)\n       \
    \     if (maxChars.size > 0) {\n                maxChar.update(maxChars.head,\
    \ maxCount)\n                maxWord.update(word, maxCount)\n            }\n \
    \       }\n        if (maxChar.size > 0) {\n            val maxChars = maxChar.filter(_._2\
    \ > 1).map(_._1)\n            val maxWords = maxChar.filter(_._2 > 1).map(_._1)\n\
    \            if (maxWords.size > 0) {\n                maxWord.update(maxWords.head,\
    \ maxChar.filter(_._2 == maxWords.head).map(_._1).max)\n            }\n      \
    \  }\n        if (maxWord.size > 0) {\n            val maxWords = maxWord.filter(_._2\
    \ > 1).map(_._1)\n            if (maxWords.size > 0) {\n                maxWord.update(maxWords.head,\
    \ maxChar.filter(_._2 == maxWords.head).map(_._1).max)\n            }\n      \
    \  }\n        if (maxWord.size > 0) {\n            maxWord.keys.toList.sortWith(_\
    \ < _).head\n        } else {\n            \"\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqz_7d4b2.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqz_7d4b2.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqz_7d4b2.scala:11:22 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e[35mString\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLex = maxWordWithMaxCharsFirst.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLex = maxWordWithMaxCharsFirstInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLex = maxWordWithMaxCharsFirstInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLex = maxWordWithMaxCharsFirstInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex = maxWordWithMaxCharsFirstInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex\
    \ = maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_1bml_sl.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_1bml_sl.scala:14:69\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstInLex\e[0m = maxWordWithMaxCharsFirst.sortWith(_.compareTo(_)\
    \ < \e[31m0\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                  value sortWith is not a member of Char\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_1bml_sl.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    uniqueChars.foreach(char => {\n            val count = uniqueChars(char)\n\
    \            if (count > maxChar(char)) {\n                maxChar(char) = count\n\
    \                maxWord(word) = count\n            }\n        })\n        maxWord.foreach(word\
    \ => {\n            if (maxWord(word) > maxWord(words.head)) {\n             \
    \   maxWord(words.head) = maxWord(word)\n            }\n        })\n        maxWord(words.head).key\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpxqrqpu.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpxqrqpu.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdpxqrqpu.scala:11:22 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e[35mString\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[Char,\
    \ String]()\n        for (word <- words) {\n            val uniqueCharsCount =\
    \ word.distinct().length\n            val maxCharsCount = uniqueCharsCount.max\n\
    \            if (maxCharsCount == 0) {\n                maxChars.clear()\n   \
    \             maxWord.clear()\n            }\n            val maxChar = word.max\n\
    \            if (maxCharsCount > maxChars(maxChar)) {\n                maxChars(maxChar)\
    \ = maxCharsCount\n                maxWord(maxChar) = word\n            }\n  \
    \      }\n        maxWord.keys.toList.sortWith(_ < _).head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdv2g49w.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfdv2g49w.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdv2g49w.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpfdv2g49w.scala:13:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36muniqueCharsCount\e[0m\
    \ = word.distinct().length\n\e[31m\e[31m   |\e[0m                            \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter i\
    \ of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n4 errors found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c =>\
    \ {\n            maxChars(c) = uniqueChars.count(_ == c)\n        })\n       \
    \ maxChars.toList.sortWith(_ < _).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8_xpqr_l.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp8_xpqr_l.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(word => word.distinct).flatten.toSet\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length)\n        val maxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head\n        val maxWordWithMaxCharsAndMaxWord = words.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length).sortBy(word => word.distinct).head.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length)\n        val maxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head.filter(word => word.count(_ == maxChars) == uniqueChars.length).filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length)\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head.filter(word => word.count(_ == maxChars) == uniqueChars.length).filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length).filter(word => word.count(_\
    \ == maxChars) == uniqueChars.length)\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head.filter(word => word.count(_ == maxChars) == uniqueChars.length).filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length).filter(word => word.count(_\
    \ == maxChars) == uniqueChars.length).filter(word => word.count(_ == maxChars)\
    \ == uniqueChars.length)\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head.filter(word => word.count(_ == maxChars) == uniqueChars.length).filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length).filter(word => word.count(_\
    \ == maxChars) == uniqueChars.length).filter(word => word.count(_ == maxChars)\
    \ == uniqueChars.length).filter(word => word.count(_ == maxChars) == uniqueChars.length)\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMax\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_tci3pkh.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_tci3pkh.scala:11:84\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWord\e[0m = words.filter(\e[36mword\e[0m => word.count(_ == maxChars) ==\
    \ uniqueChars.length)\n\e[31m\e[31m   |\e[0m                                 \
    \                                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value length is not a member of Set[Char]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_tci3pkh.scala:12:96 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(\e[36mword\e[0m => word.count(_ == maxChars) == uniqueChars.length).sortBy(\e\
    [36mword\e[0m => word.distinct).head\n\e[31m\e[31m   |\e[0m                  \
    \                                                                  ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value length is not a member\
    \ of Set[Char]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_tci3pkh.scala:13:106\
    \ -----------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsAndMaxWord\e[0m = words.filter(\e[36mword\e[0m => word.count(_\
    \ == maxChars) == uniqueChars.length).sortBy(\e[36mword\e[0m => word.distinct).head.filter(\e\
    [36mword\e[0m => word.count(_ == maxChars) == uniqueChars.length)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                      value length is not a member of Set[Char]\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp_tci3pkh.scala:13:169 -----------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxWord\e\
    [0m = words.filter(\e[36mword\e[0m => word.count(_ == maxChars) == uniqueChars.length).sortBy(\e\
    [36mword\e[0m => word.distinct).head.filter(\e[36mword\e[0m => word.count(_ ==\
    \ m"
  stdout: ''
  timestamp: 1660009541
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsAndFirstInLexicographicalOrder = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) == words.lastIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpudq_voxr.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpudq_voxr.scala:12:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m                            \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpudq_voxr.scala:13:55\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsAndFirst\e[0m = words.filter(_.length == maxChars &&\
    \ words.indexOf(_) == words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m           \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpudq_voxr.scala:14:77\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsAndFirstInLexicographicalOrder\e[0m = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpudq_voxr.scala:15:89 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxChars\e\
    [0m = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m        \
    \                                        "
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.min\n        val maxWordChars =\
    \ maxWord.map(_.length)\n        val maxWordCharsIndex = maxWordChars.indexOf(maxChars)\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        if (maxWordCharsIndex\
    \ < maxWordCharsIndex) maxWord else maxWords.min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp13978n_z.scala:13:41 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxWordChars\e[0m = maxWord.map(_.length)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                    value length is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.length == maxChars)\n        val maxWordWithMaxChars = words.filter(w =>\
    \ w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxChars.sortWith((a, b) => a.charAt(0).toInt < b.charAt(0).toInt)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWord = maxWordWithMaxCharsSortedByFirstChar(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordLength = maxWordWithMaxCharsSortedByFirstCharFirstWord.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstChar = maxWordWithMaxCharsSortedByFirstCharFirstWord.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharLength = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstChar.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWord =\
    \ maxWordWithMaxCharsSortedByFirstCharFirstWordFirstChar.charAt(0)\n        val\
    \ maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordLength = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWord.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWord.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstChar.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWord.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordFirstCharLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWord.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordFirstCharLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp18bfou6m.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordFirstCharLength\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharFirstWord\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordFirstCharLength\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordFirstCharLength\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp18bfou6m.scala:12:80 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(\e[36mw\e[0m => w.length == maxChars && w < maxWord)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \       Found:    (maxWord : List[String])\n\e[31m   |\e[0m                  \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp18bfou6m.scala:17:130 -----------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharLength\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstChar.length\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value length is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp18bfou6m.scala:18:133\
    \ ----------------------"
  stdout: ''
  timestamp: 1660009539
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0) { (maxCount,\
    \ word) =>\n            val count = word.distinct.length\n            if (count\
    \ > maxCount) count else maxCount\n        }\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_lg3f87.scala:18)\n\tat Problem.main(tmpv_lg3f87.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) += 1\n  \
    \          })\n        })\n        uniqueChars.toList.sortWith(_._2 > _._2).head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4xdzdyi.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4xdzdyi.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += (c -> 1)\n\
    \            })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                val count = uniqueChars.getOrElse(c, 0) + 1\n        \
    \        if (count > maxChar.getOrElse(c, 0))\n                    maxChar = uniqueChars\n\
    \            })\n        })\n        maxChar.keys.toList.sortWith(_ < _).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp90_yqbux.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp90_yqbux.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp90_yqbux.scala:20:28 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m                    maxChar = uniqueChars\n\e[31m\e[31m   |\e[0m     \
    \               ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Reassignment to val maxChar\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(w => w.toCharArray.distinct.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(w => w.toCharArray.distinct.length\
    \ == maxChars && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted)\n\
    \        val maxWordWithMaxCharsFirst = words.filter(w => w.toCharArray.distinct.length\
    \ == maxChars && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted\
    \ && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted.head)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(w =>\
    \ w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(w => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(w => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(w => w.toCharArray.distinct.length == maxChars && w.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkx7e3026.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkx7e3026.scala:13:145 -----------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m = words.filter(\e\
    [36mw\e[0m => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted)\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \                                                       ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value toCharArray is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkx7e3026.scala:14:150\
    \ -----------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirst\e[0m = words.filter(\e[36mw\e[0m => w.toCharArray.distinct.length\
    \ == maxChars && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted\
    \ && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted.head)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value\
    \ toCharArray is not a member of List[String]\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkx7e3026.scala:14:236 -----------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e[0m = words.filter(\e\
    [36mw\e[0m => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                                                 "
  stdout: ''
  timestamp: 1660009540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9ewrran.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxCharCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).max\n\
    \        val maxWordCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWordsOfWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWords\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n       \
    \ val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWords\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n       \
    \ val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWords\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n       \
    \ val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWords\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n       \
    \ val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpem_yas8c.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpem_yas8c.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    uniqueChars(c) += 1\n                } else {\n     \
    \               uniqueChars(c) = 1\n                }\n            })\n      \
    \  })\n        uniqueChars.toList.sortWith((a, b) => b - a)\n            .headOption\n\
    \            .map(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplx38mytw.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplx38mytw.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjjb4_cd.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjjb4_cd.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjjb4_cd.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjjb4_cd.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += (c -> 1)\n\
    \            })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                val count = uniqueChars(c)\n                if (count\
    \ > maxChars(c)) {\n                    maxChars(c) = count\n                }\n\
    \            })\n        })\n        val maxChar = maxChars.maxBy(_._2)._1\n \
    \       words.find(word => word.contains(maxChar))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpafguoitm.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpafguoitm.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpafguoitm.scala:25:18 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        words.find(\e[36mword\e[0m => word.contains(maxChar))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e\
    [31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChars\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsMax\
    \ = maxWordWithMaxCharsFirstChars.max\n        val maxWordWithMaxCharsFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMax.head\n        val maxWordWithMaxCharsFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMax\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n        val\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxx69s04f.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxx69s04f.scala:14:75\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstChars\e[0m = maxWordWithMaxCharsFirst.map(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \       value length is not a member of Char\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpxx69s04f.scala:18:60 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMax\e\
    [0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMax\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxx69s04f.scala:19:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst\e[0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxx69s04f.scala:20:70\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars\e[0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxCharCount = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> 1)\n                maxCharCount += (c ->\
    \ 1)\n            })\n        })\n        uniqueChars.toSeq.sortWith((a, b) =>\
    \ a._2 > b._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbb8t7b5a.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbb8t7b5a.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbb8t7b5a.scala:11:27 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxCharCount\e[0m = mutable.Map[\e[35mChar\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.distinct().length)\n        val maxWord = words.filter(word\
    \ => word.distinct().length == maxCount)\n        val maxWordWithCount = words.filter(word\
    \ => word.distinct().length == maxCount && word.count(_ == word(0)) == 1)\n  \
    \      val maxWordWithCountWithFirst = words.filter(word => word.distinct().length\
    \ == maxCount && word.count(_ == word(0)) == 1 && word(0) < word(1))\n       \
    \ val maxWordWithCountWithFirstWithMax = words.filter(word => word.distinct().length\
    \ == maxCount && word.count(_ == word(0)) == 1 && word(0) < word(1) && word(1)\
    \ < word(2))\n        val maxWordWithCountWithFirstWithMaxWithMax = words.filter(word\
    \ => word.distinct().length == maxCount && word.count(_ == word(0)) == 1 && word(0)\
    \ < word(1) && word(1) < word(2) && word(2) < word(3))\n        val maxWordWithCountWithFirstWithMaxWithMaxWithMax\
    \ = words.filter(word => word.distinct().length == maxCount && word.count(_ ==\
    \ word(0)) == 1 && word(0) < word(1) && word(1) < word(2) && word(2) < word(3)\
    \ && word(3) < word(4))\n        val maxWordWithCountWithFirstWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(word => word.distinct().length == maxCount && word.count(_ ==\
    \ word(0)) == 1 && word(0) < word(1) && word(1) < word(2) && word(2) < word(3)\
    \ && word(3) < word(4) &&  word(4) < word(5))\n        val maxWordWithCountWithFirstWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(word => word.distinct().length == maxCount && word.count(_ ==\
    \ word(0)) == 1 && word(0) < word(1) && word(1) < word(2) && word(2) < word(3)\
    \ && word(3) < word(4) &&  word(4) < word(5) && word(5) < word(6))\n        val\
    \ maxWordWithCountWithFirstWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(word\
    \ => word.distinct().length == maxCount && word.count(_ == word(0)) == 1 && word(0)\
    \ < word(1) && word(1) < word(2) && word(2) < word(3) && word(3) < word(4) &&\
    \  word(4) < word(5) && word(5) < word(6) && word(6) < \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4spie1e1.scala:18:310 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithFirstWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\e\
    [0m = words.filter(\e[36mword\e[0m => word.distinct().length == maxCount && word.count(_\
    \ == word(\e[31m0\e[0m)) == \e[31m1\e[0m && word(\e[31m0\e[0m) < word(\e[31m1\e\
    [0m) && word(\e[31m1\e[0m) < word(\e[31m2\e[0m) && word(\e[31m2\e[0m) < word(\e\
    [31m3\e[0m) && word(\e[31m3\e[0m) < word(\e[31m4\e[0m) &&  word(\e[31m4\e[0m)\
    \ < word(\e[31m5\e[0m) && word(\e[31m5\e[0m) < word(\e[31m6\e[0m) && word(\e[31m6\e\
    [0m) < \n\e[31m\e[31m   |\e[0m                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp4spie1e1.scala:9:79 ------------------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = words.foldLeft(\e\
    [31m0\e[0m)((\e[36mcount\e[0m, \e[36mword\e[0m) => count + word.distinct().length)\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mmissing argument for parameter i\
    \ of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n\e[31m\e[31m-- Error: /tmp/tmp4spie1e1.scala:10:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.distinct().length == maxCount)\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e\
    [0m \e[35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- Error: /tmp/tmp4spi"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[Char,\
    \ String]()\n        words.foreach(word => {\n            word.foreach(char =>\
    \ {\n                uniqueChars += char\n                val count = uniqueChars.count(_\
    \ == char)\n                if (maxChars(char) == 0 || count > maxChars(char))\
    \ {\n                    maxChars(char) = count\n                    maxWord(char)\
    \ = word\n                }\n            })\n        })\n        maxWord.map(_._2).max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyzqbyylo.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyzqbyylo.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyzqbyylo.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsLast = words.filter(_.length == maxChars && words.indexOf(_)\
    \ > words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLast = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsFirstLastWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) > words.lastIndexOf(_)\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxChars = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_)\
    \ > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_) && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4mnmon65.scala:21:117 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxCharsFirst\e\
    [0m = words.filter(_.length == maxChars && \n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp4mnmon65.scala:12:47 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(_.length == maxChars && words.indexOf(_) == words.lastIndexOf(_))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4mnmon65.scala:13:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirst\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ < words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m                             \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4mnmon65.scala:14:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsLast\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ > words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m                             \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp4mnmon65.scala:15:56\
    \ ---------"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n\
    \        val maxChar = maxCharsSorted.head._1\n        val maxCount = maxCharsSorted.head._2\n\
    \        val maxWord = words.find(word => word.count(_ == maxChar) == maxCount)\n\
    \        maxWord.getOrElse(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd6r1bauk.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpd6r1bauk.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (uniqueChars.getOrElse(c, 0) == 0) {\n                    uniqueChars\
    \ += ((c) -> 1)\n                } else {\n                    uniqueChars +=\
    \ ((c) -> uniqueChars(c) + 1)\n                }\n            })\n        })\n\
    \        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpldxghuyc.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortBy(_.length)\n \
    \       val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.takeWhile(_.length\
    \ == maxChars)\n        val maxWordWithMaxCharsWithFirstCharReversed = maxWordWithMaxCharsWithFirstChar.reverse\n\
    \        maxWordWithMaxCharsWithFirstCharReversed.head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmqkpbjoe.scala:19)\n\tat Problem.main(tmpmqkpbjoe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n  \
    \      })\n        uniqueChars.toList.sortWith(_ < _).head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm8ge2kv.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgm8ge2kv.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _).head\n\
    \        val maxWordWithMaxCharsFirstInLex = maxWordWithMaxChars.sortWith(_ <\
    \ _).head\n        val maxWordWithMaxCharsFirstInLexLex = maxWordWithMaxCharsFirstInLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLex = maxWordWithMaxCharsFirstInLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex =\
    \ maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex.sortWith(_ < _).head\n  \
    \      val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex.sortWith(_ < _).head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLexLex\
    \ = maxWordWithMaxChar\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2n7i5lr_.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex\e\
    [0m = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLexLex.sortWith(_ <\
    \ _).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex is\
    \ already defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp2n7i5lr_.scala:14:77 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexLex\e\
    [0m = maxWordWithMaxCharsFirstInLex.sortWith(_ < _).head\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value sortWith is not a\
    \ member of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2n7i5lr_.scala:19:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLex\e[0m = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex.sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m                                           \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2n7i5lr_.scala:20:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex\e[0m = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex.sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m                                           \
    \          "
  stdout: ''
  timestamp: 1660009547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxWordLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxChars.length\n        val\
    \ maxWordWithMaxCharsFirst = words.filter(_.length == maxWordWithMaxCharsLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstLength = maxWordWithMaxCharsFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirst = words.filter(_.length == maxWordWithMaxCharsFirstLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstFirstLength = maxWordWithMaxCharsFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirst = words.filter(_.length == maxWordWithMaxCharsFirstFirstLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirst = words.filter(_.length ==\
    \ maxWordWithMaxCharsFirstFirstFirstLength).sortBy(_.length).head\n        val\
    \ maxWordWithMaxCharsFirstFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithMaxCharsFirstFirstFirstFirstLength).sortBy(_.length).head\n  \
    \      val maxWordWithMaxCharsFirstFirstFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirstFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithMaxCharsFirstFirstFirstFirstFirstLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirstFirstFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithMaxCharsFirstFirstFirstFirstFirstFirstLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirstFirst\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpybxnts_2.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.toList.sortWith(_.compareTo(_)\
    \ < 0).foreach(char => {\n            val count = maxChars.getOrElse(char, 0)\n\
    \            maxChars += char -> count + 1\n        })\n        maxChars.toList.sortWith(_.compareTo(_)\
    \ < 0).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3dk55oto.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3dk55oto.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val counts = words.map(word => word.map(c\
    \ => c.toInt).foldLeft(0)(_ + _)).toMap\n        val maxKey = counts.maxBy(_._2)._1\n\
    \        val maxValue = counts.maxBy(_._2)._2\n        val maxWord = words.filter(word\
    \ => word.contains(maxKey))\n        val maxWordValue = maxWord.map(word => word.contains(maxKey).map(c\
    \ => c.toInt).foldLeft(0)(_ + _)).toMap\n        if (maxWordValue.size == maxValue)\
    \ {\n            maxWord.filter(word => word.contains(maxKey)).head\n        }\
    \ else {\n            words.filter(word => word.contains(maxKey)).head\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6yqr07d8.scala:9:87 ------------------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = words.map(\e\
    [36mword\e[0m => word.map(\e[36mc\e[0m => c.toInt).foldLeft(\e[31m0\e[0m)(_ +\
    \ _)).toMap\n\e[31m\e[31m  |\e[0m                                            \
    \                                           ^\e[0m\n\e[31m  |\e[0m           \
    \                               Cannot prove that Int <:< (K, V)\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m                                          where:    K is a\
    \ type variable\n\e[31m  |\e[0m                                              \
    \      V is a type variable\n\e[31m  |\e[0m                                  \
    \        .\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6yqr07d8.scala:13:69\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordValue\e[0m = maxWord.map(\e[36mword\e[0m => word.contains(maxKey).map(\e\
    [36mc\e[0m => c.toInt).foldLeft(\e[31m0\e[0m)(_ + _)).toMap\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value map is not a member\
    \ of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9ewrran.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val counts = words.map(word => word.count(_\
    \ == 'a')).toMap\n        val maxCount = counts.max\n        val maxWord = counts.find(_._2\
    \ == maxCount).get._1\n        val maxWordIndex = words.indexOf(maxWord)\n   \
    \     val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) words.size else maxWordIndex\n\
    \        val maxWordIndex = if (maxWordIndex == 0) \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyc419gry.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyc419gry.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex == \e[31m0\e[0m) words.size\
    \ \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyc419gry.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ == \e[31m0\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyc419gry.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ == \e[31m0\e[0m) words.size \e[33melse\e[0m maxWordIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyc419gry.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = \e[33mif\e[0m (maxWordIndex\
    \ == \e[31m0\e[0m) words.size \e[33melse\e[0m maxWordInde"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithMaxLength = words.filter(_.length == maxWordLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLength = maxWordWithMaxLength.length\n      \
    \  val maxWordWithMaxLengthLengthWithMaxChars = words.filter(_.length == maxWordLengthLengthWithMaxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLength = maxWordWithMaxLengthLengthWithMaxChars.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxChars = words.filter(_.length\
    \ == maxWordLengthLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLength =\
    \ maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxChars.length\n        val\
    \ maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars =\
    \ words.filter(_.length == maxWordLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLength\
    \ = maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars\
    \ = words.filter(_.length == maxWordLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLength\
    \ = maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars\
    \ = words.filter(_.length == maxWordLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \        val max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfr8_atob.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfr8_atob.scala:15:78\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxLengthLengthWithMaxChars\e[0m = words.filter(_.length == maxWordLengthLengthWithMaxChars).sortBy(_.length).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: maxWordLengthLengthWithMaxChars\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfr8_atob.scala:17:96 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxChars\e\
    [0m = words.filter(_.length == maxWordLengthLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: maxWordLengthLengthWithMaxCharsLengthWithMaxChars\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfr8_atob.scala:19:114\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars\e\
    [0m = words.filter(_.length == maxWordLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: maxWordLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars\n\
    \e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxCharCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).max\n\
    \        val maxWordCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordLength = words.filter(_.toCharArray.contains(maxChars)).map(_.length).max\n\
    \        val maxWordLengthCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordLengthPercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentageCount =\
    \ words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentagePercentageCount\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentagePercentageCount\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentagePercentageCount\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentagePercentageCount\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7zb81yrv.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordLengthPercentagePercentage\e\
    [0m = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordLengthPercentagePercentage is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordLengthPercentagePercentage\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7zb81yrv.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordLengthPercentagePercentageCount\e[0m = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordLengthPercentagePercentageCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mmaxWordLengthPercentagePercentageCount\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7zb81yrv.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordLengthPercentagePercentage\e[0m =\
    \ words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordLengthPercentagePercentage is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordLengthPercentagePercentage\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods mu"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars += c -> 0\n            })\n        })\n        val maxCharsCount\
    \ = maxChars.values.max\n        val maxCharsKey = maxChars.keys.max\n       \
    \ val maxCharsValue = maxChars.values.max\n        val maxCharsKeyValue = maxCharsKey\
    \ -> maxCharsValue\n        val maxCharsKeyValuePairs = maxCharsKeyValue.toSeq.sortBy(_._1).reverse\n\
    \        val maxCharsKeyValuePairsFirst = maxCharsKeyValuePairs.head\n       \
    \ val maxCharsKeyValuePairsFirstKey = maxCharsKeyValuePairsFirst._1\n        val\
    \ maxCharsKeyValuePairsFirstValue = maxCharsKeyValuePairsFirst._2\n        val\
    \ maxCharsKeyValuePairsLast = maxCharsKeyValuePairs.last\n        val maxCharsKeyValuePairsLastKey\
    \ = maxCharsKeyValuePairsLast._1\n        val maxCharsKeyValuePairsLastValue =\
    \ maxCharsKeyValuePairsLast._2\n        val maxCharsKeyValuePairsLastKeyValue\
    \ = maxCharsKeyValuePairsLastKey -> maxCharsKeyValuePairsLastValue\n        val\
    \ maxCharsKeyValuePairsLastKeyValuePairs = maxCharsKeyValuePairsLastKeyValue.toSeq.sortBy(_._1).reverse\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsFirst = maxCharsKeyValuePairsLastKeyValuePairs.head\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsFirstKey = maxCharsKeyValuePairsLastKeyValuePairsFirst._1\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsFirstValue = maxCharsKeyValuePairsLastKeyValuePairsFirst._2\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsLast = maxCharsKeyValuePairsLastKeyValuePairs.last\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsLastKey = maxCharsKeyValuePairsLastKeyValuePairsLast._1\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsLastValue = maxCharsKeyValuePairsLast\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ci84v3v.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5ci84v3v.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ci84v3v.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxCharCount = uniqueChars.max\n\
    \        val maxCharIndex = uniqueChars.indexOfMax\n        val maxChar = uniqueChars(maxCharIndex)\n\
    \        val maxWord = words.filter(w => w.toCharArray.contains(maxChar))\n  \
    \      if (maxWord.size > 1) {\n            val maxWordIndex = words.indexOf(maxWord)\n\
    \            val maxWordChars = maxWord.map(_.toCharArray).flatten\n         \
    \   val maxWordCharCount = maxWordChars.distinct\n            val maxWordCharIndex\
    \ = maxWordChars.indexOfMax\n            val maxWordChar = maxWordChars(maxWordCharIndex)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8s8pb9ci.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8s8pb9ci.scala:12:39\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxCharIndex\e[0m = uniqueChars.indexOfMax\n\e[31m\e[31m   |\e[0m        \
    \                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue indexOfMax\
    \ is not a member of List[Char] - did you mean uniqueChars.indexOf?\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8s8pb9ci.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mmaxWordCharIndex\e[0m\
    \ = words.indexOf(maxWordChar)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8s8pb9ci.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmaxWordCharIndex\e[0m\
    \ = words.indexOf(maxWordChar)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8s8pb9ci.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mmaxWordCharIndex\e[0m\
    \ = words.indexOf(maxWordChar)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8s8pb9ci.scala:24:1"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars.getOrElse(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith(_._2\
    \ > _._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ttumizk.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ttumizk.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += (c -> uniqueChars.getOrElse(c,\
    \ 0) + 1)\n            })\n        })\n        uniqueChars.toSeq.sortBy(_._2).reverse.head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptk01__86.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptk01__86.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjjb4_cd.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjjb4_cd.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjjb4_cd.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcjjb4_cd.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be de"
  stdout: ''
  timestamp: 1660009538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(x => x.distinct).flatten.toSet\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(x\
    \ => x.distinct.size == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMax\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppy8jdf7f.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppy8jdf7f.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsIndex\e[0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppy8jdf7f.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppy8jdf7f.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppy8jdf7f.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(Map[Char,\
    \ Int]())((map, word) => {\n            val charCount = word.foldLeft(Map[Char,\
    \ Int]())((map, char) => {\n                map + (char -> (map.getOrElse(char,\
    \ 0) + 1))\n            })\n            map + (charCount.maxBy(_._2) -> (map.getOrElse(charCount.maxBy(_._2),\
    \ 0) + 1))\n        })\n        val maxChar = maxCount.maxBy(_._2)\n        val\
    \ maxWord = words.filter(word => word.count(_ == maxChar) == maxCount.get(maxChar))\n\
    \        if (maxWord.size == 1) maxWord.head else maxWord.sortBy(_.length).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw7uygamf.scala:13:59\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            map + (charCount.maxBy(_._2)\
    \ -> (map.getOrElse(charCount.maxBy(_._2), \e[31m0\e[0m) + \e[31m1\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \ ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                   Found:    \e[1m\e[31m(\e[0mChar\e[1m\e[31m,\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                 \
    \                                  Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpw7uygamf.scala:16:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.count(_ == maxChar) == maxCount.get(maxChar))\n\e[31m\e\
    [31m   |\e[0m                                                      ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   Values of types Char and (Char, Int) cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw7uygamf.scala:16:84\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e\
    [0m = words.filter(\e[36mword\e[0m => word.count(_ == maxChar) == maxCount.get(maxChar))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                    Found:    (maxChar : (Char, Int))\n\e[31m   |\e[0m      \
    \                                 Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += (c -> 1)\n\
    \            })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                val count = uniqueChars(c)\n                if (count\
    \ > maxChars(c)) {\n                    maxChars(c) = count\n                }\n\
    \            })\n        })\n        val maxKey = maxChars.keys.max\n        val\
    \ maxValue = maxChars(maxKey)\n        val maxWord = words.find(word => maxChars(word)\
    \ == maxValue)\n        if (maxWord.isEmpty) \"\"\n        else maxWord.get\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jboiss3.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jboiss3.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9ewrran.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars(char) match {\n                    case Some(count) => uniqueChars(char)\
    \ = uniqueChars(char) + 1;\n                    case None => uniqueChars(char)\
    \ = uniqueChars(char) + 1;\n                }\n            })\n        })\n  \
    \      uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18nni8t9.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiwhmfa6h.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwhmfa6h.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsIndex\e[0m = words.indexOf(maxWordWithMaxChars.max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwhmfa6h.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = words.indexOf(maxWordWithMaxChars.max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwhmfa6h.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = words.indexOf(maxWordWithMaxChars.max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwhmfa6h.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = words.indexOf(maxWordWithMaxChars.max)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (uniqueChars.getOrElse(c, 0) == 0)\n                    uniqueChars\
    \ += (c -> 1)\n                else\n                    uniqueChars(c) += 1\n\
    \            })\n        })\n        val maxKey = uniqueChars.maxBy(_._2)._1\n\
    \        words.find(word => word.toString.contains(maxKey))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuujq3w90.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuujq3w90.scala:19:18\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        words.find(\e[36mword\e\
    [0m => word.toString.contains(maxKey))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(Map[Char,\
    \ Int]())((map, word) => {\n            val count = map.getOrElse(word.charAt(0),\
    \ 0)\n            map.update(word.charAt(0), count + 1)\n            map\n   \
    \     })\n        val maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n\
    \        val maxWord = words.find(_.charAt(0) == maxKey).head\n        if (maxValue\
    \ > 1) {\n            findMax(words.filter(_.charAt(0) == maxKey))\n        }\
    \ else {\n            maxWord\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfva4owbp.scala:25)\n\tat Problem.main(tmpfva4owbp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(w\
    \ => w.length == maxChars)\n        val maxWord = maxWords.sortWith((a, b) =>\
    \ a.compareTo(b)).head\n        val maxWordWithMaxChars = words.filter(w => w.length\
    \ == maxChars && w < maxWord)\n        val maxWordWithMaxCharsSortedByLex = maxWordWithMaxChars.sortWith((a,\
    \ b) => a.compareTo(b))\n        val maxWordWithMaxCharsSortedByLexFirst = maxWordWithMaxCharsSortedByLex.head\n\
    \        val maxWordWithMaxCharsSortedByLexLast = maxWordWithMaxCharsSortedByLex.last\n\
    \        val maxWordWithMaxCharsSortedByLexFirstChar = maxWordWithMaxCharsSortedByLexFirst.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByLexLastChar = maxWordWithMaxCharsSortedByLexLast.charAt(maxWordWithMaxCharsSortedByLexLast.length\
    \ - 1)\n        val maxWordWithMaxCharsSortedByLexFirstCharAndLastChar = maxWordWithMaxCharsSortedByLexFirstChar\
    \ + maxWordWithMaxCharsSortedByLexLastChar\n        val maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWord\
    \ = maxWordWithMaxCharsSortedByLexFirstCharAndLastChar + maxWord\n        val\
    \ maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxChars = maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWord\
    \ + maxWordWithMaxChars\n        val maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxCharsSortedByLex\
    \ = maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxChars +\
    \ maxWordWithMaxCharsSortedByLex\n        val maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxCharsSortedByLexFirst\
    \ = maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxCharsSortedByLex.head\n\
    \        val maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxCharsSortedByLexLast\
    \ = maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwq9bddc4.scala:12:61\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e\
    [0m = maxWords.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.compareTo(b)).head\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   Int\n\e[31m   |\e[0m                                                  Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwq9bddc4.scala:14:95\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByLex\e\
    [0m = maxWordWithMaxChars.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.compareTo(b))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                                           Found:    Int\n\e[31m   |\e[0m   \
    \                                                    Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwq9bddc4.scala:25:5 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += (c -> 1)\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpecvi77t3.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009553
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray)\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxCount = uniqueChars.count(maxChars)\n        if (maxCount > 1)\
    \ {\n            val maxWords = words.filter(_.toCharArray.contains(maxChars))\n\
    \            val maxWordsCount = uniqueChars.count(maxChars)\n            if (maxWordsCount\
    \ > 1) {\n                val maxWordsIndex = words.indexOf(maxWords)\n      \
    \          words.take(maxWordsIndex).mkString(\" \")\n            } else {\n \
    \               maxWord\n            }\n        } else {\n            maxWord\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpstfua5q1.scala:11:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = uniqueChars.max\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0mNo implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:\
    \    B is a type variable with constraint >: Array[Char]\n\e[31m   |\e[0m..\n\e\
    [31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mB\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[B]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[B].\n1 error found\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n        })\n        uniqueChars.toList.sortWith((a, b) => a._2 >\
    \ b._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp87h3x2_f.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp87h3x2_f.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009555
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(_.length\
    \ == maxChars)\n        val maxWord = maxWords.sortBy(_.length).head\n       \
    \ val maxWordWithMaxChars = words.filter(_.length == maxChars && words.contains(maxWord))\n\
    \        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstInLex = words.filter(_.length == maxChars\
    \ && words.contains(maxWordWithMaxCharsFirst))\n        val maxWordWithMaxCharsFirstInLexLex\
    \ = words.filter(_.length == maxChars && words.contains(maxWordWithMaxCharsFirstInLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLex = words.filter(_.length == maxChars\
    \ && words.contains(maxWordWithMaxCharsFirstInLexLex))\n        val maxWordWithMaxCharsFirstInLexLexLexLex\
    \ = words.filter(_.length == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLex))\n   \
    \     val maxWordWithMaxCharsFirstInLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp31he69ch.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp31he69ch.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLex\e[0m = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLex is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp31he69ch.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex\e\
    [0m = words.filter(_.length == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp31he69ch.scala:26:5 ---------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n \
    \       val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMax = maxWordWithMaxCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMax.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n     \
    \   val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ccm9dyx.scala:14:69 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstChars\e\
    [0m = maxWordWithMaxCharsFirst.map(_.length)\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                       value map is not a member of Char\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ccm9dyx.scala:18:60 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMax\e\
    [0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMax\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ccm9dyx.scala:21:73\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax\e[0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5ccm9dyx.scala:22:78\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\e[0m =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compili"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            val chars = word.map(c => c.toInt)\n\
    \            uniqueChars ++= chars\n        })\n        val maxChars = uniqueChars.maxBy(_._2)._1\n\
    \        val maxWords = words.filter(word => word.map(c => c.toInt).contains(maxChars))\n\
    \        val maxWord = maxWords.sortBy(_.length).head\n        val maxWordWithMaxChars\
    \ = maxWord.mkString(\"\") + maxChars\n        if (maxWordWithMaxChars == maxWord)\
    \ maxWordWithMaxChars else maxWordWithMaxChars.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpam_dirza.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9ewrran.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value\
    \ > _.value).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head\n\
    \        val maxCharsSortedFirstKey = maxCharsSorted.keys.toSeq.find(_.value ==\
    \ maxCharsSortedFirst.value).get\n        val maxCharsSortedFirstValue = maxCharsSorted.values.toSeq.find(_.value\
    \ == maxCharsSortedFirst.value).get\n        val maxCharsSortedFirstKey = maxCharsSortedFirstKey.toString\n\
    \        val maxCharsSortedFirstValue = maxCharsSortedFirstValue.toString\n  \
    \      val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxChars\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi31ccw2w.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirstKey\e\
    [0m = maxCharsSortedFirstKey.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstKey is already defined as \e[33mvalue\e\
    [0m \e[35mmaxCharsSortedFirstKey\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi31ccw2w.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirstValue\e\
    [0m = maxCharsSortedFirstValue.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstValue is already defined as \e[33mvalue\e\
    [0m \e[35mmaxCharsSortedFirstValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi31ccw2w.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirst\e[0m\
    \ = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirst is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxCharsSortedFirst\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpi31ccw2w.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirst\e[0m\
    \ = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirst is already defined as \e[33mvalue\e[0m\
    \ \e[35mmaxCharsSortedFirst\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ method"
  stdout: ''
  timestamp: 1660009560
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) == 1)\n\
    \        if (maxWord.isEmpty) \"\"\n        else maxWord.head\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2gety5w.scala:18)\n\tat Problem.main(tmpn2gety5w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009562
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.distinct().length)\n        val maxWord = words.filter(word\
    \ => word.distinct().length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        if (maxWordIndex == 0) \"No words have maximum number of unique characters\"\
    \n        else words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqxb6fqu8.scala:9:79 ------------------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = words.foldLeft(\e\
    [31m0\e[0m)((\e[36mcount\e[0m, \e[36mword\e[0m) => count + word.distinct().length)\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mmissing argument for parameter i\
    \ of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n\e[31m\e[31m-- Error: /tmp/tmpqxb6fqu8.scala:10:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.distinct().length == maxCount).head\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = uniqueChars.count(_ == char)\n            if (maxChars(char) ==\
    \ 0 || count > maxChars(char)) {\n                maxChars(char) = count\n   \
    \         }\n        })\n        maxChars.values.toList.sortBy(_._1).head\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpph71ji3m.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpph71ji3m.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0) { (maxCount,\
    \ word) =>\n            val count = word.distinct.length\n            if (count\
    \ > maxCount) count else maxCount\n        }\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        if (maxWordIndex < words.length - 1) findMax(words.dropRight(maxWordIndex\
    \ + 1)) else maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp39japgdy.scala:19)\n\tat Problem.main(tmp39japgdy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxChars = words.map(_.length).max\n\
    \        val maxWord = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLength = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).headOption.getOrElse(\"\")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprx3vr22j.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length)\n\
    \        val maxCount = counts.max\n        val maxWord = counts.find(_ == maxCount).map(_\
    \ => words).head\n        val maxWordWithCount = words.find(word => word == maxWord)\n\
    \        val maxWordWithCountWithMaxCount = words.find(word => word == maxWordWithCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.find(word => word\
    \ == maxWordWithCountWithMaxCount)\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCount)\n   \
    \     val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.find(word\
    \ => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnv16wjzs.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpnv16wjzs.scala:12:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxWordWithCount\e[0m = words.find(\e[36mword\e[0m => word\
    \ == maxWord)\n\e[31m\e[31m   |\e[0m                                         \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues of types String and List[String]\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpnv16wjzs.scala:13:62\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxCount\e[0m = words.find(\e[36mword\e\
    [0m => word == maxWordWithCount)\n\e[31m\e[31m   |\e[0m                      \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mValues of types String and Option[String] cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpnv16wjzs.scala:14:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxCountWithMaxCount\e\
    [0m = words.find(\e[36mword\e[0m => word == maxWordWithCountWithMaxCount)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mValues\
    \ of types String and Option[String] cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpnv16wjzs.scala:15:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithCountWithMaxCountWithMaxCountWithMaxCount\e\
    [0m = words.find(\e[36mword\e[0m => word == maxWordWithCountWithMaxCountWithMaxCount)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types String and Option[String] cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnv16wjzs.scala:16:1"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortBy(_.toLowerCase).head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrder = maxWordWithMaxCharsFirst.sortBy(_.toLowerCase).head\n\
    \        maxWordWithMaxCharsFirstInLexicographicalOrder\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpagxrb9tx.scala:13:68 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = maxWordWithMaxChars.sortBy(_.toLowerCase).head\n\e[31m\e[31m   |\e[0m  \
    \                                                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpagxrb9tx.scala:13:80 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = maxWordWithMaxChars.sortBy(_.toLowerCase).head\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e\
    [35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mclass\e[0m\
    \ \e[35mStringOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((max,\
    \ word) => max + (word.count(_ == ' '))).toInt\n        val maxWord = words.filter(word\
    \ => word.count(_ == ' ') == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordChars = words.map(word\
    \ => word.count(_ == ' ')).max\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8jnlw1_c.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharIndex\e[0m =\
    \ words.indexOf(maxWordChars)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8jnlw1_c.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharLength\e[0m =\
    \ maxWordChars.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8jnlw1_c.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharIndex\e[0m =\
    \ words.indexOf(maxWordChars)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8jnlw1_c.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharLength\e[0m =\
    \ maxWordChars.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharLength is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp8jnlw1_c.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCha"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.distinct().length)\n        val maxWord = words.filter(word\
    \ => word.distinct().length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordLength = maxWord.length\n        val maxWordCharCount = maxWord.distinct().length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.distinct().sortBy(_.toInt))\n\
    \        val maxWordCharLength = maxWord.distinct().sortBy(_.toInt).length\n \
    \       val maxWordCharIndex2 = words.indexOf(maxWord.sortBy(_.toInt))\n     \
    \   val maxWordCharLength2 = maxWord.sortBy(_.toInt).length\n        val maxWordCharIndex3\
    \ = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt))\n        val maxWordCharLength3\
    \ = maxWord.sortBy(_.toInt).sortBy(_.toInt).length\n        val maxWordCharIndex4\
    \ = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt))\n \
    \       val maxWordCharLength4 = maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).length\n\
    \        val maxWordCharIndex5 = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt))\n\
    \        val maxWordCharLength5 = maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).length\n\
    \        val maxWordCharIndex6 = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt))\n\
    \        val maxWordCharLength6 = maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).length\n\
    \        val maxWordCharIndex7 = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6sr89vn9.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp6sr89vn9.scala:9:79\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m9 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxCount\e[0m = words.foldLeft(\e[31m0\e[0m)((\e[36mcount\e\
    [0m, \e[36mword\e[0m) => count + word.distinct().length)\n\e[31m\e[31m  |\e[0m\
    \                                                                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  |\e[0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6sr89vn9.scala:10:56 -----------------------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.distinct().length == maxCount).head\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- Error: /tmp/tmp6sr89vn9.scala:13:47\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxWordCharCount\e[0m = maxWord.distinct().length\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m\
    \ in \e[33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6sr89vn9.scala:14:61 -----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharIndex\e[0m = words.indexOf(maxWord.distinct().sortBy(_.toInt))\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e\
    [0m in \e[33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6sr89vn9.scala:15:48 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m     "
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithMaxLength = words.filter(_.length == maxWordLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLength = maxWordWithMaxLength.length\n      \
    \  val maxWordWithMaxLengthLengthWithMaxWord = words.filter(_.length == maxWordLengthLengthWithMaxWord).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordLength = maxWordWithMaxLengthLengthWithMaxWord.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordLength = words.filter(_.length\
    \ == maxWordLengthLengthWithMaxWordWithMaxWordLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordLengthLength = maxWordWithMaxLengthLengthWithMaxWordWithMaxWordLength.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordLengthLength\
    \ = words.filter(_.length == maxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordLengthLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLength\
    \ = maxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqgd5pfih.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgd5pfih.scala:15:77\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxLengthLengthWithMaxWord\e[0m = words.filter(_.length == maxWordLengthLengthWithMaxWord).sortBy(_.length).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                            Not found: maxWordLengthLengthWithMaxWord\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgd5pfih.scala:17:94 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxLengthLengthWithMaxWordWithMaxWordLength\e\
    [0m = words.filter(_.length == maxWordLengthLengthWithMaxWordWithMaxWordLength).sortBy(_.length).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Not found: maxWordLengthLengthWithMaxWordWithMaxWordLength\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgd5pfih.scala:19:111\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordLengthLength\e\
    [0m = words.filter(_.length == maxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordLengthLength).sortBy(_.length).head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: maxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordLengthLength\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1;\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpic2ti1x2.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars.getOrElseUpdate(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith(_.value\
    \ > _.value).last._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzry1z901.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzry1z901.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxCharCount = uniqueChars.max\n\
    \        val maxCharIndex = uniqueChars.indexOfMax\n        val maxChar = uniqueChars(maxCharIndex)\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChar))\n       \
    \ val maxWordCount = maxWord.map(_.length).max\n        if(maxWordCount > maxCharCount)\
    \ {\n            words.filter(_.toCharArray.contains(maxChar)).head\n        }\
    \ else {\n            words.filter(_.toCharArray.contains(maxChar)).sortBy(_.length).head\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyqrsac8t.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxCharIndex\e[0m = uniqueChars.indexOfMax\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue indexOfMax is not a member of List[Char] - did you mean uniqueChars.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n  \
    \      })\n        uniqueChars.toList.sortWith(_ < _).head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm8ge2kv.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgm8ge2kv.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9ewrran.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(word => word.distinct).flatten.toSet\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxChars\
    \ = maxWord.filter(word => word.count(_ == maxChars) == uniqueChars.size)\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortWith(_ < _)\n  \
    \      val maxWordWithMaxCharsFirstInLex = maxWordWithMaxCharsFirst.head\n   \
    \     val maxWordWithMaxCharsFirstInLexWithMaxChars = maxWordWithMaxCharsFirstInLex.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexWithMaxChars.head\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLex\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirst.filter(word => word.count(_\
    \ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLex.filter(word => word.count(_\
    \ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxChars.head\n   \
    \     val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLex\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirst.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLex.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexWithMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphmebs2kq.scala:15:106 -----------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexWithMaxChars\e\
    [0m = maxWordWithMaxCharsFirstInLex.filter(\e[36mword\e[0m => word.count(_ ==\
    \ maxChars) == uniqueChars.size)\n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value count is not a member of Char\
    \ - did you mean word.toInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphmebs2kq.scala:17:113\
    \ -----------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLex\e[0m = maxWordWithMaxCharsFirstInLexWithMaxCharsFirst.filter(\e\
    [36mword\e[0m => word.count(_ == maxChars) == uniqueChars.size)\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value filter is not a\
    \ member of Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphmebs2kq.scala:22:105\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirst\e\
    [0m = maxWordWithMaxCharsFirstInLexWithMax\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                        Not found: maxWordWithMaxCharsFirstInLexWithMax\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphmebs2kq.scala:23:5 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value\
    \ > _.value).last\n        val maxCharsSortedKey = maxCharsSorted.key\n      \
    \  val maxCharsSortedValue = maxCharsSorted.value\n        val maxCharsSortedKeyIndex\
    \ = words.indexOf(maxCharsSortedKey)\n        val maxCharsSortedValueIndex = words.indexOf(maxCharsSortedValue)\n\
    \        if (maxCharsSortedKeyIndex < maxCharsSortedValueIndex) {\n          \
    \  maxCharsSortedKey\n        } else {\n            maxCharsSortedValue\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4zzwcwd4.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4zzwcwd4.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.toList.sortWith((a, b) => b.length\
    \ - a.length).last\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpimck1zzo.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpimck1zzo.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n \
    \       })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.count(_ == maxChar) == uniqueChars.count(_ == maxChar))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptm4r5sml.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptm4r5sml.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptm4r5sml.scala:21:18 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        words.find(\e[36mword\e[0m => word.count(_ ==\
    \ maxChar) == uniqueChars.count(_ == maxChar))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars.getOrElseUpdate(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.toList.sortBy(_._2).last._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmw8k120b.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmw8k120b.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009565
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxChars.sortBy(_.charAt(0))\n        val maxWordWithMaxCharsSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstChar.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirst\
    \ = maxWordWithMaxCharsSortedByFirstCharReversed.head\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirst.charAt(0)\n        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.reverse\n        val\
    \ maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirst = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirst.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversedFirst\
    \ = maxWordWithMaxChar\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpw0vb2thm.scala:12:47 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.indexOf(_))\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw0vb2thm.scala:17:130\
    \ -----------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed\e[0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value reverse is not a\
    \ member of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw0vb2thm.scala:22:102\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpw0vb2thm.scala:24:115 -----------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversedFirst\e\
    [0m = maxWordWithMaxChar\n\e[31m\e[31m   |\e[0m                              \
    \                                        "
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length >\
    \ _.length)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMax = maxWordWithMaxCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMax.indexWhere(_\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.map(_.toInt)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWith\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpax4dddy1.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpax4dddy1.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsMaxIndex\e[0m = maxWordWithMaxCharsFirstCharsMaxIndex.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharsMaxIndex is already defined as\
    \ \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpax4dddy1.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsMaxIndex\e[0m = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharsMaxIndex is already defined as\
    \ \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpax4dddy1.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsMaxIndex\e[0m = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstCharsMaxIndex is already defined as\
    \ \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxIndex\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpax4dddy1.scala:20:"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        uniqueChars.foreach(uniqueChar =>\
    \ {\n            val count = uniqueChars(uniqueChar)\n            if (count >\
    \ maxChar(uniqueChar)) {\n                maxChar(uniqueChar) = count\n      \
    \      }\n        })\n        maxChar.keys.toList.sortWith(_ < _).head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv0m9nv7y.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv0m9nv7y.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            maxChars\
    \ += c -> uniqueChars.count(_ == c)\n        })\n        val maxCharsSorted =\
    \ maxChars.toSeq.sortWith((a, b) => a._2 > b._2)\n        val maxCharsSortedFirst\
    \ = maxCharsSorted.head._1\n        val maxCharsSortedSecond = maxCharsSorted.last._1\n\
    \        val maxCharsSortedFirstIndex = words.indexOf(maxCharsSortedFirst)\n \
    \       val maxCharsSortedSecondIndex = words.indexOf(maxCharsSortedSecond)\n\
    \        if (maxCharsSortedFirstIndex < maxCharsSortedSecondIndex) {\n       \
    \     maxCharsSortedFirstIndex\n        } else {\n            maxCharsSortedSecondIndex\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu9dwpan8.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpu9dwpan8.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9dwpan8.scala:25:12 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            maxCharsSortedFirstIndex\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ Found:    (maxCharsSortedFirstIndex : Int)\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9dwpan8.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            maxCharsSortedSecondIndex\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Found:    (maxCharsSortedSecondIndex : Int)\n\e[31m   |\e[0m  \
    \          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c =>\
    \ {\n            val count = uniqueChars.count(_ == c)\n            if (count\
    \ > maxChars(c)) {\n                maxChars(c) = count\n            }\n     \
    \   })\n        maxChars.toList.sortWith(_ < _).head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5i78je1.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpw5i78je1.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        words.foreach(word => {\n       \
    \     word.foreach(char => {\n                val count = uniqueChars(char) +\
    \ 1\n                if (count > maxChar(char))\n                    maxChar(char)\
    \ = count\n            })\n        })\n        maxChar.keys.toList.sortBy(-maxChar.values.toList).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqh0gflc.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqh0gflc.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    uniqueChars(c) = uniqueChars(c) + 1\n               \
    \ } else {\n                    uniqueChars(c) = 1\n                }\n      \
    \      })\n        })\n        uniqueChars.toList.sortWith(_.value > _.value).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp418l8jg8.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp418l8jg8.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009567
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(x => x.distinct).flatten.toSet\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(x\
    \ => x.distinct.size == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length\
    \ > _.length)(0)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortWith(_.length\
    \ < _.length)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder = maxWordWithMaxCharsFirst.sortWith(_.toString\
    \ < _.toString)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrder\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst.sortWith(_.toString\
    \ < _.toString)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyzuogqqj.scala:13:70 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = maxWordWithMaxChars.sortWith(_.length < _.length)\n\e[31m\e[31m   |\e[0m\
    \                                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyzuogqqj.scala:20:139\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\e\
    [0m = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyzuogqqj.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n       \
    \ })\n        val maxKey = maxChars.maxBy(_._2)\n        val maxValue = maxChars(maxKey)\n\
    \        val maxWord = words.find(word => word.count(_ == maxKey) == maxValue)\n\
    \        if (maxWord.isEmpty) \"\"\n        else maxWord.head\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuqbqk5qm.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpuqbqk5qm.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n \
    \       })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.toList.map(c => c.toInt).contains(maxKey.toInt))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpazp5p5ns.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpazp5p5ns.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpazp5p5ns.scala:21:18 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        words.find(\e[36mword\e[0m => word.toList.map(\e\
    [36mc\e[0m => c.toInt).contains(maxKey.toInt))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String,\
    \ Int]()\n        for (word <- words) {\n            val uniqueCharsCount = uniqueChars(word.charAt(0))\n\
    \            if (uniqueCharsCount > maxChar(word.charAt(0))) {\n             \
    \   maxChar(word.charAt(0)) = uniqueCharsCount\n                maxWord(word.charAt(0))\
    \ = word\n            }\n            for (c <- word.chars) {\n               \
    \ uniqueChars(c) = uniqueChars(c) + 1\n            }\n        }\n        maxWord.keys.toList.sortWith((a,\
    \ b) => a.compareTo(b)).head\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa87e_fpq.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa87e_fpq.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa87e_fpq.scala:11:22 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e[35mString\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa87e_fpq.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (c <- word.chars) {\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach\
    \ is not a member of java.util.stream.IntStream - did you mean IntStream.forEach?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char,\
    \ List[String]]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars.getOrElse(c, 0) + 1\n            })\n    \
    \    })\n        uniqueChars.toList.sortWith(_._2 > _._2).head._1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2rxj6xi.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2rxj6xi.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa2rxj6xi.scala:11:23 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e\
    [35mList\e[0m[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m                   \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1 // Increment count if character is present\n          \
    \          case None => uniqueChars(c) = 1 // If character is not present, set\
    \ count to 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm7s4xvma.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \           maxChars(c) += 1\n            })\n        })\n        val maxChar\
    \ = maxChars.maxBy(_._2)._1\n        words.find(word => uniqueChars.count(_ ==\
    \ word.charAt(0)) == maxChars(maxChar))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7q3hsh0.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpf7q3hsh0.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf7q3hsh0.scala:18:18 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        words.find(\e[36mword\e[0m => uniqueChars.count(_\
    \ == word.charAt(\e[31m0\e[0m)) == maxChars(maxChar))\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        uniqueChars.toList.sortWith((a, b)\
    \ => a._2 > b._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzip18tw9.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzip18tw9.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith((a, b) => a.compareTo(b)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n \
    \       val maxWordWithMaxCharsFirstLength = maxWordWithMaxCharsFirst.length\n\
    \        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.toChar)\n\
    \        val maxWordWithMaxCharsFirstCharsLength = maxWordWithMaxCharsFirstChars.length\n\
    \        val maxWordWithMaxCharsFirstCharsUnique = maxWordWithMaxCharsFirstChars.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueLength = maxWordWithMaxCharsFirstCharsUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUnique = maxWordWithMaxCharsFirstCharsUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueLength = maxWordWithMaxCharsFirstCharsUniqueUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUnique = maxWordWithMaxCharsFirstCharsUniqueUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueLength = maxWordWithMaxCharsFirstCharsUniqueUniqueUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueLength = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUnique = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueLength\
    \ = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUnique\
    \ = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUniqueLength\
    \ = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptao4aws9.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptao4aws9.scala:14:70\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstLength\e[0m = maxWordWithMaxCharsFirst.length\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptao4aws9.scala:15:69\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstChars\e[0m = maxWordWithMaxCharsFirst.map(_.toChar)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value map is not a\
    \ member of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptao4aws9.scala:23:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique\e[0m = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique.distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptao4aws9.scala:25:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUnique\e[0m = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUnique.distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUnique\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m l"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        uniqueChars.foreach(char => {\n \
    \           val count = uniqueChars(char)\n            if (count > maxChar(char))\n\
    \                maxChar(char) = count\n        })\n        maxChar.keys.toList.sortWith(_\
    \ < _).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t0o_ccj.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t0o_ccj.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009572
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxWordIndex = words.indexOf(maxWord)\n        if (maxWordIndex ==\
    \ 0) \"No words have maximum number of unique characters\"\n        else maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbuvdw1q7.scala:19)\n\tat Problem.main(tmpbuvdw1q7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += (char -> 1)\n            })\n        })\n        val\
    \ maxKey = uniqueChars.maxBy(_._2)._1\n        val maxValue = uniqueChars.maxBy(_._2)._2\n\
    \        words.find(word => word.contains(maxKey))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeox3rxwf.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeox3rxwf.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        words.find(\e[36mword\e\
    [0m => word.contains(maxKey))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009576
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars(char) match\
    \ {\n                    case Some(count) => uniqueChars(char) = uniqueChars(char)\
    \ + count\n                    case None => uniqueChars(char) = uniqueChars(char)\
    \ + 1\n                }\n            })\n        })\n        uniqueChars.toList.sortWith(_._2\
    \ > _._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfkeudw4.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfkeudw4.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).mkString(\"\
    \")\n        val maxWord = words.filter(_.toCharArray.forall(c => c == maxChars)).head\n\
    \        val maxWordWithMaxCount = words.filter(_.toCharArray.forall(c => c ==\
    \ maxChars && c != maxWord.toCharArray(0))).head\n        val maxWordWithMaxCountAndMaxChars\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWord = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars && c != maxWord.toCharArray(0)))\n        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars && c != maxWord.toCharArray(0)))\n        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpro931j0r.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpro931j0r.scala:12:37\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmaxChars\e[0m = counts.filter(_._2 == maxCount).map(_._1).mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Values of types Int and (Char, Int) cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpro931j0r.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(_.toCharArray.forall(\e\
    [36mc\e[0m => c == maxChars)).head\n\e[31m\e[31m   |\e[0m                    \
    \                                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpro931j0r.scala:14:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCount\e[0m\
    \ = words.filter(_.toCharArray.forall(\e[36mc\e[0m => c == maxChars && c != maxWord.toCharArray(\e\
    [31m0\e[0m))).head\n\e[31m\e[31m   |\e[0m                                    \
    \                                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpro931j0r.scala:14:115 ----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCount\e[0m\
    \ = words.filter(_.toCharArray.forall(\e[36mc\e[0m => c == maxChars && c != maxWord.toCharArray(\e\
    [31m0\e[0m))).head\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mmethod\e[0m \e[35mtoCharArray\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m: (): Array[Char]\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpro931j0r.scala:15:84 -----------"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        val maxWord = mutable.Map[String, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                val count = maxChars.getOrElse(char,\
    \ 0)\n                maxChars += (char, count + 1)\n            })\n        })\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         val count = maxChars.getOrElse(char, 0)\n                if (count >\
    \ maxChars.getOrElse(char, 0))\n                    maxChars += (char, count)\n\
    \            })\n        })\n        val maxCount = maxChars.values.max\n    \
    \    val maxCharList = maxChars.filter(_._2 == maxCount).map(_._1)\n        val\
    \ maxWordList = maxCharList.map(word => word -> maxChars.get(word))\n        val\
    \ maxWord = maxWordList.maxBy(_._2)\n        if (maxWord._2 > maxWordList.length)\n\
    \            maxWord._1\n        else\n            findMax(maxWordList)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo3tpmlw9.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = maxWordList.maxBy(_._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo3tpmlw9.scala:9:23 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                       Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo3tpmlw9.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgcpdza6.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).head\n        val maxWordWithMaxChars = words.filter(_.length\
    \ == maxChars).sortBy(_.length).headOption.getOrElse(\"\")\n        val maxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).headOption.getOrElse(\"\")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord =\
    \ words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\"\
    )\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg1jcpybt.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpg1jcpybt.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length >\
    \ _.length)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMax = maxWordWithMaxCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMax.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n     \
    \   val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvrvttf9b.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvrvttf9b.scala:14:75\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstChars\e[0m = maxWordWithMaxCharsFirst.map(_.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \       value length is not a member of Char\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpvrvttf9b.scala:18:60 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMax\e\
    [0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMax\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvrvttf9b.scala:19:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst\e[0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvrvttf9b.scala:20:70\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars\e[0m = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) == 1)\n\
    \        val maxWordWithMaxChars = words.filter(word => word.count(_ == maxChars)\
    \ == 1)\n        val maxWordWithMaxCharsFirst = words.filter(word => word.count(_\
    \ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexico\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmponory10t.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmponory10t.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\e\
    [0m = words.filter(\e[36mword\e[0m => word.count(_ == maxChars) == \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmponory10t.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(word => word.distinct).flatten\n\
    \        val maxChars = uniqueChars.max\n        uniqueChars.find(word => word\
    \ == maxChars).getOrElse(\"No word with max number of unique characters\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbu1k6y94.scala:11:60\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        uniqueChars.find(\e[36mword\e\
    [0m => word == maxChars).getOrElse(\e[31m\"No word with max number of unique characters\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Matchable\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0) { (maxCount,\
    \ word) =>\n            val count = word.distinct.length\n            if (count\
    \ > maxCount) count else maxCount\n        }\n        val maxWord = words.find(_.distinct.length\
    \ == maxCount)\n        if (maxWord.isDefined) maxWord.get\n        else words.sortBy(_.distinct).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccptzh2b.scala:19)\n\tat Problem.main(tmpccptzh2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(word => word.distinct).flatten.toSet\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) > 0).head\n        val maxWordWithMaxChars = words.filter(word\
    \ => word.count(_ == maxChars) == maxChars).head\n        val maxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0 && word.count(_ == maxChars) == maxChars).head\n        val\
    \ maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord = words.filter(word => word.count(_\
    \ == maxChars) == maxChars && word.count(_ == maxChars) > 0 && word.count(_ ==\
    \ maxChars) == maxChars && word.count(_ == maxChars) > 0).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ ==\
    \ maxChars) > 0 && word.count(_ == maxChars) == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ ==\
    \ maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ == maxChars)\
    \ > 0).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ ==\
    \ maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ == maxChars)\
    \ > 0 && word.count(_ == maxChars) == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzbpn553a.scala:19:199 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\e\
    [0m = words.filter(\e[36mword\e[0m => word.count(_ == maxChars) == maxChars &&\
    \ word.count(_ == maxChars) > \n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzbpn553a.scala:20:5 ---------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.count(_ == maxChar) == uniqueChars.size).getOrElse(\"No word with max\
    \ number of unique characters\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4qkr_56w.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4qkr_56w.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        counts.max\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58w2a5oc.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        counts.max\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e\
    [31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        var maxCount = 0\n        var maxWord = \"\"\n        for (word <- words)\
    \ {\n            val charCount = word.map(c => c.toInt).foldLeft(0)(_ + _)\n \
    \           if (charCount > maxCount) {\n                maxCount = charCount\n\
    \                maxWord = word\n            }\n            uniqueChars ++= word.map(c\
    \ => c.toInt)\n        }\n        if (maxCount == 0) {\n            return \"\"\
    \n        }\n        if (maxCount == 1) {\n            return maxWord\n      \
    \  }\n        val sortedUniqueChars = uniqueChars.toSeq.sortWith(_ < _)\n    \
    \    val sortedWords = words.sortWith(_ < _)\n        if (sortedUniqueChars.head\
    \ < sortedWords.head) {\n            return findMax(sortedWords)\n        } else\
    \ {\n            return findMax(sortedUniqueChars)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6liwwwhl.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).max\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).min\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordIndex.max)\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).max\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).min\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).max\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordIndex.max)\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).min\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).max\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).min\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordIndex.max)\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).max\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).min\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex.min(maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp34r824t8.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp34r824t8.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordIndex\e[0m = maxWordIndex.min(maxWordIndex.max)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp34r824t8.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e[36mword\e\
    [0m => word.distinct.length == maxCount).max\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp34r824t8.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp34r824t8.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex.min(maxWordIndex.max)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloade"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n        })\n        uniqueChars.toList.sortWith(_.value > _.value).last.key\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphvuku5sr.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphvuku5sr.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            uniqueChars.remove(c)\n            maxChars += c\n       \
    \ })\n        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n\
    \            maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n\
    \            uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpeu86bznh.scala:97:28 ---------------------------\e\
    [0m\e[0m\n\e[31m97 |\e[0m        uniqueChars.foreach(\n\e[31m\e[31m   |\e[0m \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeu86bznh.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeu86bznh.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeu86bznh.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        uniqueChars.foreach {\n         \
    \   case (char, count) =>\n                maxChar = if (count > maxChar.getOrElse(char,\
    \ 0))\n                    char -> count\n                else\n             \
    \       maxChar\n        }\n        maxChar.foreach {\n            case (char,\
    \ count) =>\n                uniqueChars += (char -> count)\n        }\n     \
    \   uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ygypkyb.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ygypkyb.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val counts = chars.groupBy(identity).mapValues(_.length)\n        val\
    \ maxCount = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxWord = words.filter(w => maxChars.contains(w.toCharArray)).head\n\
    \        val maxCharsString = maxChars.mkString(\"\")\n        val maxWordString\
    \ = words.filter(w => w.toCharArray.forall(c => maxCharsString.contains(c.toString))).head\n\
    \        val maxWordString = maxWordString.replaceAll(\"\\\\s\", \"\")\n     \
    \   val maxWordString = maxWordString.replaceAll(\"\\\\W\", \"\")\n        val\
    \ maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\
    \\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\"\
    , \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\
    \\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString =\
    \ maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\"\
    )\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\", \"\"\
    ).replaceAll(\"\\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\
    \\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString =\
    \ maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\"\
    )\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\", \"\"\
    ).replaceAll(\"\\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\
    \\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString =\
    \ maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\"\
    )\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\", \"\"\
    ).replaceAll(\"\\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\
    \\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString =\
    \ maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\"\
    )\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpf8hm3cjn.scala:31:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = maxWordString.replaceAll(\"\
    \\\\p{Punct\n\e[31m\e[31m   |\e[0m                                           \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \      unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpf8hm3cjn.scala:33:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpf8hm3cjn.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = maxWordString.replaceAll(\e\
    [31m\"\\\\s\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf8hm3cjn.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = maxWordString.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordString is already defined as \e[33mvalue\e[0m \e[35mmaxWordString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf8hm3cjn.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordString\e[0m = maxWordString.replaceAll(\e\
    [31m\"\\\\p{Punct}\"\e[0m, \e[31m\"\"\e[0m).replaceAll(\e[31m\"\\\\W\"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n        })\n        uniqueChars.toSeq.sortWith((a, b) => a._2 > b._2).head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjo66pwge.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjo66pwge.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = maxChars.getOrElse(c, 0) + 1 \n            maxChars += c -> count\n      \
    \  })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2 > _._2)\n   \
    \     val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey\
    \ = maxCharsSortedFirst._1\n        val maxCharsSortedFirstValue = maxCharsSortedFirst._2\n\
    \        val maxCharsSortedFirstIndex = words.indexOf(maxCharsSortedFirstKey)\n\
    \        val maxCharsSortedFirstWord = words(maxCharsSortedFirstIndex)\n     \
    \   val maxCharsSortedFirstWordLength = maxCharsSortedFirstWord.length\n     \
    \   val maxCharsSortedFirstWordChars = maxCharsSortedFirstWord.substring(0,maxCharsSortedFirstWordLength)\n\
    \        val maxCharsSortedFirstWordCharsLength = maxCharsSortedFirstWordChars.length\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordChars.toSet.size\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp518pvvb9.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp518pvvb9.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSortedFirstWordCharsCount\e[0m =\
    \ maxCharsSortedFirstWordCharsCount.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstWordCharsCount is already defined as \e\
    [33mvalue\e[0m \e[35mmaxCharsSortedFirstWordCharsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp518pvvb9.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharsSortedFirstWordCharsCount\e[0m = maxCharsSortedFirstWordCharsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstWordCharsCount is already defined as \e\
    [33mvalue\e[0m \e[35mmaxCharsSortedFirstWordCharsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp518pvvb9.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharsSortedFirstWordCharsCount\e[0m = maxCharsSortedFirstWordCharsCount.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxCharsSortedFirstWordCharsCount is already defined as \e\
    [33mvalue\e[0m \e[35mmaxCharsSortedFirstWordCharsCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp518pvvb9.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval"
  stdout: ''
  timestamp: 1660009583
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = uniqueChars.count(_ == char)\n            if (count > maxChars(char))\
    \ {\n                maxChars(char) = count\n            }\n        })\n     \
    \   val maxCharsKey = maxChars.keys.max\n        val maxCharsValue = maxChars(maxCharsKey)\n\
    \        words.find(word => maxChars(word.charAt(0)) == maxCharsValue)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp40w7xx8.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp40w7xx8.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp40w7xx8.scala:24:18 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        words.find(\e[36mword\e[0m => maxChars(word.charAt(\e\
    [31m0\e[0m)) == maxCharsValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        val maxWord = mutable.HashMap[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            maxChars(char) = uniqueChars.count(_ == char)\n        })\n\
    \        uniqueChars.foreach(char => {\n            val count = maxChars(char)\n\
    \            if (count > maxChars(char)) {\n                maxChars(char) = count\n\
    \                maxWord(words) = word\n            }\n        })\n        maxWord(words)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46unsm2q.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp46unsm2q.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp46unsm2q.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                if (uniqueChars.contains(char))\
    \ {\n                    uniqueChars(char) += 1\n                } else {\n  \
    \                  uniqueChars(char) = uniqueChars(char) + 1\n               \
    \ }\n            })\n        })\n        uniqueChars.toList.sortWith((a, b) =>\
    \ b._2 - a._2).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeih0k_ew.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeih0k_ew.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009582
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += (c -> uniqueChars.getOrElse(c, 0) + 1)\n            })\n\
    \        })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg55lds3v.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009584
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n\
    \        val maxCount = words.map(_.length).max\n        val maxChars = chars.max\n\
    \        val maxWord = words.find(w => w.length == maxCount && w.toCharArray.forall(c\
    \ => chars.contains(c)))\n        if (maxWord.isEmpty) words.head\n        else\
    \ maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg_d7ogu8.scala:14:13\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m maxWord\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    (maxWord : Option[String])\n\e[31m   |\e[0m             Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.Array[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars += c\n        })\n        uniqueChars.foreach(c =>\
    \ {\n            if (maxChars.contains(c)) {\n                maxWord += word\n\
    \            }\n        })\n        if (maxWord.length > 1) {\n            maxWord.sortWith((x,\
    \ y) => x.compareTo(y))(0)\n        } else {\n            maxWord(0)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz1lbrnzf.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpz1lbrnzf.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpz1lbrnzf.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Array[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n       \
    \ })\n        val maxKey = maxChars.maxBy(_._2)\n        val maxValue = maxChars(maxKey)\n\
    \        val maxWord = words.filter(w => w.count(_ == maxKey) == maxValue).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex + 1\n        val maxWord = words.filter(w => w.count(_ == maxKey)\
    \ == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcn53vg8l.scala:50:41 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcn53vg8l.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordIndex\e[0m = maxWordIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxWordIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcn53vg8l.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWord\e[0m = words.filter(\e[36mw\e[0m => w.count(_ == maxKey) == maxValue).head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcn53vg8l.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcn53vg8l.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n \
    \       })\n        val maxKey = maxChars.maxBy(_._2)._1\n        val maxValue\
    \ = maxChars.maxBy(_._2)._2\n        words.find(word => word.contains(maxKey)).getOrElse(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzazmhr6.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppzazmhr6.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += (c -> 1)\n            })\n        })\n        val maxKey\
    \ = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.contains(maxKey))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ixg1kz0.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ixg1kz0.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.find(\e[36mword\e\
    [0m => word.contains(maxKey))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars.getOrElseUpdate(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => b._2 - a._2).head._1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3lrvxlk.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3lrvxlk.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxChars = words.filter(_.length ==\
    \ maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord =\
    \ words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxChars = words.filter(_.length\
    \ == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length ==\
    \ maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChar\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpra0uthoz.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpra0uthoz.scala:19:384\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\e\
    [0m = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChar\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                      ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                             Not found: maxChar\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpra0uthoz.scala:20:5 ---------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.foldLeft(Set.empty[Char])((uniqueChars,\
    \ word) => uniqueChars ++ word.distinct)\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.find(word => word.count(_ == maxChars) == uniqueChars.size)\n\
    \        if (maxWord.isEmpty) \"\"\n        else maxWord.head\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx0peqebp.scala:16)\n\tat Problem.main(tmpx0peqebp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[Char,\
    \ String]()\n        words.foreach(word => {\n            word.foreach(char =>\
    \ {\n                uniqueChars += (char -> 1)\n            })\n        })\n\
    \        uniqueChars.foreach {\n            case (char, count) =>\n          \
    \      maxChars += (char -> count)\n        }\n        maxChars.foreach {\n  \
    \          case (char, count) =>\n                if (count > maxChars(char))\
    \ {\n                    maxChars(char) = count\n                    maxWord(char)\
    \ = word\n                }\n        }\n        maxWord(maxChars.keys.head)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdia4q2e.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdia4q2e.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsdia4q2e.scala:11:22 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e[35mChar\e[0m, \e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1;\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpic2ti1x2.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009561
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char,\
    \ 1) // Increment the count of unique chars\n            })\n        })\n    \
    \    uniqueChars.foreach(char => {\n            val count = uniqueChars(char)\
    \ // Get the count of unique chars\n            if (count > maxChars(char)) {\n\
    \                maxChars(char) = count // Update the max count of unique chars\n\
    \            }\n        })\n        val maxChar = maxChars.maxBy(_._2) // Get\
    \ the max count of unique chars\n        val maxWord = words.find(word => word.count(_\
    \ == maxChar) == maxChars(maxChar))\n        if (maxWord.isEmpty) \"\" else maxWord.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80byrme5.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80byrme5.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) += 1\n            })\n        })\n        val maxKey = uniqueChars.maxBy(_._2)._1\n\
    \        words.find(word => word.contains(maxKey))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgyq0spm.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzgyq0spm.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.find(\e[36mword\e\
    [0m => word.contains(maxKey))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count(_\
    \ == chars.max)\n        if (maxCount > 1) {\n            val sortedWords = words.sortWith(_.length\
    \ < _.length)\n            val firstWord = sortedWords.head\n            val firstChars\
    \ = firstWord.toCharArray\n            val firstUniqueChars = firstChars.distinct\n\
    \            if (firstUniqueChars.count(_ == firstChars.max) > 1) {\n        \
    \        firstWord\n            } else {\n                findMax(sortedWords.tail)\n\
    \            }\n        } else {\n            uniqueChars.head\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsog4cajt.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            uniqueChars.head\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Found:    Char\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxChars.sortBy(_.charAt(0))\n        val maxWordWithMaxCharsSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstChar.reverse\n        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversed.sortBy(_.charAt(0))\n       \
    \ val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversed =\
    \ maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstChar.reverse\n    \
    \    val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversed.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplvvrkokf.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmplvvrkokf.scala:12:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ < words.indexOf(_))\n\e[31m\e[31m   |\e[0m                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplvvrkokf.scala:23:5 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        words.foreach(word => {\n       \
    \     word.foreach(char => {\n                val count = uniqueChars(char)\n\
    \                if (count > maxChar(char)) {\n                    maxChar(char)\
    \ = count\n                }\n            })\n        })\n        val maxChars\
    \ = maxChar.filter(_._2 > 1).map(_._1)\n        if (maxChars.isEmpty) \"\"\n \
    \       else maxChars.head\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xpf9yyo.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xpf9yyo.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count(_\
    \ == chars.max)\n        val maxChar = uniqueChars.max\n        val maxWord =\
    \ words.filter(_.toCharArray.contains(maxChar))\n        if (maxCount == 1) maxWord.head\n\
    \        else if (maxCount == 2) maxWord.head\n        else maxWord.sortBy(_.length).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_mc1p_h1.scala:20)\n\tat Problem.main(tmp_mc1p_h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars(char) +=\
    \ 1\n            })\n        })\n        words.foreach(word => {\n           \
    \ word.foreach(char => {\n                val count = uniqueChars(char)\n    \
    \            if (count > maxChar(char)) {\n                    maxChar(char) =\
    \ count\n                }\n            })\n        })\n        val maxCount =\
    \ maxChar.values.max\n        val maxChars = maxChar.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxWord = words.find(word => maxChars.contains(word))\n        if\
    \ (maxWord.isEmpty) {\n            \"\"\n        } else {\n            maxWord.get\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_3eh5ox.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm_3eh5ox.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars(char) match {\n                    case Some(count) => uniqueChars(char)\
    \ = uniqueChars(char) + 1;\n                    case None => uniqueChars(char)\
    \ = uniqueChars(char) + 1;\n                }\n            })\n        })\n  \
    \      uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18nni8t9.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009552
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) += 1\n  \
    \          })\n        })\n        uniqueChars.toSeq.sortWith(_._2 > _._2).head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ky_d930.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ky_d930.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordCount = counts.filter(word\
    \ => word == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgai4q_i4.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgai4q_i4.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e[36mword\e\
    [0m => word.distinct.length == maxWordCount).head\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgai4q_i4.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgai4q_i4.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgai4q_i4.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filte"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        var maxCount = 0\n        var maxWord = \"\"\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n            uniqueChars.toList.sortWith(_ < _).foreach(c => {\n\
    \                if (uniqueChars.count(_ == c) > maxCount) {\n               \
    \     maxCount = uniqueChars.count(_ == c)\n                    maxWord = word\n\
    \                }\n            })\n        })\n        maxWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvge26jon.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String,\
    \ Int]()\n        for (word <- words) {\n            val uniqueCharsCount = word.distinct().length\n\
    \            val maxCharsCount = uniqueCharsCount.max\n            if (maxCharsCount\
    \ > maxChars(maxCharsCount)) {\n                maxChars(maxCharsCount) = uniqueCharsCount\n\
    \                maxWord(word) = maxCharsCount\n            }\n        }\n   \
    \     maxWord.keys.toList.sortBy(_._1).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2sub4tw.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpk2sub4tw.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk2sub4tw.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpk2sub4tw.scala:13:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36muniqueCharsCount\e[0m\
    \ = word.distinct().length\n\e[31m\e[31m   |\e[0m                            \
    \       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing argument for parameter i\
    \ of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n4 errors found\n"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n \
    \       })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b) => b._2\
    \ > a._2)\n        val maxCharsSorted = maxCharsSorted.head._1\n        words.find(word\
    \ => word.toString.contains(maxCharsSorted))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgt6qgf1h.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsSorted\e[0m = maxCharsSorted.head._1\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmaxCharsSorted is already defined as \e[33mvalue\e[0m \e[35mmaxCharsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpgt6qgf1h.scala:9:26 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgt6qgf1h.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgt6qgf1h.scala:22:18 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        words.find(\e[36mword\e[0m => word.toString.contains(maxCharsSorted))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars.getOrElse(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vf2ujbh.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9vf2ujbh.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        words.foreach(word => {\n       \
    \     word.foreach(char => {\n                val count = uniqueChars(char)\n\
    \                if (count > maxChars(char)) {\n                    maxChars(char)\
    \ = count\n                }\n            })\n        })\n        val maxCharsKey\
    \ = maxChars.keys.toList.sortBy(_._1).head\n        val maxCharsValue = maxChars.values.toList.sortBy(_._1).head\n\
    \        val maxCharsKeyString = maxCharsKey.mkString(\"\")\n        val maxCharsValueString\
    \ = maxCharsValue.mkString(\"\")\n        if (maxCharsValueString.length > maxCharsKeyString.length)\
    \ {\n            maxCharsKeyString\n        } else {\n            maxCharsValueString\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpabhbrkeh.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpabhbrkeh.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.charAt(0)\n        val maxWordWithMaxCharsFirstCharCount\
    \ = maxWordWithMaxCharsFirst.count(_ == maxWordWithMaxCharsFirstChar)\n      \
    \  val maxWordWithMaxCharsFirstCharCountInWords = maxWordWithMaxCharsFirstCharCount.toInt\n\
    \        val maxWordWithMaxCharsFirstCharCountInWordsLessThanMaxChars = maxWordWithMaxCharsFirstCharCountInWords\
    \ < maxChars\n        if (maxWordWithMaxCharsFirstCharCountInWordsLessThanMaxChars)\
    \ {\n            maxWordWithMaxCharsFirstCharCountInWordsLessThanMaxChars\n  \
    \      } else {\n            maxWordWithMaxCharsFirstCharCountInWords\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxfyqfrp7.scala:19:12\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            maxWordWithMaxCharsFirstCharCountInWordsLessThanMaxChars\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (maxWordWithMaxCharsFirstCharCountInWordsLessThanMaxChars\
    \ : Boolean)\n\e[31m   |\e[0mRequired: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxfyqfrp7.scala:21:12 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            maxWordWithMaxCharsFirstCharCountInWords\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Found:    (maxWordWithMaxCharsFirstCharCountInWords\
    \ : Int)\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009597
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWords = words.filter(w => w.toCharArray.distinct.length == maxChars)\n\
    \        val maxWord = maxWords.head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordChars = maxWord.map(_.toChar).distinct.length\n        val\
    \ maxWordCharsIndex = maxWord.zipWithIndex.maxBy(_._2)._1\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + 1\n        val maxWordCharsIndex = maxWordCharsIndex %\
    \ maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n\
    \        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex % maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ + maxWordLength\n        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n\
    \        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + maxWordLength\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ % maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n\
    \        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex % maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ + maxWordLength\n        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n\
    \        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + maxWordLength\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ % maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n\
    \        val maxWordCharsIndex = maxWordCharsIndex % \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprf84zm88.scala:40:51 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharsIndex\e[0m =\
    \ maxWordCharsIndex % \n\e[31m\e[31m   |\e[0m                                \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprf84zm88.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharsIndex\e[0m =\
    \ maxWordCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprf84zm88.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharsIndex\e[0m =\
    \ maxWordCharsIndex % maxWord.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprf84zm88.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordCharsIndex\e[0m =\
    \ maxWordCharsIndex + maxWordLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsIndex is already defined as \e[33mvalue\e[0m \e\
    [35mmaxWordCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprf84zm88.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e"
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars(char) match\
    \ {\n                    case Some(count) => uniqueChars(char) = uniqueChars(char)\
    \ + count\n                    case None => uniqueChars(char) = uniqueChars(char)\
    \ + 1\n                }\n            })\n        })\n        uniqueChars.toSeq.sortBy(_._2).last._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsidmbjlg.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsidmbjlg.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten.toSet\n\
    \        val uniqueChars = chars.toList\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(w => w.toCharArray.distinct.size == maxChars)\n\
    \        val maxWordString = maxWord.mkString(\" \")\n        val maxWordLength\
    \ = maxWordString.length\n        val maxWordChars = maxWordString.toCharArray\n\
    \        val maxWordCharsLength = maxWordChars.length\n        val maxWordCharsCount\
    \ = maxWordChars.distinct.length\n        if (maxWordCharsLength > maxWordLength)\
    \ {\n            val maxWordCharsIndex = maxWordChars.indexOf(maxWordCharsCount)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndex + maxWordCharsLength\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsLength)\n            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph05rgraf.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph05rgraf.scala:21:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mmaxWordCharsIndexString\e[0m = maxWordCharsIndexString.substring(\e\
    [31m0\e[0m, maxWordCharsLength)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsIndexString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordCharsIndexString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmph05rgraf.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmaxWordCharsIndexString\e\
    [0m = maxWordCharsIndexString.substring(\e[31m0\e[0m, maxWordCharsIndexString.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsIndexString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordCharsIndexString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmph05rgraf.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mmaxWordCharsIndexString\e\
    [0m = maxWordCharsIndexString.substring(\e[31m0\e[0m, maxWordCharsIndexString.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordCharsIndexString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordCharsIndexString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += (c -> 1)\n\
    \            })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) match {\n                    case Some(count)\
    \ => maxChar(count) match {\n                        case Some(max) => if (count\
    \ > max) count else max\n                        case None => count\n        \
    \            }\n                    case None => maxChar(uniqueChars(c))\n   \
    \             }\n            })\n        })\n        val maxCount = maxChar.values.max\n\
    \        val maxChars = maxChar.filter(_._2 == maxCount).map(_._1)\n        val\
    \ maxWord = words.filter(w => maxChars.contains(w))\n        val maxWordWithMaxCount\
    \ = maxWord.filter(w => w.count(_ == maxCount) == maxCount)\n        val maxWordWithMaxCountWithFirstChar\
    \ = maxWordWithMaxCount.map(w => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstChar.map(w => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstChar.map(w => w.take(1))\n      \
    \  val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstChar.map(w\
    \ => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar.map(w\
    \ => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar.map(w\
    \ => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar.map(w\
    \ => w.take\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpia1y00rp.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpia1y00rp.scala:9:26\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36muniqueChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpia1y00rp.scala:10:22 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpia1y00rp.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                        \e[33mcase\e[0m Some(max) =>\
    \ \e[33mif\e[0m (count > max) count \e[33melse\e[0m max\n\e[31m\e[31m   |\e[0m\
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                           Not found: count\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpia1y00rp.scala:20:59 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                        \e[33mcase\e[0m Some(max) =>\
    \ \e[33mif\e[0m (count > max) count \e[33melse\e[0m max\n\e[31m\e[31m   |\e[0m\
    \                                                           ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: count\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpia1y00rp.scala:21:37\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                        \e\
    [33mcase\e["
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars += c -> (maxChars.getOrElse(c, 0) + 1)\n            })\n\
    \        })\n        val maxCharsCount = maxChars.values.max\n        val maxCharsKey\
    \ = maxChars.keys.max\n        val maxCharsValue = maxChars.values.max\n     \
    \   val maxCharsKeyValue = maxChars.keys.max -> maxChars.values.max\n        val\
    \ maxCharsKeyValueKey = maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\n\
    \        val maxCharsKeyValueKeyValue = maxChars.keys.max -> maxChars.values.max\
    \ -> maxChars.keys.max -> maxChars.values.max\n        val maxCharsKeyValueKeyValueKey\
    \ = maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max\
    \ -> maxChars.keys.max\n        val maxCharsKeyValueKeyValueKeyValue = maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\
    \ -> maxChars.values.max\n        val maxCharsKeyValueKeyValueKeyValueKey = maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max\n        val maxCharsKeyValueKeyValueKeyValueKeyValue\
    \ = maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max\
    \ -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max\n\
    \        val maxCharsKeyValueKeyValueKeyValueKeyValueKey = maxChars.keys.max ->\
    \ maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\n\
    \        val maxCharsKeyValueKeyValueKeyValueKeyValueKeyValue = maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp22vhr6n1.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp22vhr6n1.scala:9:26 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e[35mChar\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp22vhr6n1.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp22vhr6n1.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndex + 1)\n   \
    \     val maxWordWithMaxCharsIndexInLexInLex = words.indexOf(maxWordWithMaxChars.max,\
    \ maxWordWithMaxCharsIndexInLex + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLex = words.indexOf(maxWordWithMaxChars.max,\
    \ maxWordWithMaxCharsIndexInLexInLexInLex + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLex = words.indexOf(maxWordWithMaxChars.max,\
    \ maxWordWithMaxCharsIndexInLexInLexInLexInLexInLex + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLex\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyd00zh6a.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpyd00zh6a.scala:12:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m                            \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyd00zh6a.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder = maxWordWithMaxCharsFirst.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrder.sortWith(_.compareTo(_) < 0)(0)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexico\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2i__dk7t.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2i__dk7t.scala:14:86\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsFirstInLexicographicalOrder\e[0m = maxWordWithMaxCharsFirst.sortWith(_.compareTo(_)\
    \ < \e[31m0\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value sortWith is not a member\
    \ of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2i__dk7t.scala:17:127 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\e\
    [0m = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < \e[31m0\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp2i__dk7t.scala:18:149 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\e\
    [0m = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < \e[31m0\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                       "
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars.max)\n        val maxWordWithMaxCharsIndexInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndex).max\n        val maxWordWithMaxCharsIndexInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrder).max\n        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrder).max\n        val\
    \ maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrder = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpysns0fz5.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpysns0fz5.scala:12:47\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n\e[31m\e[31m   |\e[0m                            \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysns0fz5.scala:22:143\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\e\
    [0m = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLex\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysns0fz5.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars.getOrElseUpdate(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => b._2 - a._2).head._1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3lrvxlk.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3lrvxlk.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        val maxWord = mutable.Array[String]()\n\
    \        for (word <- words) {\n            val chars = word.distinct\n      \
    \      uniqueChars ++= chars\n            for (c <- chars) {\n               \
    \ val count = uniqueChars.count(_ == c)\n                if (count > maxChars(c))\
    \ {\n                    maxChars(c) = count\n                    maxWord(0) =\
    \ word\n                }\n            }\n        }\n        if (maxChars.size\
    \ == 1) {\n            return maxWord(0)\n        }\n        val maxCharsMap =\
    \ maxChars.toMap\n        val maxWords = words.filter(word => maxCharsMap(word.distinct).isDefined).sortBy(word\
    \ => maxCharsMap(word.distinct).get)\n        if (maxWords.size == 1) {\n    \
    \        return maxWords(0)\n        }\n        val maxWordsMap = maxWords.toMap\n\
    \        val maxWordsMapKeys = maxWordsMap.keys\n        val maxWordsMapValues\
    \ = maxWordsMap.values.toList\n        val maxWordsMapValuesWithMaxCount = maxWordsMapValues.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValuesWithMaxCountWithMaxCount\
    \ = maxWordsMapValuesWithMaxCount.filter(_.toList.size == maxCharsMap.values.toList.size)\n\
    \        val maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCount = maxWordsMapValuesWithMaxCountWithMaxCount.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCount.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCount.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValue\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph5_ayabq.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph5_ayabq.scala:9:26\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36muniqueChars\e[0m = mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                          ^^^^^^^\e[0m\n\e[31m  |\e[0m                      \
    \    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph5_ayabq.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChars\e[0m = mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmph5_ayabq.scala:11:22 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Array[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmph5_ayabq.scala:27:128 ----------------------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxWords\e[0m = words.filter(\e\
    [36mword\e[0m => maxCharsMap(word.distinct).isDefined).sortBy(\e[36mword\e[0m\
    \ => maxCharsMap(word.distinct).get)\n\e[31m\e[31m   |\e[0m                  \
    \                                                                            \
    \                                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mt"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) += 1\n            })\n        })\n        val maxChar =\
    \ uniqueChars.maxBy(_._2)._1\n        words.find(word => word.count(_ == maxChar)\
    \ == uniqueChars(maxChar))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo4qdol6.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwo4qdol6.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.find(\e[36mword\e\
    [0m => word.count(_ == maxChar) == uniqueChars(maxChar))\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.apply(maxWordWithMaxCharsIndex)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 1)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 2)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 3)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 4)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 5)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 6)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 7)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 8)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 9)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 10)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 11)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 12)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 13)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 14)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 15)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 16)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 17)\n        val maxWordWithMaxCharsString = maxWordWithMax\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkugw91u1.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsIndex\e\
    [0m = maxWordWithMaxCharsIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkugw91u1.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = maxWordWithMaxCharsString.substring(\e[31m0\e[0m, maxChars)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkugw91u1.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = maxWordWithMaxCharsString.substring(\e[31m0\e[0m, maxChars - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsString is already defined as \e[33mvalue\e\
    [0m \e[35mmaxWordWithMaxCharsString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkugw91u1.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsString\e\
    [0m = maxWordWithMaxCharsString.substring(\e[31m0\e[0m, maxChars - \e[31m2\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mma"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        words.foreach(word => {\n       \
    \     word.foreach(char => {\n                val count = uniqueChars(char).asInstanceOf[Int]\n\
    \                if (count > maxChar(char).asInstanceOf[Int]) {\n            \
    \        maxChar(char) = count\n                }\n            })\n        })\n\
    \        val maxChars = maxChar.toSeq.sortBy(_._2).reverse\n        val maxChar\
    \ = maxChars.head\n        val maxCharCount = maxChars(maxChar)\n        val maxWord\
    \ = words.find(word => maxCharCount(word) > 0)\n        if (maxWord == null) {\n\
    \            \"\"\n        } else {\n            maxWord\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcdh38hv_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mmaxChar\e[0m = maxChars.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmaxChar\
    \ is already defined as \e[33mvalue\e[0m \e[35mmaxChar\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdh38hv_.scala:9:26\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36muniqueChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcdh38hv_.scala:10:22 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcdh38hv_.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            maxWord\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (maxWord : Option[String])\n\
    \e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count(_\
    \ == chars.max)\n        if(maxCount > 1){\n            uniqueChars.min\n    \
    \    } else {\n            uniqueChars.head\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd334026s.scala:13:12\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            uniqueChars.min\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \     Found:    Char\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd334026s.scala:15:24 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            uniqueChars.head\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Char\n\
    \e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.foldLeft(Map[Char,\
    \ Int]())((map, word) => {\n            val chars = word.map(c => c.toChar)\n\
    \            val count = chars.foldLeft(0)((count, c) => count + map.getOrElse(c,\
    \ 0))\n            map + (chars(0) -> (count + 1))\n        })\n        val maxChars\
    \ = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.count(_ == maxChars)\
    \ == uniqueChars(maxChars))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplgjd7n5w.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        words.find(\e[36mword\e\
    [0m => word.count(_ == maxChars) == uniqueChars(maxChars))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9ewrran.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1 //\
    \ Increment count by 1\n                    case None => uniqueChars(c) = 1 //\
    \ Set count to 1\n                }\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => a._2 > b._2).head._1 // Return first element with max count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe7t9hq2s.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe7t9hq2s.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n  \
    \      val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.takeWhile(_\
    \ != maxWordWithMaxChars.last)\n        val maxWordWithMaxCharsWithFirstChar =\
    \ maxWordWithMaxCharsWithFirstChar.sortWith(_ < _)\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.mkString\n        maxWordWithMaxCharsWithFirstChar\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00tljtg1.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsWithFirstChar\e\
    [0m = maxWordWithMaxCharsWithFirstChar.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsWithFirstChar is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsWithFirstChar\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00tljtg1.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsWithFirstChar\e[0m = maxWordWithMaxCharsWithFirstChar.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsWithFirstChar is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsWithFirstChar\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp00tljtg1.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxCharsWithFirstChar\e[0m = maxWordWithMaxCharsWithFirstChar.mkString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsWithFirstChar is already defined as \e\
    [33mvalue\e[0m \e[35mmaxWordWithMaxCharsWithFirstChar\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp00tljtg1.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        maxWordWithMaxCharsWithFirstChar\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (maxWordWithMaxCharsWithFirstChar : List[String])\n\e[31m\
    \   |\e[0m        Requi"
  stdout: ''
  timestamp: 1660009604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                chars += c\n           \
    \     maxChars(c) = maxChars(c).max(maxChars(c) + 1)\n            })\n       \
    \ })\n        val maxCharsCount = maxChars.values.max\n        val maxCharsKeys\
    \ = maxChars.keys.max\n        val maxCharsValues = maxChars.values.max\n    \
    \    val maxCharsKeysValues = maxCharsKeys.zip(maxCharsValues).max\n        val\
    \ maxCharsKeysValuesKeys = maxCharsKeysValues.keys.max\n        val maxCharsKeysValuesValuesKeys\
    \ = maxCharsKeysValuesValues.keys.max\n        val maxCharsKeysValuesValuesKeysValues\
    \ = maxCharsKeysValuesValuesKeys.zip(maxCharsKeysValuesValuesKeys).max\n     \
    \   val maxCharsKeysValuesValuesKeysValuesValues = maxCharsKeysValuesValuesKeysValues.zip(maxCharsKeysValuesValuesKeysValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValues = maxCharsKeysValuesValuesKeysValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValues = maxCharsKeysValuesValuesKeysValuesValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValues = maxCharsKeysValuesValuesKeysValuesValuesValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValuesValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValues\
    \ = maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValues\
    \ = maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppzbqlh0_.scala:30:108 --------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmaxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzbqlh0_.scala:9:20\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mchars\e[0m = mutable.HashSet[\e[35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m    \
    \                ^^^^^^^\e[0m\n\e[31m  |\e[0m                    Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppzbqlh0_.scala:10:23\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmppzbqlh0_.scala:22:43 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxCharsKeysValuesValuesKeys\e[0m = maxCharsKeysValuesValues.keys.max\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: maxCharsKeysValuesValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppzbqlh0_.scala:28:79\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValues\e[0m\
    \ = maxCharsKeysValuesValuesKeysValuesValuesValuesValuesV"
  stdout: ''
  timestamp: 1660009604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count(_\
    \ == chars.max)\n        val maxWord = words.filter(word => uniqueChars.count(_\
    \ == word.charAt(0)) == maxCount)\n        val maxWordString = maxWord.mkString(\"\
    \ \")\n        val firstWord = words.filter(word => uniqueChars.count(_ == word.charAt(0))\
    \ == 1)\n        val firstWordString = firstWord.mkString(\" \")\n        if (maxWordString.length\
    \ < firstWordString.length) maxWordString else firstWordString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5moxml1c.scala:19)\n\tat Problem.main(tmp5moxml1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxWordCount = words.count(_.toCharArray.contains(maxChars))\n   \
    \     if (maxWordCount == 1) maxWord\n        else findMax(words.filter(_.toCharArray.contains(maxChars)).sortBy(_.toCharArray.indexOf(_)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpi3zbwiqs.scala:15:75 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m findMax(words.filter(_.toCharArray.contains(maxChars)).sortBy(_.toCharArray.indexOf(_)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ Error: /tmp/tmpi3zbwiqs.scala:15:100 ----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m findMax(words.filter(_.toCharArray.contains(maxChars)).sortBy(_.toCharArray.indexOf(_)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxCount = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.length == maxCount).sortBy(_.length).head\n        uniqueChars.contains(maxCount)\
    \ ? maxWord : findMax(words.filter(w => w.length != maxCount))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3h8o21y6.scala:12:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        uniqueChars.contains(maxCount) ? maxWord : \e\
    [35mfindMax\e[0m(words.filter(w => w.length != maxCount))\n\e[31m\e[31m   |\e\
    [0m                                                          ^\e[0m\n\e[31m  \
    \ |\e[0m                                 end of statement expected but '(' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3h8o21y6.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        uniqueChars.contains(maxCount) ? maxWord : \e\
    [35mfindMax\e[0m(words.filter(w => w.length != maxCount))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ ? is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n            uniqueChars.toList.sortWith(_._2 > _._2).headOption.foreach(c\
    \ => {\n                maxChar(c) = uniqueChars(c)\n            })\n        })\n\
    \        maxChar.keys.toList.sortWith(_._2 > _._2).headOption.foreach(c => {\n\
    \            uniqueChars(c)\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyybkyso1.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyybkyso1.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.toList.sortBy(_._2).reverse.headOption.map(_.key).foreach(c\
    \ => {\n            uniqueChars(c) match {\n                case Some(count) =>\
    \ maxChar(c) = count\n                case None => maxChar(c) = 1\n          \
    \  }\n        })\n        uniqueChars.toList.sortBy(_._1).reverse.headOption.map(_.key).foreach(c\
    \ => {\n            uniqueChars(c) match {\n                case Some(count) =>\
    \ maxWord(words) = count\n                case None => maxWord(words) = 1\n  \
    \          }\n        })\n        maxWord(words).foreach(w => println(w))\n  \
    \      maxChar(maxChar.toList.sortBy(_._2).reverse.headOption.map(_.key).headOption)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp66yuajw_.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp66yuajw_.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp66yuajw_.scala:11:22 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e[35mString\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.count(\"a\"))\n        val maxWord = words.filter(word\
    \ => word.count(\"a\") == maxCount).head\n        val maxWordCount = maxWord.count(\"\
    a\")\n        val maxWordWithMaxCount = words.filter(word => word.count(\"a\"\
    ) == maxWordCount).head\n        val maxWordWithMaxCountWithMaxWord = words.filter(word\
    \ => word.count(\"a\") == maxWordWithMaxCount).head\n        val maxWordWithMaxCountWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWord = words.filter(word\
    \ => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWord).head\n  \
    \      val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWord = words.filter(word\
    \ => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnzxtop9h.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnzxtop9h.scala:9:77 ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m\
    \        \e[33mval\e[0m \e[36mmaxCount\e[0m = words.foldLeft(\e[31m0\e[0m)((\e\
    [36mcount\e[0m, \e[36mword\e[0m) => count + word.count(\e[31m\"a\"\e[0m))\n\e\
    [31m\e[31m  |\e[0m                                                           \
    \                  ^^^\e[0m\n\e[31m  |\e[0m                                  \
    \               Found:    (\e[32m\"a\"\e[0m : String)\n\e[31m  |\e[0m        \
    \                                         Required: Char => Boolean\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnzxtop9h.scala:10:54 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.count(\e[31m\"a\"\e[0m) == maxCount).head\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (\e[32m\"a\"\
    \e[0m : String)\n\e[31m   |\e[0m                                             \
    \  Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnzxtop9h.scala:11:41 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordCount\e[0m = maxWord.count(\e[31m\"\
    a\"\e[0m)\n\e[31m\e[31m   |\e[0m                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (\e[32m\"\
    a\"\e[0m : String)\n\e[31m   |\e[0m                                         Required:\
    \ Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnzxtop9h.scala:12:66\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCount\e"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = uniqueChars.count(_ == char)\n            if (count\
    \ > maxChars.count(_ == char)) {\n                maxChars += char\n         \
    \       maxWord += word\n            }\n        })\n        if (maxChars.size\
    \ == 1) {\n            maxWord.head\n        } else {\n            maxWord.sortWith(_.length\
    \ > _.length).head\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0s2stvbm.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0s2stvbm.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0s2stvbm.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(Map[Char,Int]()){\n\
    \            case (acc, word) => acc + (word -> (acc(word) + 1))\n        }\n\
    \        val maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n\
    \        val maxWord = words.filter(word => word == maxKey).head\n        if(maxValue\
    \ == 1) maxWord\n        else maxWord.takeWhile(word => word != maxKey).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ozx99xa.scala:10:52\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mcase\e[0m (acc,\
    \ word) => acc + (word -> (acc(word) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                               Found:    (word : String)\n\e\
    [31m   |\e[0m                                               Required: Char\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp_ozx99xa.scala:14:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word == maxKey).head\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \           maxChars(c) = maxChars.getOrElse(c, 0) + 1\n            })\n     \
    \   })\n        uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1xfd3krh.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1xfd3krh.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars(char) match\
    \ {\n                    case Some(count) => uniqueChars(char) <- uniqueChars(char)\
    \ + count\n                    case None => uniqueChars(char) <- 1\n         \
    \       }\n            })\n        })\n        uniqueChars.toList.sortBy(_._2).last._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1cwm2b9q.scala:14:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    \e[33mcase\e[0m Some(count) => uniqueChars(char)\
    \ <- uniqueChars(char) + count\n\e[31m\e[31m   |\e[0m                        \
    \                                  ^^\e[0m\n\e[31m   |\e[0m                  \
    \              end of statement expected but '<-' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp1cwm2b9q.scala:15:51 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m                    \e[33mcase\e[0m None => uniqueChars(char)\
    \ <- \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \              ^^\e[0m\n\e[31m   |\e[0m                                end of\
    \ statement expected but '<-' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1cwm2b9q.scala:9:26\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36muniqueChars\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m  |\e[0m           \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1cwm2b9q.scala:10:22 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n        val\
    \ maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase)\
    \ < words.indexOf(_.toLowerCase))\n        val maxWordWithMaxCharsFirstInLex =\
    \ words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLex = words.filter(_.length == maxChars\
    \ && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n        val\
    \ maxWordWithMaxCharsFirstInLexInLexInLex = words.filter(_.length == maxChars\
    \ && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n        val\
    \ maxWordWithMaxCharsFirstInLexInLexInLexInLex = words.filter(_.length == maxChars\
    \ && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n        val\
    \ maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex = words.filter(_.length ==\
    \ maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n \
    \       val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp126xgb5r.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp126xgb5r.scala:12:85\
    \ -----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e\
    [0m \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase)\
    \ < words.indexOf(_.toLowerCase))\n\e[31m\e[31m   |\e[0m                     \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$4 of expanded function:\n\e[31m   |\e\
    [0m   _$4 => _$4.toUpperCase.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp126xgb5r.scala:12:116\
    \ ----------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxWordWithMaxChars\e[0m = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase)\
    \ < words.indexOf(_.toLowerCase))\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$5 of\
    \ expanded function:\n\e[31m   |\e[0m   _$5 => _$5.toLowerCase.\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp126xgb5r.scala:13:90 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$7 of expanded function:\n\e[31m   |\e[0m   _$7 => _$7.toUpperCase.\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp126xgb5r.scala:13:121 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e\
    [0m"
  stdout: ''
  timestamp: 1660009612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((maxCount,\
    \ word) => if (maxCount > word.length) maxCount else word.length)\n        val\
    \ maxWord = words.maxBy(word => word.count(_ == maxCount))\n        val maxWordCount\
    \ = maxWord.count(_ == maxCount)\n        if (maxWordCount > 1) maxWord else words.minBy(word\
    \ => word.count(_ == maxCount))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp57jpr6kr.scala:15)\n\tat Problem.main(tmp57jpr6kr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += (c -> uniqueChars(c) + 1)\n            })\n        })\n\
    \        val maxChar = uniqueChars.maxBy(_._2)._1\n        words.find(word =>\
    \ word.contains(maxChar))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuopbried.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuopbried.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.find(\e[36mword\e\
    [0m => word.contains(maxChar))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += (char -> (uniqueChars(char) + 1))\n            })\n \
    \       })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.count(_ == maxChar) == uniqueChars(maxChar))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjtroctl2.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjtroctl2.scala:16:18\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.find(\e[36mword\e\
    [0m => word.count(_ == maxChar) == uniqueChars(maxChar))\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWords = words.filter(w\
    \ => w.length == maxChars)\n        val maxWord = maxWords.sortWith(_ < _).head\n\
    \        val maxWordWithMaxChars = words.filter(w => w.length == maxChars && w\
    \ < maxWord).sortWith(_ < _).head\n        val maxWordWithMaxCharsAndMaxWord =\
    \ words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWords = words.filter(w\
    \ => w.length == maxChars && w < maxWord).sortWith(_ < _).head + maxWord + maxWords\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWords = words.filter(w\
    \ => w.length == maxChars && w < maxWord).sortWith(_ < _).head + maxWord + maxWords\
    \ + maxWords\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord + maxWords + maxWords + maxWords\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord + maxWords + maxWords + maxWords + maxWords\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord + maxWords + maxWords + maxWords + maxWords + maxWords\n        val\
    \ maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord + maxWords + maxWords + maxWords + maxWords + maxWords + maxWords\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwx074ixg.scala:21:138 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\e\
    [0m = words.filter(\e[36mw\e[0m => \n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwx074ixg.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (uniqueChars.getOrElse(c, 0) == 0) {\n                    uniqueChars\
    \ += (c -> 1)\n                } else {\n                    uniqueChars(c) +=\
    \ 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ma2ha__.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009609
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(Map[Char,\
    \ Int]()){\n            case (acc, word) =>\n                val charCount = word.map(c\
    \ => c to 1)\n                val maxCharCount = acc.maxBy(_._2)(charCount)\n\
    \                (maxCharCount._1 -> maxCharCount._2 + 1)\n        }._1\n    \
    \    val maxWord = words.filter(w => w.count(_ == maxCount) == 1)\n        val\
    \ maxWordWithMaxCount = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_\
    \ == maxCount) == w.count(_ == maxCount))\n        val maxWordWithMaxCountWithMaxCharCount\
    \ = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount))\n\
    \        val maxWordWithMaxCountWithMaxCharCountWithMaxCharCount = words.filter(w\
    \ => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) == w.count(_ == maxCount)\
    \ && w.count(_ == maxCount) == w.count(_ == maxCount) && w.count(_ == maxCount)\
    \ == w.count(_ == maxCount))\n        val maxWordWithMaxCountWithMaxCharCountWithMaxCharCountWithMaxCharCount\
    \ = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount) &&\
    \ w.count(_ == maxCount) == w.count(_ == maxCount) && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount))\n        val maxWordWithMaxCountWithMaxCharCountWithMaxCharCountWithMaxCharCountWithMaxCharCount\
    \ = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount) &&\
    \ w.count(_ == maxCount) == w.count(_ == maxCount) && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount))\n\
    \        val maxWordWithMaxCountWithMaxCharCountWithMaxCharCountWithMaxCharCountWithMaxCharCountWithMaxCharCount\
    \ = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount) &&\
    \ w.count(_ == maxCount) == w.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ey4nd93.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp0ey4nd93.scala:12:51 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m                \e[33mval\e[0m \e[36mmaxCharCount\e[0m = acc.maxBy(_._2)(charCount)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mFound:    (charCount : IndexedSeq[scala.collection.immutable.NumericRange.Inclusive[Char]]\n\
    \e[31m   |\e[0m  )\n\e[31m   |\e[0mRequired: Ordering[Int]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0ey4nd93.scala:13:52 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                (maxCharCount._1 -> maxCharCount._2 +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of (Char, Int), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0ey4nd93.scala:22:5 ---------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val counts = words.map(word => word.distinctChars.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2d99drbk.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2d99drbk.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2d99drbk.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e[36mword\e\
    [0m => word.distinctChars.length == maxCount).head\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWord is already defined as \e[33mvalue\e[0m \e[35mmaxWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2d99drbk.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = words.indexOf(maxWord)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2d99drbk.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mmaxWordIndex\e[0m = maxWordIndex + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordIndex is already defined as \e[33mvalue\e[0m \e[35mmaxWordIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars(char) match {\n                    case Some(count) => uniqueChars(char)\
    \ = uniqueChars(char) + count\n                    case None => uniqueChars(char)\
    \ = uniqueChars(char) + 1\n                }\n            })\n        })\n   \
    \     uniqueChars.maxBy(_._2)._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgd457qbm.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(word => word.distinct).map(_.size).max\n\
    \        val maxWord = words.filter(word => word.distinct.size == uniqueChars).sortBy(_.length).head\n\
    \        uniqueChars match {\n            case 0 => maxWord\n            case\
    \ _ => maxWord.substring(0, maxWord.length - 1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmcd8v9h9.scala:17)\n\tat Problem.main(tmpmcd8v9h9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(w => w.toCharArray.size == maxChars)\n   \
    \     val maxWordWithMaxChars = words.filter(w => w.toCharArray.size == maxChars\
    \ && w < maxWord)\n        val maxWordWithMaxCharsFirst = words.filter(w => w.toCharArray.size\
    \ == maxChars && w > maxWord)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(w => w.toCharArray.size == maxChars && w >= maxWord)\n      \
    \  val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars = words.filter(w\
    \ => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst =\
    \ words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxCharsFirst\
    \ && w > maxWordWithMaxChars)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxCharsFirst\
    \ && w > maxWordWithMaxCharsFirstInLexicographicalOrder)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxCharsFirst\
    \ && w > maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars)\n       \
    \ val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxCharsFirst\
    \ && w > maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst)\n  \
    \      val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1o78_0ao.scala:21:138 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1o78_0ao.scala:13:90 --------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxChars\e[0m = words.filter(\e\
    [36mw\e[0m => w.toCharArray.size == maxChars && w < maxWord)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \       Found:    (maxWord : List[String])\n\e[31m   |\e[0m                  \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1o78_0ao.scala:14:95 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirst\e[0m\
    \ = words.filter(\e[36mw\e[0m => w.toCharArray.size == maxChars && w > maxWord)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                              Found:    (maxWord : List[String])\n\e[31m   |\e\
    [0m                                      Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1o78_0ao.scala:15:118 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsFirstInLexicographicalOrder\e\
    [0m = words.filter(\e[36mw\e[0m => w.toC"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n            uniqueChars.foreach {\n                case (k, v) =>\
    \ maxChar(k) = if (v > maxChar(k)) v else maxChar(k)\n            }\n        })\n\
    \        maxChar.foreach {\n            case (k, v) => if (v == uniqueChars(k))\
    \ k else \"\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyczrhpks.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyczrhpks.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.countUniqueChar)\n        val maxWord = words.find(word\
    \ => word.countUniqueChar == maxCount)\n        if (maxWord.isEmpty) \"\"\n  \
    \      else maxWord.head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw_8udfxy.scala:9:71 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = words.foldLeft(\e\
    [31m0\e[0m)((\e[36mcount\e[0m, \e[36mword\e[0m) => count + word.countUniqueChar)\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                          \
    \ value countUniqueChar is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpw_8udfxy.scala:10:46 ------------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.find(\e[36mword\e[0m\
    \ => word.countUniqueChar == maxCount)\n\e[31m\e[31m   |\e[0m                \
    \                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                value countUniqueChar is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxChars.sortBy(_.charAt(0))\n        val maxWordWithMaxCharsSortedByFirstCharFirst\
    \ = maxWordWithMaxCharsSortedByFirstChar.head\n        val maxWordWithMaxCharsSortedByFirstCharFirstString\
    \ = maxWordWithMaxCharsSortedByFirstCharFirst.mkString(\"\")\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxChars\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqjiqu7vw.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqjiqu7vw.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqjiqu7vw.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength\e\
    [0m = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mmaxWordWithMaxCharsSortedByFirstCharFirstStringLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars(char) match {\n                    case Some(count)\
    \ => uniqueChars(char) += count\n                    case None => uniqueChars(char)\
    \ = uniqueChars(char) + 1\n                }\n            })\n        })\n   \
    \     uniqueChars.toSeq.sortBy(_._2).lastOption.foreach(maxChar(_))\n        maxWord(maxChar(uniqueChars.toSeq.sortBy(_._1).head))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp03w04rgd.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp03w04rgd.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp03w04rgd.scala:11:22 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = mutable.Map[\e[35mString\e[0m,\
    \ \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val chars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                chars += char\n     \
    \       })\n        })\n        chars.foreach(char => {\n            val count\
    \ = chars.count(_ == char)\n            if (count > maxChars(char)) {\n      \
    \          maxChars(char) = count\n            }\n        })\n        val maxChar\
    \ = maxChars.maxBy(_._2)._1\n        words.find(word => word.count(_ == maxChar)\
    \ == maxChars(maxChar))\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzk1jo8nd.scala:9:20 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzk1jo8nd.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzk1jo8nd.scala:23:18 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        words.find(\e[36mword\e[0m => word.count(_ ==\
    \ maxChar) == maxChars(maxChar))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n        })\n        uniqueChars.toList.sortWith(_.value < _.value).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_97x9eoa.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                       \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                          Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_97x9eoa.scala:10:22\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mmaxChar\e[0m = mutable.Map[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    uniqueChars(c) += 1\n                } else {\n     \
    \               uniqueChars(c) = 1\n                }\n            })\n      \
    \  })\n        uniqueChars.toList.sortWith(_._2 > _._2).head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxdwchfvg.scala:9:26 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36muniqueChars\e[0m = mutable.HashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxdwchfvg.scala:10:23 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxChars\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((maxCount,\
    \ word) => maxCount + (word.count(_ == 'a')))\n        val maxWord = words.maxBy(word\
    \ => word.count(_ == 'a'))\n        if (maxCount == words.count(_ == 'a')) maxWord\n\
    \        else words.find(word => word.count(_ == 'a') == maxCount).head\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr_1lsr8z.scala:11:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (maxCount == words.count(_ == \e\
    [31m'a'\e[0m)) maxWord\n\e[31m\e[31m   |\e[0m                                \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char cannot\
    \ be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    def findMax(words\
    \ : List[String]) : String = {\n        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.distinct().length)\n        val maxWord = words.filter(word\
    \ => word.distinct().length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        words.take(maxWordIndex).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1tqczjnt.scala:9:79 ------------------------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mmaxCount\e[0m = words.foldLeft(\e\
    [31m0\e[0m)((\e[36mcount\e[0m, \e[36mword\e[0m) => count + word.distinct().length)\n\
    \e[31m\e[31m  |\e[0m                                                         \
    \         ^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mmissing argument for parameter i\
    \ of \e[33mmethod\e[0m \e[35mapply\e[0m in \e[33mclass\e[0m \e[35mStringOps\e\
    [0m: (i: Int): Char\n\e[31m\e[31m-- Error: /tmp/tmp1tqczjnt.scala:10:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxWord\e[0m = words.filter(\e\
    [36mword\e[0m => word.distinct().length == maxCount).head\n\e[31m\e[31m   |\e\
    [0m                                           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mmissing argument for parameter i of \e[33mmethod\e[0m \e[35mapply\e[0m in \e\
    [33mclass\e[0m \e[35mStringOps\e[0m: (i: Int): Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660009614
