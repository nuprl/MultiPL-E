language: scala
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Int]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).equals(substring))\n                counts.put(string.substring(i,\
    \ i + substring.length), counts.getOrElse(string.substring(i, i + substring.length),\
    \ 0) + 1)\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkc4twll9.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(x => count.update(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp396hi1v8.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var startIndex = 0\n  \
    \      var endIndex = 0\n        while(startIndex < string.length){\n        \
    \    endIndex = string.indexOf(substring, startIndex)\n            if(endIndex\
    \ == -1){\n                count += 1\n                startIndex = string.length\n\
    \            } else {\n                count += 1\n                startIndex\
    \ = endIndex + 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpisxlwbl_.scala:24)\n\tat Problem.main(tmpisxlwbl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028487
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var startIndex = 0\n  \
    \      var endIndex = 0\n        while(startIndex < string.length) {\n       \
    \     endIndex = string.indexOf(substring, startIndex)\n            if(endIndex\
    \ >= 0) {\n                count += 1\n                startIndex = endIndex +\
    \ 1\n            } else {\n                startIndex += 1\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028487
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val index = 0\n        val length = string.length\n        while (index\
    \ < length) {\n            val start = string.indexOf(substring, index)\n    \
    \        if (start < 0) {\n                count += ((substring, 1))\n       \
    \     } else {\n                val end = start + substring.length\n         \
    \       val count = count(string, start, end)\n                count += ((substring,\
    \ count))\n            }\n            index = end + 1\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkvgtddkf.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpkvgtddkf.scala:15:28 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = count(string,\
    \ start, end)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m\
    \   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mcount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkvgtddkf.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            index = end +\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e\
    [0m                    Not found: end\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Int]()\n \
    \       string.split(substring).foreach(x => count.update(x, count.getOrElse(x,\
    \ 0) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpijj29p3o.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).map(_.toUpperCase)\n        chars.foreach\
    \ { char =>\n            val count = count.get(char) match {\n               \
    \ case Some(count) => count + 1\n                case None => 1\n            }\n\
    \            count.toList += char\n            count.put(char, count)\n      \
    \  }\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpizfqbu8a.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkraw76zj.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).equals(substring))\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmua4w1ic.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var index = 0\n       \
    \ var startIndex = 0\n        var endIndex = 0\n        var lastIndex = string.length\
    \ - 1\n        while (startIndex <= lastIndex) {\n            endIndex = string.indexOf(substring,\
    \ startIndex)\n            if (endIndex == -1) {\n                count += 1\n\
    \                startIndex = lastIndex + 1\n            } else {\n          \
    \      count += 1\n                startIndex = endIndex + 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp093867eb.scala:26)\n\tat Problem.main(tmp093867eb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028487
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        for (c <- chars) {\n   \
    \         val value = count.getOrElse(c, 0) + 1\n            count.put(c, value)\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgo0rf8d0.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwq59iny.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Int]()\n \
    \       val chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        substrings.foreach { substring =>\n            val index =\
    \ chars.indexOf(substring)\n            if (index != -1) {\n                count.put(substring,\
    \ count.get(substring) + 1)\n                chars.take(index).foreach(c => count.remove(c))\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiy4sekco.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring) match {\n                  \
    \  case Some(count) => count + 1\n                    case None => 1\n       \
    \         }\n                count.put(substring, count)\n                count.put(string.substring(start,\
    \ end), count)\n            }\n        }\n        count.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj69dqvs1.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvfp8dd7v.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val countMap = mutable.Map[String, Long]()\n \
    \       string.split(substring).foreach(s => countMap += (s -> 1))\n        countMap.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ya4kt3q.scala:6:23 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        val chars = string.split(substring).map(_.toChar)\n        chars.foreach\
    \ { c =>\n            val count = count.getOrElseUpdate(c, 0) + 1\n          \
    \  count.toLong\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7am_67_.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpr7am_67_.scala:7:50 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.split(substring).map(_.toChar)\n\
    \e[31m\e[31m  |\e[0m                                                ^^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                                    value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpr7am_67_.scala:7:57 ------------------------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = string.split(substring).map(_.toChar)\n\
    \e[31m\e[31m  |\e[0m                                                         ^\e\
    [0m\n\e[31m  |\e[0m                                            No ClassTag available\
    \ for B\n\e[31m  |\e[0m\n\e[31m  |\e[0m                                      \
    \      where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660028487
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val substrings = string.split(substring)\n        substrings.foreach(s\
    \ => {\n            val count = count.getOrElse(s, 0) + 1\n            count.put(s,\
    \ count)\n        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqo8cjrp.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).toList\n        chars.foreach(c =>\
    \ count.putIfAbsent(c, 0L) += 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgjtxcoyo.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Int]()\n \
    \       for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start >= 0) {\n                val end = start + substring.length\n\
    \                if (end < string.length) {\n                    val substring2\
    \ = string.substring(start, end)\n                    count.get(substring2) match\
    \ {\n                        case None => count.put(substring2, 1)\n         \
    \               case Some(count2) => count.put(substring2, count2 + 1)\n     \
    \               }\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb8m873x3.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).contains(substring))\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp82w_k6cb.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(s => counts += (s -> 1))\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl258a8cv.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(x => count(x) = count(x) + 1)\n     \
    \   count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb5ug3ns.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var lastIndex = -1\n  \
    \      var lastSubIndex = -1\n        string.foreach(c => {\n            if (c\
    \ == substring(0)) {\n                count += 1\n                lastIndex =\
    \ string.indexOf(c, lastIndex + 1)\n                lastSubIndex = string.indexOf(substring,\
    \ lastIndex)\n            }\n        })\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpehpu7n4s.scala:21)\n\tat Problem.main(tmpehpu7n4s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0L\n        var start = 0L\n     \
    \   var end = string.length - 1L\n        while (start < end) {\n            val\
    \ mid = (start + end) / 2\n            if (string.charAt(mid) == substring.charAt(0))\
    \ {\n                if (string.charAt(mid + 1) == substring.charAt(1)) {\n  \
    \                  count += 1\n                    start = mid + 1\n         \
    \           end = mid - 1\n                } else {\n                    count\
    \ += 1\n                    start = mid + 1\n                }\n            }\
    \ else {\n                if (string.charAt(mid - 1) == substring.charAt(1)) {\n\
    \                    count += 1\n                    start = mid - 1\n       \
    \             end = mid + 1\n                } else {\n                    count\
    \ += 1\n                    start = mid - 1\n                }\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi44jsa69.scala:11:30\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (string.charAt(mid)\
    \ == substring.charAt(\e[31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m                \
    \              ^^^\e[0m\n\e[31m   |\e[0m                              Found: \
    \   (mid : Long)\n\e[31m   |\e[0m                              Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi44jsa69.scala:12:34\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mif\e[0m\
    \ (string.charAt(mid + \e[31m1\e[0m) == substring.charAt(\e[31m1\e[0m)) {\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    Long\n\e[31m   |\e[0m         \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpi44jsa69.scala:21:34 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                \e[33mif\e[0m (string.charAt(mid - \e[31m1\e\
    [0m) == substring.charAt(\e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m             \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \        Found:    Long\n\e[31m   |\e[0m                                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(\"\").toList\n        val charsSubstring = substring.split(\"\
    \").toList\n        chars.zip(charsSubstring).foreach {\n            case (ch,\
    \ chSubstring) =>\n                if (chSubstring == \"\") {\n              \
    \      count.put(ch, 1L)\n                } else {\n                    val count\
    \ = count.get(ch)\n                    if (count == null) {\n                \
    \        count.put(ch, 1L)\n                    } else {\n                   \
    \     count.put(ch, count + 1L)\n                    }\n                }\n  \
    \      }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7yyyj9e.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val index = string.indexOf(substring)\n      \
    \  if (index == -1)\n            return 0\n        val start = index\n       \
    \ val end = index + substring.length\n        var count = 0\n        while (start\
    \ < string.length && end < string.length) {\n            if (string.charAt(start)\
    \ == string.charAt(end))\n                count += 1\n            start += 1\n\
    \            end += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp11dp2vjw.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            start += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean start.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp11dp2vjw.scala:16:16\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            end += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value += is not a member of Int - did you mean end.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).toList\n        chars.foreach(c =>\
    \ count.putIfAbsent(c, 0L) += 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8yi0b52j.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for(subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if(subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0vai9ii.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).toList\n        chars.foreach(c =>\
    \ count.putIfAbsent(c, 0L) += 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8yi0b52j.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for(subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if(subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps0vai9ii.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for(subString <- subStrings)\
    \ {\n            val count = count.get(subString)\n            if(count == null)\
    \ count.put(subString, 1L)\n            else count.put(subString, count + 1L)\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5_1xr04f.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028491
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val startIndex = string.indexOf(substring)\n \
    \       if (startIndex == -1) 0\n        else string.lastIndexOf(substring) +\
    \ startIndex\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90phktzz.scala:12)\n\tat Problem.main(tmp90phktzz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028494
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp832bnmcs.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        for (i <- 0 until\
    \ stringArray.length) {\n            val currentString = stringArray(i)\n    \
    \        val currentCount = count.get(currentString)\n            if (currentCount\
    \ == null) {\n                count.put(currentString, 1L)\n            } else\
    \ {\n                count.put(currentString, currentCount + 1L)\n           \
    \ }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp061d1jm3.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        for (i <- 0 until\
    \ stringArray.length)\n            count.update(stringArray(i), count.getOrElse(stringArray(i),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnwjee5w.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        substrings.foreach { substring =>\n            val substringCount\
    \ = chars.count(_ == substring)\n            count.put(substring, substringCount)\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2pmkiip1.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = new mutable.HashMap[String, Int]()\n        val index2 =\
    \ new mutable.HashMap[String, Int]()\n        val index3 = new mutable.HashMap[String,\
    \ Int]()\n        val index4 = new mutable.HashMap[String, Int]()\n        val\
    \ index5 = new mutable.HashMap[String, Int]()\n        val index6 = new mutable.HashMap[String,\
    \ Int]()\n        val index7 = new mutable.HashMap[String, Int]()\n        val\
    \ index8 = new mutable.HashMap[String, Int]()\n        val index9 = new mutable.HashMap[String,\
    \ Int]()\n        val index10 = new mutable.HashMap[String, Int]()\n        val\
    \ index11 = new mutable.HashMap[String, Int]()\n        val index12 = new mutable.HashMap[String,\
    \ Int]()\n        val index13 = new mutable.HashMap[String, Int]()\n        val\
    \ index14 = new mutable.HashMap[String, Int]()\n        val index15 = new mutable.HashMap[String,\
    \ Int]()\n        val index16 = new mutable.HashMap[String, Int]()\n        val\
    \ index17 = new mutable.HashMap[String, Int]()\n        val index18 = new mutable.HashMap[String,\
    \ Int]()\n        val index19 = new mutable.HashMap[String, Int]()\n        val\
    \ index20 = new mutable.HashMap[String, Int]()\n        val index21 = new mutable.HashMap[String,\
    \ Int]()\n        val index22 = new mutable.HashMap[String, Int]()\n        val\
    \ index23 = new mutable.HashMap[String, Int]()\n        val index24 = new mutable.HashMap[String,\
    \ Int]()\n        val index25 = new mutable.HashMap[String, Int]()\n        val\
    \ index26 = new mutable.HashMap[String, Int]()\n        val index27 = new mutable.HashMap[String,\
    \ Int]()\n        val index28 = new mutable.HashMap[String, Int]()\n        val\
    \ index29 = new mutable.HashMap[String, Int]()\n        val index30 = new mutable.HashMap[String,\
    \ Int]()\n        val index31 = new mutable.HashMap[String, Int]()\n        val\
    \ index32 = new mutable.HashMap[String, Int]()\n        val index33 = new mutable.HashMap[String,\
    \ Int]()\n        val index34 = new mutable.HashMap[String, Int]()\n        val\
    \ index35 = new mutable.HashMap[String, Int]()\n        val index36 = new mutable.Hash\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:7:24\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mindex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mindex2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                       \
    \  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mindex3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mindex4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var start = 0\n       \
    \ var end = string.length\n        while (start < end) {\n            val mid\
    \ = (start + end) / 2\n            if (string.substring(mid, mid) == substring)\
    \ {\n                count += 1\n                start = mid + 1\n           \
    \ } else {\n                end = mid\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp09antxrn.scala:22)\n\tat Problem.main(tmp09antxrn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val subStrings = string.substring(startIndex, endIndex).split(\"\
    \")\n        for (subString <- subStrings) {\n            val currentCount = count.get(subString)\n\
    \            if (currentCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, currentCount\
    \ + 1)\n            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9k42a22q.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => {\n \
    \           val count = count.getOrElse(c, 0) + 1\n            count.put(c, count)\n\
    \        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeogtbk9n.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028493
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bocc3in.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        var\
    \ j = 0\n        while (i < string.length && j < substring.length) {\n       \
    \     if (string.charAt(i) == substring.charAt(j)) {\n                count +=\
    \ 1\n                i += 1\n                j += 1\n            } else if (string.charAt(i)\
    \ > substring.charAt(j)) {\n                i += 1\n            } else {\n   \
    \             j += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcnbn8vg.scala:24)\n\tat Problem.main(tmpbcnbn8vg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bocc3in.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val substringLength = substring.length\n       \
    \ val substringIndex = startIndex\n        val substringEnd = endIndex\n     \
    \   val substringLength = substring.length\n        val substringIndex = startIndex\n\
    \        val substringEnd = endIndex\n        val substringLength = substring.length\n\
    \        val substringIndex = startIndex\n        val substringEnd = endIndex\n\
    \        val substringLength = substring.length\n        val substringIndex =\
    \ startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3rs5c31l.scala:77:26 ---------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m        \e[33mval\e[0m \e[36msubstringEnd\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp3rs5c31l.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msubstringLength\e[0m = substring.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0msubstringLength is already defined as \e[33mvalue\e[0m \e[35msubstringLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3rs5c31l.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36msubstringIndex\e[0m = startIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0msubstringIndex is already defined as \e[33mvalue\e[0m \e[35msubstringIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3rs5c31l.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36msubstringEnd\e[0m = endIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msubstringEnd\
    \ is already defined as \e[33mvalue\e[0m \e[35msubstringEnd\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3rs5c31l.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36msubstringLength\e[0m = substring.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msubstringLength\
    \ is already defined as \e[33mvalue\e[0m \e[35msubstringLength\e[0m\n\e[31m  \
    \ |\e[0"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).toList\n        chars.foreach(c =>\
    \ counts += (c -> 1L))\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzca_j2ai.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var startIndex = -1\n \
    \       var endIndex = -1\n        string.foreach(x => {\n            if (x ==\
    \ substring) {\n                count += 1\n                startIndex = string.indexOf(x)\n\
    \                endIndex = startIndex\n            }\n            if (x == substring\
    \ + substring) {\n                count += 1\n                startIndex = string.indexOf(x)\n\
    \                endIndex = startIndex\n            }\n        })\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8_x_h32o.scala:10:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (x == substring) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp8_x_h32o.scala:15:16 -----------------------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (x == substring + substring) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660028498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Int]\n\
    \        val subStrings = string.split(substring)\n        for(subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if(subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwiz37ad1.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var l = string.length\n        var m = substring.length\n\
    \        while (i < l && j < m) {\n            if (string.charAt(i) == substring.charAt(j))\
    \ {\n                count += 1\n                i += 1\n                j +=\
    \ 1\n            } else if (string.charAt(i) > substring.charAt(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9kr0d_7x.scala:27)\n\tat Problem.main(tmp9kr0d_7x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028498
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0) + 1\n            \
    \    counts.put(substring, count + end - start)\n            }\n        }\n  \
    \      counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjgoqdzd_.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.update(c,\
    \ count.getOrElse(c, 0L) + 1L))\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa796pru3.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028498
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var start = 0\n       \
    \ var end = string.length\n        while (start < end) {\n            val mid\
    \ = (start + end) / 2\n            if (string.charAt(mid) == substring.charAt(0))\
    \ {\n                start = mid + 1\n            } else {\n                end\
    \ = mid\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp162g65ha.scala:21)\n\tat Problem.main(tmp162g65ha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(s\
    \ => {\n            val count = count.get(s)\n            if (count == null) count.put(s,\
    \ 1L)\n            else count.put(s, count + 1L)\n        })\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1rp9w13z.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnn_at_s.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028499
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        var\
    \ j = 0\n        while (i < string.length && j < substring.length) {\n       \
    \     if (string.charAt(i) == substring.charAt(j)) {\n                count +=\
    \ 1\n                i += 1\n                j += 1\n            } else if (string.charAt(i)\
    \ > substring.charAt(j)) {\n                j += 1\n            } else {\n   \
    \             i += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpur1njjon.scala:24)\n\tat Problem.main(tmpur1njjon.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start >= 0) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0)\n                counts\
    \ += (substring -> count + 1)\n                i = end\n            }\n      \
    \  }\n        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpludmyizh.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpludmyizh.scala:13:18 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                i = end\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0)\n                counts\
    \ += (substring -> (count + 1))\n                i = end\n            }\n    \
    \    }\n        counts.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8teioj81.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp8teioj81.scala:13:18 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                i = end\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val count = counts.getOrElse(subString, 0) + 1\n            counts.put(subString,\
    \ count)\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppo1frj5w.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028500
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var lastIndex = -1\n  \
    \      string.lastIndexOf(substring, lastIndex) match {\n            case -1 =>\
    \ count = 1\n            case index => count = index - lastIndex + 1\n       \
    \ }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ib0sh9e.scala:15)\n\tat Problem.main(tmp2ib0sh9e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028503
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(s => count.update(s, count.getOrElse(s,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3xxej966.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0) + 1\n            \
    \    counts.put(substring, count + end - start)\n            }\n        }\n  \
    \      counts.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjgoqdzd_.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val subStringLength = substring.length\n       \
    \ val subStringStartIndex = startIndex - subStringLength\n        val subStringEndIndex\
    \ = endIndex - subStringLength\n        val subStringStartIndex = math.max(subStringStartIndex,\
    \ 0) // Make sure the substring starts at 0\n        val subStringEndIndex = math.min(subStringEndIndex,\
    \ string.length) // Make sure the substring ends at string.length\n        var\
    \ count = 0L\n        for (i <- subStringStartIndex to subStringEndIndex) {\n\
    \            val currentChar = string.charAt(i)\n            if (count.contains(currentChar))\
    \ {\n                count = count.updated(currentChar, count.get(currentChar)\
    \ + 1)\n            } else {\n                count = count.updated(currentChar,\
    \ 1)\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkihxnh4t.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msubStringStartIndex\e[0m\
    \ = math.max(subStringStartIndex, \e[31m0\e[0m) \e[34m// Make sure the substring\
    \ starts at 0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubStringStartIndex is already defined as \e[33mvalue\e[0m\
    \ \e[35msubStringStartIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkihxnh4t.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36msubStringEndIndex\e[0m =\
    \ math.min(subStringEndIndex, string.length) \e[34m// Make sure the substring\
    \ ends at string.length\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubStringEndIndex is already defined as \e[33mvalue\e[0m \e\
    [35msubStringEndIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkihxnh4t.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[31m0L\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcount is\
    \ already defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkihxnh4t.scala:6:24\
    \ -------------------------\e[0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpkihxnh4t.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m "
  stdout: ''
  timestamp: 1660028502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val subStringLength = substring.length\n       \
    \ val substringLength = substring.length\n        val substringIndex = startIndex\n\
    \        val substringEnd = endIndex\n        val substringLength = substring.length\n\
    \        val substringIndex = startIndex\n        val substringEnd = endIndex\n\
    \        val substringLength = substring.length\n        val substringIndex =\
    \ startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substring\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk6lbq0w4.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk6lbq0w4.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36msubstringLength\e[0m = substring.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msubstringLength\
    \ is already defined as \e[33mvalue\e[0m \e[35msubstringLength\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk6lbq0w4.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36msubstringIndex\e[0m = startIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringIndex is already defined as \e[33mvalue\e[0m \e[35msubstringIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk6lbq0w4.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36msubstringEnd\e[0m = endIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msubstringEnd\
    \ is already defined as \e[33mvalue\e[0m \e[35msubstringEnd\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk6lbq0w4.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36msubstringLength\e[0m = substring.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msubstringLength\
    \ is already defined as \e[33mvalue\e[0m \e[35msubstringLength\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk6lbq0w4.scala:17:12\
    \ ------------------"
  stdout: ''
  timestamp: 1660028507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        for(i <- 0 until string.length){\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if(start != -1){\n                val end = start + substring.length\n\
    \                val count = count(substring, string, start, end)\n          \
    \      count.put(substring, count + 1)\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplpfhj8ot.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplpfhj8ot.scala:8:31 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                        value indexOfSubstring is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1660028504
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.Map[String, Long]()\n   \
    \     string.split(substring).foreach(x => counts += (x -> 1))\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2ljjc0p.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val substringCount = count.get(subString)\n            if (substringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, substringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptj6yvoe9.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        subStrings.foreach(s\
    \ => {\n            val count = count(s)\n            count(s) += 1\n        })\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprv595ad1.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        val chars = string.split(\"\").toList\n        val charsSub = substring.split(\"\
    \").toList\n        chars.zip(charsSub).foreach {\n            case (c1, c2) =>\n\
    \                if (c1 == c2) {\n                    count(c1) = count(c1) +\
    \ 1\n                } else {\n                    count(c1) = count(c1) + 1\n\
    \                    count(c2) = count(c2) + 1\n                }\n        }\n\
    \        count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfrlf93i.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028502
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            if(string.substring(i, i+substring.length) == substring){\n     \
    \           count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes$$anonfun$1(tmphi_hhh1z.scala:8)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmphi_hhh1z.scala:11)\n\
    \tat Problem$.main(tmphi_hhh1z.scala:17)\n\tat Problem.main(tmphi_hhh1z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring)\n                if (count ==\
    \ null) count.put(substring, 1L) else count.put(substring, count + 1L)\n     \
    \           count.put(string.substring(start, end), 1L)\n            }\n     \
    \   }\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi44eb8z6.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpi44eb8z6.scala:8:31 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                        value indexOfSubstring is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1660028505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        while (startIndex\
    \ >= 0) {\n            val endIndex = startIndex + substring.length\n        \
    \    val subString = string.substring(startIndex, endIndex)\n            val count\
    \ = count.get(subString) match {\n                case Some(count) => count +\
    \ 1\n                case None => 1\n            }\n            count.put(subString,\
    \ count.getOrElse(subString, 0L) + 1)\n            startIndex = string.indexOf(substring,\
    \ endIndex + 1)\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5zfsiutn.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp5zfsiutn.scala:11:24 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = count.get(subString)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mcount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5zfsiutn.scala:12:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mcase\e\
    [0m Some(count) => count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \    Recursive \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp5zfsiutn.scala:16:23 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            startIndex = string.indexOf(substring, endIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val startIndex\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => {\n            val splitString = x.split(substring)\n            val key\
    \ = splitString(0)\n            val value = splitString(1)\n            count.get(key)\
    \ match {\n                case Some(count) => count.get += value\n          \
    \      case None => count.put(key, 1)\n            }\n        })\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdn2m1qq.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028505
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start >= 0) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0)\n                counts\
    \ += (substring -> count + 1)\n                i = end\n            }\n      \
    \  }\n        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpludmyizh.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpludmyizh.scala:13:18 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                i = end\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring) match {\n                  \
    \  case Some(count) => count + 1\n                    case None => 1\n       \
    \         }\n                count.put(substring, count)\n                count.put(string.substring(start,\
    \ end), count)\n            }\n        }\n        count.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wcp9dnr.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Int]\n\
    \        for(i <- 0 until string.length){\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if(start != -1){\n                val end = string.indexOfSubstring(substring,\
    \ start+1)\n                if(end != -1){\n                    val key = string.substring(start,\
    \ end)\n                    if(count.contains(key)){\n                       \
    \ count(key) = count(key) + 1\n                    }else{\n                  \
    \      count(key) = 1\n                    }\n                }\n            }\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6mjhmdc6.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6mjhmdc6.scala:8:31 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m  |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0m                        value indexOfSubstring is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6mjhmdc6.scala:10:33\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m                \e[33mval\e\
    [0m \e[36mend\e[0m = string.indexOfSubstring(substring, start+\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value indexOfSubstring is not a member of\
    \ String\n3 errors found\n"
  stdout: ''
  timestamp: 1660028509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val subStrings = string.substring(startIndex, endIndex).split(\"\
    \\\\W+\")\n        for (subString <- subStrings) {\n            val count = counts.getOrElse(subString,\
    \ 0) + 1\n            counts.put(subString, count)\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqo_9ej6c.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028506
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val index = string.indexOf(substring)\n        while (index >= 0) {\n\
    \            val substringIndex = string.indexOf(substring, index + 1)\n     \
    \       if (substringIndex >= 0) {\n                val substring = string.substring(substringIndex,\
    \ substringIndex + substring.length)\n                val count = count.get(substring)\
    \ match {\n                    case Some(count) => count + 1\n               \
    \     case None => 1\n                }\n                count.put(substring,\
    \ count.toLong)\n            }\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfkoj_ls.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmphfkoj_ls.scala:11:82 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                \e[33mval\e[0m \e[36msubstring\e[0m =\
    \ string.substring(substringIndex, substringIndex + substring.length)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \ Recursive \e[33mvalue\e[0m \e[35msubstring\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmphfkoj_ls.scala:12:28 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = count.get(substring)\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\
    \e[31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mcount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphfkoj_ls.scala:13:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m                    \e\
    [33mcase\e[0m Some(count) => count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                      Recursive \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmphfkoj_ls.scala:18:18 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            index = string.indexOf(substring, index +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660028506
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var start = 0\n       \
    \ var end = string.length\n        while (start < end) {\n            val mid\
    \ = (start + end) / 2\n            if (string.substring(mid, mid).equals(substring))\
    \ {\n                count += 1\n                start = mid + 1\n           \
    \ } else if (string.substring(mid, mid).compareTo(substring) > 0) {\n        \
    \        end = mid\n            } else {\n                start = mid + 1\n  \
    \          }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5f460snh.scala:24)\n\tat Problem.main(tmp5f460snh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ivchrnw.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(x => count(x) += 1L)\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_g0e70hc.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).contains(substring))\n                count(string.substring(i,\
    \ i + substring.length)) = count(string.substring(i, i + substring.length)) +\
    \ 1\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvy8ovsb3.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvfp8dd7v.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val startIndex = string.indexOf(substring)\n \
    \       if (startIndex == -1)\n            return 0\n        val endIndex = startIndex\
    \ + substring.length\n        val count = string.count(_ == substring)\n     \
    \   val overlap = string.count(_ == substring) -\n            string.count(_ ==\
    \ substring(startIndex, endIndex))\n        count + overlap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr57ert8q.scala:10:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = string.count(_\
    \ == substring)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpr57ert8q.scala:11:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36moverlap\e[0m = string.count(_\
    \ == substring) -\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr57ert8q.scala:12:40\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            string.count(_ ==\
    \ substring(startIndex, endIndex))\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                          Found:    (Int, Int)\n\e[31m   |\e[0m             \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => {\n \
    \           val value = count.getOrElse(c, 0) + 1\n            count.put(c.toUpperCase,\
    \ value)\n            count.put(c.toLowerCase, value)\n        })\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7kdk9ovu.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val index = 0\n        while (index < string.length) {\n            val\
    \ start = string.indexOf(substring, index)\n            if (start < 0) {\n   \
    \             count += ((substring, 1L))\n            } else {\n             \
    \   val end = start + substring.length\n                val count = count(string,\
    \ start, end)\n                count += ((substring, count))\n            }\n\
    \            index = end\n        }\n        count.values.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbed4el52.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpbed4el52.scala:14:28 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = count(string,\
    \ start, end)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m\
    \   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mcount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbed4el52.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            index = end\n\
    \e[31m\e[31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m           \
    \         Not found: end\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        string.split(substring).foreach(s\
    \ => {\n            count += string.count(s)\n        })\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpilacy8aq.scala:8:18 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m            count += string.count(s)\n\e[31m\e[31m  |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m  |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpilacy8aq.scala:8:34\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m            count += string.count(s)\n\
    \e[31m\e[31m  |\e[0m                                  ^\e[0m\n\e[31m  |\e[0m \
    \                                 Found:    (s : String)\n\e[31m  |\e[0m     \
    \                             Required: Char => Boolean\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = new mutable.HashMap[String, Int]()\n        val startIndex\
    \ = new mutable.HashMap[String, Int]()\n        val endIndex = new mutable.HashMap[String,\
    \ Int]()\n        val startIndex2 = new mutable.HashMap[String, Int]()\n     \
    \   val endIndex2 = new mutable.HashMap[String, Int]()\n        val startIndex3\
    \ = new mutable.HashMap[String, Int]()\n        val endIndex3 = new mutable.HashMap[String,\
    \ Int]()\n        val startIndex4 = new mutable.HashMap[String, Int]()\n     \
    \   val endIndex4 = new mutable.HashMap[String, Int]()\n        val startIndex5\
    \ = new mutable.HashMap[String, Int]()\n        val endIndex5 = new mutable.HashMap[String,\
    \ Int]()\n        val startIndex6 = new mutable.HashMap[String, Int]()\n     \
    \   val endIndex6 = new mutable.HashMap[String, Int]()\n        val startIndex7\
    \ = new mutable.HashMap[String, Int]()\n        val endIndex7 = new mutable.HashMap[String,\
    \ Int]()\n        val startIndex8 = new mutable.HashMap[String, Int]()\n     \
    \   val endIndex8 = new mutable.HashMap[String, Int]()\n        val startIndex9\
    \ = new mutable.HashMap[String, Int]()\n        val endIndex9 = new mutable.HashMap[String,\
    \ Int]()\n        val startIndex10 = new mutable.HashMap[String, Int]()\n    \
    \    val endIndex10 = new mutable.HashMap[String, Int]()\n        val startIndex11\
    \ = new mutable.HashMap[String, Int]()\n        val endIndex11 = new mutable.HashMap[String,\
    \ Int]()\n        val startIndex12 = new mutable.HashMap[String, Int]()\n    \
    \    val endIndex12 = new mutable.HashMap[String, Int]()\n        val startIndex13\
    \ = new mutable.HashMap[String, Int]()\n        val endIndex13 = new mutable.HashMap[String,\
    \ Int]()\n        val startIndex14 = new mutable.HashMap[String, Int]()\n    \
    \    val endIndex14 = new mutable.HashMap[String, Int]()\n        val startIndex15\
    \ = new mutable.HashMap[String, Int]()\n        val endIndex15 = new mutable.HashMap[String,\
    \ Int]()\n        val startIndex16 = new mutable.HashMap[String, Int]()\n    \
    \    val endIndex16 = new mutable.HashMap[String, Int]()\n        val startIndex17\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp61nq7ic1.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp61nq7ic1.scala:6:24 -------------------------\e[0m\e[0m\n\e[31m6\
    \ |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61nq7ic1.scala:7:24\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mindex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp61nq7ic1.scala:8:29 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mstartIndex\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m  |\e[0m                   \
    \          Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp61nq7ic1.scala:9:27 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36mendIndex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                     \
    \      ^^^^^^^\e[0m\n\e[31m  |\e[0m                           Not found: mutable\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp61nq7ic1.scala:10:30\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mstartIndex2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, "
  stdout: ''
  timestamp: 1660028512
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val subStringLength = substring.length\n       \
    \ val subStringIndex = startIndex\n        val subStringEnd = endIndex\n     \
    \   val subStringLength = substring.length\n        val subStringIndex = startIndex\n\
    \        val subStringEnd = endIndex\n        val subStringLength = substring.length\n\
    \        val subStringIndex = startIndex\n        val subStringEnd = endIndex\n\
    \        val subStringLength = substring.length\n        val subStringIndex =\
    \ startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplwb6t9h6.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36msubStringLength\e[0m = substring.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0msubStringLength is already defined as \e[33mvalue\e[0m \e[35msubStringLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplwb6t9h6.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36msubStringIndex\e[0m = startIndex\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0msubStringIndex is already defined as \e[33mvalue\e[0m \e[35msubStringIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplwb6t9h6.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36msubStringEnd\e[0m = endIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msubStringEnd\
    \ is already defined as \e[33mvalue\e[0m \e[35msubStringEnd\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplwb6t9h6.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36msubStringLength\e[0m = substring.length\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msubStringLength\
    \ is already defined as \e[33mvalue\e[0m \e[35msubStringLength\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplwb6t9h6.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36msubStringIndex\e[0m = startIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubStringIndex is already d"
  stdout: ''
  timestamp: 1660028513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        val chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        for(i <- 0 until chars.length)\n            if(substrings.contains(chars(i)))\n\
    \                count.update(chars(i), count.getOrElse(chars(i), 0L) + 1)\n \
    \       count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpru0zkkyh.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028509
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = string.indexOf(substring, i)\n            if(start !=\
    \ -1){\n                val end = start + substring.length\n                val\
    \ sub = string.substring(start, end)\n                val sub2 = sub.toLowerCase\n\
    \                val sub3 = sub2.replace(\" \", \"\")\n                val sub4\
    \ = sub3.replace(\",\", \"\")\n                val sub5 = sub4.replace(\"-\",\
    \ \"\")\n                val sub6 = sub5.replace(\"(\", \"\")\n              \
    \  val sub7 = sub6.replace(\")\", \"\")\n                val sub8 = sub7.replace(\"\
    '\", \"\")\n                val sub9 = sub8.replace(\"\\\"\", \"\")\n        \
    \        val sub10 = sub9.replace(\"&\", \"\")\n                val sub11 = sub10.replace(\"\
    %\", \"\")\n                val sub12 = sub11.replace(\"$\", \"\")\n         \
    \       val sub13 = sub12.replace(\"!\", \"\")\n                val sub14 = sub13.replace(\"\
    ?\", \"\")\n                val sub15 = sub14.replace(\":\", \"\")\n         \
    \       val sub16 = sub15.replace(\"<\", \"\")\n                val sub17 = sub16.replace(\"\
    >\", \"\")\n                val sub18 = sub17.replace(\",\", \"\")\n         \
    \       val sub19 = sub18.replace(\";\", \"\")\n                val sub20 = sub19.replace(\"\
    -\", \"\")\n                val sub21 = sub20.replace(\"(\", \"\")\n         \
    \       val sub22 = sub21.replace(\")\", \"\")\n                val sub23 = sub22.replace(\"\
    '\", \"\")\n                val sub24 = sub23.replace(\"\\\"\", \"\")\n      \
    \          val sub25 = sub24.replace(\"&\", \"\")\n                val sub26 =\
    \ sub25.replace(\"%\", \"\")\n                val sub27 = sub26.replace(\"$\"\
    , \"\")\n                val sub28 = sub27.replace(\"!\", \"\")\n            \
    \    val sub29 = sub28.replace(\"?\", \"\")\n                val sub30 = sub29.replace(\"\
    :\", \"\")\n                val sub31 = sub30.replace(\"<\", \"\")\n         \
    \       val sub32 = sub31.replace(\">\", \"\")\n                val sub33 = sub32.replace(\"\
    ,\", \"\")\n                val sub34 = sub33.replace(\";\", \"\")\n         \
    \       val sub35 = sub34.replace(\"-\", \"\")\n                val sub36 = sub35.replace(\"\
    (\", \"\")\n                val sub37 = sub36.replace(\")\", \"\")\n         \
    \       val sub38 = sub37.replace(\"'\", \"\")\n                val sub39 = sub38.replace(\"\
    \\\"\", \"\")\n                val sub40 = sub39.replace(\"&\", \"\")\n      \
    \          val sub41 = sub40.replace(\"%\", \"\")\n                val sub42 =\
    \ sub41.replace(\"$\", \"\")\n                val sub43 = sub42.replace(\"!\"\
    , \"\")\n                val sub44 = sub43.replace(\"?\", \"\")\n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkqfgbbyc.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkqfgbbyc.scala:7:8\
    \ ----------------------\e[0m\e[0m\n\e[31m 7 |\e[0m        \e[33mfor\e[0m(i <-\
    \ \e[31m0\e[0m until string.length){\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m 8 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOf(substring,\
    \ i)\n\e[31m 9 |\e[0m            \e[33mif\e[0m(start != -\e[31m1\e[0m){\n\e[31m10\
    \ |\e[0m                \e[33mval\e[0m \e[36mend\e[0m = start + substring.length\n\
    \e[31m11 |\e[0m                \e[33mval\e[0m \e[36msub\e[0m = string.substring(start,\
    \ end)\n\e[31m12 |\e[0m                \e[33mval\e[0m \e[36msub2\e[0m = sub.toLowerCase\n\
    \e[31m13 |\e[0m                \e[33mval\e[0m \e[36msub3\e[0m = sub2.replace(\e\
    [31m\" \"\e[0m, \e[31m\"\"\e[0m)\n\e[31m14 |\e[0m                \e[33mval\e[0m\
    \ \e[36msub4\e[0m = sub3.replace(\e[31m\",\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m15\
    \ |\e[0m                \e[33mval\e[0m \e[36msub5\e[0m = sub4.replace(\e[31m\"\
    -\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36msub6\e\
    [0m = sub5.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m17 |\e[0m       \
    \         \e[33mval\e[0m \e[36msub7\e[0m = sub6.replace(\e[31m\")\"\e[0m, \e[31m\"\
    \"\e[0m)\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36msub8\e[0m = sub7.replace(\e\
    [31m\"'\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m19 |\e[0m                \e[33mval\e[0m\
    \ \e[36msub9\e[0m = sub8.replace(\e[31m\"\\\"\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m20\
    \ |\e[0m                \e[33mval\e[0m \e[36msub10\e[0m = sub9.replace(\e[31m\"\
    &\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36msub11\e\
    [0m = sub10.replace(\e[31m\"%\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m22 |\e[0m      \
    \          \e[33mval\e[0m \e[36msub12\e[0m = sub11.replace(\e[31m\"$\"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36msub13\e[0m\
    \ = sub12.replace(\e[31m\"!\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m24 |\e[0m        \
    \        \e[33mval\e[0m \e[36msub14\e[0m = sub13.replace(\e[31m\"?\"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m25 |\e[0m          "
  stdout: ''
  timestamp: 1660028514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val substrings = string.split(substring)\n        substrings.foreach(s\
    \ => {\n            val count = count.get(s)\n            if (count == null) count.put(s,\
    \ 1L)\n            else count.put(s, count + 1L)\n        })\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcew6b6u3.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028510
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val index = 0\n        while (index < string.length) {\n            val\
    \ start = string.indexOf(substring, index)\n            if (start == -1) break\n\
    \            val end = start + substring.length\n            val value = count.get(substring)\n\
    \            if (value == null) count.put(substring, 1L)\n            else count.put(substring,\
    \ value + 1L)\n            index = end\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91wk4iwp.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp91wk4iwp.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mif\e[0m (start == -\e[31m1\e[0m) break\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp91wk4iwp.scala:15:18 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            index = end\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val index\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028511
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8lvgwqzy.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val index = string.indexOf(substring)\n      \
    \  if (index == -1)\n            return 0\n        else\n            string.count(_\
    \ == substring) + howManyTimes(string.drop(index + substring.length), substring)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp04ex95nk.scala:10:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            string.count(_ == substring) + howManyTimes(string.drop(index\
    \ + substring.length), substring)\n\e[31m\e[31m   |\e[0m                     \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = string.indexOf(string(i), i)\n            val end = string.indexOf(string(i),\
    \ start+1)\n            if(start != -1 && end != -1){\n                val sub\
    \ = string.substring(start, end)\n                if(sub.equals(substring)){\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdbpdlqxd.scala:21)\n\tat Problem.main(tmpdbpdlqxd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028517
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var lastIndex = -1\n  \
    \      string.lastIndexOf(substring) match {\n            case -1 => count\n \
    \           case index =>\n                lastIndex = index\n               \
    \ count += 1\n                count\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbc6gstzp.scala:18)\n\tat Problem.main(tmpbc6gstzp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.Map[String, Long]()\n   \
    \     string.split(substring).foreach(s => {\n            counts(s) += 1\n   \
    \     })\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxt_k22fk.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028514
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = new mutable.HashMap[String, Int]()\n        val index2 =\
    \ new mutable.HashMap[String, Int]()\n        val index3 = new mutable.HashMap[String,\
    \ Int]()\n        val index4 = new mutable.HashMap[String, Int]()\n        val\
    \ index5 = new mutable.HashMap[String, Int]()\n        val index6 = new mutable.HashMap[String,\
    \ Int]()\n        val index7 = new mutable.HashMap[String, Int]()\n        val\
    \ index8 = new mutable.HashMap[String, Int]()\n        val index9 = new mutable.HashMap[String,\
    \ Int]()\n        val index10 = new mutable.HashMap[String, Int]()\n        val\
    \ index11 = new mutable.HashMap[String, Int]()\n        val index12 = new mutable.HashMap[String,\
    \ Int]()\n        val index13 = new mutable.HashMap[String, Int]()\n        val\
    \ index14 = new mutable.HashMap[String, Int]()\n        val index15 = new mutable.HashMap[String,\
    \ Int]()\n        val index16 = new mutable.HashMap[String, Int]()\n        val\
    \ index17 = new mutable.HashMap[String, Int]()\n        val index18 = new mutable.HashMap[String,\
    \ Int]()\n        val index19 = new mutable.HashMap[String, Int]()\n        val\
    \ index20 = new mutable.HashMap[String, Int]()\n        val index21 = new mutable.HashMap[String,\
    \ Int]()\n        val index22 = new mutable.HashMap[String, Int]()\n        val\
    \ index23 = new mutable.HashMap[String, Int]()\n        val index24 = new mutable.HashMap[String,\
    \ Int]()\n        val index25 = new mutable.HashMap[String, Int]()\n        val\
    \ index26 = new mutable.HashMap[String, Int]()\n        val index27 = new mutable.HashMap[String,\
    \ Int]()\n        val index28 = new mutable.HashMap[String, Int]()\n        val\
    \ index29 = new mutable.HashMap[String, Int]()\n        val index30 = new mutable.HashMap[String,\
    \ Int]()\n        val index31 = new mutable.HashMap[String, Int]()\n        val\
    \ index32 = new mutable.HashMap[String, Int]()\n        val index33 = new mutable.HashMap[String,\
    \ Int]()\n        val index34 = new mutable.HashMap[String, Int]()\n        val\
    \ index35 = new mutable.HashMap[String, Int]()\n        val index36 = new mutable.Hash\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:7:24\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mindex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mindex2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                       \
    \  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mindex3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mindex4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(s\
    \ => {\n            val count = mutable.HashMap[String, Long]()\n            val\
    \ stringArray2 = string.split(s)\n            stringArray2.foreach(ss => {\n \
    \               val count = mutable.HashMap[String, Long]()\n                val\
    \ stringArray3 = string.split(ss)\n                stringArray3.foreach(sss =>\
    \ {\n                    val count = mutable.HashMap[String, Long]()\n       \
    \             val stringArray4 = string.split(sss)\n                    stringArray4.foreach(ssss\
    \ => {\n                        val count = mutable.HashMap[String, Long]()\n\
    \                        val stringArray5 = string.split(ssss)\n             \
    \           stringArray5.foreach(sssss => {\n                            val count\
    \ = mutable.HashMap[String, Long]()\n                            val stringArray6\
    \ = string.split(sssss)\n                            stringArray6.foreach(ssssss\
    \ => {\n                                val count = mutable.HashMap[String, Long]()\n\
    \                                val stringArray7 = string.split(ssssss)\n   \
    \                             stringArray7.foreach(sssssss => {\n            \
    \                        val count = mutable.HashMap[String, Long]()\n       \
    \                             val stringArray8 = string.split(sssssss)\n     \
    \                               stringArray8.foreach(ssssssss => {\n         \
    \                               val count = mutable.HashMap[String, Long]()\n\
    \                                        val stringArray9 = string.split(ssssssss)\n\
    \                                        stringArray9.foreach(sssssssss => {\n\
    \                                            val count = mutable.HashMap[String,\
    \ Long]()\n                                            val stringArray10 = string.split(sssssssss)\n\
    \                                            stringArray10.foreach(ssssssssss\
    \ => {\n                                                val count = mutable.HashMap[String,\
    \ Long]()\n                                                val stringArray11 =\
    \ string.split(ssssssssss)\n                                                stringArray11.foreach(sssssssssss\
    \ => {\n                                                    val count = mutable.HashMap[String,\
    \ Long]()\n                                                    val stringArray12\
    \ = string.split(sssssssssss)\n                                              \
    \      stringArray12.foreach(sssssssssssss => {\n                            \
    \                            val count = mutable.HashMap[String, Long]()\n   \
    \                                                     val stringArray13 = string.split(ssssssssssss)\n\
    \                                                        stringArray13.foreach(ssssssssssssss\
    \ => {\n                                                            val count\
    \ = mutable.HashMap[String, Long]()\n                                        \
    \                    val stringArray14 = string.split(ssssssssssss)\n        \
    \                                                    stringArray14.foreach(ssssssssssssss\
    \ => {\n                                                                val count\
    \ = mutable.Hash\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgeyxw25y.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpgeyxw25y.scala:58:0 ----------------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeyxw25y.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpgeyxw25y.scala:9:24 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeyxw25y.scala:12:28\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m                \e[33mval\e\
    [0m \e[36mcount\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgeyxw25y.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mval\e[0m \e[36mcount\e[0m =\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when co"
  stdout: ''
  timestamp: 1660028515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(\"\").toList\n        val charsSub = substring.split(\"\
    \").toList\n        chars.foreach { char =>\n            charsSub.foreach { charSub\
    \ =>\n                if (char == charSub) {\n                    count.update(charSub,\
    \ count.getOrElse(charSub, 0L) + 1L)\n                }\n            }\n     \
    \   }\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyl3izqk6.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = string.indexOf(substring, i)\n            if(start !=\
    \ -1){\n                val end = start + substring.length\n                val\
    \ subStringLength = end - start\n                count = count + subStringLength\n\
    \                i = end\n            }\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpm1dz6w9d.scala:13:18 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                i = end\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val stringArray = string.split(substring)\n  \
    \      val substringArray = substring.split(\"\")\n        val substringArrayLength\
    \ = substringArray.length\n        val stringArrayLength = stringArray.length\n\
    \        val substringArrayLength = substringArray.length\n        var count =\
    \ 0\n        var i = 0\n        var j = 0\n        while (i < stringArrayLength\
    \ && j < substringArrayLength) {\n            if (stringArray(i) == substringArray(j))\
    \ {\n                count += 1\n                i += 1\n                j +=\
    \ 1\n            } else if (stringArray(i) > substringArray(j)) {\n          \
    \      i += 1\n            } else {\n                j += 1\n            }\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpglg1_zhx.scala:10:12 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36msubstringArrayLength\e[0m\
    \ = substringArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35msubstringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(word => {\n            val count = count.get(word)\
    \ match {\n                case Some(count) => count + 1\n                case\
    \ None => 1\n            }\n            count.toLong match {\n               \
    \ case count if count > 0 => count.toLong + 1\n                case _ => count.toLong\n\
    \            }\n            count.put(word, count.toLong)\n        })\n      \
    \  count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptriaqvlc.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val countMap = mutable.Map[String, Long]()\n \
    \       val subStringSet = substring.split(\"\").toSet\n        string.split(\"\
    \").foreach(c => {\n            if (subStringSet.contains(c)) {\n            \
    \    countMap.getOrElse(c.toString, 0L) += 1\n            }\n        })\n    \
    \    countMap.size\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_n4w8geo.scala:6:23 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028515
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnn_at_s.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnn_at_s.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(word => count.update(word, count.getOrElse(word,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwsv9021w.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = string.indexOf(substring, i)\n            if(start !=\
    \ -1){\n                count += 1\n                i = start\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmptbc78o6n.scala:11:18 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                i = start\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Int]()\n \
    \       string.split(substring).foreach(x => count(x) += 1) // Count each substring\n\
    \        count.values.sum // Sum of all counts\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa05pklzt.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028517
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(x => count.update(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp396hi1v8.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8lvgwqzy.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028513
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val index = 0\n        while (index < string.length) {\n            val\
    \ start = string.indexOf(substring, index)\n            if (start == -1)\n   \
    \             break\n            val end = start + substring.length\n        \
    \    val value = count.get(substring)\n            if (value == null)\n      \
    \          count(substring) = Long(1)\n            else\n                count(substring)\
    \ = value + 1\n            index = end\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7dc2tpja.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7dc2tpja.scala:11:16 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmp7dc2tpja.scala:18:18 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            index = end\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val index\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var index = 0\n       \
    \ var startIndex = 0\n        var endIndex = 0\n        while (index < string.length)\
    \ {\n            if (string.charAt(index) == substring.charAt(0)) {\n        \
    \        count += 1\n                startIndex = index\n                endIndex\
    \ = index\n                index += 1\n            } else {\n                endIndex\
    \ = index\n            }\n        }\n        while (startIndex < endIndex) {\n\
    \            if (string.charAt(startIndex) == substring.charAt(0)) {\n       \
    \         count += 1\n                startIndex += 1\n            } else {\n\
    \                startIndex += 1\n            }\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val countMap = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = countMap.getOrElse(substring, 0)\n              \
    \  countMap += (substring -> count + 1)\n                i = end\n           \
    \ }\n        }\n        countMap.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wexzwvd.scala:6:23 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp8wexzwvd.scala:13:18 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                i = end\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028518
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        string.split(substring).foreach(x\
    \ => count += 1)\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpljp221s9.scala:11)\n\tat Problem.main(tmpljp221s9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var startIndex = 0\n  \
    \      var endIndex = 0\n        while(startIndex < string.length) {\n       \
    \     endIndex = string.indexOf(substring, startIndex + 1)\n            if(endIndex\
    \ >= 0) {\n                count += 1\n                startIndex = endIndex +\
    \ 1\n            } else {\n                startIndex += 1\n            }\n  \
    \      }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5zec7m1g.scala:22)\n\tat Problem.main(tmp5zec7m1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bocc3in.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).toList\n        chars.foreach(c =>\
    \ count.putIfAbsent(c, 0L) += 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgjtxcoyo.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val countMap = mutable.Map[String, Long]()\n \
    \       for (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = countMap.getOrElse(substring, 0)\n              \
    \  countMap += (substring -> count + 1)\n            }\n        }\n        countMap.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppa_oitz1.scala:6:23 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m  |\e[0m                       Not found: mutable\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppa_oitz1.scala:8:31\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstart\e[0m = string.indexOfSubstring(substring, i)\n\e[31m\e[31m  |\e\
    [0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m      \
    \                  value indexOfSubstring is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = new mutable.HashMap[String, Int]()\n        val index2 =\
    \ new mutable.HashMap[String, Int]()\n        val index3 = new mutable.HashMap[String,\
    \ Int]()\n        val index4 = new mutable.HashMap[String, Int]()\n        val\
    \ index5 = new mutable.HashMap[String, Int]()\n        val index6 = new mutable.HashMap[String,\
    \ Int]()\n        val index7 = new mutable.HashMap[String, Int]()\n        val\
    \ index8 = new mutable.HashMap[String, Int]()\n        val index9 = new mutable.HashMap[String,\
    \ Int]()\n        val index10 = new mutable.HashMap[String, Int]()\n        val\
    \ index11 = new mutable.HashMap[String, Int]()\n        val index12 = new mutable.HashMap[String,\
    \ Int]()\n        val index13 = new mutable.HashMap[String, Int]()\n        val\
    \ index14 = new mutable.HashMap[String, Int]()\n        val index15 = new mutable.HashMap[String,\
    \ Int]()\n        val index16 = new mutable.HashMap[String, Int]()\n        val\
    \ index17 = new mutable.HashMap[String, Int]()\n        val index18 = new mutable.HashMap[String,\
    \ Int]()\n        val index19 = new mutable.HashMap[String, Int]()\n        val\
    \ index20 = new mutable.HashMap[String, Int]()\n        val index21 = new mutable.HashMap[String,\
    \ Int]()\n        val index22 = new mutable.HashMap[String, Int]()\n        val\
    \ index23 = new mutable.HashMap[String, Int]()\n        val index24 = new mutable.HashMap[String,\
    \ Int]()\n        val index25 = new mutable.HashMap[String, Int]()\n        val\
    \ index26 = new mutable.HashMap[String, Int]()\n        val index27 = new mutable.HashMap[String,\
    \ Int]()\n        val index28 = new mutable.HashMap[String, Int]()\n        val\
    \ index29 = new mutable.HashMap[String, Int]()\n        val index30 = new mutable.HashMap[String,\
    \ Int]()\n        val index31 = new mutable.HashMap[String, Int]()\n        val\
    \ index32 = new mutable.HashMap[String, Int]()\n        val index33 = new mutable.HashMap[String,\
    \ Int]()\n        val index34 = new mutable.HashMap[String, Int]()\n        val\
    \ index35 = new mutable.HashMap[String, Int]()\n        val index36 = new mutable.Hash\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:7:24\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mindex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mindex2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                       \
    \  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mindex3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mindex4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        subStrings.foreach(s\
    \ => count.put(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvchycnyz.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028520
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnn_at_s.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(x => count(x) = count(x) + 1)\n     \
    \   count.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfb5ug3ns.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = string.indexOf(substring)\n        while(index != -1) {\n\
    \            val substringIndex = string.indexOf(substring, index + 1)\n     \
    \       val substringLength = substring.length\n            val substringIndex\
    \ = substringIndex - substringLength\n            val substringLength = substringIndex\
    \ + substringLength\n            val substring = string.substring(substringIndex,\
    \ substringLength)\n            val count = count.get(substring) match {\n   \
    \             case None => count.put(substring, 1L)\n                case Some(count)\
    \ => count.toLong + 1\n            }\n            index = substringIndex\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp299xxhbp.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp299xxhbp.scala:11:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e\
    [0m \e[36msubstringIndex\e[0m = substringIndex - substringLength\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringIndex is already defined as \e[33mvalue\e[0m \e[35msubstringIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp299xxhbp.scala:12:16 ---------------------------\e[0m\e[0m\n\e\
    [31m12 |\e[0m            \e[33mval\e[0m \e[36msubstringLength\e[0m = substringIndex\
    \ + substringLength\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringLength is already defined as \e[33mvalue\e[0m \e\
    [35msubstringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp299xxhbp.scala:10:34 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e[36msubstringLength\e[0m\
    \ = substring.length\n\e[31m\e[31m   |\e[0m                                  ^\e\
    [0m\n\e[31m   |\e[0m                                  Recursive \e[33mvalue\e\
    [0m \e[35msubstring\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp299xxhbp.scala:13:45 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m            \e[33mval\e[0m \e[36msubstring\e[0m = string.substring(substringIndex,\
    \ substringLength)\n\e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660028520
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val startIndex = string.indexOf(substring)\n \
    \       if (startIndex == -1)\n            return 0\n        val endIndex = startIndex\
    \ + substring.length\n        val count = string.length - endIndex\n        if\
    \ (endIndex < string.length)\n            count\n        else\n            count\
    \ + 1\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpjodttb.scala:18)\n\tat Problem.main(tmprpjodttb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring) match {\n                  \
    \  case Some(count) => count + 1\n                    case None => 1\n       \
    \         }\n                count.put(substring, count)\n                count.put(string.substring(start,\
    \ end), count)\n            }\n        }\n        count.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj69dqvs1.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(x => count.update(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbh4zz7fd.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = string.indexOf(substring, i)\n            if(start !=\
    \ -1){\n                val end = start + substring.length\n                val\
    \ sub = string.substring(start, end)\n                count += sub.count(_ ==\
    \ substring)\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc09mwo46.scala:12:22 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                count += sub.count(_ == substring)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpc09mwo46.scala:12:35 -----------------------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m                count += sub.count(_ == substring)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660028525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).equals(substring))\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpocna56_q.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0lu2yydk.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = i\n            val end = i + substring.length\n     \
    \       val sub = string.substring(start, end)\n            if(sub.equals(substring)){\n\
    \                count += 1\n            }\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes$$anonfun$1(tmp0bn97h13.scala:10)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmp0bn97h13.scala:14)\n\
    \tat Problem$.main(tmp0bn97h13.scala:20)\n\tat Problem.main(tmp0bn97h13.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp95l3qiip.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val index = string.indexOf(substring)\n      \
    \  if (index == -1)\n            return 0\n        val start = index\n       \
    \ val end = index + substring.length\n        val count = string.length - (end\
    \ - start)\n        if (count > 0)\n            howManyTimes(string.substring(start,\
    \ end), substring) + 1\n        else\n            count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx62uq_oz.scala:19)\n\tat Problem.main(tmpx62uq_oz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start > -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0)\n                counts\
    \ += (substring -> count + 1)\n                i = end\n            }\n      \
    \  }\n        counts.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm0q1i5ex.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpm0q1i5ex.scala:13:18 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                i = end\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        subStrings.foreach(s\
    \ => counts(s) += 1L)\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp07zps74j.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = new mutable.HashMap[String, Int]()\n        val index2 =\
    \ new mutable.HashMap[String, Int]()\n        val index3 = new mutable.HashMap[String,\
    \ Int]()\n        val index4 = new mutable.HashMap[String, Int]()\n        val\
    \ index5 = new mutable.HashMap[String, Int]()\n        val index6 = new mutable.HashMap[String,\
    \ Int]()\n        val index7 = new mutable.HashMap[String, Int]()\n        val\
    \ index8 = new mutable.HashMap[String, Int]()\n        val index9 = new mutable.HashMap[String,\
    \ Int]()\n        val index10 = new mutable.HashMap[String, Int]()\n        val\
    \ index11 = new mutable.HashMap[String, Int]()\n        val index12 = new mutable.HashMap[String,\
    \ Int]()\n        val index13 = new mutable.HashMap[String, Int]()\n        val\
    \ index14 = new mutable.HashMap[String, Int]()\n        val index15 = new mutable.HashMap[String,\
    \ Int]()\n        val index16 = new mutable.HashMap[String, Int]()\n        val\
    \ index17 = new mutable.HashMap[String, Int]()\n        val index18 = new mutable.HashMap[String,\
    \ Int]()\n        val index19 = new mutable.HashMap[String, Int]()\n        val\
    \ index20 = new mutable.HashMap[String, Int]()\n        val index21 = new mutable.HashMap[String,\
    \ Int]()\n        val index22 = new mutable.HashMap[String, Int]()\n        val\
    \ index23 = new mutable.HashMap[String, Int]()\n        val index24 = new mutable.HashMap[String,\
    \ Int]()\n        val index25 = new mutable.HashMap[String, Int]()\n        val\
    \ index26 = new mutable.HashMap[String, Int]()\n        val index27 = new mutable.HashMap[String,\
    \ Int]()\n        val index28 = new mutable.HashMap[String, Int]()\n        val\
    \ index29 = new mutable.HashMap[String, Int]()\n        val index30 = new mutable.HashMap[String,\
    \ Int]()\n        val index31 = new mutable.HashMap[String, Int]()\n        val\
    \ index32 = new mutable.HashMap[String, Int]()\n        val index33 = new mutable.HashMap[String,\
    \ Int]()\n        val index34 = new mutable.HashMap[String, Int]()\n        val\
    \ index35 = new mutable.HashMap[String, Int]()\n        val index36 = new mutable.Hash\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:7:24\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mindex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mindex2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                       \
    \  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mindex3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mindex4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660028495
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0L\n        var startIndex = 0\n \
    \       var endIndex = 0\n        while(startIndex < string.length) {\n      \
    \      endIndex = string.indexOf(substring, startIndex)\n            if(endIndex\
    \ == -1) {\n                count += 1L\n                startIndex = string.length\n\
    \            } else {\n                count += 1L\n                startIndex\
    \ = endIndex + 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplh_3xooc.scala:24)\n\tat Problem.main(tmplh_3xooc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Int]\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count(string.substring(i,\
    \ i + substring.length)) = count(string.substring(i, i + substring.length)) +\
    \ 1\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8iy8vo5a.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => {\n            val count = count.getOrElse(x, 0)\n            count.update(x,\
    \ count + 1)\n        })\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpblvtr4rf.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val subStrings = string.substring(startIndex, endIndex).split(\"\
    \")\n        subStrings.foreach(s => count.update(s, count.getOrElse(s, 0L) +\
    \ 1))\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphkre0qz1.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzr5wp99.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = string.indexOf(substring, i)\n            if(start !=\
    \ -1){\n                count += 1\n                i = start\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmptbc78o6n.scala:11:18 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                i = start\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            if(string.substring(i, i + substring.length) == substring){\n   \
    \             count += 1\n            }\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes$$anonfun$1(tmpfi5jcld6.scala:8)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmpfi5jcld6.scala:11)\n\
    \tat Problem$.main(tmpfi5jcld6.scala:17)\n\tat Problem.main(tmpfi5jcld6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Int]()\n \
    \       val stringArray = string.split(substring)\n        for(i <- 0 until stringArray.length){\n\
    \            val currentString = stringArray(i)\n            val currentCount\
    \ = count.get(currentString)\n            if(currentCount == null){\n        \
    \        count(currentString, 1)\n            } else {\n                count(currentString,\
    \ currentCount + 1)\n            }\n        }\n        count.values.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiip2xn0x.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        for(i <- 0 until stringArray.length){\n\
    \            val currentString = stringArray(i)\n            val currentSubstring\
    \ = substring\n            val currentCount = count.get(currentSubstring)\n  \
    \          if(currentCount == null){\n                count.put(currentSubstring,\
    \ 1)\n            }\n            else{\n                count.put(currentSubstring,\
    \ count.get(currentSubstring) + 1)\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc_6u4crc.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for(subString <- subStrings)\
    \ {\n            val currentCount = count.get(subString)\n            if(currentCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, currentCount + 1)\n            }\n     \
    \   }\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptrvhco_m.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028527
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(s => count.update(s, count.getOrElse(s,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3xxej966.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028500
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        for(i <- 0 until string.length){\n            val start = string.indexOf(substring,\
    \ i)\n            if(start != -1){\n                val end = start + substring.length\n\
    \                val key = string.substring(start, end)\n                val value\
    \ = count.get(key)\n                if(value == null){\n                    count.put(key,\
    \ 1L)\n                }\n                else{\n                    count.put(key,\
    \ value + 1L)\n                }\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1r_awes4.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val index = string.indexOf(substring)\n      \
    \  if (index == -1)\n            return 0\n        val count = index - string.lastIndexOf(substring)\n\
    \        if (count > 0)\n            count\n        else\n            count +\
    \ 1\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzw28x1_.scala:17)\n\tat Problem.main(tmppzw28x1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3bocc3in.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028492
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = string.indexOf(substring, i)\n            if(start !=\
    \ -1){\n                count += 1\n                i = start\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmptbc78o6n.scala:11:18 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                i = start\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val\
    \ i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(string(i),\
    \ i)\n            if (start > -1) {\n                val end = string.indexOf(string(i),\
    \ start + substring.length)\n                if (end > -1) {\n               \
    \     val sub = string.substring(start + substring.length, end)\n            \
    \        val count = count.get(sub) match {\n                        case Some(count)\
    \ => count + 1\n                        case None => 1\n                    }\n\
    \                    count.put(sub, count + 1)\n                }\n          \
    \  }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0pbyupdc.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.Map[String, Long]()\n   \
    \     string.split(substring).foreach(x => counts(x) += 1L)\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmycvdbn_.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028529
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = new mutable.HashMap[String, Int]()\n        val index2 =\
    \ new mutable.HashMap[String, Int]()\n        val index3 = new mutable.HashMap[String,\
    \ Int]()\n        val index4 = new mutable.HashMap[String, Int]()\n        val\
    \ index5 = new mutable.HashMap[String, Int]()\n        val index6 = new mutable.HashMap[String,\
    \ Int]()\n        val index7 = new mutable.HashMap[String, Int]()\n        val\
    \ index8 = new mutable.HashMap[String, Int]()\n        val index9 = new mutable.HashMap[String,\
    \ Int]()\n        val index10 = new mutable.HashMap[String, Int]()\n        val\
    \ index11 = new mutable.HashMap[String, Int]()\n        val index12 = new mutable.HashMap[String,\
    \ Int]()\n        val index13 = new mutable.HashMap[String, Int]()\n        val\
    \ index14 = new mutable.HashMap[String, Int]()\n        val index15 = new mutable.HashMap[String,\
    \ Int]()\n        val index16 = new mutable.HashMap[String, Int]()\n        val\
    \ index17 = new mutable.HashMap[String, Int]()\n        val index18 = new mutable.HashMap[String,\
    \ Int]()\n        val index19 = new mutable.HashMap[String, Int]()\n        val\
    \ index20 = new mutable.HashMap[String, Int]()\n        val index21 = new mutable.HashMap[String,\
    \ Int]()\n        val index22 = new mutable.HashMap[String, Int]()\n        val\
    \ index23 = new mutable.HashMap[String, Int]()\n        val index24 = new mutable.HashMap[String,\
    \ Int]()\n        val index25 = new mutable.HashMap[String, Int]()\n        val\
    \ index26 = new mutable.HashMap[String, Int]()\n        val index27 = new mutable.HashMap[String,\
    \ Int]()\n        val index28 = new mutable.HashMap[String, Int]()\n        val\
    \ index29 = new mutable.HashMap[String, Int]()\n        val index30 = new mutable.HashMap[String,\
    \ Int]()\n        val index31 = new mutable.HashMap[String, Int]()\n        val\
    \ index32 = new mutable.HashMap[String, Int]()\n        val index33 = new mutable.HashMap[String,\
    \ Int]()\n        val index34 = new mutable.HashMap[String, Int]()\n        val\
    \ index35 = new mutable.HashMap[String, Int]()\n        val index36 = new mutable.Hash\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:7:24\
    \ -------------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e\
    [36mindex\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:8:25 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mindex2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m  |\e[0m                       \
    \  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpac3oaqed.scala:9:25\
    \ -------------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e\
    [36mindex3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                         ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                         Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpac3oaqed.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mindex4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660028495
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).toList\n        chars.foreach(c =>\
    \ count.putIfAbsent(c, 0L) += 1)\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgjtxcoyo.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var start = 0\n       \
    \ var end = string.length\n        while (start < end) {\n            val mid\
    \ = start + (end - start) / 2\n            if (string.substring(mid).contains(substring))\
    \ {\n                count += 1\n                start = mid + 1\n           \
    \ } else {\n                end = mid\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo3npubdm.scala:22)\n\tat Problem.main(tmpo3npubdm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val value = count.get(substring)\n                if (value ==\
    \ null) {\n                    count.put(substring, 1)\n                } else\
    \ {\n                    count.put(substring, value + 1)\n                }\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphtoepwer.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Int]()\n\
    \        string.split(substring).foreach(x => counts += (x -> 1))\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk18mwv9f.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Int]()\n \
    \       for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val substringCount = count.get(substring)\n                if\
    \ (substringCount == null) {\n                    count.put(substring, 1)\n  \
    \              } else {\n                    count.put(substring, substringCount\
    \ + 1)\n                }\n                i = end\n            } else {\n   \
    \             i = string.length\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnkbcv4av.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpnkbcv4av.scala:17:18 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                i = end\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val i\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpnkbcv4av.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                i = string.length\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        string.split(substring).foreach(x\
    \ => {\n            if (string.indexOf(x) != -1) {\n                count += 1\n\
    \            }\n        })\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplgfxihr2.scala:15)\n\tat Problem.main(tmplgfxihr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).contains(substring))\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7jwwfqzs.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring) match {\n                  \
    \  case Some(count) => count + 1\n                    case None => 1\n       \
    \         }\n                count.put(substring, count)\n                count.put(string.substring(start,\
    \ end), count)\n            }\n        }\n        count.values.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmy_c1hz1.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmy_c1hz1.scala:8:31\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstart\e[0m = string.indexOfSubstring(substring, i)\n\e[31m\e[31m  |\e\
    [0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m      \
    \                  value indexOfSubstring is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start > -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring) match {\n                  \
    \  case Some(count) => count + 1\n                    case None => 1\n       \
    \         }\n                count.put(substring(start, end), count)\n       \
    \     }\n        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlclzcck.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        for (i <- 0 until\
    \ stringArray.length) {\n            val currentString = stringArray(i)\n    \
    \        if (count.contains(currentString)) {\n                count(currentString,\
    \ count) + 1\n            } else {\n                count(currentString, 1L)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7azh55l.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7azh55l.scala:8:8\
    \ ----------------------\e[0m\e[0m\n\e[31m 8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until stringArray.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m 9 |\e[0m            \e[33mval\e[0m \e[36mcurrentString\e[0m = stringArray(i)\n\
    \e[31m10 |\e[0m            \e[33mif\e[0m (count.contains(currentString)) {\n\e\
    [31m11 |\e[0m                count(currentString, count) + \e[31m1\e[0m\n\e[31m12\
    \ |\e[0m            } \e[33melse\e[0m {\n\e[31m13 |\e[0m                count(currentString,\
    \ \e[31m1L\e[0m)\n\e[31m14 |\e[0m            }\n\e[31m15 |\e[0m        }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var start = 0\n       \
    \ var end = 0\n        while(start < string.length){\n            end = string.indexOf(substring,\
    \ start+1)\n            if(end == -1){\n                count = count + 1\n  \
    \              start = string.length\n            } else {\n                count\
    \ = count + 1\n                start = end\n            }\n        }\n       \
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028534
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        for(i <- 0 until string.length){\n\
    \            if(string.substring(i, i+substring.length) == substring){\n     \
    \           count += 1\n            }\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 7, end 10, length 9\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.howManyTimes$$anonfun$1(tmphi_hhh1z.scala:8)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.howManyTimes(tmphi_hhh1z.scala:11)\n\
    \tat Problem$.main(tmphi_hhh1z.scala:17)\n\tat Problem.main(tmphi_hhh1z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).equals(substring))\n                count(substring, 1L)\
    \ += 1 // count overlaping cases\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqx100597.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028531
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(s => counts += (s -> 1))\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl258a8cv.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count(string.substring(i,\
    \ i + substring.length)) = count(string.substring(i, i + substring.length)) +\
    \ 1\n        count.values.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzxs1ffg6.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var index = 0\n       \
    \ while(index < string.length){\n            val found = string.indexOf(substring,\
    \ index)\n            if(found != -1){\n                count += 1\n         \
    \       index = found + 1\n            }else{\n                index += substring.length\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvfp8dd7v.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) ==\
    \ substring.charAt(0))\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) + 1L)\n            else\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0L))\n        count.get(substring).map(_.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_81koai.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        for (i <- 0 until string.length)\n            if (string.charAt(i) ==\
    \ substring.charAt(0))\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) + 1L)\n            else\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) - 1L)\n        count.get(substring).map(_.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0l6ktk20.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9ubezir.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ivchrnw.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.Map[String, Long]()\n   \
    \     string.split(substring).foreach(x => counts += (x -> 1))\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2ljjc0p.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028502
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).toList\n        chars.foreach { c\
    \ =>\n            val count = counts.getOrElse(c.toLowerCase(), 0)\n         \
    \   counts.put(c.toLowerCase(), count + 1)\n        }\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprivky4dm.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028534
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.Map[String, Long]()\n   \
    \     string.split(substring).foreach(x => counts += x -> 1)\n        counts.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpauegk7d8.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ivchrnw.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028507
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = string.indexOf(substring)\n        while (index >= 0) {\n\
    \            val substringIndex = string.indexOf(substring, index + 1)\n     \
    \       if (substringIndex >= 0) {\n                val substringLength = substring.length\n\
    \                val substringStart = substringIndex + substringLength\n     \
    \           val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprq3nkio7.scala:66:0 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprq3nkio7.scala:6:24\
    \ -------------------------\e[0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmprq3nkio7.scala:15:20 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36msubstringLength\e\
    [0m = substring.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringLength is already defined as \e[33mvalue\e[0m \e\
    [35msubstringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprq3nkio7.scala:16:20 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36msubstringStart\e\
    [0m = substringIndex + substringLength\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringStart is already defined as \e[33mvalue\e[0m \e[35msubstringStart\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprq3nkio7.scala:17:20 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m                \e[33mval\e[0m \e[36msubstringEnd\e[0m = substringIndex\
    \ + substringLength + substring.length\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msubstringEnd is already defined as \e[33mvalue\e[0m \e[35msubstringEnd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the "
  stdout: ''
  timestamp: 1660028535
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val substrings = string.split(substring)\n        substrings.foreach(s\
    \ => {\n            val count = count.get(s) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.toMap\
    \ += (s -> 1)\n        })\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprvasfg6x.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while\
    \ (i < string.length) {\n            val start = i\n            while (i < string.length\
    \ && string.charAt(i) == substring.charAt(i)) {\n                i += 1\n    \
    \        }\n            val end = i\n            count += 1\n            i = start\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.howManyTimes(tmp3fnft2a3.scala:10)\n\tat Problem$.main(tmp3fnft2a3.scala:21)\n\
    \tat Problem.main(tmp3fnft2a3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcwq59iny.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkraw76zj.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028485
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        var count = 0\n        string.split(substring).foreach(x\
    \ => {\n            val index = string.indexOf(x)\n            if (index != -1)\
    \ {\n                count += 1\n                string = string.substring(0,\
    \ index) + string.substring(index + x.length)\n            }\n        })\n   \
    \     count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmprxjcy4ap.scala:11:23 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                string = string.substring(\e[31m0\e[0m,\
    \ index) + string.substring(index + x.length)\n\e[31m\e[31m   |\e[0m         \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val string\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap.empty[String, Long]\n\
    \        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptzr5wp99.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => {\n            val count = count.getOrElse(x, 0)\n            count.toLong\
    \ + 1\n        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1n7jywed.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val index = string.indexOf(substring)\n      \
    \  if (index == -1) 0\n        else 1 + howManyTimes(string.substring(index +\
    \ substring.length), substring)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj6yk9qj4.scala:13)\n\tat Problem.main(tmpj6yk9qj4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val pattern = Pattern.compile(substring)\n   \
    \     val matcher = pattern.matcher(string)\n        var count = 0\n        while\
    \ (matcher.find()) {\n            count += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8o27fklh.scala:6:22 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(substring)\n\
    \e[31m\e[31m  |\e[0m                      ^^^^^^^\e[0m\n\e[31m  |\e[0m       \
    \               Not found: Pattern\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028536
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        for (c <- chars) {\n   \
    \         val value = count.getOrElse(c, 0) + 1\n            count.put(c, value)\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgo0rf8d0.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028484
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val startIndex = string.indexOf(substring)\n \
    \       if (startIndex == -1) 0\n        else string.lastIndexOf(substring) -\
    \ startIndex\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0497ujsm.scala:12)\n\tat Problem.main(tmp0497ujsm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028538
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        string.split(substring).foreach(x => count(x) += 1L)\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_g0e70hc.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028508
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        if (startIndex <\
    \ 0) 0\n        else string.substring(startIndex).count(c => count.get(substring)\
    \ == null || count.get(substring) < 1 || count.get(substring) == 0)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf81a96md.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val substrings = string.split(substring)\n        substrings.foreach(s\
    \ => {\n            val count = count.getOrElse(s, 0) + 1\n            count.put(s,\
    \ count)\n        })\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw9g2tl8n.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val subStrings = string.substring(startIndex, endIndex).split(\"\
    \\\\W+\")\n        val subStringsCount = subStrings.length\n        for(i <- 0\
    \ until subStringsCount) {\n            val subString = subStrings(i)\n      \
    \      val count = count.get(subString) match {\n                case Some(count)\
    \ => count + 1\n                case None => 1\n            }\n            count.toMap\
    \ += (subString -> 1)\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyvx8r6py.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val counts = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        substrings.foreach { c =>\n            val index = chars.indexOf(c)\n\
    \            if (index != -1)\n                counts.put(substrings(index), counts.getOrElse(substrings(index),\
    \ 0L) + 1)\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps9q7hzo3.scala:6:21 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m  |\e[0m                     Not found: mutable\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val value = count.get(substring)\n                if (value ==\
    \ null) {\n                    count.put(substring, 1)\n                } else\
    \ {\n                    count.put(substring, value + 1)\n                }\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphtoepwer.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val subStrings = string.split(substring)\n        for (subString <- subStrings)\
    \ {\n            val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnn_at_s.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028499
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.update(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppobbjrwh.scala:6:20 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m  |\e[0m                    Not found: mutable\n\e[31m  |\e[0m\n\e\
    [31m  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028537
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    def howManyTimes(string : String, substring\
    \ : String) : Long = {\n        val count = new mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => {\n            val count = count.getOrElse(x, 0)\n            count.update(x,\
    \ count + 1)\n        })\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpblvtr4rf.scala:6:24 -------------------------\e\
    [0m\e[0m\n\e[31m6 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m  |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m  |\e[0m                        Not\
    \ found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028524
