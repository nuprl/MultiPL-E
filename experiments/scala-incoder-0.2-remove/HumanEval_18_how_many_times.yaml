name: HumanEval_18_how_many_times
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n    def howManyTimes(string : String, substring : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"\
  ), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ["        val counts = mutable.HashMap[String, Int]()\n        for (i\
    \ <- 0 until string.length)\n            if (string.substring(i, i + substring.length).equals(substring))\n\
    \                counts.put(string.substring(i, i + substring.length), counts.getOrElse(string.substring(i,\
    \ i + substring.length), 0) + 1)\n        counts.values.sum", "        val count\
    \ = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.update(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum",
  "        var count = 0\n        var startIndex = 0\n        var endIndex = 0\n \
    \       while(startIndex < string.length){\n            endIndex = string.indexOf(substring,\
    \ startIndex)\n            if(endIndex == -1){\n                count += 1\n \
    \               startIndex = string.length\n            } else {\n           \
    \     count += 1\n                startIndex = endIndex + 1\n            }\n \
    \       }\n        count", "        var count = 0\n        var startIndex = 0\n\
    \        var endIndex = 0\n        while(startIndex < string.length) {\n     \
    \       endIndex = string.indexOf(substring, startIndex)\n            if(endIndex\
    \ >= 0) {\n                count += 1\n                startIndex = endIndex +\
    \ 1\n            } else {\n                startIndex += 1\n            }\n  \
    \      }\n        count", "        val count = mutable.HashMap[String, Long]()\n\
    \        val index = 0\n        val length = string.length\n        while (index\
    \ < length) {\n            val start = string.indexOf(substring, index)\n    \
    \        if (start < 0) {\n                count += ((substring, 1))\n       \
    \     } else {\n                val end = start + substring.length\n         \
    \       val count = count(string, start, end)\n                count += ((substring,\
    \ count))\n            }\n            index = end + 1\n        }\n        count.values.sum",
  "        val count = mutable.HashMap[String, Int]()\n        string.split(substring).foreach(x\
    \ => count.update(x, count.getOrElse(x, 0) + 1))\n        count.values.sum", " \
    \       val count = mutable.HashMap[String, Long]()\n        val chars = string.split(substring).map(_.toUpperCase)\n\
    \        chars.foreach { char =>\n            val count = count.get(char) match\
    \ {\n                case Some(count) => count + 1\n                case None\
    \ => 1\n            }\n            count.toList += char\n            count.put(char,\
    \ count)\n        }\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val subStrings = string.split(substring)\n        for (subString\
    \ <- subStrings) {\n            val subStringCount = count.get(subString)\n  \
    \          if (subStringCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, subStringCount\
    \ + 1)\n            }\n        }\n        count.values.sum", "        val count\
    \ = new mutable.HashMap[String, Long]()\n        for (i <- 0 until string.length)\n\
    \            if (string.substring(i, i + substring.length).equals(substring))\n\
    \                count.put(string.substring(i, i + substring.length), count.getOrElse(string.substring(i,\
    \ i + substring.length), 0L) + 1)\n        count.values.sum", "        var count\
    \ = 0\n        var index = 0\n        var startIndex = 0\n        var endIndex\
    \ = 0\n        var lastIndex = string.length - 1\n        while (startIndex <=\
    \ lastIndex) {\n            endIndex = string.indexOf(substring, startIndex)\n\
    \            if (endIndex == -1) {\n                count += 1\n             \
    \   startIndex = lastIndex + 1\n            } else {\n                count +=\
    \ 1\n                startIndex = endIndex + 1\n            }\n        }\n   \
    \     count", "        val count = mutable.HashMap[String, Long]()\n        val\
    \ chars = string.split(substring)\n        for (c <- chars) {\n            val\
    \ value = count.getOrElse(c, 0) + 1\n            count.put(c, value)\n       \
    \ }\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(substring)\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum", "        val count\
    \ = mutable.HashMap[String, Int]()\n        val chars = string.split(\"\").toList\n\
    \        val substrings = substring.split(\"\").toList\n        substrings.foreach\
    \ { substring =>\n            val index = chars.indexOf(substring)\n         \
    \   if (index != -1) {\n                count.put(substring, count.get(substring)\
    \ + 1)\n                chars.take(index).foreach(c => count.remove(c))\n    \
    \        }\n        }\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOf(substring, i)\n            if (start != -1) {\n             \
    \   val end = start + substring.length\n                val count = count.get(substring)\
    \ match {\n                    case Some(count) => count + 1\n               \
    \     case None => 1\n                }\n                count.put(substring,\
    \ count)\n                count.put(string.substring(start, end), count)\n   \
    \         }\n        }\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum", "        val countMap = mutable.Map[String,\
    \ Long]()\n        string.split(substring).foreach(s => countMap += (s -> 1))\n\
    \        countMap.size", "        val count = mutable.HashMap.empty[String, Long]\n\
    \        val chars = string.split(substring).map(_.toChar)\n        chars.foreach\
    \ { c =>\n            val count = count.getOrElseUpdate(c, 0) + 1\n          \
    \  count.toLong\n        }", "        val count = mutable.HashMap[String, Long]()\n\
    \        val substrings = string.split(substring)\n        substrings.foreach(s\
    \ => {\n            val count = count.getOrElse(s, 0) + 1\n            count.put(s,\
    \ count)\n        })\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(substring).toList\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum", "        val count\
    \ = mutable.HashMap[String, Int]()\n        for (i <- 0 until string.length) {\n\
    \            val start = string.indexOf(substring, i)\n            if (start >=\
    \ 0) {\n                val end = start + substring.length\n                if\
    \ (end < string.length) {\n                    val substring2 = string.substring(start,\
    \ end)\n                    count.get(substring2) match {\n                  \
    \      case None => count.put(substring2, 1)\n                        case Some(count2)\
    \ => count.put(substring2, count2 + 1)\n                    }\n              \
    \  }\n            }\n        }\n        count.values.sum", "        val count\
    \ = mutable.HashMap[String, Long]()\n        for (i <- 0 until string.length)\n\
    \            if (string.substring(i, i + substring.length).contains(substring))\n\
    \                count.put(string.substring(i, i + substring.length), count.getOrElse(string.substring(i,\
    \ i + substring.length), 0L) + 1)\n        count.values.sum", "        val counts\
    \ = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(s\
    \ => counts += (s -> 1))\n        counts.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count(x) = count(x) + 1)\n\
    \        count.values.sum", "        var count = 0\n        var lastIndex = -1\n\
    \        var lastSubIndex = -1\n        string.foreach(c => {\n            if\
    \ (c == substring(0)) {\n                count += 1\n                lastIndex\
    \ = string.indexOf(c, lastIndex + 1)\n                lastSubIndex = string.indexOf(substring,\
    \ lastIndex)\n            }\n        })\n        count", "        var count =\
    \ 0L\n        var start = 0L\n        var end = string.length - 1L\n        while\
    \ (start < end) {\n            val mid = (start + end) / 2\n            if (string.charAt(mid)\
    \ == substring.charAt(0)) {\n                if (string.charAt(mid + 1) == substring.charAt(1))\
    \ {\n                    count += 1\n                    start = mid + 1\n   \
    \                 end = mid - 1\n                } else {\n                  \
    \  count += 1\n                    start = mid + 1\n                }\n      \
    \      } else {\n                if (string.charAt(mid - 1) == substring.charAt(1))\
    \ {\n                    count += 1\n                    start = mid - 1\n   \
    \                 end = mid + 1\n                } else {\n                  \
    \  count += 1\n                    start = mid - 1\n                }\n      \
    \      }\n        }\n        count", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(\"\").toList\n        val charsSubstring\
    \ = substring.split(\"\").toList\n        chars.zip(charsSubstring).foreach {\n\
    \            case (ch, chSubstring) =>\n                if (chSubstring == \"\"\
    ) {\n                    count.put(ch, 1L)\n                } else {\n       \
    \             val count = count.get(ch)\n                    if (count == null)\
    \ {\n                        count.put(ch, 1L)\n                    } else {\n\
    \                        count.put(ch, count + 1L)\n                    }\n  \
    \              }\n        }\n        count.values.sum", "        val index = string.indexOf(substring)\n\
    \        if (index == -1)\n            return 0\n        val start = index\n \
    \       val end = index + substring.length\n        var count = 0\n        while\
    \ (start < string.length && end < string.length) {\n            if (string.charAt(start)\
    \ == string.charAt(end))\n                count += 1\n            start += 1\n\
    \            end += 1\n        }\n        count", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(substring).toList\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum", "        val count\
    \ = new mutable.HashMap[String, Long]()\n        val subStrings = string.split(substring)\n\
    \        for(subString <- subStrings) {\n            val subStringCount = count.get(subString)\n\
    \            if(subStringCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, subStringCount\
    \ + 1)\n            }\n        }\n        count.values.sum", "        val count\
    \ = new mutable.HashMap[String, Long]()\n        val chars = string.split(substring).toList\n\
    \        chars.foreach(c => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum",
  "        val count = new mutable.HashMap[String, Long]()\n        val subStrings\
    \ = string.split(substring)\n        for(subString <- subStrings) {\n        \
    \    val subStringCount = count.get(subString)\n            if(subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val subStrings = string.split(substring)\n        for(subString\
    \ <- subStrings) {\n            val count = count.get(subString)\n           \
    \ if(count == null) count.put(subString, 1L)\n            else count.put(subString,\
    \ count + 1L)\n        }\n        count.values.sum", "        val startIndex =\
    \ string.indexOf(substring)\n        if (startIndex == -1) 0\n        else string.lastIndexOf(substring)\
    \ + startIndex", "        val count = new mutable.HashMap[String, Long]()\n  \
    \      val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum", " \
    \       val count = new mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        for (i <- 0 until stringArray.length) {\n\
    \            val currentString = stringArray(i)\n            val currentCount\
    \ = count.get(currentString)\n            if (currentCount == null) {\n      \
    \          count.put(currentString, 1L)\n            } else {\n              \
    \  count.put(currentString, currentCount + 1L)\n            }\n        }\n   \
    \     count.values.sum", "        val count = mutable.HashMap[String, Long]()\n\
    \        val stringArray = string.split(substring)\n        for (i <- 0 until\
    \ stringArray.length)\n            count.update(stringArray(i), count.getOrElse(stringArray(i),\
    \ 0L) + 1)\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(\"\").toList\n        val substrings\
    \ = substring.split(\"\").toList\n        substrings.foreach { substring =>\n\
    \            val substringCount = chars.count(_ == substring)\n            count.put(substring,\
    \ substringCount)\n        }\n        count.values.sum", "        val count =\
    \ new mutable.HashMap[String, Long]()\n        val index = new mutable.HashMap[String,\
    \ Int]()\n        val index2 = new mutable.HashMap[String, Int]()\n        val\
    \ index3 = new mutable.HashMap[String, Int]()\n        val index4 = new mutable.HashMap[String,\
    \ Int]()\n        val index5 = new mutable.HashMap[String, Int]()\n        val\
    \ index6 = new mutable.HashMap[String, Int]()\n        val index7 = new mutable.HashMap[String,\
    \ Int]()\n        val index8 = new mutable.HashMap[String, Int]()\n        val\
    \ index9 = new mutable.HashMap[String, Int]()\n        val index10 = new mutable.HashMap[String,\
    \ Int]()\n        val index11 = new mutable.HashMap[String, Int]()\n        val\
    \ index12 = new mutable.HashMap[String, Int]()\n        val index13 = new mutable.HashMap[String,\
    \ Int]()\n        val index14 = new mutable.HashMap[String, Int]()\n        val\
    \ index15 = new mutable.HashMap[String, Int]()\n        val index16 = new mutable.HashMap[String,\
    \ Int]()\n        val index17 = new mutable.HashMap[String, Int]()\n        val\
    \ index18 = new mutable.HashMap[String, Int]()\n        val index19 = new mutable.HashMap[String,\
    \ Int]()\n        val index20 = new mutable.HashMap[String, Int]()\n        val\
    \ index21 = new mutable.HashMap[String, Int]()\n        val index22 = new mutable.HashMap[String,\
    \ Int]()\n        val index23 = new mutable.HashMap[String, Int]()\n        val\
    \ index24 = new mutable.HashMap[String, Int]()\n        val index25 = new mutable.HashMap[String,\
    \ Int]()\n        val index26 = new mutable.HashMap[String, Int]()\n        val\
    \ index27 = new mutable.HashMap[String, Int]()\n        val index28 = new mutable.HashMap[String,\
    \ Int]()\n        val index29 = new mutable.HashMap[String, Int]()\n        val\
    \ index30 = new mutable.HashMap[String, Int]()\n        val index31 = new mutable.HashMap[String,\
    \ Int]()\n        val index32 = new mutable.HashMap[String, Int]()\n        val\
    \ index33 = new mutable.HashMap[String, Int]()\n        val index34 = new mutable.HashMap[String,\
    \ Int]()\n        val index35 = new mutable.HashMap[String, Int]()\n        val\
    \ index36 = new mutable.Hash", "        var count = 0\n        var start = 0\n\
    \        var end = string.length\n        while (start < end) {\n            val\
    \ mid = (start + end) / 2\n            if (string.substring(mid, mid) == substring)\
    \ {\n                count += 1\n                start = mid + 1\n           \
    \ } else {\n                end = mid\n            }\n        }\n        count",
  "        val count = mutable.HashMap[String, Long]()\n        val startIndex = string.indexOf(substring)\n\
    \        val endIndex = startIndex + substring.length\n        val subStrings\
    \ = string.substring(startIndex, endIndex).split(\"\")\n        for (subString\
    \ <- subStrings) {\n            val currentCount = count.get(subString)\n    \
    \        if (currentCount == null) {\n                count.put(subString, 1)\n\
    \            } else {\n                count.put(subString, currentCount + 1)\n\
    \            }\n        }\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(substring)\n        chars.foreach(c\
    \ => {\n            val count = count.getOrElse(c, 0) + 1\n            count.put(c,\
    \ count)\n        })\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(substring)\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum", "        var count\
    \ = 0\n        var i = 0\n        var j = 0\n        while (i < string.length\
    \ && j < substring.length) {\n            if (string.charAt(i) == substring.charAt(j))\
    \ {\n                count += 1\n                i += 1\n                j +=\
    \ 1\n            } else if (string.charAt(i) > substring.charAt(j)) {\n      \
    \          i += 1\n            } else {\n                j += 1\n            }\n\
    \        }\n        count", "        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val startIndex = string.indexOf(substring)\n        val endIndex\
    \ = startIndex + substring.length\n        val substringLength = substring.length\n\
    \        val substringIndex = startIndex\n        val substringEnd = endIndex\n\
    \        val substringLength = substring.length\n        val substringIndex =\
    \ startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = ", "        val counts = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring).toList\n        chars.foreach(c => counts += (c ->\
    \ 1L))\n        counts.values.sum", "        var count = 0\n        var startIndex\
    \ = -1\n        var endIndex = -1\n        string.foreach(x => {\n           \
    \ if (x == substring) {\n                count += 1\n                startIndex\
    \ = string.indexOf(x)\n                endIndex = startIndex\n            }\n\
    \            if (x == substring + substring) {\n                count += 1\n \
    \               startIndex = string.indexOf(x)\n                endIndex = startIndex\n\
    \            }\n        })\n        count", "        val count = mutable.HashMap.empty[String,\
    \ Int]\n        val subStrings = string.split(substring)\n        for(subString\
    \ <- subStrings) {\n            val subStringCount = count.get(subString)\n  \
    \          if(subStringCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, subStringCount\
    \ + 1)\n            }\n        }\n        count.values.sum", "        var count\
    \ = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l\
    \ = string.length\n        var m = substring.length\n        while (i < l && j\
    \ < m) {\n            if (string.charAt(i) == substring.charAt(j)) {\n       \
    \         count += 1\n                i += 1\n                j += 1\n       \
    \     } else if (string.charAt(i) > substring.charAt(j)) {\n                i\
    \ += 1\n            } else {\n                j += 1\n            }\n        }\n\
    \        return count", "        val counts = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0) + 1\n            \
    \    counts.put(substring, count + end - start)\n            }\n        }\n  \
    \      counts.values.sum", "        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.update(c,\
    \ count.getOrElse(c, 0L) + 1L))\n        count.values.sum", "        var count\
    \ = 0\n        var start = 0\n        var end = string.length\n        while (start\
    \ < end) {\n            val mid = (start + end) / 2\n            if (string.charAt(mid)\
    \ == substring.charAt(0)) {\n                start = mid + 1\n            } else\
    \ {\n                end = mid\n            }\n        }\n        count", "  \
    \      val count = new mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        stringArray.foreach(s => {\n            val\
    \ count = count.get(s)\n            if (count == null) count.put(s, 1L)\n    \
    \        else count.put(s, count + 1L)\n        })\n        count.values.sum",
  "        val count = new mutable.HashMap[String, Long]()\n        val subStrings\
    \ = string.split(substring)\n        for (subString <- subStrings) {\n       \
    \     val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum", "        var count = 0\n        var i = 0\n\
    \        var j = 0\n        while (i < string.length && j < substring.length)\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    count += 1\n                i += 1\n                j += 1\n            }\
    \ else if (string.charAt(i) > substring.charAt(j)) {\n                j += 1\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    count", "        val counts = mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start >= 0) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0)\n                counts\
    \ += (substring -> count + 1)\n                i = end\n            }\n      \
    \  }\n        counts.values.sum", "        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOf(substring, i)\n            if (start != -1) {\n             \
    \   val end = start + substring.length\n                val count = counts.getOrElse(substring,\
    \ 0)\n                counts += (substring -> (count + 1))\n                i\
    \ = end\n            }\n        }\n        counts.values.sum", "        val counts\
    \ = mutable.HashMap[String, Long]()\n        val subStrings = string.split(substring)\n\
    \        for (subString <- subStrings) {\n            val count = counts.getOrElse(subString,\
    \ 0) + 1\n            counts.put(subString, count)\n        }\n        counts.values.sum",
  "        var count = 0\n        var lastIndex = -1\n        string.lastIndexOf(substring,\
    \ lastIndex) match {\n            case -1 => count = 1\n            case index\
    \ => count = index - lastIndex + 1\n        }\n        count", "        val count\
    \ = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.update(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum",
  "        val counts = mutable.HashMap[String, Long]()\n        for (i <- 0 until\
    \ string.length) {\n            val start = string.indexOf(substring, i)\n   \
    \         if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0) + 1\n            \
    \    counts.put(substring, count + end - start)\n            }\n        }\n  \
    \      counts.values.sum", "        val count = new mutable.HashMap[String, Long]()\n\
    \        val startIndex = string.indexOf(substring)\n        val endIndex = startIndex\
    \ + substring.length\n        val subStringLength = substring.length\n       \
    \ val subStringStartIndex = startIndex - subStringLength\n        val subStringEndIndex\
    \ = endIndex - subStringLength\n        val subStringStartIndex = math.max(subStringStartIndex,\
    \ 0) // Make sure the substring starts at 0\n        val subStringEndIndex = math.min(subStringEndIndex,\
    \ string.length) // Make sure the substring ends at string.length\n        var\
    \ count = 0L\n        for (i <- subStringStartIndex to subStringEndIndex) {\n\
    \            val currentChar = string.charAt(i)\n            if (count.contains(currentChar))\
    \ {\n                count = count.updated(currentChar, count.get(currentChar)\
    \ + 1)\n            } else {\n                count = count.updated(currentChar,\
    \ 1)\n            }\n        }\n        count", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val startIndex = string.indexOf(substring)\n        val endIndex\
    \ = startIndex + substring.length\n        val subStringLength = substring.length\n\
    \        val substringLength = substring.length\n        val substringIndex =\
    \ startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substringIndex\
    \ = startIndex\n        val substringEnd = endIndex\n        val substringLength\
    \ = substring.length\n        val substringIndex = startIndex\n        val substringEnd\
    \ = endIndex\n        val substringLength = substring.length\n        val substring",
  "        val count = mutable.HashMap.empty[String, Long]\n        for(i <- 0 until\
    \ string.length){\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if(start != -1){\n                val end = start + substring.length\n\
    \                val count = count(substring, string, start, end)\n          \
    \      count.put(substring, count + 1)\n            }\n        }\n        count.values.sum",
  "        val counts = mutable.Map[String, Long]()\n        string.split(substring).foreach(x\
    \ => counts += (x -> 1))\n        counts.values.sum", "        val count = new\
    \ mutable.HashMap[String, Long]()\n        val subStrings = string.split(substring)\n\
    \        for (subString <- subStrings) {\n            val substringCount = count.get(subString)\n\
    \            if (substringCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, substringCount\
    \ + 1)\n            }\n        }\n        count.values.sum", "        val count\
    \ = mutable.HashMap[String, Long]()\n        val subStrings = string.split(substring)\n\
    \        subStrings.foreach(s => {\n            val count = count(s)\n       \
    \     count(s) += 1\n        })\n        count.values.sum", "        val count\
    \ = mutable.HashMap.empty[String, Long]\n        val chars = string.split(\"\"\
    ).toList\n        val charsSub = substring.split(\"\").toList\n        chars.zip(charsSub).foreach\
    \ {\n            case (c1, c2) =>\n                if (c1 == c2) {\n         \
    \           count(c1) = count(c1) + 1\n                } else {\n            \
    \        count(c1) = count(c1) + 1\n                    count(c2) = count(c2)\
    \ + 1\n                }\n        }\n        count.values.sum", "        var count\
    \ = 0\n        for(i <- 0 until string.length){\n            if(string.substring(i,\
    \ i+substring.length) == substring){\n                count += 1\n           \
    \ }\n        }\n        count", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring)\n                if (count ==\
    \ null) count.put(substring, 1L) else count.put(substring, count + 1L)\n     \
    \           count.put(string.substring(start, end), 1L)\n            }\n     \
    \   }\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val startIndex = string.indexOf(substring)\n        while (startIndex\
    \ >= 0) {\n            val endIndex = startIndex + substring.length\n        \
    \    val subString = string.substring(startIndex, endIndex)\n            val count\
    \ = count.get(subString) match {\n                case Some(count) => count +\
    \ 1\n                case None => 1\n            }\n            count.put(subString,\
    \ count.getOrElse(subString, 0L) + 1)\n            startIndex = string.indexOf(substring,\
    \ endIndex + 1)\n        }\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => {\n            val splitString = x.split(substring)\n            val key\
    \ = splitString(0)\n            val value = splitString(1)\n            count.get(key)\
    \ match {\n                case Some(count) => count.get += value\n          \
    \      case None => count.put(key, 1)\n            }\n        })\n        count.values.sum",
  "        val counts = mutable.HashMap[String, Long]()\n        for (i <- 0 until\
    \ string.length) {\n            val start = string.indexOf(substring, i)\n   \
    \         if (start >= 0) {\n                val end = start + substring.length\n\
    \                val count = counts.getOrElse(substring, 0)\n                counts\
    \ += (substring -> count + 1)\n                i = end\n            }\n      \
    \  }\n        counts.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOf(substring, i)\n            if (start != -1) {\n             \
    \   val end = start + substring.length\n                val count = count.get(substring)\
    \ match {\n                    case Some(count) => count + 1\n               \
    \     case None => 1\n                }\n                count.put(substring,\
    \ count)\n                count.put(string.substring(start, end), count)\n   \
    \         }\n        }\n        count.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Int]\n        for(i <- 0 until string.length){\n            val start = string.indexOfSubstring(substring,\
    \ i)\n            if(start != -1){\n                val end = string.indexOfSubstring(substring,\
    \ start+1)\n                if(end != -1){\n                    val key = string.substring(start,\
    \ end)\n                    if(count.contains(key)){\n                       \
    \ count(key) = count(key) + 1\n                    }else{\n                  \
    \      count(key) = 1\n                    }\n                }\n            }\n\
    \        }\n        count.values.sum", "        val counts = mutable.HashMap[String,\
    \ Long]()\n        val startIndex = string.indexOf(substring)\n        val endIndex\
    \ = startIndex + substring.length\n        val subStrings = string.substring(startIndex,\
    \ endIndex).split(\"\\\\W+\")\n        for (subString <- subStrings) {\n     \
    \       val count = counts.getOrElse(subString, 0) + 1\n            counts.put(subString,\
    \ count)\n        }\n        counts.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val index = string.indexOf(substring)\n        while (index\
    \ >= 0) {\n            val substringIndex = string.indexOf(substring, index +\
    \ 1)\n            if (substringIndex >= 0) {\n                val substring =\
    \ string.substring(substringIndex, substringIndex + substring.length)\n      \
    \          val count = count.get(substring) match {\n                    case\
    \ Some(count) => count + 1\n                    case None => 1\n             \
    \   }\n                count.put(substring, count.toLong)\n            }\n   \
    \         index = string.indexOf(substring, index + 1)\n        }\n        count.values.sum",
  "        var count = 0\n        var start = 0\n        var end = string.length\n\
    \        while (start < end) {\n            val mid = (start + end) / 2\n    \
    \        if (string.substring(mid, mid).equals(substring)) {\n               \
    \ count += 1\n                start = mid + 1\n            } else if (string.substring(mid,\
    \ mid).compareTo(substring) > 0) {\n                end = mid\n            } else\
    \ {\n                start = mid + 1\n            }\n        }\n        count",
  "        val count = new mutable.HashMap[String, Long]()\n        for (i <- 0 until\
    \ string.length)\n            if (string.substring(i, i + substring.length) ==\
    \ substring)\n                count.put(string.substring(i, i + substring.length),\
    \ count.getOrElse(string.substring(i, i + substring.length), 0L) + 1)\n      \
    \  count.values.sum", "        val count = mutable.HashMap[String, Long]()\n \
    \       string.split(substring).foreach(x => count(x) += 1L)\n        count.values.sum",
  "        val count = mutable.HashMap[String, Long]()\n        for (i <- 0 until\
    \ string.length)\n            if (string.substring(i, i + substring.length).contains(substring))\n\
    \                count(string.substring(i, i + substring.length)) = count(string.substring(i,\
    \ i + substring.length)) + 1\n        count.values.sum", "        val count =\
    \ mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x =>\
    \ count.put(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum", "   \
    \     val startIndex = string.indexOf(substring)\n        if (startIndex == -1)\n\
    \            return 0\n        val endIndex = startIndex + substring.length\n\
    \        val count = string.count(_ == substring)\n        val overlap = string.count(_\
    \ == substring) -\n            string.count(_ == substring(startIndex, endIndex))\n\
    \        count + overlap", "        val count = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => {\n \
    \           val value = count.getOrElse(c, 0) + 1\n            count.put(c.toUpperCase,\
    \ value)\n            count.put(c.toLowerCase, value)\n        })\n        count.values.sum",
  "        val count = mutable.HashMap[String, Long]()\n        val index = 0\n  \
    \      while (index < string.length) {\n            val start = string.indexOf(substring,\
    \ index)\n            if (start < 0) {\n                count += ((substring,\
    \ 1L))\n            } else {\n                val end = start + substring.length\n\
    \                val count = count(string, start, end)\n                count\
    \ += ((substring, count))\n            }\n            index = end\n        }\n\
    \        count.values.sum", "        var count = 0\n        string.split(substring).foreach(s\
    \ => {\n            count += string.count(s)\n        })\n        count", "  \
    \      val count = new mutable.HashMap[String, Long]()\n        val index = new\
    \ mutable.HashMap[String, Int]()\n        val startIndex = new mutable.HashMap[String,\
    \ Int]()\n        val endIndex = new mutable.HashMap[String, Int]()\n        val\
    \ startIndex2 = new mutable.HashMap[String, Int]()\n        val endIndex2 = new\
    \ mutable.HashMap[String, Int]()\n        val startIndex3 = new mutable.HashMap[String,\
    \ Int]()\n        val endIndex3 = new mutable.HashMap[String, Int]()\n       \
    \ val startIndex4 = new mutable.HashMap[String, Int]()\n        val endIndex4\
    \ = new mutable.HashMap[String, Int]()\n        val startIndex5 = new mutable.HashMap[String,\
    \ Int]()\n        val endIndex5 = new mutable.HashMap[String, Int]()\n       \
    \ val startIndex6 = new mutable.HashMap[String, Int]()\n        val endIndex6\
    \ = new mutable.HashMap[String, Int]()\n        val startIndex7 = new mutable.HashMap[String,\
    \ Int]()\n        val endIndex7 = new mutable.HashMap[String, Int]()\n       \
    \ val startIndex8 = new mutable.HashMap[String, Int]()\n        val endIndex8\
    \ = new mutable.HashMap[String, Int]()\n        val startIndex9 = new mutable.HashMap[String,\
    \ Int]()\n        val endIndex9 = new mutable.HashMap[String, Int]()\n       \
    \ val startIndex10 = new mutable.HashMap[String, Int]()\n        val endIndex10\
    \ = new mutable.HashMap[String, Int]()\n        val startIndex11 = new mutable.HashMap[String,\
    \ Int]()\n        val endIndex11 = new mutable.HashMap[String, Int]()\n      \
    \  val startIndex12 = new mutable.HashMap[String, Int]()\n        val endIndex12\
    \ = new mutable.HashMap[String, Int]()\n        val startIndex13 = new mutable.HashMap[String,\
    \ Int]()\n        val endIndex13 = new mutable.HashMap[String, Int]()\n      \
    \  val startIndex14 = new mutable.HashMap[String, Int]()\n        val endIndex14\
    \ = new mutable.HashMap[String, Int]()\n        val startIndex15 = new mutable.HashMap[String,\
    \ Int]()\n        val endIndex15 = new mutable.HashMap[String, Int]()\n      \
    \  val startIndex16 = new mutable.HashMap[String, Int]()\n        val endIndex16\
    \ = new mutable.HashMap[String, Int]()\n        val startIndex17 = new mutable.",
  "        val count = new mutable.HashMap[String, Long]()\n        val startIndex\
    \ = string.indexOf(substring)\n        val endIndex = startIndex + substring.length\n\
    \        val subStringLength = substring.length\n        val subStringIndex =\
    \ startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n        val subStringLength = substring.length\n        val subStringIndex\
    \ = startIndex\n        val subStringEnd = endIndex\n        val subStringLength\
    \ = substring.length\n        val subStringIndex = startIndex\n        val subStringEnd\
    \ = endIndex\n", "        val count = mutable.HashMap.empty[String, Long]\n  \
    \      val chars = string.split(\"\").toList\n        val substrings = substring.split(\"\
    \").toList\n        for(i <- 0 until chars.length)\n            if(substrings.contains(chars(i)))\n\
    \                count.update(chars(i), count.getOrElse(chars(i), 0L) + 1)\n \
    \       count.values.sum", "        var count = 0\n        for(i <- 0 until string.length){\n\
    \            val start = string.indexOf(substring, i)\n            if(start !=\
    \ -1){\n                val end = start + substring.length\n                val\
    \ sub = string.substring(start, end)\n                val sub2 = sub.toLowerCase\n\
    \                val sub3 = sub2.replace(\" \", \"\")\n                val sub4\
    \ = sub3.replace(\",\", \"\")\n                val sub5 = sub4.replace(\"-\",\
    \ \"\")\n                val sub6 = sub5.replace(\"(\", \"\")\n              \
    \  val sub7 = sub6.replace(\")\", \"\")\n                val sub8 = sub7.replace(\"\
    '\", \"\")\n                val sub9 = sub8.replace(\"\\\"\", \"\")\n        \
    \        val sub10 = sub9.replace(\"&\", \"\")\n                val sub11 = sub10.replace(\"\
    %\", \"\")\n                val sub12 = sub11.replace(\"$\", \"\")\n         \
    \       val sub13 = sub12.replace(\"!\", \"\")\n                val sub14 = sub13.replace(\"\
    ?\", \"\")\n                val sub15 = sub14.replace(\":\", \"\")\n         \
    \       val sub16 = sub15.replace(\"<\", \"\")\n                val sub17 = sub16.replace(\"\
    >\", \"\")\n                val sub18 = sub17.replace(\",\", \"\")\n         \
    \       val sub19 = sub18.replace(\";\", \"\")\n                val sub20 = sub19.replace(\"\
    -\", \"\")\n                val sub21 = sub20.replace(\"(\", \"\")\n         \
    \       val sub22 = sub21.replace(\")\", \"\")\n                val sub23 = sub22.replace(\"\
    '\", \"\")\n                val sub24 = sub23.replace(\"\\\"\", \"\")\n      \
    \          val sub25 = sub24.replace(\"&\", \"\")\n                val sub26 =\
    \ sub25.replace(\"%\", \"\")\n                val sub27 = sub26.replace(\"$\"\
    , \"\")\n                val sub28 = sub27.replace(\"!\", \"\")\n            \
    \    val sub29 = sub28.replace(\"?\", \"\")\n                val sub30 = sub29.replace(\"\
    :\", \"\")\n                val sub31 = sub30.replace(\"<\", \"\")\n         \
    \       val sub32 = sub31.replace(\">\", \"\")\n                val sub33 = sub32.replace(\"\
    ,\", \"\")\n                val sub34 = sub33.replace(\";\", \"\")\n         \
    \       val sub35 = sub34.replace(\"-\", \"\")\n                val sub36 = sub35.replace(\"\
    (\", \"\")\n                val sub37 = sub36.replace(\")\", \"\")\n         \
    \       val sub38 = sub37.replace(\"'\", \"\")\n                val sub39 = sub38.replace(\"\
    \\\"\", \"\")\n                val sub40 = sub39.replace(\"&\", \"\")\n      \
    \          val sub41 = sub40.replace(\"%\", \"\")\n                val sub42 =\
    \ sub41.replace(\"$\", \"\")\n                val sub43 = sub42.replace(\"!\"\
    , \"\")\n                val sub44 = sub43.replace(\"?\", \"\")\n", "        val\
    \ count = new mutable.HashMap[String, Long]()\n        val substrings = string.split(substring)\n\
    \        substrings.foreach(s => {\n            val count = count.get(s)\n   \
    \         if (count == null) count.put(s, 1L)\n            else count.put(s, count\
    \ + 1L)\n        })\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val index = 0\n        while (index < string.length) {\n  \
    \          val start = string.indexOf(substring, index)\n            if (start\
    \ == -1) break\n            val end = start + substring.length\n            val\
    \ value = count.get(substring)\n            if (value == null) count.put(substring,\
    \ 1L)\n            else count.put(substring, value + 1L)\n            index =\
    \ end\n        }\n        count.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(substring)\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum", "        val index\
    \ = string.indexOf(substring)\n        if (index == -1)\n            return 0\n\
    \        else\n            string.count(_ == substring) + howManyTimes(string.drop(index\
    \ + substring.length), substring)", "        var count = 0\n        for(i <- 0\
    \ until string.length){\n            val start = string.indexOf(string(i), i)\n\
    \            val end = string.indexOf(string(i), start+1)\n            if(start\
    \ != -1 && end != -1){\n                val sub = string.substring(start, end)\n\
    \                if(sub.equals(substring)){\n                    count += 1\n\
    \                }\n            }\n        }\n        count", "        var count\
    \ = 0\n        var lastIndex = -1\n        string.lastIndexOf(substring) match\
    \ {\n            case -1 => count\n            case index =>\n               \
    \ lastIndex = index\n                count += 1\n                count\n     \
    \   }", "        val counts = mutable.Map[String, Long]()\n        string.split(substring).foreach(s\
    \ => {\n            counts(s) += 1\n        })\n        counts.values.sum", " \
    \       val count = new mutable.HashMap[String, Long]()\n        val index = new\
    \ mutable.HashMap[String, Int]()\n        val index2 = new mutable.HashMap[String,\
    \ Int]()\n        val index3 = new mutable.HashMap[String, Int]()\n        val\
    \ index4 = new mutable.HashMap[String, Int]()\n        val index5 = new mutable.HashMap[String,\
    \ Int]()\n        val index6 = new mutable.HashMap[String, Int]()\n        val\
    \ index7 = new mutable.HashMap[String, Int]()\n        val index8 = new mutable.HashMap[String,\
    \ Int]()\n        val index9 = new mutable.HashMap[String, Int]()\n        val\
    \ index10 = new mutable.HashMap[String, Int]()\n        val index11 = new mutable.HashMap[String,\
    \ Int]()\n        val index12 = new mutable.HashMap[String, Int]()\n        val\
    \ index13 = new mutable.HashMap[String, Int]()\n        val index14 = new mutable.HashMap[String,\
    \ Int]()\n        val index15 = new mutable.HashMap[String, Int]()\n        val\
    \ index16 = new mutable.HashMap[String, Int]()\n        val index17 = new mutable.HashMap[String,\
    \ Int]()\n        val index18 = new mutable.HashMap[String, Int]()\n        val\
    \ index19 = new mutable.HashMap[String, Int]()\n        val index20 = new mutable.HashMap[String,\
    \ Int]()\n        val index21 = new mutable.HashMap[String, Int]()\n        val\
    \ index22 = new mutable.HashMap[String, Int]()\n        val index23 = new mutable.HashMap[String,\
    \ Int]()\n        val index24 = new mutable.HashMap[String, Int]()\n        val\
    \ index25 = new mutable.HashMap[String, Int]()\n        val index26 = new mutable.HashMap[String,\
    \ Int]()\n        val index27 = new mutable.HashMap[String, Int]()\n        val\
    \ index28 = new mutable.HashMap[String, Int]()\n        val index29 = new mutable.HashMap[String,\
    \ Int]()\n        val index30 = new mutable.HashMap[String, Int]()\n        val\
    \ index31 = new mutable.HashMap[String, Int]()\n        val index32 = new mutable.HashMap[String,\
    \ Int]()\n        val index33 = new mutable.HashMap[String, Int]()\n        val\
    \ index34 = new mutable.HashMap[String, Int]()\n        val index35 = new mutable.HashMap[String,\
    \ Int]()\n        val index36 = new mutable.Hash", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(s\
    \ => {\n            val count = mutable.HashMap[String, Long]()\n            val\
    \ stringArray2 = string.split(s)\n            stringArray2.foreach(ss => {\n \
    \               val count = mutable.HashMap[String, Long]()\n                val\
    \ stringArray3 = string.split(ss)\n                stringArray3.foreach(sss =>\
    \ {\n                    val count = mutable.HashMap[String, Long]()\n       \
    \             val stringArray4 = string.split(sss)\n                    stringArray4.foreach(ssss\
    \ => {\n                        val count = mutable.HashMap[String, Long]()\n\
    \                        val stringArray5 = string.split(ssss)\n             \
    \           stringArray5.foreach(sssss => {\n                            val count\
    \ = mutable.HashMap[String, Long]()\n                            val stringArray6\
    \ = string.split(sssss)\n                            stringArray6.foreach(ssssss\
    \ => {\n                                val count = mutable.HashMap[String, Long]()\n\
    \                                val stringArray7 = string.split(ssssss)\n   \
    \                             stringArray7.foreach(sssssss => {\n            \
    \                        val count = mutable.HashMap[String, Long]()\n       \
    \                             val stringArray8 = string.split(sssssss)\n     \
    \                               stringArray8.foreach(ssssssss => {\n         \
    \                               val count = mutable.HashMap[String, Long]()\n\
    \                                        val stringArray9 = string.split(ssssssss)\n\
    \                                        stringArray9.foreach(sssssssss => {\n\
    \                                            val count = mutable.HashMap[String,\
    \ Long]()\n                                            val stringArray10 = string.split(sssssssss)\n\
    \                                            stringArray10.foreach(ssssssssss\
    \ => {\n                                                val count = mutable.HashMap[String,\
    \ Long]()\n                                                val stringArray11 =\
    \ string.split(ssssssssss)\n                                                stringArray11.foreach(sssssssssss\
    \ => {\n                                                    val count = mutable.HashMap[String,\
    \ Long]()\n                                                    val stringArray12\
    \ = string.split(sssssssssss)\n                                              \
    \      stringArray12.foreach(sssssssssssss => {\n                            \
    \                            val count = mutable.HashMap[String, Long]()\n   \
    \                                                     val stringArray13 = string.split(ssssssssssss)\n\
    \                                                        stringArray13.foreach(ssssssssssssss\
    \ => {\n                                                            val count\
    \ = mutable.HashMap[String, Long]()\n                                        \
    \                    val stringArray14 = string.split(ssssssssssss)\n        \
    \                                                    stringArray14.foreach(ssssssssssssss\
    \ => {\n                                                                val count\
    \ = mutable.Hash", "        val count = mutable.HashMap[String, Long]()\n    \
    \    val chars = string.split(\"\").toList\n        val charsSub = substring.split(\"\
    \").toList\n        chars.foreach { char =>\n            charsSub.foreach { charSub\
    \ =>\n                if (char == charSub) {\n                    count.update(charSub,\
    \ count.getOrElse(charSub, 0L) + 1L)\n                }\n            }\n     \
    \   }\n        count.values.sum", "        var count = 0\n        for(i <- 0 until\
    \ string.length){\n            val start = string.indexOf(substring, i)\n    \
    \        if(start != -1){\n                val end = start + substring.length\n\
    \                val subStringLength = end - start\n                count = count\
    \ + subStringLength\n                i = end\n            }\n        }\n     \
    \   count", "        val stringArray = string.split(substring)\n        val substringArray\
    \ = substring.split(\"\")\n        val substringArrayLength = substringArray.length\n\
    \        val stringArrayLength = stringArray.length\n        val substringArrayLength\
    \ = substringArray.length\n        var count = 0\n        var i = 0\n        var\
    \ j = 0\n        while (i < stringArrayLength && j < substringArrayLength) {\n\
    \            if (stringArray(i) == substringArray(j)) {\n                count\
    \ += 1\n                i += 1\n                j += 1\n            } else if\
    \ (stringArray(i) > substringArray(j)) {\n                i += 1\n           \
    \ } else {\n                j += 1\n            }\n        }\n        count",
  "        val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(word\
    \ => {\n            val count = count.get(word) match {\n                case\
    \ Some(count) => count + 1\n                case None => 1\n            }\n  \
    \          count.toLong match {\n                case count if count > 0 => count.toLong\
    \ + 1\n                case _ => count.toLong\n            }\n            count.put(word,\
    \ count.toLong)\n        })\n        count.values.sum", "        val countMap\
    \ = mutable.Map[String, Long]()\n        val subStringSet = substring.split(\"\
    \").toSet\n        string.split(\"\").foreach(c => {\n            if (subStringSet.contains(c))\
    \ {\n                countMap.getOrElse(c.toString, 0L) += 1\n            }\n\
    \        })\n        countMap.size", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val subStrings = string.split(substring)\n        for (subString\
    \ <- subStrings) {\n            val subStringCount = count.get(subString)\n  \
    \          if (subStringCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, subStringCount\
    \ + 1)\n            }\n        }\n        count.values.sum", "        val count\
    \ = new mutable.HashMap[String, Long]()\n        val subStrings = string.split(substring)\n\
    \        for (subString <- subStrings) {\n            val subStringCount = count.get(subString)\n\
    \            if (subStringCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, subStringCount\
    \ + 1)\n            }\n        }\n        count.values.sum", "        val count\
    \ = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(word\
    \ => count.update(word, count.getOrElse(word, 0L) + 1))\n        count.values.sum",
  "        var count = 0\n        for(i <- 0 until string.length){\n            val\
    \ start = string.indexOf(substring, i)\n            if(start != -1){\n       \
    \         count += 1\n                i = start\n            }\n        }\n  \
    \      count", "        val count = mutable.HashMap[String, Int]()\n        string.split(substring).foreach(x\
    \ => count(x) += 1) // Count each substring\n        count.values.sum // Sum of\
    \ all counts", "        val count = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count.update(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum",
  "        val count = mutable.HashMap.empty[String, Long]\n        val chars = string.split(substring)\n\
    \        chars.foreach(c => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum",
  "        val count = mutable.HashMap[String, Long]()\n        val index = 0\n  \
    \      while (index < string.length) {\n            val start = string.indexOf(substring,\
    \ index)\n            if (start == -1)\n                break\n            val\
    \ end = start + substring.length\n            val value = count.get(substring)\n\
    \            if (value == null)\n                count(substring) = Long(1)\n\
    \            else\n                count(substring) = value + 1\n            index\
    \ = end\n        }\n        count.values.sum", "        var count = 0\n      \
    \  var index = 0\n        var startIndex = 0\n        var endIndex = 0\n     \
    \   while (index < string.length) {\n            if (string.charAt(index) == substring.charAt(0))\
    \ {\n                count += 1\n                startIndex = index\n        \
    \        endIndex = index\n                index += 1\n            } else {\n\
    \                endIndex = index\n            }\n        }\n        while (startIndex\
    \ < endIndex) {\n            if (string.charAt(startIndex) == substring.charAt(0))\
    \ {\n                count += 1\n                startIndex += 1\n           \
    \ } else {\n                startIndex += 1\n            }\n        }\n      \
    \  return count", "        val countMap = mutable.HashMap[String, Long]()\n  \
    \      for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = countMap.getOrElse(substring, 0)\n              \
    \  countMap += (substring -> count + 1)\n                i = end\n           \
    \ }\n        }\n        countMap.size", "        var count = 0\n        string.split(substring).foreach(x\
    \ => count += 1)\n        count", "        var count = 0\n        var startIndex\
    \ = 0\n        var endIndex = 0\n        while(startIndex < string.length) {\n\
    \            endIndex = string.indexOf(substring, startIndex + 1)\n          \
    \  if(endIndex >= 0) {\n                count += 1\n                startIndex\
    \ = endIndex + 1\n            } else {\n                startIndex += 1\n    \
    \        }\n        }\n        count", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val chars = string.split(substring)\n        chars.foreach(c\
    \ => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum", "        val count\
    \ = mutable.HashMap[String, Long]()\n        val chars = string.split(substring).toList\n\
    \        chars.foreach(c => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum",
  "        val countMap = mutable.Map[String, Long]()\n        for (i <- 0 until string.length)\
    \ {\n            val start = string.indexOfSubstring(substring, i)\n         \
    \   if (start != -1) {\n                val end = start + substring.length\n \
    \               val count = countMap.getOrElse(substring, 0)\n               \
    \ countMap += (substring -> count + 1)\n            }\n        }\n        countMap.size",
  "        val count = new mutable.HashMap[String, Long]()\n        val index = new\
    \ mutable.HashMap[String, Int]()\n        val index2 = new mutable.HashMap[String,\
    \ Int]()\n        val index3 = new mutable.HashMap[String, Int]()\n        val\
    \ index4 = new mutable.HashMap[String, Int]()\n        val index5 = new mutable.HashMap[String,\
    \ Int]()\n        val index6 = new mutable.HashMap[String, Int]()\n        val\
    \ index7 = new mutable.HashMap[String, Int]()\n        val index8 = new mutable.HashMap[String,\
    \ Int]()\n        val index9 = new mutable.HashMap[String, Int]()\n        val\
    \ index10 = new mutable.HashMap[String, Int]()\n        val index11 = new mutable.HashMap[String,\
    \ Int]()\n        val index12 = new mutable.HashMap[String, Int]()\n        val\
    \ index13 = new mutable.HashMap[String, Int]()\n        val index14 = new mutable.HashMap[String,\
    \ Int]()\n        val index15 = new mutable.HashMap[String, Int]()\n        val\
    \ index16 = new mutable.HashMap[String, Int]()\n        val index17 = new mutable.HashMap[String,\
    \ Int]()\n        val index18 = new mutable.HashMap[String, Int]()\n        val\
    \ index19 = new mutable.HashMap[String, Int]()\n        val index20 = new mutable.HashMap[String,\
    \ Int]()\n        val index21 = new mutable.HashMap[String, Int]()\n        val\
    \ index22 = new mutable.HashMap[String, Int]()\n        val index23 = new mutable.HashMap[String,\
    \ Int]()\n        val index24 = new mutable.HashMap[String, Int]()\n        val\
    \ index25 = new mutable.HashMap[String, Int]()\n        val index26 = new mutable.HashMap[String,\
    \ Int]()\n        val index27 = new mutable.HashMap[String, Int]()\n        val\
    \ index28 = new mutable.HashMap[String, Int]()\n        val index29 = new mutable.HashMap[String,\
    \ Int]()\n        val index30 = new mutable.HashMap[String, Int]()\n        val\
    \ index31 = new mutable.HashMap[String, Int]()\n        val index32 = new mutable.HashMap[String,\
    \ Int]()\n        val index33 = new mutable.HashMap[String, Int]()\n        val\
    \ index34 = new mutable.HashMap[String, Int]()\n        val index35 = new mutable.HashMap[String,\
    \ Int]()\n        val index36 = new mutable.Hash", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val subStrings = string.split(substring)\n        subStrings.foreach(s\
    \ => count.put(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum", " \
    \       val count = new mutable.HashMap[String, Long]()\n        val subStrings\
    \ = string.split(substring)\n        for (subString <- subStrings) {\n       \
    \     val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count(x) = count(x) + 1)\n\
    \        count.values.sum", "        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = string.indexOf(substring)\n        while(index != -1) {\n\
    \            val substringIndex = string.indexOf(substring, index + 1)\n     \
    \       val substringLength = substring.length\n            val substringIndex\
    \ = substringIndex - substringLength\n            val substringLength = substringIndex\
    \ + substringLength\n            val substring = string.substring(substringIndex,\
    \ substringLength)\n            val count = count.get(substring) match {\n   \
    \             case None => count.put(substring, 1L)\n                case Some(count)\
    \ => count.toLong + 1\n            }\n            index = substringIndex\n   \
    \     }\n        count.values.sum", "        val startIndex = string.indexOf(substring)\n\
    \        if (startIndex == -1)\n            return 0\n        val endIndex = startIndex\
    \ + substring.length\n        val count = string.length - endIndex\n        if\
    \ (endIndex < string.length)\n            count\n        else\n            count\
    \ + 1", "        val count = new mutable.HashMap[String, Long]()\n        for\
    \ (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val count = count.get(substring) match {\n                  \
    \  case Some(count) => count + 1\n                    case None => 1\n       \
    \         }\n                count.put(substring, count)\n                count.put(string.substring(start,\
    \ end), count)\n            }\n        }\n        count.values.sum", "       \
    \ val count = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.update(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum",
  "        var count = 0\n        for(i <- 0 until string.length){\n            val\
    \ start = string.indexOf(substring, i)\n            if(start != -1){\n       \
    \         val end = start + substring.length\n                val sub = string.substring(start,\
    \ end)\n                count += sub.count(_ == substring)\n            }\n  \
    \      }\n        count", "        val count = mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).equals(substring))\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum", "        var count = 0\n        for(i\
    \ <- 0 until string.length){\n            val start = i\n            val end =\
    \ i + substring.length\n            val sub = string.substring(start, end)\n \
    \           if(sub.equals(substring)){\n                count += 1\n         \
    \   }\n        }\n        count", "        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum", "        val index = string.indexOf(substring)\n\
    \        if (index == -1)\n            return 0\n        val start = index\n \
    \       val end = index + substring.length\n        val count = string.length\
    \ - (end - start)\n        if (count > 0)\n            howManyTimes(string.substring(start,\
    \ end), substring) + 1\n        else\n            count", "        val counts\
    \ = mutable.HashMap[String, Long]()\n        for (i <- 0 until string.length)\
    \ {\n            val start = string.indexOf(substring, i)\n            if (start\
    \ > -1) {\n                val end = start + substring.length\n              \
    \  val count = counts.getOrElse(substring, 0)\n                counts += (substring\
    \ -> count + 1)\n                i = end\n            }\n        }\n        counts.values.sum",
  "        val counts = mutable.HashMap[String, Long]()\n        val subStrings =\
    \ string.split(substring)\n        subStrings.foreach(s => counts(s) += 1L)\n\
    \        counts.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val index = new mutable.HashMap[String, Int]()\n        val\
    \ index2 = new mutable.HashMap[String, Int]()\n        val index3 = new mutable.HashMap[String,\
    \ Int]()\n        val index4 = new mutable.HashMap[String, Int]()\n        val\
    \ index5 = new mutable.HashMap[String, Int]()\n        val index6 = new mutable.HashMap[String,\
    \ Int]()\n        val index7 = new mutable.HashMap[String, Int]()\n        val\
    \ index8 = new mutable.HashMap[String, Int]()\n        val index9 = new mutable.HashMap[String,\
    \ Int]()\n        val index10 = new mutable.HashMap[String, Int]()\n        val\
    \ index11 = new mutable.HashMap[String, Int]()\n        val index12 = new mutable.HashMap[String,\
    \ Int]()\n        val index13 = new mutable.HashMap[String, Int]()\n        val\
    \ index14 = new mutable.HashMap[String, Int]()\n        val index15 = new mutable.HashMap[String,\
    \ Int]()\n        val index16 = new mutable.HashMap[String, Int]()\n        val\
    \ index17 = new mutable.HashMap[String, Int]()\n        val index18 = new mutable.HashMap[String,\
    \ Int]()\n        val index19 = new mutable.HashMap[String, Int]()\n        val\
    \ index20 = new mutable.HashMap[String, Int]()\n        val index21 = new mutable.HashMap[String,\
    \ Int]()\n        val index22 = new mutable.HashMap[String, Int]()\n        val\
    \ index23 = new mutable.HashMap[String, Int]()\n        val index24 = new mutable.HashMap[String,\
    \ Int]()\n        val index25 = new mutable.HashMap[String, Int]()\n        val\
    \ index26 = new mutable.HashMap[String, Int]()\n        val index27 = new mutable.HashMap[String,\
    \ Int]()\n        val index28 = new mutable.HashMap[String, Int]()\n        val\
    \ index29 = new mutable.HashMap[String, Int]()\n        val index30 = new mutable.HashMap[String,\
    \ Int]()\n        val index31 = new mutable.HashMap[String, Int]()\n        val\
    \ index32 = new mutable.HashMap[String, Int]()\n        val index33 = new mutable.HashMap[String,\
    \ Int]()\n        val index34 = new mutable.HashMap[String, Int]()\n        val\
    \ index35 = new mutable.HashMap[String, Int]()\n        val index36 = new mutable.Hash",
  "        var count = 0L\n        var startIndex = 0\n        var endIndex = 0\n\
    \        while(startIndex < string.length) {\n            endIndex = string.indexOf(substring,\
    \ startIndex)\n            if(endIndex == -1) {\n                count += 1L\n\
    \                startIndex = string.length\n            } else {\n          \
    \      count += 1L\n                startIndex = endIndex + 1\n            }\n\
    \        }\n        count", "        val count = mutable.HashMap.empty[String,\
    \ Int]\n        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count(string.substring(i,\
    \ i + substring.length)) = count(string.substring(i, i + substring.length)) +\
    \ 1\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => {\n            val count = count.getOrElse(x, 0)\n            count.update(x,\
    \ count + 1)\n        })\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val startIndex = string.indexOf(substring)\n        val endIndex\
    \ = startIndex + substring.length\n        val subStrings = string.substring(startIndex,\
    \ endIndex).split(\"\")\n        subStrings.foreach(s => count.update(s, count.getOrElse(s,\
    \ 0L) + 1))\n        count.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum", "        var count = 0\n        for(i\
    \ <- 0 until string.length){\n            val start = string.indexOf(substring,\
    \ i)\n            if(start != -1){\n                count += 1\n             \
    \   i = start\n            }\n        }\n        count", "        var count =\
    \ 0\n        for(i <- 0 until string.length){\n            if(string.substring(i,\
    \ i + substring.length) == substring){\n                count += 1\n         \
    \   }\n        }\n        count", "        val count = mutable.HashMap[String,\
    \ Int]()\n        val stringArray = string.split(substring)\n        for(i <-\
    \ 0 until stringArray.length){\n            val currentString = stringArray(i)\n\
    \            val currentCount = count.get(currentString)\n            if(currentCount\
    \ == null){\n                count(currentString, 1)\n            } else {\n \
    \               count(currentString, currentCount + 1)\n            }\n      \
    \  }\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        for(i <-\
    \ 0 until stringArray.length){\n            val currentString = stringArray(i)\n\
    \            val currentSubstring = substring\n            val currentCount =\
    \ count.get(currentSubstring)\n            if(currentCount == null){\n       \
    \         count.put(currentSubstring, 1)\n            }\n            else{\n \
    \               count.put(currentSubstring, count.get(currentSubstring) + 1)\n\
    \            }\n        }\n        count.values.sum", "        val count = new\
    \ mutable.HashMap[String, Long]()\n        val subStrings = string.split(substring)\n\
    \        for(subString <- subStrings) {\n            val currentCount = count.get(subString)\n\
    \            if(currentCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, currentCount\
    \ + 1)\n            }\n        }\n        count.values.sum", "        val count\
    \ = mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(s\
    \ => count.update(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum",
  "        val count = mutable.HashMap.empty[String, Long]\n        for(i <- 0 until\
    \ string.length){\n            val start = string.indexOf(substring, i)\n    \
    \        if(start != -1){\n                val end = start + substring.length\n\
    \                val key = string.substring(start, end)\n                val value\
    \ = count.get(key)\n                if(value == null){\n                    count.put(key,\
    \ 1L)\n                }\n                else{\n                    count.put(key,\
    \ value + 1L)\n                }\n            }\n        }\n        count.values.sum",
  "        val index = string.indexOf(substring)\n        if (index == -1)\n     \
    \       return 0\n        val count = index - string.lastIndexOf(substring)\n\
    \        if (count > 0)\n            count\n        else\n            count +\
    \ 1", "        val count = mutable.HashMap[String, Long]()\n        val chars\
    \ = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c, 0L)\
    \ += 1)\n        count.values.sum", "        var count = 0\n        for(i <- 0\
    \ until string.length){\n            val start = string.indexOf(substring, i)\n\
    \            if(start != -1){\n                count += 1\n                i =\
    \ start\n            }\n        }\n        count", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = string.indexOf(string(i),\
    \ i)\n            if (start > -1) {\n                val end = string.indexOf(string(i),\
    \ start + substring.length)\n                if (end > -1) {\n               \
    \     val sub = string.substring(start + substring.length, end)\n            \
    \        val count = count.get(sub) match {\n                        case Some(count)\
    \ => count + 1\n                        case None => 1\n                    }\n\
    \                    count.put(sub, count + 1)\n                }\n          \
    \  }\n        }\n        count.values.sum", "        val counts = mutable.Map[String,\
    \ Long]()\n        string.split(substring).foreach(x => counts(x) += 1L)\n   \
    \     counts.values.sum", "        val count = new mutable.HashMap[String, Long]()\n\
    \        val index = new mutable.HashMap[String, Int]()\n        val index2 =\
    \ new mutable.HashMap[String, Int]()\n        val index3 = new mutable.HashMap[String,\
    \ Int]()\n        val index4 = new mutable.HashMap[String, Int]()\n        val\
    \ index5 = new mutable.HashMap[String, Int]()\n        val index6 = new mutable.HashMap[String,\
    \ Int]()\n        val index7 = new mutable.HashMap[String, Int]()\n        val\
    \ index8 = new mutable.HashMap[String, Int]()\n        val index9 = new mutable.HashMap[String,\
    \ Int]()\n        val index10 = new mutable.HashMap[String, Int]()\n        val\
    \ index11 = new mutable.HashMap[String, Int]()\n        val index12 = new mutable.HashMap[String,\
    \ Int]()\n        val index13 = new mutable.HashMap[String, Int]()\n        val\
    \ index14 = new mutable.HashMap[String, Int]()\n        val index15 = new mutable.HashMap[String,\
    \ Int]()\n        val index16 = new mutable.HashMap[String, Int]()\n        val\
    \ index17 = new mutable.HashMap[String, Int]()\n        val index18 = new mutable.HashMap[String,\
    \ Int]()\n        val index19 = new mutable.HashMap[String, Int]()\n        val\
    \ index20 = new mutable.HashMap[String, Int]()\n        val index21 = new mutable.HashMap[String,\
    \ Int]()\n        val index22 = new mutable.HashMap[String, Int]()\n        val\
    \ index23 = new mutable.HashMap[String, Int]()\n        val index24 = new mutable.HashMap[String,\
    \ Int]()\n        val index25 = new mutable.HashMap[String, Int]()\n        val\
    \ index26 = new mutable.HashMap[String, Int]()\n        val index27 = new mutable.HashMap[String,\
    \ Int]()\n        val index28 = new mutable.HashMap[String, Int]()\n        val\
    \ index29 = new mutable.HashMap[String, Int]()\n        val index30 = new mutable.HashMap[String,\
    \ Int]()\n        val index31 = new mutable.HashMap[String, Int]()\n        val\
    \ index32 = new mutable.HashMap[String, Int]()\n        val index33 = new mutable.HashMap[String,\
    \ Int]()\n        val index34 = new mutable.HashMap[String, Int]()\n        val\
    \ index35 = new mutable.HashMap[String, Int]()\n        val index36 = new mutable.Hash",
  "        val count = mutable.HashMap[String, Long]()\n        val chars = string.split(substring).toList\n\
    \        chars.foreach(c => count.putIfAbsent(c, 0L) += 1)\n        count.values.sum",
  "        var count = 0\n        var start = 0\n        var end = string.length\n\
    \        while (start < end) {\n            val mid = start + (end - start) /\
    \ 2\n            if (string.substring(mid).contains(substring)) {\n          \
    \      count += 1\n                start = mid + 1\n            } else {\n   \
    \             end = mid\n            }\n        }\n        count", "        val\
    \ count = mutable.HashMap[String, Long]()\n        for (i <- 0 until string.length)\
    \ {\n            val start = string.indexOf(substring, i)\n            if (start\
    \ != -1) {\n                val end = start + substring.length\n             \
    \   val value = count.get(substring)\n                if (value == null) {\n \
    \                   count.put(substring, 1)\n                } else {\n      \
    \              count.put(substring, value + 1)\n                }\n          \
    \  }\n        }\n        count.values.sum", "        val counts = mutable.HashMap[String,\
    \ Int]()\n        string.split(substring).foreach(x => counts += (x -> 1))\n \
    \       counts.values.sum", "        val count = mutable.HashMap[String, Int]()\n\
    \        for (i <- 0 until string.length) {\n            val start = string.indexOf(substring,\
    \ i)\n            if (start != -1) {\n                val end = start + substring.length\n\
    \                val substringCount = count.get(substring)\n                if\
    \ (substringCount == null) {\n                    count.put(substring, 1)\n  \
    \              } else {\n                    count.put(substring, substringCount\
    \ + 1)\n                }\n                i = end\n            } else {\n   \
    \             i = string.length\n            }\n        }\n        count.values.sum",
  "        var count = 0\n        string.split(substring).foreach(x => {\n       \
    \     if (string.indexOf(x) != -1) {\n                count += 1\n           \
    \ }\n        })\n        count", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length).contains(substring))\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(substring, i)\n            if (start != -1) {\n    \
    \            val end = start + substring.length\n                val count = count.get(substring)\
    \ match {\n                    case Some(count) => count + 1\n               \
    \     case None => 1\n                }\n                count.put(substring,\
    \ count)\n                count.put(string.substring(start, end), count)\n   \
    \         }\n        }\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOf(substring, i)\n            if (start > -1) {\n              \
    \  val end = start + substring.length\n                val count = count.get(substring)\
    \ match {\n                    case Some(count) => count + 1\n               \
    \     case None => 1\n                }\n                count.put(substring(start,\
    \ end), count)\n            }\n        }\n        count.values.sum", "       \
    \ val count = new mutable.HashMap[String, Long]()\n        val stringArray = string.split(substring)\n\
    \        for (i <- 0 until stringArray.length) {\n            val currentString\
    \ = stringArray(i)\n            if (count.contains(currentString)) {\n       \
    \         count(currentString, count) + 1\n            } else {\n            \
    \    count(currentString, 1L)\n            }\n        }", "        var count =\
    \ 0\n        var start = 0\n        var end = 0\n        while(start < string.length){\n\
    \            end = string.indexOf(substring, start+1)\n            if(end == -1){\n\
    \                count = count + 1\n                start = string.length\n  \
    \          } else {\n                count = count + 1\n                start\
    \ = end\n            }\n        }\n        count", "        var count = 0\n  \
    \      for(i <- 0 until string.length){\n            if(string.substring(i, i+substring.length)\
    \ == substring){\n                count += 1\n            }\n        }\n     \
    \   count", "        val count = new mutable.HashMap[String, Long]()\n       \
    \ for (i <- 0 until string.length)\n            if (string.substring(i, i + substring.length).equals(substring))\n\
    \                count(substring, 1L) += 1 // count overlaping cases\n       \
    \ count", "        val counts = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(s\
    \ => counts += (s -> 1))\n        counts.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count(string.substring(i,\
    \ i + substring.length)) = count(string.substring(i, i + substring.length)) +\
    \ 1\n        count.values.sum", "        var count = 0\n        var index = 0\n\
    \        while(index < string.length){\n            val found = string.indexOf(substring,\
    \ index)\n            if(found != -1){\n                count += 1\n         \
    \       index = found + 1\n            }else{\n                index += substring.length\n\
    \            }\n        }\n        count", "        val count = mutable.HashMap[String,\
    \ Long]()\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1L))\n        count.values.sum", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0))\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) + 1L)\n            else\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0L))\n        count.get(substring).map(_.toLong)", "        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0))\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) + 1L)\n            else\n                count.put(string.charAt(i), count.getOrElse(string.charAt(i),\
    \ 0) - 1L)\n        count.get(substring).map(_.toLong)", "        val count =\
    \ mutable.HashMap.empty[String, Long]\n        val stringArray = string.split(substring)\n\
    \        stringArray.foreach(x => count.put(x, count.getOrElse(x, 0L) + 1))\n\
    \        count.values.sum", "        val count = new mutable.HashMap[String, Long]()\n\
    \        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum", "        val counts = mutable.Map[String,\
    \ Long]()\n        string.split(substring).foreach(x => counts += (x -> 1))\n\
    \        counts.values.sum", "        val counts = mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring).toList\n        chars.foreach { c\
    \ =>\n            val count = counts.getOrElse(c.toLowerCase(), 0)\n         \
    \   counts.put(c.toLowerCase(), count + 1)\n        }\n        counts.values.sum",
  "        val counts = mutable.Map[String, Long]()\n        string.split(substring).foreach(x\
    \ => counts += x -> 1)\n        counts.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.substring(i,\
    \ i + substring.length) == substring)\n                count.put(string.substring(i,\
    \ i + substring.length), count.getOrElse(string.substring(i, i + substring.length),\
    \ 0L) + 1)\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val index = string.indexOf(substring)\n        while (index\
    \ >= 0) {\n            val substringIndex = string.indexOf(substring, index +\
    \ 1)\n            if (substringIndex >= 0) {\n                val substringLength\
    \ = substring.length\n                val substringStart = substringIndex + substringLength\n\
    \                val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n                val substringStart\
    \ = substringIndex + substringLength\n                val substringEnd = substringIndex\
    \ + substringLength + substring.length\n                val substring = string.substring(substringStart,\
    \ substringEnd)\n                val substringLength = substring.length\n    \
    \            val substringStart = substringIndex + substringLength\n         \
    \       val substringEnd = substringIndex + substringLength + substring.length\n\
    \                val substring = string.substring(substringStart, substringEnd)\n\
    \                val substringLength = substring.length\n", "        val count\
    \ = new mutable.HashMap[String, Long]()\n        val substrings = string.split(substring)\n\
    \        substrings.foreach(s => {\n            val count = count.get(s) match\
    \ {\n                case Some(count) => count + 1\n                case None\
    \ => 1\n            }\n            count.toMap += (s -> 1)\n        })\n     \
    \   count.values.sum", "        var count = 0\n        var i = 0\n        while\
    \ (i < string.length) {\n            val start = i\n            while (i < string.length\
    \ && string.charAt(i) == substring.charAt(i)) {\n                i += 1\n    \
    \        }\n            val end = i\n            count += 1\n            i = start\n\
    \        }\n        count", "        val count = new mutable.HashMap[String, Long]()\n\
    \        val chars = string.split(substring)\n        chars.foreach(c => count.putIfAbsent(c,\
    \ 0L) += 1)\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val subStrings = string.split(substring)\n        for (subString\
    \ <- subStrings) {\n            val subStringCount = count.get(subString)\n  \
    \          if (subStringCount == null) {\n                count.put(subString,\
    \ 1)\n            } else {\n                count.put(subString, subStringCount\
    \ + 1)\n            }\n        }\n        count.values.sum", "        var count\
    \ = 0\n        string.split(substring).foreach(x => {\n            val index =\
    \ string.indexOf(x)\n            if (index != -1) {\n                count +=\
    \ 1\n                string = string.substring(0, index) + string.substring(index\
    \ + x.length)\n            }\n        })\n        count", "        val count =\
    \ mutable.HashMap.empty[String, Long]\n        string.split(substring).foreach(x\
    \ => count.put(x, count.getOrElse(x, 0L) + 1))\n        count.values.sum", " \
    \       val count = new mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        stringArray.foreach(x => {\n            val\
    \ count = count.getOrElse(x, 0)\n            count.toLong + 1\n        })\n  \
    \      count.values.sum", "        val index = string.indexOf(substring)\n   \
    \     if (index == -1) 0\n        else 1 + howManyTimes(string.substring(index\
    \ + substring.length), substring)", "        val pattern = Pattern.compile(substring)\n\
    \        val matcher = pattern.matcher(string)\n        var count = 0\n      \
    \  while (matcher.find()) {\n            count += 1\n        }\n        count",
  "        val count = mutable.HashMap[String, Long]()\n        val chars = string.split(substring)\n\
    \        for (c <- chars) {\n            val value = count.getOrElse(c, 0) + 1\n\
    \            count.put(c, value)\n        }\n        count.values.sum", "    \
    \    val startIndex = string.indexOf(substring)\n        if (startIndex == -1)\
    \ 0\n        else string.lastIndexOf(substring) - startIndex", "        val count\
    \ = mutable.HashMap[String, Long]()\n        string.split(substring).foreach(x\
    \ => count(x) += 1L)\n        count.values.sum", "        val count = new mutable.HashMap[String,\
    \ Long]()\n        val startIndex = string.indexOf(substring)\n        if (startIndex\
    \ < 0) 0\n        else string.substring(startIndex).count(c => count.get(substring)\
    \ == null || count.get(substring) < 1 || count.get(substring) == 0)", "      \
    \  val count = new mutable.HashMap[String, Long]()\n        val substrings = string.split(substring)\n\
    \        substrings.foreach(s => {\n            val count = count.getOrElse(s,\
    \ 0) + 1\n            count.put(s, count)\n        })\n        count.values.sum",
  "        val count = new mutable.HashMap[String, Long]()\n        val startIndex\
    \ = string.indexOf(substring)\n        val endIndex = startIndex + substring.length\n\
    \        val subStrings = string.substring(startIndex, endIndex).split(\"\\\\\
    W+\")\n        val subStringsCount = subStrings.length\n        for(i <- 0 until\
    \ subStringsCount) {\n            val subString = subStrings(i)\n            val\
    \ count = count.get(subString) match {\n                case Some(count) => count\
    \ + 1\n                case None => 1\n            }\n            count.toMap\
    \ += (subString -> 1)\n        }\n        count.values.sum", "        val counts\
    \ = mutable.HashMap[String, Long]()\n        val chars = string.split(\"\").toList\n\
    \        val substrings = substring.split(\"\").toList\n        substrings.foreach\
    \ { c =>\n            val index = chars.indexOf(c)\n            if (index != -1)\n\
    \                counts.put(substrings(index), counts.getOrElse(substrings(index),\
    \ 0L) + 1)\n        }\n        counts.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOf(substring, i)\n            if (start != -1) {\n             \
    \   val end = start + substring.length\n                val value = count.get(substring)\n\
    \                if (value == null) {\n                    count.put(substring,\
    \ 1)\n                } else {\n                    count.put(substring, value\
    \ + 1)\n                }\n            }\n        }\n        count.values.sum",
  "        val count = new mutable.HashMap[String, Long]()\n        val subStrings\
    \ = string.split(substring)\n        for (subString <- subStrings) {\n       \
    \     val subStringCount = count.get(subString)\n            if (subStringCount\
    \ == null) {\n                count.put(subString, 1)\n            } else {\n\
    \                count.put(subString, subStringCount + 1)\n            }\n   \
    \     }\n        count.values.sum", "        val count = mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.update(x, count.getOrElse(x, 0L) + 1L))\n        count.values.sum",
  "        val count = new mutable.HashMap[String, Long]()\n        val stringArray\
    \ = string.split(substring)\n        stringArray.foreach(x => {\n            val\
    \ count = count.getOrElse(x, 0)\n            count.update(x, count + 1)\n    \
    \    })\n        count.values.sum"]
stop_tokens:
- "\n    }\n"
