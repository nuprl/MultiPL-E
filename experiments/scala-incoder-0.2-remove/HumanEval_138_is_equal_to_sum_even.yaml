name: HumanEval_138_is_equal_to_sum_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n    // Example\n    def isEqualToSumEven(n : Long) :\
  \ Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
  \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
  \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
  \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
  \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
completions: ["        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n\
    \        val sumEvensRemainder = sumEven % 4\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 4\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 4\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 4\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 4\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 4\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 4\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val\
    \ remainder = sumEven % 4\n        sumEvens == remainder", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = mutable.ListBuffer.empty[Long]\n        for(i <- 0 until\
    \ n) {\n            val x = i % 2\n            val y = n - (i / 2)\n         \
    \   val z = y - (x / 2)\n            val a = z * z\n            val b = 2 * x\
    \ * y\n            val c = a * b\n            val d = c - (a / 2)\n          \
    \  val e = d - (b / 2)\n            val f = e - (c / 2)\n            val g = f\
    \ - (d / 2)\n            val h = g - (e / 2)\n            val i = h - (f / 2)\n\
    \            val j = i - (g / 2)\n            val k = j - (h / 2)\n          \
    \  val l = k - (i / 2)\n            val m = l - (j / 2)\n            val n = m\
    \ - (k / 2)\n            val o = n - (l / 2)\n            val p = o - (m / 2)\n\
    \            val q = p - (n / 2)\n            val r = q - (o / 2)\n          \
    \  val s = r - (p / 2)\n            val t = s - (q / 2)\n            val u = t\
    \ - (r / 2)\n            val v = u - (s / 2)\n            val w = v - (t / 2)\n\
    \            val x = w - (u / 2)\n            val y = x - (v / 2)\n          \
    \  val z = y - (w / 2)\n            val a = z * z\n            val b = 2 * x *\
    \ y\n            val c = a * b\n            val d = c - (a / 2)\n            val\
    \ e = d - (b / 2)\n            val f = e - (c / 2)\n            val g = f - (d\
    \ / 2)\n            val h = g - (e / 2)\n            val i = h - (f / 2)\n   \
    \         val j = i - (g / 2)\n            val k = j - (h / 2)\n            val\
    \ l = k - (i / 2)\n            val m = l - (j / 2)\n            val n = m - (k\
    \ / 2)\n            val o = n - (l / 2)\n            val p = o - (m / 2)\n   \
    \         val q = p - (n / 2)\n            val r = q - (o / 2)\n            val\
    \ s = r - (p / 2)\n            val t = s - (q / 2)\n            val u = t - (r\
    \ / 2)\n            val v = u - (s / 2)\n            val w = v - (t / 2)\n   \
    \         val x = w - (u / 2)\n            val y = x - (v / 2)\n            val\
    \ z = y - (w / 2)\n            val a = z * z\n            val b = 2 * x * y\n\
    \            ", "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).sum\n        sumEvens == 4", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val evens = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSums = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum2 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum3 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum5 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum6 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum7\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum8 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum9 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum12 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum13\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum14 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum15 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum16\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum17 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum18 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum19\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum20 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum21 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum22\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum23 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum24 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum25\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum26 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum27 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum28\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum29 = mutable.ArrayBuffer.",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val evens = mutable.Set[Long]()\n\
    \        val sum = mutable.Set[Long]()\n        val remainder = n % 4\n      \
    \  val remainders = mutable.Set[Long]()\n        val remaindersSum = mutable.Set[Long]()\n\
    \        val remaindersSumEven = mutable.Set[Long]()\n        val remaindersSumEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEven = mutable.Set[Long]()\n\
    \        val remaindersSumEvenEvenEvenEven = mutable.Set[Long]()\n        val\
    \ remaindersSumEvenEvenEvenEvenEven = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val remaindersSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = mutable.Set[Long]()\n        val ", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = mutable.ListBuffer[Long]()\n        for(i <- 0 until n){\n\
    \            val x = i\n            val y = n - i\n            val z = x + y\n\
    \            val a = z % 2 == 0\n            val b = z % 3 == 0\n            val\
    \ c = z % 5 == 0\n            val d = z % 7 == 0\n            val e = z % 11 ==\
    \ 0\n            val f = z % 13 == 0\n            val g = z % 17 == 0\n      \
    \      val h = z % 19 == 0\n            val i = z % 23 == 0\n            val j\
    \ = z % 29 == 0\n            val k = z % 31 == 0\n            val l = z % 37 ==\
    \ 0\n            val m = z % 41 == 0\n            val n = z % 43 == 0\n      \
    \      val o = z % 47 == 0\n            val p = z % 53 == 0\n            val q\
    \ = z % 59 == 0\n            val r = z % 61 == 0\n            val s = z % 67 ==\
    \ 0\n            val t = z % 71 == 0\n            val u = z % 73 == 0\n      \
    \      val v = z % 79 == 0\n            val w = z % 83 == 0\n            val x\
    \ = z % 89 == 0\n            val y = z % 97 == 0\n            val z = z % 101\
    \ == 0\n            val a = z % 103 == 0\n            val b = z % 105 == 0\n \
    \           val c = z % 107 == 0\n            val d = z % 109 == 0\n         \
    \   val e = z % 111 == 0\n            val f = z % 113 == 0\n            val g\
    \ = z % 115 == 0\n            val h = z % 117 == 0\n            val i = z % 119\
    \ == 0\n            val j = z % 121 == 0\n            val k = z % 123 == 0\n \
    \           val l = z % 127 == 0\n            val m = z % 129 == 0\n         \
    \   val n = z % 131 == 0\n            val o = z % 133 == 0\n            val p\
    \ = z % 135 == 0\n            val q = z % 137 == 0\n            val r = z % 139\
    \ == 0\n            val s = z % 141 == 0\n            val t = z % 143 == 0\n \
    \           val u = z % 145 == 0\n            val v = z % 147 == 0\n         \
    \   val w = z % 149 == 0\n            val x = z % 151 == 0\n            val y\
    \ = z % 153 == 0\n            val z = z % 155 == 0\n            val a = z % 157\
    \ == 0\n            val b = z % 159 == 0\n            val c = z % 161 == 0\n \
    \           val d = z % 163 == 0\n", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        for(i <- 1 to n) {\n            if(i % 2 == 0)\
    \ {\n                evens += i\n                sum += i\n            }\n   \
    \     }\n        evens.size == 4", "        val evens = mutable.Set[Long]()\n\
    \        val evenSum = mutable.Set[Long]()\n        val evenSums = mutable.Set[Long]()\n\
    \        val evenSumsSum = mutable.Set[Long]()\n        val evenSumsSums = mutable.Set[Long]()\n\
    \        val evenSumsSumsSum = mutable.Set[Long]()\n        val evenSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSum = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSums = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSum\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSums = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSum = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSum = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSum = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum =\
    \ mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums =\
    \ mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.Set[Long]()\n \
    \       val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n \
    \       val evenSumsSum", "        val evens = mutable.ListBuffer[Long]()\n  \
    \      val sum = 0L\n        for (i <- 0 until n) {\n            if (i % 2 ==\
    \ 0) {\n                evens += i\n                sum += i\n            }\n\
    \        }\n        evens.size == 4", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n             \
    \   sumEven += i\n            }\n        }\n        sumEven.length == 4", "  \
    \      val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain", "     \
    \   val evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val sum = mutable.ListBuffer[Long]()\n        val sumEven = mutable.ListBuffer[Long]()\n\
    \        val sumOdd = mutable.ListBuffer[Long]()\n        val sumEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOdd = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenOddEvenOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEven", "        val sumEven = n.toInt\n\
    \        val evens = mutable.ArrayBuffer.empty[Int]\n        val evenSums = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum2\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum3 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum4 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum5\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum6 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum7 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum8\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum10 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum11\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum12 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum13 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum14\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum16 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum17\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum18 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum19 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum20\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum22 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum23\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum24 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum25 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum26\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum27 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum28 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSum29\
    \ = mutable.ArrayBuffer.", "        val evens = mutable.ListBuffer[Long]()\n \
    \       val sum = 0L\n        for(i <- 0 until n){\n            val x = i % 2\n\
    \            val y = i / 2\n            val sum = x + y + 1\n            evens\
    \ += sum\n        }\n        evens.size == 4", "        val evenSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount4 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount7 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount10 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount13 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount16 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount19 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount22 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount25 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount28 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount30 = mutable.ArrayBuffer.empty[Long]\n\
    \        ", "        val evenSums = mutable.ListBuffer[Long]()\n        val evenSumsCount\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount3 = mutable.ListBuffer[Long]()\n        val evenSumsCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount6 = mutable.ListBuffer[Long]()\n        val evenSumsCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount9 = mutable.ListBuffer[Long]()\n        val evenSumsCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount12 = mutable.ListBuffer[Long]()\n        val evenSumsCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount14 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount15 = mutable.ListBuffer[Long]()\n        val evenSumsCount16\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount17 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount18 = mutable.ListBuffer[Long]()\n        val evenSumsCount19\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount20 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount21 = mutable.ListBuffer[Long]()\n        val evenSumsCount22\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount23 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount24 = mutable.ListBuffer[Long]()\n        val evenSumsCount25\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount26 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount27 = mutable.ListBuffer[Long]()\n        val evenSumsCount28\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount29 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount30 = mutable.ListBuffer[Long]()\n        ", "      \
    \  val sumEven = mutable.ListBuffer(2L).++(mutable.ListBuffer(4L).++(mutable.ListBuffer(6L).++(mutable.ListBuffer(8L))))\n\
    \        val sumEvenSum = sumEven.sum\n        val remainder = n % sumEvenSum\n\
    \        sumEvenSum == remainder", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens\
    \ == remainder", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemainders", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter2\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter4 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter5\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter7 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter8\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter10 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter11\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter13 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter14\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter15 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter16 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter17\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter18 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter19 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter20\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter21 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter22 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter23\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter24 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter25 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter26\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter27 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter28 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter29\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter30 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter31 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenIter32\
    \ = mutable.ArrayBuffer.empty[Long", "        val sumEven = n.toInt\n        val\
    \ sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n      \
    \  val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val evens = sumEven / 2\n        val remainder\
    \ = sumEven % 2\n        evens == (remainder + 1) && evens == (remainder + 2)",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0).sum\n        val sumEvensLessThan4\
    \ = sumEvens - 4\n        sumEvensLessThan4 <= 0", "        val evenSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSum2\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum3 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum4 = mutable.ListBuffer[Long]()\n        val evenSumsSum5\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum6 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum7 = mutable.ListBuffer[Long]()\n        val evenSumsSum8\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum9 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum10 = mutable.ListBuffer[Long]()\n        val evenSumsSum11\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum12 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum13 = mutable.ListBuffer[Long]()\n        val evenSumsSum14\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum15 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum16 = mutable.ListBuffer[Long]()\n        val evenSumsSum17\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum18 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum19 = mutable.ListBuffer[Long]()\n        val evenSumsSum20\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum21 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum22 = mutable.ListBuffer[Long]()\n        val evenSumsSum23\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum24 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum25 = mutable.ListBuffer[Long]()\n        val evenSumsSum26\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum27 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSum28 = mutable.ListBuffer[Long]()\n        val evenSumsSum29\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSum30 = mutable.ListBuffer[Long]()\n",
  "        val evenSum = mutable.Set[Long]()\n        val evenSums = mutable.Set[Long]()\n\
    \        val evenSumsSum = mutable.Set[Long]()\n        val evenSumsSums = mutable.Set[Long]()\n\
    \        val evenSumsSumsSum = mutable.Set[Long]()\n        val evenSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSum = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSums = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSum\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSums = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSum = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSum = mutable.Set[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSumsSums = mutable.Set[Long]()\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSum = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum =\
    \ mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums =\
    \ mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.Set[Long]()\n        val evenSumsSumsSumsSum", "        val sumEven\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSum = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n      \
    \  val sumEvenSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n     \
    \   val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        ", "        val sumEven = n.toString.toInt\n        val sumEvens = sumEven\
    \ / 4\n        val remainder = sumEven % 4\n        sumEvens == remainder", " \
    \       val sumEven = n.toInt\n        val evens = mutable.ArrayBuffer(2, 4)\n\
    \        val evenSums = mutable.ArrayBuffer(sumEven, sumEven + evens(0), sumEven\
    \ + evens(1))\n        evenSums.forall(x => x % 2 == 0)", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val evenSum = mutable.ListBuffer.empty[Long]\n\
    \        val oddSum = mutable.ListBuffer.empty[Long]\n        val evenSums = mutable.ListBuffer.empty[Long]\n\
    \        val oddSums = mutable.ListBuffer.empty[Long]\n        val evenSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSums = mutable.ListBuffer.empty[Long]\n        val oddSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val oddSumsSumsSum = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n        val\
    \ oddSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n     \
    \   val oddSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n        val\
    \ evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n        val oddSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n", "        val sumEven = mutable.ListBuffer(0)\n\
    \        val sumOdd = mutable.ListBuffer(0)\n        val sumEvenEven = mutable.ListBuffer(0)\n\
    \        val sumOddEven = mutable.ListBuffer(0)\n        val sumEvenOdd = mutable.ListBuffer(0)\n\
    \        val sumOddOdd = mutable.ListBuffer(0)\n        val sumEvenEvenEven =\
    \ mutable.ListBuffer(0)\n        val sumOddEvenEven = mutable.ListBuffer(0)\n\
    \        val sumEvenOddEven = mutable.ListBuffer(0)\n        val sumOddOddEven\
    \ = mutable.ListBuffer(0)\n        val sumEvenEvenOdd = mutable.ListBuffer(0)\n\
    \        val sumOddEvenOdd = mutable.ListBuffer(0)\n        val sumEvenOddOdd\
    \ = mutable.ListBuffer(0)\n        val sumEvenEvenEvenEven = mutable.ListBuffer(0)\n\
    \        val sumOddEvenEvenEven = mutable.ListBuffer(0)\n        val sumEvenOddEvenEven\
    \ = mutable.ListBuffer(0)\n        val sumEvenEvenOddEven = mutable.ListBuffer(0)\n\
    \        val sumOddEvenOddEven = mutable.ListBuffer(0)\n        val sumEvenOddOddEven\
    \ = mutable.ListBuffer(0)\n        val sumEvenEvenEvenEvenOdd = mutable.ListBuffer(0)\n\
    \        val sumOddEvenEvenOdd = mutable.ListBuffer(0)\n        val sumEvenOddEvenOdd\
    \ = mutable.ListBuffer(0)\n        val sumEvenEvenOddOdd = mutable.ListBuffer(0)\n\
    \        val sumEvenEvenEvenEvenEvenOdd = mutable.ListBuffer(0)\n        val sumOddEvenEvenEvenOdd\
    \ = mutable.ListBuffer(0)\n        val sumEvenOddEvenOdd = mutable.ListBuffer(0)\n\
    \        val sumEvenEvenOddOdd = mutable.ListBuffer(0)\n        val sumEvenEvenEvenEvenEvenOdd\
    \ = mutable.ListBuffer(0)\n        val sumOddEvenEvenOdd = mutable.ListBuffer(0)\n\
    \        val sumEvenOddEvenOdd = mutable.ListBuffer(0)\n        val sumEvenEvenOddOdd\
    \ = mutable.ListBuffer(0)\n        val sumEvenEvenEvenEvenOdd = mutable.ListBuffer(0)\n\
    \        val sumOddEvenOddOdd = mutable.ListBuffer(0)\n        val sumEvenOddOddOdd\
    \ = mutable.ListBuffer(0)\n        ", "        val sumEven = n.toInt\n       \
    \ val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n  \
    \      val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = mutable.ListBuffer.empty[Long]\n        val sumEvenSum =\
    \ mutable.ListBuffer.empty[Long]\n        val sumEvenSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSum = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSumSum\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n     \
    \   val sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n      \
    \  val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n  \
    \      val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain", "     \
    \   val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val evens = sumEven / 2\n        val remainder\
    \ = sumEven % 2\n        val evenSum = evens + remainder\n        evenSum == sumEven",
  "        val sumEven = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum3 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum6 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum9 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum12 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum15 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum18 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum19\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum20 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum21 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum24 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum25\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum26 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum27 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum28\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum29 = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum30 = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum31\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSum32 = mutable.ArrayBuffer.empty[Long",
  "        val sumEven = n.toInt\n        val evens = mutable.ArrayBuffer(2, 4)\n\
    \        val evenSums = mutable.ArrayBuffer(0, 4)\n        val evenSumsSum = evenSums.sum\n\
    \        val evenSumsSum2 = evenSumsSum * evenSumsSum\n        val evenSumsSum3\
    \ = evenSumsSum2 * evenSumsSum\n        val evenSumsSum4 = evenSumsSum3 * evenSumsSum\n\
    \        val evenSumsSum5 = evenSumsSum4 * evenSumsSum\n        val evenSumsSum6\
    \ = evenSumsSum5 * evenSumsSum\n        val evenSumsSum7 = evenSumsSum6 * evenSumsSum\n\
    \        val evenSumsSum8 = evenSumsSum7 * evenSumsSum\n        val evenSumsSum9\
    \ = evenSumsSum8 * evenSumsSum\n        val evenSumsSum10 = evenSumsSum9 * evenSumsSum\n\
    \        val evenSumsSum11 = evenSumsSum10 * evenSumsSum\n        val evenSumsSum12\
    \ = evenSumsSum11 * evenSumsSum\n        val evenSumsSum13 = evenSumsSum12 * evenSumsSum\n\
    \        val evenSumsSum14 = evenSumsSum13 * evenSumsSum\n        val evenSumsSum15\
    \ = evenSumsSum14 * evenSumsSum\n        val evenSumsSum16 = evenSumsSum15 * evenSumsSum\n\
    \        val evenSumsSum17 = evenSumsSum16 * evenSumsSum\n        val evenSumsSum18\
    \ = evenSumsSum17 * evenSumsSum\n        val evenSumsSum19 = evenSumsSum18 * evenSumsSum\n\
    \        val evenSumsSum20 = evenSumsSum19 * evenSumsSum\n        val evenSumsSum21\
    \ = evenSumsSum20 * evenSumsSum\n        val evenSumsSum22 = evenSumsSum21 * evenSumsSum\n\
    \        val evenSumsSum23 = evenSumsSum22 * evenSumsSum\n        val evenSumsSum24\
    \ = evenSumsSum23 * evenSumsSum\n        val evenSumsSum25 = evenSumsSum24 * evenSumsSum\n\
    \        val evenSumsSum26 = evenSumsSum25 * evenSumsSum\n        val evenSumsSum27\
    \ = evenSums", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n   \
    \     sumEvens == remainder", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        ", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val evens = mutable.ArrayBuffer.empty[Int]\n        val evenSums = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum2 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum3 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum5 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum6 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum7\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum8 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum9 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum12 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsCountSum13 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum14\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum16 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsCountSum17 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum18\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum19 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum20 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsCountSum21 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum22\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum23 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum24 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsCountSum25 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum26\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSums", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 4\n        val remainder = sumEven\
    \ % 4\n        sumEvens == remainder", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens\
    \ == remainder", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n    \
    \    val sumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOddEven = mutable.ArrayBuffer.empty[Long]\n        val sumEvenOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOddOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenEvenEven = mutable.ArrayBuffer.empty[Long]\n        val sumOddEvenEven\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenOddEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOddOddEven = mutable.ArrayBuffer.empty[Long]\n        val sumEvenEvenOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOddEvenOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenOddOdd = mutable.ArrayBuffer.empty[Long]\n        val sumOddOddOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenEvenEvenEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumOddEvenEvenEven = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenOddEvenEven = mutable.ArrayBuffer.empty[Long]\n        val sumEvenEvenOddEven\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOddEvenOddEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenOddOddEven = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenEvenEvenOdd = mutable.ArrayBuffer.empty[Long]\n        val sumOddEvenEvenOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenOddEvenOdd = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenEvenOddOdd = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumOddEvenOddOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenEvenEvenEvenEven\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumOddEvenEvenEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenOddEvenEven = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenEvenOddEven = mutable.ArrayBuffer.empty[Long]\n        val sum", "  \
    \      val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val evens = mutable.ArrayBuffer(2)\n        val evenSum = mutable.ArrayBuffer(0)\n\
    \        val evenSums = mutable.ArrayBuffer(0)\n        val evenSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSums = mutable.ArrayBuffer(0)\n        val evenSumsSumsSum\
    \ = mutable.ArrayBuffer(0)\n        val evenSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSum = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSums\
    \ = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n      \
    \  val evenSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSumsSumsSum =\
    \ mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSum", "        val sumEven = n.toInt\n  \
    \      val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain", "     \
    \   val evens = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n       \
    \ for(i <- 0 until n){\n            val x = i % 2\n            val y = i / 2\n\
    \            val z = x + y\n            if(z == 0){\n                evens +=\
    \ z\n            }\n        }\n        evens.size == 4", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven.filter(_ % 2 == 0)\n        val sumEvensSum\
    \ = sumEvens.sum\n        val sumEvensSum2 = sumEvensSum * sumEvensSum\n     \
    \   val sumEvensSum3 = sumEvensSum2 * sumEvensSum\n        val sumEvensSum4 =\
    \ sumEvensSum3 * sumEvensSum\n        sumEvensSum4 == n", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val sumEvensRemainder = sumEven %\
    \ 4\n        sumEvens == sumEvensRemainder", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evenSums = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountCountCount = mutable.ArrayBuffer.empty[Int]\n      \
    \  val evenSumsCountCountCountCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val evenSumsCountCountCountCountCount = mutable.ArrayBuffer.empty[Int]\n   \
    \     val evenSumsCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountCountCountCountCountCountCountCountCountCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountCountCountCountCountCountCountCountCountCountCount =\
    \ mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = mut", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val evenSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSums = mutable.ListBuffer.empty[Long]\n        val evenSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSum = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n        val\
    \ evenSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSum =\
    \ mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mut", "        val\
    \ sumEven = n.toInt\n        val evens = mutable.ArrayBuffer(2, 4)\n        val\
    \ evenSum = evens.sum\n        val evenSumToN = (evenSum - sumEven) % evenSum\n\
    \        evenSumToN == evenSum", "        val evens = mutable.Set[Long]()\n  \
    \      val sum = 0L\n        val divisors = mutable.Set[Long]()\n        val divisorsSet\
    \ = mutable.Set[Long]()\n        val divisorsSet2 = mutable.Set[Long]()\n    \
    \    val divisorsSet3 = mutable.Set[Long]()\n        val divisorsSet4 = mutable.Set[Long]()\n\
    \        val divisorsSet5 = mutable.Set[Long]()\n        val divisorsSet6 = mutable.Set[Long]()\n\
    \        val divisorsSet7 = mutable.Set[Long]()\n        val divisorsSet8 = mutable.Set[Long]()\n\
    \        val divisorsSet9 = mutable.Set[Long]()\n        val divisorsSet10 = mutable.Set[Long]()\n\
    \        val divisorsSet11 = mutable.Set[Long]()\n        val divisorsSet12 =\
    \ mutable.Set[Long]()\n        val divisorsSet13 = mutable.Set[Long]()\n     \
    \   val divisorsSet14 = mutable.Set[Long]()\n        val divisorsSet15 = mutable.Set[Long]()\n\
    \        val divisorsSet16 = mutable.Set[Long]()\n        val divisorsSet17 =\
    \ mutable.Set[Long]()\n        val divisorsSet18 = mutable.Set[Long]()\n     \
    \   val divisorsSet19 = mutable.Set[Long]()\n        val divisorsSet20 = mutable.Set[Long]()\n\
    \        val divisorsSet21 = mutable.Set[Long]()\n        val divisorsSet22 =\
    \ mutable.Set[Long]()\n        val divisorsSet23 = mutable.Set[Long]()\n     \
    \   val divisorsSet24 = mutable.Set[Long]()\n        val divisorsSet25 = mutable.Set[Long]()\n\
    \        val divisorsSet26 = mutable.Set[Long]()\n        val divisorsSet27 =\
    \ mutable.Set[Long]()\n        val divisorsSet28 = mutable.Set[Long]()\n     \
    \   val divisorsSet29 = mutable.Set[Long]()\n        val divisorsSet30 = mutable.Set[Long]()\n\
    \        val divisorsSet31 = mutable.Set[Long]()\n        val divisorsSet32 =\
    \ mutable.Set[Long]()\n        val divisorsSet33 = mutable.Set[Long]()", "   \
    \     val sumEven = n.toInt\n        val evens = List.fill(sumEven)(0)\n     \
    \   val evenSums = evens.toList\n        val evenSumsSum = evenSums.sum\n    \
    \    val evenSumsSumEven = evenSumsSum.filter(_ % 2 == 0).sum\n        evenSumsSum.forall(evenSumsEven.==)",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemain",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n\
    \        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemainders", "        val evenSums =\
    \ mutable.Set[Long]()\n        val evenSumsSet = mutable.Set[Long]()\n       \
    \ val evenSumsSet2 = mutable.Set[Long]()\n        val evenSumsSet3 = mutable.Set[Long]()\n\
    \        val evenSumsSet4 = mutable.Set[Long]()\n        val evenSumsSet5 = mutable.Set[Long]()\n\
    \        val evenSumsSet6 = mutable.Set[Long]()\n        val evenSumsSet7 = mutable.Set[Long]()\n\
    \        val evenSumsSet8 = mutable.Set[Long]()\n        val evenSumsSet9 = mutable.Set[Long]()\n\
    \        val evenSumsSet10 = mutable.Set[Long]()\n        val evenSumsSet11 =\
    \ mutable.Set[Long]()\n        val evenSumsSet12 = mutable.Set[Long]()\n     \
    \   val evenSumsSet13 = mutable.Set[Long]()\n        val evenSumsSet14 = mutable.Set[Long]()\n\
    \        val evenSumsSet15 = mutable.Set[Long]()\n        val evenSumsSet16 =\
    \ mutable.Set[Long]()\n        val evenSumsSet17 = mutable.Set[Long]()\n     \
    \   val evenSumsSet18 = mutable.Set[Long]()\n        val evenSumsSet19 = mutable.Set[Long]()\n\
    \        val evenSumsSet20 = mutable.Set[Long]()\n        val evenSumsSet21 =\
    \ mutable.Set[Long]()\n        val evenSumsSet22 = mutable.Set[Long]()\n     \
    \   val evenSumsSet23 = mutable.Set[Long]()\n        val evenSumsSet24 = mutable.Set[Long]()\n\
    \        val evenSumsSet25 = mutable.Set[Long]()\n        val evenSumsSet26 =\
    \ mutable.Set[Long]()\n        val evenSumsSet27 = mutable.Set[Long]()\n     \
    \   val evenSumsSet28 = mutable.Set[Long]()\n        val evenSumsSet29 = mutable.Set[Long]()\n\
    \        val evenSumsSet30 = mutable.Set[Long]()\n        val evenSumsSet31 =\
    \ mutable.Set[Long]()\n        val evenSumsSet32 = mutable.Set[Long]()", "   \
    \     val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(x => x % 2\
    \ == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4 = sumEvensSum\
    \ * 4\n        val sumEvensSum4IsEven = sumEvensSum4 == sumEvensSum\n        sumEvensSum4IsEven",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain", "     \
    \   val sumEven = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val sumEvenSumSum = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val sumEvenSumSumSumSumSum = mutable.ArrayBuffer.empty[Int]\n       \
    \ val sumEvenSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Int]\n        val\
    \ sumEvenSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val sumEvenSumSumSumSumSumSumSumSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        ", "        val evens = mutable.ArrayBuffer(2,\
    \ 4)\n        val sum = 0L\n        for (i <- 0 until n) {\n            val x\
    \ = n % i\n            if (x % 2 == 0) {\n                evens += x\n       \
    \         sum += x\n            }\n        }\n        evens.size == 4 && sum ==\
    \ n", "        val evenSums = mutable.ListBuffer[Long]()\n        val evenSumsCount\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount2 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount3 = mutable.ListBuffer[Long]()\n        val evenSumsCount4\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount5 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount6 = mutable.ListBuffer[Long]()\n        val evenSumsCount7\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount8 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount9 = mutable.ListBuffer[Long]()\n        val evenSumsCount10\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount11 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount12 = mutable.ListBuffer[Long]()\n        val evenSumsCount13\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount14 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount15 = mutable.ListBuffer[Long]()\n        val evenSumsCount16\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount17 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount18 = mutable.ListBuffer[Long]()\n        val evenSumsCount19\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount20 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount21 = mutable.ListBuffer[Long]()\n        val evenSumsCount22\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount23 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount24 = mutable.ListBuffer[Long]()\n        val evenSumsCount25\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount26 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount27 = mutable.ListBuffer[Long]()\n        val evenSumsCount28\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsCount29 = mutable.ListBuffer[Long]()\n\
    \        val evenSumsCount30 = mutable.ListBuffer[Long]()\n        ", "      \
    \  val sumEven = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until n)\
    \ {\n            if (i % 2 == 0) {\n                sumEven += i\n           \
    \ }\n        }\n        sumEven.length == 4", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            val x = i\n \
    \           val y = n - i\n            val z = (x + y) / 2\n            val z2\
    \ = z * z\n            val z3 = z2 * z\n            val z4 = z3 * z\n        \
    \    val z5 = z4 * z\n            val z6 = z5 * z\n            val z7 = z6 * z\n\
    \            val z8 = z7 * z\n            val z9 = z8 * z\n            val z10\
    \ = z9 * z\n            val z11 = z10 * z\n            val z12 = z11 * z\n   \
    \         val z13 = z12 * z\n            val z14 = z13 * z\n            val z15\
    \ = z14 * z\n            val z16 = z15 * z\n            val z17 = z16 * z\n  \
    \          val z18 = z17 * z\n            val z19 = z18 * z\n            val z20\
    \ = z19 * z\n            val z21 = z20 * z\n            val z22 = z21 * z\n  \
    \          val z23 = z22 * z\n            val z24 = z23 * z\n            val z25\
    \ = z24 * z\n            val z26 = z25 * z\n            val z27 = z26 * z\n  \
    \          val z28 = z27 * z\n            val z29 = z28 * z\n            val z30\
    \ = z29 * z\n            val z31 = z30 * z\n            val z32 = z31 * z\n  \
    \          val z33 = z32 * z\n            val z34 = z33 * z\n            val z35\
    \ = z34 * z\n            val z36 = z35 * z\n            val z37 = z36 * z\n  \
    \          val z38 = z37 * z\n            val z39 = z38 * z\n            val z40\
    \ = z39 * z\n            val z41 = z40 * z\n            val z42 = z41 * z\n  \
    \          val z43 = z42 * z\n            val z44 = z43 * z\n            val z45\
    \ = z44 * z\n            val z46 = z45 * z\n            val z47 = z46 * z\n  \
    \          val z48 = z47 * z\n            val z49 = z48 * z\n            val z",
  "        val evens = mutable.ArrayBuffer.empty[Long]\n        val sum = 0\n    \
    \    for(i <- 0 until n) {\n            if(i % 2 == 0) {\n                evens\
    \ += i\n                sum += i\n            }\n        }\n        evens.size\
    \ == 4 && sum == n", "        val sumEven = n.toInt\n        val sumEvens = sumEven\
    \ / 4\n        val remainder = sumEven % 4\n        sumEvens == remainder", " \
    \       val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val\
    \ sumEvensRemainder = sumEven % 4\n        sumEvens == sumEvensRemainder", " \
    \       val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evenSum = mutable.Set[Long]()\n        val evenSums = mutable.Set[Long]()\n\
    \        val evenSumsSet = mutable.Set[Long]()\n        val evenSumsSet2 = mutable.Set[Long]()\n\
    \        val evenSumsSet3 = mutable.Set[Long]()\n        val evenSumsSet4 = mutable.Set[Long]()\n\
    \        val evenSumsSet5 = mutable.Set[Long]()\n        val evenSumsSet6 = mutable.Set[Long]()\n\
    \        val evenSumsSet7 = mutable.Set[Long]()\n        val evenSumsSet8 = mutable.Set[Long]()\n\
    \        val evenSumsSet9 = mutable.Set[Long]()\n        val evenSumsSet10 = mutable.Set[Long]()\n\
    \        val evenSumsSet11 = mutable.Set[Long]()\n        val evenSumsSet12 =\
    \ mutable.Set[Long]()\n        val evenSumsSet13 = mutable.Set[Long]()\n     \
    \   val evenSumsSet14 = mutable.Set[Long]()\n        val evenSumsSet15 = mutable.Set[Long]()\n\
    \        val evenSumsSet16 = mutable.Set[Long]()\n        val evenSumsSet17 =\
    \ mutable.Set[Long]()\n        val evenSumsSet18 = mutable.Set[Long]()\n     \
    \   val evenSumsSet19 = mutable.Set[Long]()\n        val evenSumsSet20 = mutable.Set[Long]()\n\
    \        val evenSumsSet21 = mutable.Set[Long]()\n        val evenSumsSet22 =\
    \ mutable.Set[Long]()\n        val evenSumsSet23 = mutable.Set[Long]()\n     \
    \   val evenSumsSet24 = mutable.Set[Long]()\n        val evenSumsSet25 = mutable.Set[Long]()\n\
    \        val evenSumsSet26 = mutable.Set[Long]()\n        val evenSumsSet27 =\
    \ mutable.Set[Long]()\n        val evenSumsSet28 = mutable.Set[Long]()\n     \
    \   val evenSumsSet29 = mutable.Set[Long]()\n        val evenSumsSet30 = mutable.Set[Long]()\n\
    \        val evenSumsSet31 = mutable.Set[Long]()\n        val ", "        val\
    \ evens = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            val x = i % 2\n\
    \            val y = i / 2\n            if(x == 0){\n                evens +=\
    \ y\n            }else{\n                odds += y\n            }\n          \
    \  sum += y\n        }\n        val evenSum = evens.sum\n        val oddSum =\
    \ odds.sum\n        evenSum == sum && oddSum == sum", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val sumEvensRemainder = sumEven %\
    \ 4\n        val sumEvensRemainders = sumEvensRemainder / 4\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 4\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 4\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 4\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 4\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 4\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 4\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evens = mutable.ArrayBuffer.empty[Int]\n        val sum = 0\n     \
    \   val evenSum = 0\n        for(i <- 0 until n) {\n            val remainder\
    \ = n % i\n            val even = remainder / 2\n            evens += even\n \
    \           sum += even\n            evenSum += even\n            n -= even\n\
    \        }\n        evens.size == 4 && evenSum == sum", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder =\
    \ sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n      \
    \  val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val evens = mutable.ArrayBuffer(2, 4)\n        val odds = mutable.ArrayBuffer(1,\
    \ 3)\n        val evenSums = evens.takeWhile(_ < sumEven)\n        val oddSums\
    \ = odds.takeWhile(_ < sumEven)\n        evenSums.forall(x => sumEven - x == x)\n\
    \        oddSums.forall(x => sumEven - x == x)", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n  \
    \      val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd",
  "        val sumEven = n.toString.toInt\n        val sumEvens = sumEven / 2\n  \
    \      val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evenSums = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until\
    \ n) {\n            if (i % 2 == 0) {\n                evenSums += i\n       \
    \     }\n        }\n        evenSums.size == 4", "        val evenSum = mutable.ListBuffer[Long]()\n\
    \        val evenSums = mutable.ListBuffer[Long]()\n        val evenSumsSum =\
    \ mutable.ListBuffer[Long]()\n        val evenSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val evenSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n      \
    \  val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[", "        val evenSum = n.toString.toList.filter(_ %\
    \ 2 == 0).sum\n        evenSum == n", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            if(i % 2 == 0){\n\
    \                evens += i\n                sum += i\n            }\n       \
    \ }\n        evens.size == 4 && sum == n", "        val sumEven = n.toInt\n  \
    \      val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val evens = mutable.ArrayBuffer(2)\n        val evenSum = mutable.ArrayBuffer(0)\n\
    \        val evenSums = mutable.ArrayBuffer(0)\n        val evenSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSums = mutable.ArrayBuffer(0)\n        val evenSumsSumsSum\
    \ = mutable.ArrayBuffer(0)\n        val evenSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSum = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSums\
    \ = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n      \
    \  val evenSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n        val\
    \ evenSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSumsSumsSum =\
    \ mutable.ArrayBuffer(0)\n        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(0)\n\
    \        val evenSumsSumsSumsSumsSumsSum", "        val sumEven = n.toString.toInt\n\
    \        val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n   \
    \     sumEvens == remainder", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSum = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSum\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSum = mutable.ListBuffer.empty[Long]\n        val\
    \ sumEvenSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSum\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSum =\
    \ mutable.ListBuffer.empty[Long]\n        val sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer.empty[Long]\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n\
    \        val remainder = sumEven % 4\n        sumEvens == remainder", "      \
    \  val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val evens = mutable.ArrayBuffer(2, 4)\n        val evenSums = mutable.ArrayBuffer(sumEven)\n\
    \        val evenSumsSum = evenSums.sum\n        val evenSumsSum2 = evenSums.sum\n\
    \        val evenSumsSum3 = evenSums.sum\n        val evenSumsSum4 = evenSums.sum\n\
    \        val evenSumsSum5 = evenSums.sum\n        val evenSumsSum6 = evenSums.sum\n\
    \        val evenSumsSum7 = evenSums.sum\n        val evenSumsSum8 = evenSums.sum\n\
    \        val evenSumsSum9 = evenSums.sum\n        val evenSumsSum10 = evenSums.sum\n\
    \        val evenSumsSum11 = evenSums.sum\n        val evenSumsSum12 = evenSums.sum\n\
    \        val evenSumsSum13 = evenSums.sum\n        val evenSumsSum14 = evenSums.sum\n\
    \        val evenSumsSum15 = evenSums.sum\n        val evenSumsSum16 = evenSums.sum\n\
    \        val evenSumsSum17 = evenSums.sum\n        val evenSumsSum18 = evenSums.sum\n\
    \        val evenSumsSum19 = evenSums.sum\n        val evenSumsSum20 = evenSums.sum\n\
    \        val evenSumsSum21 = evenSums.sum\n        val evenSumsSum22 = evenSums.sum\n\
    \        val evenSumsSum23 = evenSums.sum\n        val evenSumsSum24 = evenSums.sum\n\
    \        val evenSumsSum25 = evenSums.sum\n        val evenSumsSum26 = evenSums.sum\n\
    \        val evenSumsSum27 = evenSums.sum\n        val evenSumsSum28 = evenSums.sum\n\
    \        val evenSumsSum29 = evenSums.sum\n        val evenSumsSum30 = evenSums.sum\n\
    \        val evenSumsSum31 = evenSums.sum\n        val evenSumsSum32 = evenSums.sum\n\
    \        val evenSumsSum33 = evenSums.sum\n        val evenSumsSum34 = evenSums.sum\n\
    \        val evenSumsSum35 = evenSums.sum\n        val evenSumsSum36 = evenSums.sum\n\
    \        val evenSumsSum37 = evenSums.sum\n        val evenSumsSum38 = evenSum",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            if (n % 2 == 0 && sumEven.contains(n))\
    \ {\n                return false\n            }\n            sumEven += n\n \
    \       }\n        return true", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            val x = i % 2\n\
    \            val y = n - (i / 2)\n            val z = x + y\n            sum +=\
    \ z\n            if(sum == 4){\n                evens += z\n            }\n  \
    \      }\n        evens.size == n", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n    \
    \    val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n  \
    \      val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toString.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4", "        val sumEven = n.toInt\n \
    \       val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = mutable.ListBuffer[Long]()\n        val sumOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenEven = mutable.ListBuffer[Long]()\n        val sumOddEven\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumOddOdd = mutable.ListBuffer[Long]()\n        val sumEvenEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenOddOdd = mutable.ListBuffer[Long]()\n        val sumOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddOdd = mutable.ListBuffer[Long]()\n\
    \        val sumOddEvenOddOdd = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n\
    \        val sumEvenEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n     \
    \   val sumOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val sumOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = mutable.List", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n  \
    \      val sumOdd = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOdd\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ sumEvenSumOddSumSumSum = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumSumSumSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val sumEvenSumOddSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumSumSumSumSumSumSumSumSumSumSumSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenSum", "        val evenSum = mutable.ListBuffer[Long]()\n\
    \        val oddSum = mutable.ListBuffer[Long]()\n        val evenSums = mutable.ListBuffer[Long]()\n\
    \        val oddSums = mutable.ListBuffer[Long]()\n        val evenSumsOdd = mutable.ListBuffer[Long]()\n\
    \        val oddSumsOdd = mutable.ListBuffer[Long]()\n        val evenSumsEven\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsEven = mutable.ListBuffer[Long]()\n\
    \        val evenSumsOddEven = mutable.ListBuffer[Long]()\n        val oddSumsOddEven\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsOddOdd = mutable.ListBuffer[Long]()\n\
    \        val oddSumsOddOdd = mutable.ListBuffer[Long]()\n        val evenSumsEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsEvenEven = mutable.ListBuffer[Long]()\n\
    \        val evenSumsOddEvenOdd = mutable.ListBuffer[Long]()\n        val oddSumsOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val oddSumsEvenOddEven = mutable.ListBuffer[Long]()\n        val evenSumsOddOddEven\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenSumsEvenEvenEven = mutable.ListBuffer[Long]()\n        val oddSumsEvenEvenEven\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsOddOddEven = mutable.ListBuffer[Long]()\n\
    \        val oddSumsOddOddEven = mutable.ListBuffer[Long]()\n        val evenSumsEvenOddEven\
    \ = mutable.ListBuffer[Long]()\n        val oddSumsEvenOddEven = mutable.ListBuffer[Long]()\n\
    \        val evenSumsOddEvenOdd = mutable.ListBuffer[Long]()\n        val oddSumsOddEvenOdd\
    \ = mutable.ListBuffer[Long]()\n        val evenSumsEvenEvenEven = mut", "   \
    \     val evens = mutable.ListBuffer[Long]()\n        val sum = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        for(i <- 0 until n) {\n            if(i % 2\
    \ == 0) {\n                evens += i\n                sum += i\n            }\n\
    \        }\n        val sum = sum.sum\n        val evens = evens.sum\n       \
    \ val isEqual = evens == sum\n        return isEqual", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder =\
    \ sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n      \
    \  val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val evens = mutable.ArrayBuffer.empty[Int]\n\
    \        val sum = 0\n        for (i <- 0 until n) {\n            if (i % 2 ==\
    \ 0) {\n                evens += i\n                sum += i\n            }\n\
    \        }\n        evens.size == 4", "        val sumEven = n.toInt\n       \
    \ val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemainders", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        for(i <- 1 to n){\n            val x = i % 2\n\
    \            val y = i / 2\n            val sum = sum + x\n            if(sum\
    \ == y){\n                evens += x\n            }\n        }\n        evens.size\
    \ == 4", "        val evens = mutable.ArrayBuffer.empty[Long]\n        val evenSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSum = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n     \
    \   val evenSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSums", "        val evenSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSums = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSum = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSums\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSum = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSumsSums = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSums = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Int]\n      \
    \  val evenSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mut", "        val evens = mutable.ListBuffer[Long]()\n        val odds =\
    \ mutable.ListBuffer[Long]()\n        val sum = mutable.ListBuffer[Long]()\n \
    \       val n = n.toInt\n        for(i <- 0 until n) {\n            if((i & 1)\
    \ == 0) {\n                evens += i\n            } else {\n                odds\
    \ += i\n            }\n        }\n        for(i <- 0 until evens.size) {\n   \
    \         val even = evens(i)\n            val odd = odds(i)\n            val\
    \ sum = even + odd\n            if(sum == n) {\n                sum += even\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= even\n                sum -= odd\n\
    \                sum -= even\n                sum -= odd\n                sum\
    \ -= even\n                sum -= odd\n                sum -= even\n         \
    \       sum -= odd\n                sum -= ", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            val x = i % 2\n\
    \            val y = n / x\n            sum += y\n            if(sum == 4)\n \
    \               evens += x\n        }\n        evens.size == 4", "        val\
    \ evenSum = mutable.ListBuffer.empty[Long]\n        val oddSum = mutable.ListBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            if (i % 2 == 0) {\n             \
    \   evenSum += i\n            } else {\n                oddSum += i\n        \
    \    }\n        }\n        evenSum.size == 4 && oddSum.size == 4", "        val\
    \ sumEven = mutable.ListBuffer.empty[Long]\n        val sumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd",
  "        val evens = mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i\
    \ <- 0 until n) {\n            val x = i % 2\n            val y = i / 2\n    \
    \        sum += x\n            if(sum == y) {\n                evens += x\n  \
    \          }\n        }\n        evens.size == 4", "        val evenSum = n.toInt\n\
    \        val sumEven = evenSum.toInt\n        val sumEvens = sumEven / 2\n   \
    \     val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders", "  \
    \      val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain", "     \
    \   val sumEven = mutable.ListBuffer.empty[Long]\n        val sumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenSumOddSumOddSumOddSumOddSumOddSumOddSumOddSumOdd",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 4\n        val\
    \ remainder = sumEven % 4\n        sumEvens == remainder", "        val evenSum\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSums = mutable.ListBuffer.empty[Int]\n\
    \        val evenSumsSum = mutable.ListBuffer.empty[Int]\n        val evenSumsSums\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSum = mutable.ListBuffer.empty[Int]\n\
    \        val evenSumsSumsSums = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSums = mutable.ListBuffer.empty[Int]\n\
    \        val evenSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Int]\n       \
    \ val evenSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSums =\
    \ mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSum =\
    \ mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer.empty[Int]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val evens = mutable.ListBuffer[Int]()\n        for(i <- 1 to sumEven)\
    \ {\n            if((i.toInt) % 2 == 0) {\n                evens += i.toInt\n\
    \            }\n        }\n        evens.size == 4", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val sumEvenIter = Iterator.iterate(n)(_ + 2)\n        sumEvenIter.takeWhile(_\
    \ % 2 == 0).foreach(sumEven += _)\n        sumEvenIter.takeWhile(_ % 2 == 0).count(_\
    \ == n) == 4", "        val sumEven = mutable.Set[Long]()\n        val sumEven2\
    \ = mutable.Set[Long]()\n        val sumEven3 = mutable.Set[Long]()\n        val\
    \ sumEven4 = mutable.Set[Long]()\n        val sumEven5 = mutable.Set[Long]()\n\
    \        val sumEven6 = mutable.Set[Long]()\n        val sumEven7 = mutable.Set[Long]()\n\
    \        val sumEven8 = mutable.Set[Long]()\n        val sumEven9 = mutable.Set[Long]()\n\
    \        val sumEven10 = mutable.Set[Long]()\n        val sumEven11 = mutable.Set[Long]()\n\
    \        val sumEven12 = mutable.Set[Long]()\n        val sumEven13 = mutable.Set[Long]()\n\
    \        val sumEven14 = mutable.Set[Long]()\n        val sumEven15 = mutable.Set[Long]()\n\
    \        val sumEven16 = mutable.Set[Long]()\n        val sumEven17 = mutable.Set[Long]()\n\
    \        val sumEven18 = mutable.Set[Long]()\n        val sumEven19 = mutable.Set[Long]()\n\
    \        val sumEven20 = mutable.Set[Long]()\n        val sumEven21 = mutable.Set[Long]()\n\
    \        val sumEven22 = mutable.Set[Long]()\n        val sumEven23 = mutable.Set[Long]()\n\
    \        val sumEven24 = mutable.Set[Long]()\n        val sumEven25 = mutable.Set[Long]()\n\
    \        val sumEven26 = mutable.Set[Long]()\n        val sumEven27 = mutable.Set[Long]()\n\
    \        val sumEven28 = mutable.Set[Long]()\n        val sumEven29 = mutable.Set[Long]()\n\
    \        val sumEven30 = mutable.Set[Long]()\n        val sumEven31 = mutable.Set[Long]()\n\
    \        val sumEven32 = mutable.Set[Long]()\n        val sumEven33 = mutable.Set[Long]()\n\
    \        val sumEven34 = mutable.Set[Long]()\n        val sumEven35 = mutable.Set[Long]()\n\
    \        val sumEven36 = mutable.Set[Long]()\n        val sumEven37 = mutable.Set[Long]()\n\
    \        val sumEven38 = ", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens == remainder",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = mutable.ListBuffer.empty[Long]\n\
    \        val sumOdd = mutable.ListBuffer.empty[Long]\n        for (i <- 1 to n)\
    \ {\n            if (i % 2 == 0) {\n                sumEven += i\n           \
    \ } else {\n                sumOdd += i\n            }\n        }\n        sumEven.size\
    \ == 4 && sumOdd.size == 4", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 4\n        val sumEvensRemainder = sumEven % 4\n        sumEvens\
    \ == sumEvensRemainder", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSum = mutable.ArrayBuffer.empty[Long]\n        val evenSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSums = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n \
    \       val evenSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n \
    \       val evenSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSum", "        val sumEven = n.toInt\n        val sumEvens =\
    \ sumEven / 4\n        val remainder = sumEven % 4\n        sumEvens == remainder",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evenSum = n.toInt\n        val sumEven = evenSum.toInt\n        val\
    \ sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven - sumEvens\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder - sumEvensRemainders\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvens", "        val sumEven = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val\
    \ sumEvenSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSum\
    \ = mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSum =\
    \ mutable.ListBuffer[Long]()\n        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n  \
    \      val sumEvenSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n    \
    \    val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n   \
    \     val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n  \
    \      val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n \
    \       val sumEvenSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        val sumEvenSumSumSumSumSumSumSumSumSumSumSum = mutable.ListBuffer[Long]()\n\
    \        ", "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n\
    \        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders =\
    \ sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val evenSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSums = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSums = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsSumsSumsSumsSum = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSum =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSums =\
    \ mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSumsSumsSumsSumsSums\
    \ = mut", "        val sumEven = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 0 until n) {\n            if (i % 2 == 0) {\n                sumEven +=\
    \ i\n            }\n        }\n        sumEven.length == 4", "        val evenSum\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSums = mutable.ListBuffer.empty[Long]\n        val oddSums =\
    \ mutable.ListBuffer.empty[Long]\n        val evenSumsCount = mutable.ListBuffer.empty[Long]\n\
    \        val oddSumsCount = mutable.ListBuffer.empty[Long]\n        val evenSumsCount2\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsCount2 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsCount3 = mutable.ListBuffer.empty[Long]\n        val oddSumsCount3\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsCount4 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSumsCount4 = mutable.ListBuffer.empty[Long]\n        val evenSumsCount5\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsCount5 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsCount6 = mutable.ListBuffer.empty[Long]\n        val oddSumsCount6\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsCount7 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSumsCount7 = mutable.ListBuffer.empty[Long]\n        val evenSumsCount8\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsCount8 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsCount9 = mutable.ListBuffer.empty[Long]\n        val oddSumsCount9\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsCount10 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSumsCount10 = mutable.ListBuffer.empty[Long]\n        val evenSumsCount11\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsCount11 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsCount12 = mutable.ListBuffer.empty[Long]\n        val oddSumsCount12\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsCount13 = mutable.ListBuffer.empty[Long]\n\
    \        val oddSumsCount13 = mutable.ListBuffer.empty[Long]\n        val evenSumsCount14\
    \ = mutable.ListBuffer.empty[Long]\n        val oddSumsCount14 = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsCount", "        val sumEven = n.toInt\n        val sumEvens\
    \ = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val evenSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSums = mutable.ListBuffer.empty[Long]\n        val evenSumsSum\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSum = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n        val\
    \ evenSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSum =\
    \ mutable.ListBuffer.empty[Long]\n        val evenSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer.empty[Long]\n\
    \        val evenSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer.empty",
  "        val sumEven = n.toInt\n        val evens = 0 until sumEven\n        val\
    \ evenSums = evens.map(i => sumEven - i)\n        evenSums.forall(x => x % 2 ==\
    \ 0)", "        val evens = mutable.ListBuffer[Long]()\n        val sum = mutable.ListBuffer[Long]()\n\
    \        val sums = mutable.ListBuffer[Long]()\n        val sumsEven = mutable.ListBuffer[Long]()\n\
    \        val sumsEvens = mutable.ListBuffer[Long]()\n        val sumsEvensSum\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSums = mutable.ListBuffer[Long]()\n\
    \        val sumsEvensSumsSum = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSum = mutable.ListBuffer[Long]()\n\
    \        val sumsEvensSumsSumsSums = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSums = mutable.ListBuffer[Long]()\n\
    \        val sumsEvensSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n     \
    \   val sumsEvensSumsSumsSumsSumsSums = mutable.ListBuffer[Long]()\n        val\
    \ sumsEvensSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSumsSumsSumsSum\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvensSumsSumsSumsSumsSumsSumsSums\
    \ = mutable.ListBuffer[Long]()\n        val sumsEvens", "        val sumEven =\
    \ n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder =\
    \ sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n      \
    \  val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evens = mutable.ListBuffer[Long]()\n        val sum = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until n){\n            val remainder = n % i\n           \
    \ if(remainder == 0){\n                evens += i\n                sum += i\n\
    \            }\n        }\n        evens.size == 4 && sum.size == 4", "      \
    \  val sumEven = mutable.ListBuffer.empty[Long]\n        val sumOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenEven = mutable.ListBuffer.empty[Long]\n        val sumOddEven\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumOddOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenEvenOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumOddEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenOddOdd = mutable.ListBuffer.empty[Long]\n        val sumOddEvenOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenEvenOddOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumOddEvenOddOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenOddEvenOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumOddEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n        val\
    \ sumOddEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n        val sumEvenOddEvenOddEvenOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val sumEvenEvenOddEvenOddEvenOdd =\
    \ mutable.ListBuffer.empty[Long]\n        val sumOddEvenOddEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumEvenEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val sumOddEvenOddEvenOddEvenOddEvenOddEvenOdd = mutable.List", "    \
    \    val sumEven = mutable.ListBuffer[Long]()\n        sumEven.clear()\n     \
    \   sumEven.takeWhile(x => x % 2 == 0).foreach(x => sumEven.append(x))\n     \
    \   sumEven.takeWhile(x => x % 2 == 0).sum == n", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            if(i % 2 == 0){\n\
    \                evens += i\n                sum += i\n            }\n       \
    \ }\n        evens.size == 4 && sum == n", "        val sumEven = n.toInt\n  \
    \      val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven -\
    \ sumEvens\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val\
    \ sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder -\
    \ sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemainders", "        val sumEven = mutable.ListBuffer[Long]()\n\
    \        val sumEven2 = mutable.ListBuffer[Long]()\n        val sumEven3 = mutable.ListBuffer[Long]()\n\
    \        val sumEven4 = mutable.ListBuffer[Long]()\n        val sumEven5 = mutable.ListBuffer[Long]()\n\
    \        val sumEven6 = mutable.ListBuffer[Long]()\n        val sumEven7 = mutable.ListBuffer[Long]()\n\
    \        val sumEven8 = mutable.ListBuffer[Long]()\n        val sumEven9 = mutable.ListBuffer[Long]()\n\
    \        val sumEven10 = mutable.ListBuffer[Long]()\n        val sumEven11 = mutable.ListBuffer[Long]()\n\
    \        val sumEven12 = mutable.ListBuffer[Long]()\n        val sumEven13 = mutable.ListBuffer[Long]()\n\
    \        val sumEven14 = mutable.ListBuffer[Long]()\n        val sumEven15 = mutable.ListBuffer[Long]()\n\
    \        val sumEven16 = mutable.ListBuffer[Long]()\n        val sumEven17 = mutable.ListBuffer[Long]()\n\
    \        val sumEven18 = mutable.ListBuffer[Long]()\n        val sumEven19 = mutable.ListBuffer[Long]()\n\
    \        val sumEven20 = mutable.ListBuffer[Long]()\n        val sumEven21 = mutable.ListBuffer[Long]()\n\
    \        val sumEven22 = mutable.ListBuffer[Long]()\n        val sumEven23 = mutable.ListBuffer[Long]()\n\
    \        val sumEven24 = mutable.ListBuffer[Long]()\n        val sumEven25 = mutable.ListBuffer[Long]()\n\
    \        val sumEven26 = mutable.ListBuffer[Long]()\n        val sumEven27 = mutable.ListBuffer[Long]()\n\
    \        val sumEven28 = mutable.ListBuffer[Long]()\n        val sumEven29 = mutable.ListBuffer[Long]()\n\
    \        val sumEven30 = mutable.ListBuffer[Long]()\n        val sumEven31 = mutable.ListBuffer[Long]()\n\
    \        val sumEven32 = mutable.ListBuffer[Long]()\n        val sumEven33 = mutable.ListBuffer[Long]()\n\
    \        val sumEven34 = mutable.ListBuffer[Long]()\n        val sumEven35 = mutable.ListBuffer[Long]()",
  "        val evens = mutable.ArrayBuffer.empty[Long]\n        val sum = 0L\n   \
    \     for(i <- 0 until n){\n            if(i % 2 == 0){\n                evens\
    \ += i\n                sum += i\n            }\n        }\n        evens.size\
    \ == 4 && sum == n", "        val sumEven = mutable.ArrayBuffer.empty[Int]\n \
    \       var sum = 0\n        var even = 1\n        while (even <= n) {\n     \
    \       sum += even\n            even *= 2\n        }\n        sumEven.clear()\n\
    \        sumEven.append(sum)\n        sumEven.takeWhile(x => x <= n).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x\
    \ => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x\
    \ => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x\
    \ => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x\
    \ => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x\
    \ => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x\
    \ => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x\
    \ => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x\
    \ => x > 0).foreach(sumEven.append(x))\n        sumEven.takeWhile(x => x > 0).foreach(sumEven.append(x))\n\
    \        sumEven.takeWhile(x => x > ", "        val sumEven = n.toInt\n      \
    \  val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n \
    \       val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evenSum = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n)\
    \ {\n            if (n % i == 0) {\n                evenSum += i\n           \
    \ }\n        }\n        evenSum.size == 4", "        val evens = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0L\n        val remainder = n % 2L\n        val remainders\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSum = 0L\n        val evenSums\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemainder = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsRemainders = mutable.ArrayBuffer.empty[Long]\n        val\
    \ evenSumsRemaindersRemainder = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemainders\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemainder\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemainders\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemainder\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemainders\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = mut", "        val evens = mutable.ListBuffer[Long]()\n        val sum = 0L\n\
    \        for(i <- 0 until n){\n            val x = i % 2\n            val y =\
    \ i / 2\n            val sum = x + y + sum\n            evens += sum\n       \
    \ }\n        evens.size == 4", "        val evenSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            sum += i\n   \
    \         if(sum % 2 == 0){\n                evenSums += sum\n            }\n\
    \        }\n        evenSums.size == 4", "        val sumEven = n.toInt\n    \
    \    val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n\
    \        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = mutable.ListBuffer[Long]()\n        val evenSum = mutable.ListBuffer[Long]()\n\
    \        val evenSum2 = mutable.ListBuffer[Long]()\n        val evenSum3 = mutable.ListBuffer[Long]()\n\
    \        val evenSum4 = mutable.ListBuffer[Long]()\n        val evenSum5 = mutable.ListBuffer[Long]()\n\
    \        val evenSum6 = mutable.ListBuffer[Long]()\n        val evenSum7 = mutable.ListBuffer[Long]()\n\
    \        val evenSum8 = mutable.ListBuffer[Long]()\n        val evenSum9 = mutable.ListBuffer[Long]()\n\
    \        val evenSum10 = mutable.ListBuffer[Long]()\n        val evenSum11 = mutable.ListBuffer[Long]()\n\
    \        val evenSum12 = mutable.ListBuffer[Long]()\n        val evenSum13 = mutable.ListBuffer[Long]()\n\
    \        val evenSum14 = mutable.ListBuffer[Long]()\n        val evenSum15 = mutable.ListBuffer[Long]()\n\
    \        val evenSum16 = mutable.ListBuffer[Long]()\n        val evenSum17 = mutable.ListBuffer[Long]()\n\
    \        val evenSum18 = mutable.ListBuffer[Long]()\n        val evenSum19 = mutable.ListBuffer[Long]()\n\
    \        val evenSum20 = mutable.ListBuffer[Long]()\n        val evenSum21 = mutable.ListBuffer[Long]()\n\
    \        val evenSum22 = mutable.ListBuffer[Long]()\n        val evenSum23 = mutable.ListBuffer[Long]()\n\
    \        val evenSum24 = mutable.ListBuffer[Long]()\n        val evenSum25 = mutable.ListBuffer[Long]()\n\
    \        val evenSum26 = mutable.ListBuffer[Long]()\n        val evenSum27 = mutable.ListBuffer[Long]()\n\
    \        val evenSum28 = mutable.ListBuffer[Long]()\n        val evenSum29 = mutable.ListBuffer[Long]()\n\
    \        val evenSum30 = mutable.ListBuffer[Long]()\n        val evenSum31 = mutable.ListBuffer[Long]()\n\
    \        val evenSum32 = mutable.ListBuffer[Long]()\n        val evenSum33 = mutable.ListBuffer[Long]()\n\
    \        val evenSum", "        val sumEven = n.toInt\n        val sumEvens =\
    \ sumEven / 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until\
    \ n) {\n            if (i % 2 == 0) {\n                sumEven += i\n        \
    \    }\n        }\n        sumEven.length == 4", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            val x = i\n \
    \           val y = n - i\n            val z = x + y\n            if(z % 2 ==\
    \ 0){\n                evens += z\n                sum += z\n            }\n \
    \       }\n        evens.size == 4", "        val evens = mutable.ArrayBuffer(2,\
    \ 4)\n        val sumEvens = mutable.ArrayBuffer(0)\n        val sumEvensSum =\
    \ mutable.ArrayBuffer(0)\n        val sumEvensSum2 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum3 = mutable.ArrayBuffer(0)\n        val sumEvensSum4 =\
    \ mutable.ArrayBuffer(0)\n        val sumEvensSum5 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum6 = mutable.ArrayBuffer(0)\n        val sumEvensSum7 =\
    \ mutable.ArrayBuffer(0)\n        val sumEvensSum8 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum9 = mutable.ArrayBuffer(0)\n        val sumEvensSum10\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum11 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum12 = mutable.ArrayBuffer(0)\n        val sumEvensSum13\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum14 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum15 = mutable.ArrayBuffer(0)\n        val sumEvensSum16\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum17 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum18 = mutable.ArrayBuffer(0)\n        val sumEvensSum19\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum20 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum21 = mutable.ArrayBuffer(0)\n        val sumEvensSum22\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum23 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum24 = mutable.ArrayBuffer(0)\n        val sumEvensSum25\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum26 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum27 = mutable.ArrayBuffer(0)\n        val sumEvensSum28\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum29 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum30 = mutable.ArrayBuffer(0)\n        val sumEvensSum31\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum32 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum33 = mutable.ArrayBuffer(0)\n        val sumEvensSum34\
    \ = mutable.ArrayBuffer(0)\n        val sumEvensSum35 = mutable.ArrayBuffer(0)\n\
    \        val sumEvensSum36 = mutable.ArrayBuffer(", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val sumEvensRemainder = sumEven %\
    \ 4\n        sumEvens == sumEvensRemainder", "        val evenSums = mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        while(n > 0){\n            sum += n\n          \
    \  n -= 1\n        }\n        val evenSum = sum / 2\n        evenSums += evenSum\n\
    \        evenSums.takeWhile(evenSum < 4).forall(evenSum => evenSums.contains(evenSum\
    \ + 2))", "        val evens = mutable.ListBuffer[Long]()\n        val sum = 0L\n\
    \        for(i <- 0 until n){\n            val x = i\n            val y = x -\
    \ 1\n            val z = x - 2\n            val w = x - 3\n            val v =\
    \ x + 1\n            val u = x + 2\n            val t = x + 3\n            val\
    \ s = x + 4\n            val m = x + 5\n            val n = x + 6\n          \
    \  val p = x + 7\n            val q = x + 8\n            val r = x + 9\n     \
    \       val q = x + 10\n            val r = x + 11\n            val p = x + 12\n\
    \            val q = x + 13\n            val r = x + 14\n            val p = x\
    \ + 15\n            val q = x + 16\n            val r = x + 17\n            val\
    \ p = x + 18\n            val q = x + 19\n            val r = x + 20\n       \
    \     val p = x + 21\n            val q = x + 22\n            val r = x + 23\n\
    \            val p = x + 24\n            val q = x + 25\n            val r = x\
    \ + 26\n            val p = x + 27\n            val q = x + 28\n            val\
    \ r = x + 29\n            val p = x + 30\n            val q = x + 31\n       \
    \     val r = x + 32\n            val p = x + 33\n            val q = x + 34\n\
    \            val r = x + 35\n            val p = x + 36\n            val q = x\
    \ + 37\n            val r = x + 38\n            val p = x + 39\n            val\
    \ q = x + 40\n            val r = x + 41\n            val p = x + 42\n       \
    \     val q = x + 43\n            val r = x + 44\n            val p = x + 45\n\
    \            val q = x + 46\n            val r = x + 47\n            val p = x\
    \ + 48\n            val q = x + 49\n            val r = x + 50\n            val\
    \ p = x + 51\n            val q = x + 52\n            val r = x + 53\n       \
    \     val p = x + 54\n            val q = x + 55\n            val r = x + 56\n\
    \            val p = x + 57\n            val q = x + 58\n            val r = x\
    \ + 59\n            val p = x + 60\n            val q = x + 61\n            val\
    \ r = x + 62\n            val p = x + 63\n            val q = x + 64\n       \
    \     val r = x + 65\n            val p = x + 66\n            val q = x + 67\n\
    \            val r = x + 68\n            val p = x + 69\n            val q = x\
    \ + 70\n            val r = x + 71\n            val p = x + 72\n            val\
    \ q = x + 73\n            val r = x + 74\n            val p = x + 75\n       \
    \     val q = x + 76\n            val r = x + 77", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain", "     \
    \   val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemain",
  "        val sumEven = n.toInt\n        val evens = sumEven / 2\n        val remainder\
    \ = sumEven % 2\n        evens == remainder", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain", "     \
    \   val evenSums = mutable.ArrayBuffer.empty[Long]\n        val oddSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsCount2 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount3\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount3 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount4 = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsCount5 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount6\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount6 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount7 = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsCount8 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount9\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount9 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount10 = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsCount11 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount12\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount12 = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount13 = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val oddSumsCount14 = mutable.ArrayBuffer.empty[Long]\n        val evenSumsCount15\
    \ = mutable.ArrayBuffer.empty[Long]\n        val oddSumsCount15 = mutable.ArrayBuffer.empty[Long]\n",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder - sumEvensRemainders\n\
    \        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemainders", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven.filter(_ % 2 == 0).length\n        val sumEvensLessThan4\
    \ = sumEvens - 4\n        sumEvensLessThan4 <= 0", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 2\n        val sumEvensRemainder = sumEven %\
    \ 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder\
    \ = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val\
    \ sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder\
    \ / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n     \
    \   val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder / 2\n     \
    \   val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder %\
    \ 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders",
  "        val evenSum = mutable.ArrayBuffer.empty[Int]\n        val evenSums = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount2\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount3 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount4 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount5\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount6 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount7 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount8\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount9 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount10 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount11\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount12 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount13 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount14\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount16 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount17\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount18 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount19 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount20\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount21 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount22 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount23\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount24 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount25 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount26\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount27 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCount28 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCount29\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSum", "        val sumEven\
    \ = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemain", "     \
    \   val sumEven = n.toInt\n        val sumEvens = sumEven / 2\n        val sumEvensRemainder\
    \ = sumEven % 2\n        val sumEvensRemainders = sumEvensRemainder / 2\n    \
    \    val sumEvensRemaindersRemainder = sumEvensRemainder % 2\n        val sumEvensRemaindersRemainders\
    \ = sumEvensRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemain", "        val sumEven = n.toInt\n\
    \        val sumEvens = sumEven / 4\n        val remainder = sumEven % 4\n   \
    \     sumEvens == remainder", "        val evenSums = mutable.ArrayBuffer.empty[Long]\n\
    \        val evenSumsCount = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum2 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum3 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum4\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum5 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum6 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum7\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum8 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum9 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum12 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsCountSum13 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum14\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum16 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsCountSum17 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum18\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum19 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum20 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsCountSum21 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum22\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum23 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum24 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ evenSumsCountSum25 = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum26\
    \ = mutable.ArrayBuffer.empty[Int]\n        val evenSumsCountSum27 = mutable.ArrayBuffer.empty[Int]\n\
    \        val evenSumsCountSum28 = ", "        val evens = mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            val x = i\n \
    \           val y = n - i\n            val z = x + y\n            val z2 = z *\
    \ z\n            val z3 = z2 * z\n            val z4 = z3 * z\n            val\
    \ z5 = z4 * z\n            val z6 = z5 * z\n            val z7 = z6 * z\n    \
    \        val z8 = z7 * z\n            val z9 = z8 * z\n            val z10 = z9\
    \ * z\n            val z11 = z10 * z\n            val z12 = z11 * z\n        \
    \    val z13 = z12 * z\n            val z14 = z13 * z\n            val z15 = z14\
    \ * z\n            val z16 = z15 * z\n            val z17 = z16 * z\n        \
    \    val z18 = z17 * z\n            val z19 = z18 * z\n            val z20 = z19\
    \ * z\n            val z21 = z20 * z\n            val z22 = z21 * z\n        \
    \    val z23 = z22 * z\n            val z24 = z23 * z\n            val z25 = z24\
    \ * z\n            val z26 = z25 * z\n            val z27 = z26 * z\n        \
    \    val z28 = z27 * z\n            val z29 = z28 * z\n            val z30 = z29\
    \ * z\n            val z31 = z30 * z\n            val z32 = z31 * z\n        \
    \    val z33 = z32 * z\n            val z34 = z33 * z\n            val z35 = z34\
    \ * z\n            val z36 = z35 * z\n            val z37 = z36 * z\n        \
    \    val z38 = z37 * z\n            val z39 = z38 * z\n            val z40 = z39\
    \ * z\n            val z41 = z40 * z\n            val z42 = z41 * z\n        \
    \    val z43 = z42 * z\n            val z44 = z43 * z\n            val z45 = z44\
    \ * z\n            val z46 = z45 * z\n            val z47 = z46 * z\n        \
    \    val z48 = z47 * z\n            val z49 = z48 * z\n            val z50 = "]
stop_tokens:
- "\n    }\n"
