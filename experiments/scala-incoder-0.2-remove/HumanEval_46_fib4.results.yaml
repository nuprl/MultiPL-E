language: scala
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 0\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy0ilib55.scala:19)\n\tat Problem.main(tmpy0ilib55.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ListBuffer[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgti2zlcn.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvwb1clp.scala:19)\n\tat Problem.main(tmpqvwb1clp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqo7257t.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) \u2190 0\n        fib4(1) \u2190 0\n        fib4(2) \u2190 2\n\
    \        fib4(3) \u2190 0\n        fib4(n) \u2190 fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:13:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        fib4(\e[31m0\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:14:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ fib4(\e[31m1\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:15:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        fib4(\e[31m2\e[0m) \u2190 \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:16:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ fib4(\e[31m3\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        fib4(n) \u2190 fib4(n-\e[31m1\e[0m) + fib4(n-\e\
    [31m2\e[0m) + fib4(n-\e[31m3\e[0m) + fib4(n-\e[31m4\e[0m)\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                end of statement expected\
    \ but '<-' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6mdat7d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\nthere were 5 deprecation\
    \ warnings; re-run with -deprecation for details\n1 warning found\n6 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) \u2190 0\n        fib4(1) \u2190 0\n        fib4(2) \u2190 2\n\
    \        fib4(3) \u2190 0\n        fib4(n) \u2190 fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:13:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        fib4(\e[31m0\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:14:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ fib4(\e[31m1\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:15:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        fib4(\e[31m2\e[0m) \u2190 \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:16:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ fib4(\e[31m3\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpw6mdat7d.scala:17:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        fib4(n) \u2190 fib4(n-\e[31m1\e[0m) + fib4(n-\e\
    [31m2\e[0m) + fib4(n-\e[31m3\e[0m) + fib4(n-\e[31m4\e[0m)\n\e[31m\e[31m   |\e\
    [0m                ^\e[0m\n\e[31m   |\e[0m                end of statement expected\
    \ but '<-' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6mdat7d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\nthere were 5 deprecation\
    \ warnings; re-run with -deprecation for details\n1 warning found\n6 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3qmg_bp.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4\
    \ += 6 -> 6\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 10\n        fib4 += 11 -> 0\n        fib4 += 12\
    \ -> 12\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 16\n        fib4 += 17 -> 0\n        fib4 += 18\
    \ -> 18\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 22\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 24\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 28\n        fib4 += 29 -> 0\n        fib4 += 30\
    \ -> 30\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 34\n        fib4 += 35 -> 0\n        fib4 += 36\
    \ -> 36\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 40\n        fib4 += 41 -> 0\n        fib4 += 42\
    \ -> 42\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 46\n        fib4 += 47 -> 0\n        fib4 += 48\
    \ -> 48\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 52\n        fib4 += 53 -> 0\n        fib4 += 54\
    \ -> 54\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 58\n        fib4 += 59 -> 0\n        fib4 += 60\
    \ -> 60\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgh_58e8z.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4\
    \ += 6 -> 6\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 10\n        fib4 += 11 -> 0\n        fib4 += 12\
    \ -> 12\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 16\n        fib4 += 17 -> 0\n        fib4 += 18\
    \ -> 18\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 22\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 24\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 28\n        fib4 += 29 -> 0\n        fib4 += 30\
    \ -> 30\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 34\n        fib4 += 35 -> 0\n        fib4 += 36\
    \ -> 36\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 40\n        fib4 += 41 -> 0\n        fib4 += 42\
    \ -> 42\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 46\n        fib4 += 47 -> 0\n        fib4 += 48\
    \ -> 48\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 52\n        fib4 += 53 -> 0\n        fib4 += 54\
    \ -> 54\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 58\n        fib4 += 59 -> 0\n        fib4 += 60\
    \ -> 60\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgh_58e8z.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3qmg_bp.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n + 1)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0pc6ziay.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqo7257t.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 0)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nuiidsr.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, 4294967296L)\n\
    \        fib4.put(35, 8589934592L)\n        fib4.put(36, 17179869184L)\n     \
    \   fib4.put(37, 34359738368L)\n        fib4.put(38, 68719476736L)\n        fib4.put(39,\
    \ 137438953472L)\n        fib4.put(40, 274877906944L)\n        fib4.put(41, 549755813888L)\n\
    \        fib4.put(42, 1099511627776L)\n        fib4.put(43, 2199023255552L)\n\
    \        fib4.put(44, 4398046511104L)\n        fib4.put(45, 8796093022208L)\n\
    \        fib4.put(46, 17592186044416L)\n        fib4.put(47, 35184372088832L)\n\
    \        fib4.put(48, 70\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp974jz7we.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp974jz7we.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 0)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nuiidsr.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvwb1clp.scala:19)\n\tat Problem.main(tmpqvwb1clp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxluu__zh.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcv93104k.scala:88:17 ---------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv93104k.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzuctsq6.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpfzuctsq6.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 5L)\n  \
    \      fib4.put(6, 0L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 0L)\n        fib4.put(11, 11L)\n \
    \       fib4.put(12, 0L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplsftez76.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmplsftez76.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcv93104k.scala:88:17 ---------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv93104k.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 1)\n        fib4.put(42, 1)\n        fib4.put(43, 1)\n  \
    \      fib4.put(44, 1)\n        fib4.put(45, 1)\n        fib4.put(46, 1)\n   \
    \     fib4.put(47, 1)\n        fib4.put(48, 1)\n        fib4.put(49, 1)\n    \
    \    fib4.put(50, 1)\n        fib4.put(51, 1)\n        fib4.put(52, 1)\n     \
    \   fib4.put(53, 1)\n        fib4.put(54, 1)\n        fib4.put(55, 1)\n      \
    \  fib4.put(56, 1)\n        fib4.put(57, 1)\n        fib4.put(58, 1)\n       \
    \ fib4.put(59, 1)\n        fib4.put(60, 1)\n        fib4.put(61, 1)\n        fib4.put(62,\
    \ 1)\n        fib4.put(63, 1)\n        fib4.put(64, 1)\n        fib4.put(65, 1)\n\
    \        fib4.put(66, 1)\n        fib4.put(67, 1)\n        fib4.put(68, 1)\n \
    \       fib4.put(69, 1)\n        fib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2erhicu.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2erhicu.scala:83:8\
    \ -------------------------\e[0m\e[0m\n\e[31m83 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](5)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplj3rznae.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += n -> fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\n        fib4.get(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx3htc_uo.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(4) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx57thzuf.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqo7257t.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqo7257t.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ListBuffer[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjb1sp_qb.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 0L)\n        fib4.put(7, 0L)\n        fib4.put(8, 0L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 0L)\n        fib4.put(11, 0L)\n  \
    \      fib4.put(12, 0L)\n        fib4.put(13, 0L)\n        fib4.put(14, 0L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 0L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 0L)\n        fib4.put(19, 0L)\n        fib4.put(20, 0L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 0L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 0L)\n        fib4.put(25, 0L)\n        fib4.put(26, 0L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 0L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 0L)\n        fib4.put(31, 0L)\n        fib4.put(32, 0L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 0L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 0L)\n        fib4.put(37, 0L)\n        fib4.put(38, 0L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 0L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 0L)\n        fib4.put(43, 0L)\n        fib4.put(44, 0L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 0L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 0L)\n        fib4.put(49, 0L)\n        fib4.put(50, 0L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 0L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 0L)\n        fib4.put(55, 0L)\n        fib4.put(56, 0L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 0L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 0L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn9pvg_md.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn9pvg_md.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqo7257t.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 0L)\n        fib4.put(7, 0L)\n        fib4.put(8, 0L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 0L)\n        fib4.put(11, 0L)\n  \
    \      fib4.put(12, 0L)\n        fib4.put(13, 0L)\n        fib4.put(14, 0L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 0L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 0L)\n        fib4.put(19, 0L)\n        fib4.put(20, 0L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 0L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 0L)\n        fib4.put(25, 0L)\n        fib4.put(26, 0L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 0L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 0L)\n        fib4.put(31, 0L)\n        fib4.put(32, 0L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 0L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 0L)\n        fib4.put(37, 0L)\n        fib4.put(38, 0L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 0L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 0L)\n        fib4.put(43, 0L)\n        fib4.put(44, 0L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 0L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 0L)\n        fib4.put(49, 0L)\n        fib4.put(50, 0L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 0L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 0L)\n        fib4.put(55, 0L)\n        fib4.put(56, 0L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 0L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 0L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn9pvg_md.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn9pvg_md.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 0)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nuiidsr.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ListBuffer[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjb1sp_qb.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 1)\n        fib4.put(42, 1)\n        fib4.put(43, 1)\n  \
    \      fib4.put(44, 1)\n        fib4.put(45, 1)\n        fib4.put(46, 1)\n   \
    \     fib4.put(47, 1)\n        fib4.put(48, 1)\n        fib4.put(49, 1)\n    \
    \    fib4.put(50, 1)\n        fib4.put(51, 1)\n        fib4.put(52, 1)\n     \
    \   fib4.put(53, 1)\n        fib4.put(54, 1)\n        fib4.put(55, 1)\n      \
    \  fib4.put(56, 1)\n        fib4.put(57, 1)\n        fib4.put(58, 1)\n       \
    \ fib4.put(59, 1)\n        fib4.put(60, 1)\n        fib4.put(61, 1)\n        fib4.put(62,\
    \ 1)\n        fib4.put(63, 1)\n        fib4.put(64, 1)\n        fib4.put(65, 1)\n\
    \        fib4.put(66, 1)\n        fib4.put(67, 1)\n        fib4.put(68, 1)\n \
    \       fib4.put(69, 1)\n        fib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2erhicu.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2erhicu.scala:83:8\
    \ -------------------------\e[0m\e[0m\n\e[31m83 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ciy9zsi.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(4) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx57thzuf.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, 4294967296L)\n\
    \        fib4.put(35, 8589934592L)\n        fib4.put(36, 17179869184L)\n     \
    \   fib4.put(37, 34359738368L)\n        fib4.put(38, 68719476736L)\n        fib4.put(39,\
    \ 137438953472L)\n        fib4.put(40, 274877906944L)\n        fib4.put(41, 549755813888L)\n\
    \        fib4.put(42, 1099511627776L)\n        fib4.put(43, 2199023255552L)\n\
    \        fib4.put(44, 4398046511104L)\n        fib4.put(45, 8796093022208L)\n\
    \        fib4.put(46, 17592186044416L)\n        fib4.put(47, 35184372088832L)\n\
    \        fib4.put(48, 70\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp974jz7we.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp974jz7we.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 0L)\n        fib4.put(7, 0L)\n        fib4.put(8, 0L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 0L)\n        fib4.put(11, 0L)\n  \
    \      fib4.put(12, 0L)\n        fib4.put(13, 0L)\n        fib4.put(14, 0L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 0L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 0L)\n        fib4.put(19, 0L)\n        fib4.put(20, 0L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 0L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 0L)\n        fib4.put(25, 0L)\n        fib4.put(26, 0L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 0L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 0L)\n        fib4.put(31, 0L)\n        fib4.put(32, 0L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 0L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 0L)\n        fib4.put(37, 0L)\n        fib4.put(38, 0L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 0L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 0L)\n        fib4.put(43, 0L)\n        fib4.put(44, 0L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 0L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 0L)\n        fib4.put(49, 0L)\n        fib4.put(50, 0L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 0L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 0L)\n        fib4.put(55, 0L)\n        fib4.put(56, 0L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 0L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 0L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn9pvg_md.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn9pvg_md.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqo7257t.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmped8nqqms.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 0L)\n        fib4.put(7, 0L)\n        fib4.put(8, 0L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 0L)\n        fib4.put(11, 0L)\n  \
    \      fib4.put(12, 0L)\n        fib4.put(13, 0L)\n        fib4.put(14, 0L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 0L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 0L)\n        fib4.put(19, 0L)\n        fib4.put(20, 0L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 0L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 0L)\n        fib4.put(25, 0L)\n        fib4.put(26, 0L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 0L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 0L)\n        fib4.put(31, 0L)\n        fib4.put(32, 0L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 0L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 0L)\n        fib4.put(37, 0L)\n        fib4.put(38, 0L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 0L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 0L)\n        fib4.put(43, 0L)\n        fib4.put(44, 0L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 0L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 0L)\n        fib4.put(49, 0L)\n        fib4.put(50, 0L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 0L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 0L)\n        fib4.put(55, 0L)\n        fib4.put(56, 0L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 0L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 0L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn9pvg_md.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn9pvg_md.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 0)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nuiidsr.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 1)\n        fib4.put(42, 1)\n        fib4.put(43, 1)\n  \
    \      fib4.put(44, 1)\n        fib4.put(45, 1)\n        fib4.put(46, 1)\n   \
    \     fib4.put(47, 1)\n        fib4.put(48, 1)\n        fib4.put(49, 1)\n    \
    \    fib4.put(50, 1)\n        fib4.put(51, 1)\n        fib4.put(52, 1)\n     \
    \   fib4.put(53, 1)\n        fib4.put(54, 1)\n        fib4.put(55, 1)\n      \
    \  fib4.put(56, 1)\n        fib4.put(57, 1)\n        fib4.put(58, 1)\n       \
    \ fib4.put(59, 1)\n        fib4.put(60, 1)\n        fib4.put(61, 1)\n        fib4.put(62,\
    \ 1)\n        fib4.put(63, 1)\n        fib4.put(64, 1)\n        fib4.put(65, 1)\n\
    \        fib4.put(66, 1)\n        fib4.put(67, 1)\n        fib4.put(68, 1)\n \
    \       fib4.put(69, 1)\n        fib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2erhicu.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2erhicu.scala:83:8\
    \ -------------------------\e[0m\e[0m\n\e[31m83 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 0L)\n        fib4.put(7, 0L)\n        fib4.put(8, 0L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 0L)\n        fib4.put(11, 0L)\n  \
    \      fib4.put(12, 0L)\n        fib4.put(13, 0L)\n        fib4.put(14, 0L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 0L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 0L)\n        fib4.put(19, 0L)\n        fib4.put(20, 0L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 0L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 0L)\n        fib4.put(25, 0L)\n        fib4.put(26, 0L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 0L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 0L)\n        fib4.put(31, 0L)\n        fib4.put(32, 0L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 0L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 0L)\n        fib4.put(37, 0L)\n        fib4.put(38, 0L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 0L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 0L)\n        fib4.put(43, 0L)\n        fib4.put(44, 0L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 0L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 0L)\n        fib4.put(49, 0L)\n        fib4.put(50, 0L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 0L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 0L)\n        fib4.put(55, 0L)\n        fib4.put(56, 0L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 0L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 0L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn9pvg_md.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn9pvg_md.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3qmg_bp.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 0)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nuiidsr.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 0L)\n        fib4.put(7, 0L)\n        fib4.put(8, 0L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 0L)\n        fib4.put(11, 0L)\n  \
    \      fib4.put(12, 0L)\n        fib4.put(13, 0L)\n        fib4.put(14, 0L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 0L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 0L)\n        fib4.put(19, 0L)\n        fib4.put(20, 0L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 0L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 0L)\n        fib4.put(25, 0L)\n        fib4.put(26, 0L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 0L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 0L)\n        fib4.put(31, 0L)\n        fib4.put(32, 0L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 0L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 0L)\n        fib4.put(37, 0L)\n        fib4.put(38, 0L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 0L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 0L)\n        fib4.put(43, 0L)\n        fib4.put(44, 0L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 0L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 0L)\n        fib4.put(49, 0L)\n        fib4.put(50, 0L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 0L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 0L)\n        fib4.put(55, 0L)\n        fib4.put(56, 0L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 0L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 0L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn9pvg_md.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn9pvg_md.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ArrayBuffer(0)\n \
    \       fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n \
    \       fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbspcv8ar.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ListBuffer[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgti2zlcn.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcv93104k.scala:88:17 ---------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv93104k.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4\
    \ += 6 -> 6\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 10\n        fib4 += 11 -> 0\n        fib4 += 12\
    \ -> 12\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 16\n        fib4 += 17 -> 0\n        fib4 += 18\
    \ -> 18\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 22\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 24\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 28\n        fib4 += 29 -> 0\n        fib4 += 30\
    \ -> 30\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 34\n        fib4 += 35 -> 0\n        fib4 += 36\
    \ -> 36\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 40\n        fib4 += 41 -> 0\n        fib4 += 42\
    \ -> 42\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 46\n        fib4 += 47 -> 0\n        fib4 += 48\
    \ -> 48\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 52\n        fib4 += 53 -> 0\n        fib4 += 54\
    \ -> 54\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 58\n        fib4 += 59 -> 0\n        fib4 += 60\
    \ -> 60\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgh_58e8z.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](5)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(4) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n        fib4(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy_35l3g9.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcv93104k.scala:88:17 ---------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcv93104k.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ListBuffer[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjb1sp_qb.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n + 1)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0pc6ziay.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4\
    \ += 6 -> 6\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 10\n        fib4 += 11 -> 0\n        fib4 += 12\
    \ -> 12\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 16\n        fib4 += 17 -> 0\n        fib4 += 18\
    \ -> 18\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 22\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 24\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 28\n        fib4 += 29 -> 0\n        fib4 += 30\
    \ -> 30\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 34\n        fib4 += 35 -> 0\n        fib4 += 36\
    \ -> 36\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 40\n        fib4 += 41 -> 0\n        fib4 += 42\
    \ -> 42\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 46\n        fib4 += 47 -> 0\n        fib4 += 48\
    \ -> 48\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 52\n        fib4 += 53 -> 0\n        fib4 += 54\
    \ -> 54\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 58\n        fib4 += 59 -> 0\n        fib4 += 60\
    \ -> 60\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgh_58e8z.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 1)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsvwktw0.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 0L)\n        fib4.put(7, 0L)\n        fib4.put(8, 0L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 0L)\n        fib4.put(11, 0L)\n  \
    \      fib4.put(12, 0L)\n        fib4.put(13, 0L)\n        fib4.put(14, 0L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 0L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 0L)\n        fib4.put(19, 0L)\n        fib4.put(20, 0L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 0L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 0L)\n        fib4.put(25, 0L)\n        fib4.put(26, 0L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 0L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 0L)\n        fib4.put(31, 0L)\n        fib4.put(32, 0L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 0L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 0L)\n        fib4.put(37, 0L)\n        fib4.put(38, 0L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 0L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 0L)\n        fib4.put(43, 0L)\n        fib4.put(44, 0L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 0L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 0L)\n        fib4.put(49, 0L)\n        fib4.put(50, 0L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 0L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 0L)\n        fib4.put(55, 0L)\n        fib4.put(56, 0L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 0L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 0L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn9pvg_md.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpn9pvg_md.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 0\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjeoiw4uv.scala:19)\n\tat Problem.main(tmpjeoiw4uv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 1)\n        fib4.put(42, 1)\n        fib4.put(43, 1)\n  \
    \      fib4.put(44, 1)\n        fib4.put(45, 1)\n        fib4.put(46, 1)\n   \
    \     fib4.put(47, 1)\n        fib4.put(48, 1)\n        fib4.put(49, 1)\n    \
    \    fib4.put(50, 1)\n        fib4.put(51, 1)\n        fib4.put(52, 1)\n     \
    \   fib4.put(53, 1)\n        fib4.put(54, 1)\n        fib4.put(55, 1)\n      \
    \  fib4.put(56, 1)\n        fib4.put(57, 1)\n        fib4.put(58, 1)\n       \
    \ fib4.put(59, 1)\n        fib4.put(60, 1)\n        fib4.put(61, 1)\n        fib4.put(62,\
    \ 1)\n        fib4.put(63, 1)\n        fib4.put(64, 1)\n        fib4.put(65, 1)\n\
    \        fib4.put(66, 1)\n        fib4.put(67, 1)\n        fib4.put(68, 1)\n \
    \       fib4.put(69, 1)\n        fib\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2erhicu.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2erhicu.scala:83:8\
    \ -------------------------\e[0m\e[0m\n\e[31m83 |\e[0m        fib\n\e[31m\e[31m\
    \   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not found: fib\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 0)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nuiidsr.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n <= 2) 2\n\
    \        else if (n <= 4) 4\n        else fib4(n - 1) + fib4(n - 2) + fib4(n -\
    \ 3) + fib4(n - 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxqm4r1qb.scala:18)\n\tat Problem.main(tmpxqm4r1qb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4L)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0uru0j97.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpra93dlzi.scala:19)\n\tat Problem.main(tmpra93dlzi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ListBuffer[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjb1sp_qb.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += n\n        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \        fib4.last\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y7bfa5l.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4L)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb958koi6.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3qmg_bp.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4\
    \ += 6 -> 6\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 10\n        fib4 += 11 -> 0\n        fib4 += 12\
    \ -> 12\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 16\n        fib4 += 17 -> 0\n        fib4 += 18\
    \ -> 18\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 22\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 24\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 28\n        fib4 += 29 -> 0\n        fib4 += 30\
    \ -> 30\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 34\n        fib4 += 35 -> 0\n        fib4 += 36\
    \ -> 36\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 40\n        fib4 += 41 -> 0\n        fib4 += 42\
    \ -> 42\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 46\n        fib4 += 47 -> 0\n        fib4 += 48\
    \ -> 48\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 52\n        fib4 += 53 -> 0\n        fib4 += 54\
    \ -> 54\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 58\n        fib4 += 59 -> 0\n        fib4 += 60\
    \ -> 60\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgh_58e8z.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4L)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb958koi6.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4\
    \ += 6 -> 6\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 10\n        fib4 += 11 -> 0\n        fib4 += 12\
    \ -> 12\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 16\n        fib4 += 17 -> 0\n        fib4 += 18\
    \ -> 18\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 22\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 24\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 28\n        fib4 += 29 -> 0\n        fib4 += 30\
    \ -> 30\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 34\n        fib4 += 35 -> 0\n        fib4 += 36\
    \ -> 36\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 40\n        fib4 += 41 -> 0\n        fib4 += 42\
    \ -> 42\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 46\n        fib4 += 47 -> 0\n        fib4 += 48\
    \ -> 48\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 52\n        fib4 += 53 -> 0\n        fib4 += 54\
    \ -> 54\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 58\n        fib4 += 59 -> 0\n        fib4 += 60\
    \ -> 60\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgh_58e8z.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfqo7257t.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxluu__zh.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpra93dlzi.scala:19)\n\tat Problem.main(tmpra93dlzi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](5)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplj3rznae.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n + 1)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0pc6ziay.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 0\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjeoiw4uv.scala:19)\n\tat Problem.main(tmpjeoiw4uv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 0\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjeoiw4uv.scala:19)\n\tat Problem.main(tmpjeoiw4uv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4\
    \ += 6 -> 6\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 10\n        fib4 += 11 -> 0\n        fib4 += 12\
    \ -> 12\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 16\n        fib4 += 17 -> 0\n        fib4 += 18\
    \ -> 18\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 22\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 24\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 28\n        fib4 += 29 -> 0\n        fib4 += 30\
    \ -> 30\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 34\n        fib4 += 35 -> 0\n        fib4 += 36\
    \ -> 36\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 40\n        fib4 += 41 -> 0\n        fib4 += 42\
    \ -> 42\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 46\n        fib4 += 47 -> 0\n        fib4 += 48\
    \ -> 48\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 52\n        fib4 += 53 -> 0\n        fib4 += 54\
    \ -> 54\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 58\n        fib4 += 59 -> 0\n        fib4 += 60\
    \ -> 60\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgh_58e8z.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ArrayBuffer(0)\n \
    \       fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n \
    \       fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbspcv8ar.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 0\n        fib4 += 5 -> 5\n        fib4\
    \ += 6 -> 0\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 0\n        fib4 += 11 -> 11\n        fib4 += 12\
    \ -> 0\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 0\n        fib4 += 17 -> 17\n        fib4 += 18\
    \ -> 0\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 0\n        fib4 += 23 -> 23\n        fib4 += 24\
    \ -> 0\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 0\n        fib4 += 29 -> 29\n        fib4 += 30\
    \ -> 0\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 0\n        fib4 += 35 -> 35\n        fib4 += 36\
    \ -> 0\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 0\n        fib4 += 41 -> 41\n        fib4 += 42\
    \ -> 0\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 0\n        fib4 += 47 -> 47\n        fib4 += 48\
    \ -> 0\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 0\n        fib4 += 53 -> 53\n        fib4 += 54\
    \ -> 0\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 0\n        fib4 += 59 -> 59\n        fib4 += 60\
    \ -> 0\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp377m7suo.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgay_1vau.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n        fib4 += n\n\
    \        fib4 += n\n        fib4 += n\n        fib4 += n\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq76sgsnw.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk4xkqhoj.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3qmg_bp.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy3qmg_bp.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 0)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nuiidsr.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 0L)\n  \
    \      fib4.put(6, 6L)\n        fib4.put(7, 0L)\n        fib4.put(8, 8L)\n   \
    \     fib4.put(9, 0L)\n        fib4.put(10, 10L)\n        fib4.put(11, 0L)\n \
    \       fib4.put(12, 12L)\n        fib4.put(13, 0L)\n        fib4.put(14, 14L)\n\
    \        fib4.put(15, 0L)\n        fib4.put(16, 16L)\n        fib4.put(17, 0L)\n\
    \        fib4.put(18, 18L)\n        fib4.put(19, 0L)\n        fib4.put(20, 20L)\n\
    \        fib4.put(21, 0L)\n        fib4.put(22, 22L)\n        fib4.put(23, 0L)\n\
    \        fib4.put(24, 24L)\n        fib4.put(25, 0L)\n        fib4.put(26, 26L)\n\
    \        fib4.put(27, 0L)\n        fib4.put(28, 28L)\n        fib4.put(29, 0L)\n\
    \        fib4.put(30, 30L)\n        fib4.put(31, 0L)\n        fib4.put(32, 32L)\n\
    \        fib4.put(33, 0L)\n        fib4.put(34, 34L)\n        fib4.put(35, 0L)\n\
    \        fib4.put(36, 36L)\n        fib4.put(37, 0L)\n        fib4.put(38, 38L)\n\
    \        fib4.put(39, 0L)\n        fib4.put(40, 40L)\n        fib4.put(41, 0L)\n\
    \        fib4.put(42, 42L)\n        fib4.put(43, 0L)\n        fib4.put(44, 44L)\n\
    \        fib4.put(45, 0L)\n        fib4.put(46, 46L)\n        fib4.put(47, 0L)\n\
    \        fib4.put(48, 48L)\n        fib4.put(49, 0L)\n        fib4.put(50, 50L)\n\
    \        fib4.put(51, 0L)\n        fib4.put(52, 52L)\n        fib4.put(53, 0L)\n\
    \        fib4.put(54, 54L)\n        fib4.put(55, 0L)\n        fib4.put(56, 56L)\n\
    \        fib4.put(57, 0L)\n        fib4.put(58, 58L)\n        fib4.put(59, 0L)\n\
    \        fib4.put(60, 60L)\n        fib4.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps0yoo61l.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmps0yoo61l.scala:12:23 ------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 4\n        fib4 += 8\n\
    \        fib4 += 16\n        fib4 += 32\n        fib4 += 64\n        fib4 += 128\n\
    \        fib4 += 256\n        fib4 += 512\n        fib4 += 1024\n        fib4\
    \ += 2048\n        fib4 += 4096\n        fib4 += 8192\n        fib4 += 16384\n\
    \        fib4 += 32768\n        fib4 += 65536\n        fib4 += 131072\n      \
    \  fib4 += 262144\n        fib4 += 524288\n        fib4 += 1048576\n        fib4\
    \ += 2097152\n        fib4 += 4194304\n        fib4 += 8388608\n        fib4 +=\
    \ 16777216\n        fib4 += 33554432\n        fib4 += 67108864\n        fib4 +=\
    \ 134217728\n        fib4 += 268435456\n        fib4 += 536870912\n        fib4\
    \ += 1073741824\n        fib4 += 2147483648\n        fib4 += 4294967296\n    \
    \    fib4 += 8589934592\n        fib4 += 17179869184\n        fib4 += 34359738368\n\
    \        fib4 += 68719476736\n        fib4 += 137438953472\n        fib4 += 274877906944\n\
    \        fib4 += 549755813888\n        fib4 += 1099511627776\n        fib4 +=\
    \ 2199023255552\n        fib4 += 4398046511104\n        fib4 += 8796093022208\n\
    \        fib4 += 17592186044416\n        fib4 += 35184372088832\n        fib4\
    \ += 70368744177664\n        fib4 += 140737488355328\n        fib4 += 281474976710656\n\
    \        fib4 += 562949953421312\n        fib4 += 1125899906842624\n        fib4\
    \ += 2251799813685248\n        fib4 += 4503599627370496\n        fib4 += 9007199254740992\n\
    \        fib4 += 18014398509481984\n        fib4 += 36028797018\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpppno49mg.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013865
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n \
    \       fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpynmwvkr1.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2, 2L)\n \
    \       fib4.put(3, 0L)\n        fib4.put(4, 4L)\n        fib4.put(5, 8L)\n  \
    \      fib4.put(6, 16L)\n        fib4.put(7, 32L)\n        fib4.put(8, 64L)\n\
    \        fib4.put(9, 128L)\n        fib4.put(10, 256L)\n        fib4.put(11, 512L)\n\
    \        fib4.put(12, 1024L)\n        fib4.put(13, 2048L)\n        fib4.put(14,\
    \ 4096L)\n        fib4.put(15, 8192L)\n        fib4.put(16, 16384L)\n        fib4.put(17,\
    \ 32768L)\n        fib4.put(18, 65536L)\n        fib4.put(19, 131072L)\n     \
    \   fib4.put(20, 262144L)\n        fib4.put(21, 524288L)\n        fib4.put(22,\
    \ 1048576L)\n        fib4.put(23, 2097152L)\n        fib4.put(24, 4194304L)\n\
    \        fib4.put(25, 8388608L)\n        fib4.put(26, 16777216L)\n        fib4.put(27,\
    \ 33554432L)\n        fib4.put(28, 67108864L)\n        fib4.put(29, 134217728L)\n\
    \        fib4.put(30, 268435456L)\n        fib4.put(31, 536870912L)\n        fib4.put(32,\
    \ 1073741824L)\n        fib4.put(33, -2147483648L)\n        fib4.put(34, -2147483648L)\n\
    \        fib4.put(35, -2147483648L)\n        fib4.put(36, -2147483648L)\n    \
    \    fib4.put(37, -2147483648L)\n        fib4.put(38, -2147483648L)\n        fib4.put(39,\
    \ -2147483648L)\n        fib4.put(40, -2147483648L)\n        fib4.put(41, -2147483648L)\n\
    \        fib4.put(42, -2147483648L)\n        fib4.put(43, -2147483648L)\n    \
    \    fib4.put(44, -2147483648L)\n        fib4.put(45, -2147483648L)\n        fib4.put(46,\
    \ -2147483648L)\n        fib4.put(47, -2147483648L)\n        fib4.put(48, -2147483648L)\n\
    \        fib4.put(49, -2147483648L)\n        fib4.put(50, -21474\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpok28fv_d.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpok28fv_d.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.ListBuffer[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgti2zlcn.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n + 1)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0pc6ziay.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2, 2)\n    \
    \    fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 0)\n        fib4.put(6,\
    \ 0)\n        fib4.put(7, 0)\n        fib4.put(8, 0)\n        fib4.put(9, 0)\n\
    \        fib4.put(10, 0)\n        fib4.put(11, 0)\n        fib4.put(12, 0)\n \
    \       fib4.put(13, 0)\n        fib4.put(14, 0)\n        fib4.put(15, 0)\n  \
    \      fib4.put(16, 0)\n        fib4.put(17, 0)\n        fib4.put(18, 0)\n   \
    \     fib4.put(19, 0)\n        fib4.put(20, 0)\n        fib4.put(21, 0)\n    \
    \    fib4.put(22, 0)\n        fib4.put(23, 0)\n        fib4.put(24, 0)\n     \
    \   fib4.put(25, 0)\n        fib4.put(26, 0)\n        fib4.put(27, 0)\n      \
    \  fib4.put(28, 0)\n        fib4.put(29, 0)\n        fib4.put(30, 0)\n       \
    \ fib4.put(31, 0)\n        fib4.put(32, 0)\n        fib4.put(33, 0)\n        fib4.put(34,\
    \ 0)\n        fib4.put(35, 0)\n        fib4.put(36, 0)\n        fib4.put(37, 0)\n\
    \        fib4.put(38, 0)\n        fib4.put(39, 0)\n        fib4.put(40, 0)\n \
    \       fib4.put(41, 0)\n        fib4.put(42, 0)\n        fib4.put(43, 0)\n  \
    \      fib4.put(44, 0)\n        fib4.put(45, 0)\n        fib4.put(46, 0)\n   \
    \     fib4.put(47, 0)\n        fib4.put(48, 0)\n        fib4.put(49, 0)\n    \
    \    fib4.put(50, 0)\n        fib4.put(51, 0)\n        fib4.put(52, 0)\n     \
    \   fib4.put(53, 0)\n        fib4.put(54, 0)\n        fib4.put(55, 0)\n      \
    \  fib4.put(56, 0)\n        fib4.put(57, 0)\n        fib4.put(58, 0)\n       \
    \ fib4.put(59, 0)\n        fib4.put(60, 0)\n        fib4.put(61, 0)\n        fib4.put(62,\
    \ 0)\n        fib4.put(63, 0)\n        fib4.put(64, 0)\n        fib4.put(65, 0)\n\
    \        fib4.put(66, 0)\n        fib4.put(67, 0)\n        fib4.put(68, 0)\n \
    \       fib4.put(69, 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1nuiidsr.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n        fib4 += 2\n\
    \        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3t61kv6b.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long, Long]()\n\
    \        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 -> 2\n    \
    \    fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n        fib4\
    \ += 6 -> 6\n        fib4 += 7 -> 0\n        fib4 += 8 -> 8\n        fib4 += 9\
    \ -> 0\n        fib4 += 10 -> 10\n        fib4 += 11 -> 0\n        fib4 += 12\
    \ -> 12\n        fib4 += 13 -> 0\n        fib4 += 14 -> 14\n        fib4 += 15\
    \ -> 0\n        fib4 += 16 -> 16\n        fib4 += 17 -> 0\n        fib4 += 18\
    \ -> 18\n        fib4 += 19 -> 0\n        fib4 += 20 -> 20\n        fib4 += 21\
    \ -> 0\n        fib4 += 22 -> 22\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 24\n        fib4 += 25 -> 0\n        fib4 += 26 -> 26\n        fib4 += 27\
    \ -> 0\n        fib4 += 28 -> 28\n        fib4 += 29 -> 0\n        fib4 += 30\
    \ -> 30\n        fib4 += 31 -> 0\n        fib4 += 32 -> 32\n        fib4 += 33\
    \ -> 0\n        fib4 += 34 -> 34\n        fib4 += 35 -> 0\n        fib4 += 36\
    \ -> 36\n        fib4 += 37 -> 0\n        fib4 += 38 -> 38\n        fib4 += 39\
    \ -> 0\n        fib4 += 40 -> 40\n        fib4 += 41 -> 0\n        fib4 += 42\
    \ -> 42\n        fib4 += 43 -> 0\n        fib4 += 44 -> 44\n        fib4 += 45\
    \ -> 0\n        fib4 += 46 -> 46\n        fib4 += 47 -> 0\n        fib4 += 48\
    \ -> 48\n        fib4 += 49 -> 0\n        fib4 += 50 -> 50\n        fib4 += 51\
    \ -> 0\n        fib4 += 52 -> 52\n        fib4 += 53 -> 0\n        fib4 += 54\
    \ -> 54\n        fib4 += 55 -> 0\n        fib4 += 56 -> 56\n        fib4 += 57\
    \ -> 0\n        fib4 += 58 -> 58\n        fib4 += 59 -> 0\n        fib4 += 60\
    \ -> 60\n        fib4 \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgh_58e8z.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybfu0q89.scala:19)\n\tat Problem.main(tmpybfu0q89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    def\
    \ fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else if (n == 1) 1\n\
    \        else if (n == 2) 2\n        else if (n == 3) 3\n        else fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpra93dlzi.scala:19)\n\tat Problem.main(tmpra93dlzi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013866
