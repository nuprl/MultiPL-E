name: HumanEval_84_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer N, return the total sum of its digits in binary.\n\
  \    // Example\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264\
  \ N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def solve(N\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((1000l)).equals((\"\
  1\")));\n    assert(solve((150l)).equals((\"110\")));\n    assert(solve((147l)).equals((\"\
  1100\")));\n    assert(solve((333l)).equals((\"1001\")));\n    assert(solve((963l)).equals((\"\
  10010\")));\n    }\n\n}\n"
completions: ["        val binary = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        var sum = 0\n        for(i <- 0 until N) {\n            val digit = math.floor(math.abs(N\
    \ % math.pow(2, i)))\n            sum += digit\n            binary.append(digit)\n\
    \        }\n        binary.reverse\n        binary.mkString(\"\")", "        var\
    \ sum = 0\n        var binary = \"\"\n        for(i <- 0 until N) {\n        \
    \    val digit = math.floor(math.pow(10, i) / math.pow(10, N - i - 1))\n     \
    \       sum += digit\n            binary += digit.toBinaryString\n        }\n\
    \        binary.reverse", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var remainder = 0\n        while(N !=0){\n     \
    \       remainder = N % 2\n            sum = sum + remainder\n            N =\
    \ N / 2\n        }\n        binary.append(sum.toString)\n        binary.reverse",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var remainder2 = 0\n        var remainder3 = 0\n        var remainder4 =\
    \ 0\n        var remainder5 = 0\n        var remainder6 = 0\n        var remainder7\
    \ = 0\n        var remainder8 = 0\n        var remainder9 = 0\n        var remainder10\
    \ = 0\n        var remainder11 = 0\n        var remainder12 = 0\n        var remainder13\
    \ = 0\n        var remainder14 = 0\n        var remainder15 = 0\n        var remainder16\
    \ = 0\n        var remainder17 = 0\n        var remainder18 = 0\n        var remainder19\
    \ = 0\n        var remainder20 = 0\n        var remainder21 = 0\n        var remainder22\
    \ = 0\n        var remainder23 = 0\n        var remainder24 = 0\n        var remainder25\
    \ = 0\n        var remainder26 = 0\n        var remainder27 = 0\n        var remainder28\
    \ = 0\n        var remainder29 = 0\n        var remainder30 = 0\n        var remainder31\
    \ = 0\n        var remainder32 = 0\n        var remainder33 = 0\n        var remainder34\
    \ = 0\n        var remainder35 = 0\n        var remainder36 = 0\n        var remainder37\
    \ = 0\n        var remainder38 = 0\n        var remainder39 = 0\n        var remainder40\
    \ = 0\n        var remainder41 = 0\n        var remainder42 = 0\n        var remainder43\
    \ = 0\n        var remainder44 = 0\n        var remainder45 = 0\n        var remainder46\
    \ = 0\n        var remainder47 = 0\n        var remainder48 = 0\n        var remainder49\
    \ = 0\n        var remainder50 = 0\n        var remainder51 = 0\n        var remainder52\
    \ = 0\n        var remainder53 = 0\n        var remainder54 = 0\n        var remainder55\
    \ = 0\n        var remainder56 = 0\n        var remainder57 = 0\n        var remainder58\
    \ = 0\n        var remainder59 = 0\n        var remainder60 = 0\n        var remainder61\
    \ = 0\n        var remainder62 = 0\n        var remainder63 = 0\n        var remainder64\
    \ = 0\n        var remainder65 = 0\n        var remainder66 = 0\n        var remainder67\
    \ = 0\n        var remainder68 = 0\n        var remainder69 = 0\n        var remainder70\
    \ = 0\n        var remainder71 = 0\n        var remainder72 = 0\n        var remainder73\
    \ = 0\n        var remainder74 = 0\n        var remainder75 = 0\n        var remainder76\
    \ = 0\n        var remainder77 = 0\n        var remainder78 = 0\n        var remainder79\
    \ = 0\n        var remainder80 = 0\n        var remainder81 = 0\n        var remainder82\
    \ = 0\n        var remainder83 = 0\n        var remainder84 = 0\n", "        val\
    \ binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0 until binary.length){\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \      }\n        binary.reverse", "        val binary = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        var sum = 0\n        var remainder = 0\n        var i = 0\n        while\
    \ (i < N) {\n            val remainder = N % 2\n            sum += remainder\n\
    \            N /= 2\n            binary.append(remainder)\n            i += 1\n\
    \        }\n        val result = sum.toBinaryString\n        binary.reverse.foreach(x\
    \ => result += x)\n        result", "        var sum = 0\n        var binary =\
    \ \"\"\n        var remainder = 0\n        var remainder2 = 0\n        var remainder3\
    \ = 0\n        var remainder4 = 0\n        var remainder5 = 0\n        var remainder6\
    \ = 0\n        var remainder7 = 0\n        var remainder8 = 0\n        var remainder9\
    \ = 0\n        var remainder10 = 0\n        var remainder11 = 0\n        var remainder12\
    \ = 0\n        var remainder13 = 0\n        var remainder14 = 0\n        var remainder15\
    \ = 0\n        var remainder16 = 0\n        var remainder17 = 0\n        var remainder18\
    \ = 0\n        var remainder19 = 0\n        var remainder20 = 0\n        var remainder21\
    \ = 0\n        var remainder22 = 0\n        var remainder23 = 0\n        var remainder24\
    \ = 0\n        var remainder25 = 0\n        var remainder26 = 0\n        var remainder27\
    \ = 0\n        var remainder28 = 0\n        var remainder29 = 0\n        var remainder30\
    \ = 0\n        var remainder31 = 0\n        var remainder32 = 0\n        var remainder33\
    \ = 0\n        var remainder34 = 0\n        var remainder35 = 0\n        var remainder36\
    \ = 0\n        var remainder37 = 0\n        var remainder38 = 0\n        var remainder39\
    \ = 0\n        var remainder40 = 0\n        var remainder41 = 0\n        var remainder42\
    \ = 0\n        var remainder43 = 0\n        var remainder44 = 0\n        var remainder45\
    \ = 0\n        var remainder46 = 0\n        var remainder47 = 0\n        var remainder48\
    \ = 0\n        var remainder49 = 0\n        var remainder50 = 0\n        var remainder51\
    \ = 0\n        var remainder52 = 0\n        var remainder53 = 0\n        var remainder54\
    \ = 0\n        var remainder55 = 0\n        var remainder56 = 0\n        var remainder57\
    \ = 0\n        var remainder58 = 0\n        var remainder59 = 0\n        var remainder60\
    \ = 0\n        var remainder61 = 0\n        var remainder62 = 0\n        var remainder63\
    \ = 0\n        var remainder64 = 0\n        var remainder65 = 0\n        var remainder66\
    \ = 0\n        var remainder67 = 0\n        var remainder68 = 0\n        var remainder69\
    \ = 0\n        var remainder70 = 0\n        var remainder71 = 0\n        var remainder72\
    \ = 0\n        var remainder73 = 0\n        var remainder74 = 0\n        var remainder75\
    \ = 0\n        var remainder76 = 0\n        var remainder77 = 0\n        var remainder78\
    \ = 0\n        var remainder79 = 0\n        var remainder80 = 0\n        var remainder81\
    \ = 0\n        var remainder82 = 0\n        var remainder83 = 0\n        var remainder84\
    \ = 0\n", "        val binary = scala.collection.mutable.StringBuilder()\n   \
    \     val digits = scala.collection.mutable.ArrayBuffer(N.toInt)\n        var\
    \ sum = 0\n        var carry = 0\n        while(digits.length > 0) {\n       \
    \     val digit = digits.head\n            digits = digits.tail\n            sum\
    \ = sum + digit + carry\n            carry = sum / 2\n            sum = sum %\
    \ 2\n            binary.append(digit)\n        }\n        if(carry != 0) {\n \
    \           binary.append(carry)\n        }\n        binary.toString()", "   \
    \     val s = N.toBinaryString\n        val l = s.length\n        val result =\
    \ new StringBuilder\n        val binary = new mutable.MutableList[String]()\n\
    \        var i = 0\n        while (i < l) {\n            val c = s(i)\n      \
    \      if (c == '1') {\n                binary.append(s(i))\n                i\
    \ += 1\n            } else {\n                val x = binary.last\n          \
    \      val y = s(i)\n                val z = s(i + 1)\n                val z =\
    \ z.toInt\n                val z = z.toBinaryString\n                val z = z.reverse\n\
    \                val z = z.reverse\n                val z = z.reverse\n      \
    \          val z = z.reverse\n                val z = z.reverse\n            \
    \    val z = z.reverse\n                val z = z.reverse\n                val\
    \ z = z.reverse\n                val z = z.reverse\n                val z = z.reverse\n\
    \                val z = z.reverse\n                val z = z.reverse\n      \
    \          val z = z.reverse\n                val z = z.reverse\n            \
    \    val z = z.reverse\n                val z = z.reverse\n                val\
    \ z = z.reverse\n                val z = z.reverse\n                val z = z.reverse\n\
    \                val z = z.reverse\n                val z = z.reverse\n      \
    \          val z = z.reverse\n                val z = z.reverse\n            \
    \    val z = z.reverse\n                val z = z.reverse\n                val\
    \ z = z.reverse\n                val z = z.reverse\n                val z = z.reverse\n\
    \                val z = z.reverse\n                val z = z.reverse\n      \
    \          val z = z.reverse\n                val z = z.reverse\n            \
    \    val z = z.reverse\n                val z = z.reverse\n                val\
    \ z = z.reverse\n                val z = z.reverse\n                val z = z.reverse\n\
    \                val z = z.reverse\n                val z = z.reverse\n      \
    \          val z = z.reverse\n                val z = z.reverse\n            \
    \    val z = z.reverse\n                val z = z.reverse\n                val\
    \ z = z.reverse\n                val z = z.reverse\n                val z = z.reverse\n\
    \                val z = z.reverse\n                val z = z.reverse\n      \
    \          val z = z.reverse\n                val z = z.reverse\n            \
    \    val z = z.reverse\n                val z = z.reverse\n                val\
    \ z = z.reverse\n                val z = z.reverse\n                val z = z.reverse\n\
    \                val z = z.reverse\n                val z = z.reverse\n      \
    \          val z = z.reverse\n                val z = z.reverse\n            \
    \    val z = z.reverse\n                val z = z.reverse\n                val\
    \ z = z.reverse\n                val z = z.reverse\n                val z = z.reverse\n\
    \                val z = z.reverse\n                val z = z.reverse\n      \
    \          val z = z.reverse\n                val z = z.reverse\n            \
    \    val z = z.reverse", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        while(N /= 10) {\n            val remainder = N % 10\n            sum\
    \ += remainder\n            binary.append(remainder)\n            N /= 10\n  \
    \      }\n        binary.reverse.foldLeft(\"\")(_ + _ + _)", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices) {\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \      }\n        binary.reverse.foldLeft(\"\")(_ + _ + _)", "        var sum\
    \ = 0\n        var binary = \"\"\n        var remainder = N\n        while(true){\n\
    \            val remainder2 = remainder % 2\n            val remainder3 = remainder2\
    \ / 2\n            val remainder4 = remainder3 / 2\n            val remainder5\
    \ = remainder4 / 2\n            val remainder6 = remainder5 / 2\n            val\
    \ remainder7 = remainder6 / 2\n            val remainder8 = remainder7 / 2\n \
    \           val remainder9 = remainder8 / 2\n            val remainder10 = remainder9\
    \ / 2\n            val remainder11 = remainder10 / 2\n            val remainder12\
    \ = remainder11 / 2\n            val remainder13 = remainder12 / 2\n         \
    \   val remainder14 = remainder13 / 2\n            val remainder15 = remainder14\
    \ / 2\n            val remainder16 = remainder15 / 2\n            val remainder17\
    \ = remainder16 / 2\n            val remainder18 = remainder17 / 2\n         \
    \   val remainder19 = remainder18 / 2\n            val remainder20 = remainder19\
    \ / 2\n            val remainder21 = remainder20 / 2\n            val remainder22\
    \ = remainder21 / 2\n            val remainder23 = remainder22 / 2\n         \
    \   val remainder24 = remainder23 / 2\n            val remainder25 = remainder24\
    \ / 2\n            val remainder26 = remainder25 / 2\n            val remainder27\
    \ = remainder26 / 2\n            val remainder28 = remainder27 / 2\n         \
    \   val remainder29 = remainder28 / 2\n            val remainder30 = remainder29\
    \ / 2\n            val remainder31 = remainder30 / 2\n            val remainder32\
    \ = remainder31 / 2\n            val remainder33 = remainder32 / 2\n         \
    \   val remainder34 = remainder33 / 2\n            val remainder35 = remainder34\
    \ / 2\n            val remainder36 = remainder35 / 2\n            val remainder37\
    \ = remainder36 / 2\n            val remainder38 = remainder37 / 2\n         \
    \   val remainder39 = remainder38 / 2\n            val remainder40 = remainder39\
    \ / 2\n            val remainder41 = remainder40 / 2\n            val remainder42\
    \ = remainder41 / 2\n            val remainder43 = remainder42 / 2\n         \
    \   val ", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (i <- 0 until digits.length)\n            sum\
    \ += digits(i).toLong * 2\n        sum.toString", "        val binary = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        var sum = 0\n        while(N >=0){\n            val remainder = N % 2\n\
    \            sum += remainder\n            N /= 2\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            val digit\
    \ = binary.charAt(i)\n            sum += digit.toInt\n        }\n        binary.reverse.foldLeft(\"\
    \")(_ + _ + _)", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ remainder = N % 2\n        val remainderDigit = remainder / 2\n        val remainderDigits\
    \ = remainderDigit.toString.toInt\n        val remainderDigits = remainderDigits\
    \ + 1\n        val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val remainderDigits = remainderDigits + 1\n        val remainderDigits\
    \ = remainderDigits + 1\n        val remainderDigits = remainderDigits + 1\n \
    \       val ", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        for(i <- 0 until N) {\n            val digit = math.pow(10,\
    \ i).toInt\n            sum += digit\n            binary.append(digit)\n     \
    \   }\n        binary.reverse.foldLeft(\"\")(_ + _ + _)", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)\n        val binary = binary.reverse\n        val binary\
    \ = binary.dropRight(1)", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        var remainder = N\n        while (remainder > 0)\
    \ {\n            val digit = remainder % 2\n            binary.append(digit)\n\
    \            sum += digit\n            remainder = remainder / 2\n        }\n\
    \        binary.reverse\n        sum.toString", "        val result = mutable.StringBuilder()\n\
    \        val remainder = N % 2\n        val remainderAsString = remainder.toString\n\
    \        val remainderAsLong = remainder.toLong\n        val remainderAsInt =\
    \ remainder.toInt\n        val remainderAsDouble = remainder.toDouble\n      \
    \  val remainderAsFloat = remainder.toFloat\n        val remainderAsBigDecimal\
    \ = remainder.toBigDecimal\n        val remainderAsBigInteger = remainder.toBigInteger\n\
    \        val remainderAsInt = remainder.toInt\n        val remainderAsLong = remainder.toLong\n\
    \        val remainderAsDouble = remainder.toDouble\n        val remainderAsFloat\
    \ = remainder.toFloat\n        val remainderAsBigDecimal = remainder.toBigDecimal\n\
    \        val remainderAsBigInteger = remainder.toBigInteger\n        val remainderAsInt\
    \ = remainder.toInt\n        val remainderAsLong = remainder.toLong\n        val\
    \ remainderAsDouble = remainder.toDouble\n        val remainderAsFloat = remainder.toFloat\n\
    \        val remainderAsBigDecimal = remainder.toBigDecimal\n        val remainderAsBigInteger\
    \ = remainder.toBigInteger\n        val remainderAsInt = remainder.toInt\n   \
    \     val remainderAsLong = remainder.toLong\n        val remainderAsDouble =\
    \ remainder.toDouble\n        val remainderAsFloat = remainder.toFloat\n     \
    \   val remainderAsBigDecimal = remainder.toBigDecimal\n        val remainderAsBigInteger\
    \ = remainder.toBigInteger\n        val remainderAsInt = remainder.toInt\n   \
    \     val remainderAsLong = remainder.toLong\n        val remainderAsDouble =\
    \ remainder.toDouble\n        val remainderAsFloat = remainder.toFloat\n     \
    \   val remainderAsBigDecimal = remainder.toBigDecimal\n        val remainderAsBigInteger\
    \ = remainder.toBigInteger\n        val remainderAsInt = remainder.toInt\n   \
    \     val remainderAsLong = remainder.toLong\n        val remainderAsDouble =\
    \ remainder.toDouble\n        val remainderAsFloat = remainder.toFloat\n     \
    \   val remainderAsBigDecimal = remainder.toBigDecimal\n        val remainderAsBigInteger\
    \ = remainder.toBigInteger\n        val remainderAsInt = remainder.toInt\n   \
    \     val remainderAsLong = remainder.toLong\n        val remainderAs", "    \
    \    val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i).toInt\n        }\n        binary.reverse.foldLeft(\"\
    \")(_ + _ + _)", "        var sum = 0\n        var binary = \"\"\n        var\
    \ remainder = 0\n        var remainder2 = N\n        var remainder3 = N\n    \
    \    var remainder4 = N\n        var remainder5 = N\n        var remainder6 =\
    \ N\n        var remainder7 = N\n        var remainder8 = N\n        var remainder9\
    \ = N\n        var remainder10 = N\n        var remainder11 = N\n        var remainder12\
    \ = N\n        var remainder13 = N\n        var remainder14 = N\n        var remainder15\
    \ = N\n        var remainder16 = N\n        var remainder17 = N\n        var remainder18\
    \ = N\n        var remainder19 = N\n        var remainder20 = N\n        var remainder21\
    \ = N\n        var remainder22 = N\n        var remainder23 = N\n        var remainder24\
    \ = N\n        var remainder25 = N\n        var remainder26 = N\n        var remainder27\
    \ = N\n        var remainder28 = N\n        var remainder29 = N\n        var remainder30\
    \ = N\n        var remainder31 = N\n        var remainder32 = N\n        var remainder33\
    \ = N\n        var remainder34 = N\n        var remainder35 = N\n        var remainder36\
    \ = N\n        var remainder37 = N\n        var remainder38 = N\n        var remainder39\
    \ = N\n        var remainder40 = N\n        var remainder41 = N\n        var remainder42\
    \ = N\n        var remainder43 = N\n        var remainder44 = N\n        var remainder45\
    \ = N\n        var remainder46 = N\n        var remainder47 = N\n        var remainder48\
    \ = N\n        var remainder49 = N\n        var remainder50 = N\n        var remainder51\
    \ = N\n        var remainder52 = N\n        var remainder53 = N\n        var remainder54\
    \ = N\n        var remainder55 = N\n        var remainder56 = N\n        var remainder57\
    \ = N\n        var remainder58 = N\n        var remainder59 = N\n        var remainder60\
    \ = N\n        var remainder61 = N\n        var remainder62 = N\n        var remainder63\
    \ = N\n        var remainder64 = N\n        var remainder65 = N\n        var remainder66\
    \ = N\n        var remainder67 = N\n        var remainder68 = N\n        var remainder69\
    \ = N\n        var remainder70 = N\n        var remainder71 = N\n        var remainder72\
    \ = N\n        var remainder73 = N\n        var remainder74 = ", "        var\
    \ sum = 0\n        var binary = \"\"\n        var remainder = 0\n        var i\
    \ = 0\n        while (i < N) {\n            remainder = N % 2\n            sum\
    \ += remainder\n            N /= 2\n            i += 1\n        }\n        binary\
    \ = sum.toBinaryString\n        binary", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt)\n        val sumsSum = sums.sum\n    \
    \    val result = sums.map(_.toBinaryString).mkString\n        val resultSum =\
    \ result.sum\n        val resultSumAsString = resultSum.toBinaryString\n     \
    \   val resultSumAsStringAsLong = resultSumAsString.toLong\n        val resultSumAsStringAsLongAsString\
    \ = resultSumAsStringAsLong.toBinaryString\n        val resultSumAsStringAsLongAsStringAsLong\
    \ = resultSumAsStringAsLongAsString.toLong\n        val resultSumAsStringAsLongAsStringAsLongAsString\
    \ = resultSumAsStringAsLongAsStringAsLong.toBinaryString\n        val resultSumAsStringAsLongAsStringAsLongAsStringAsLong\
    \ = resultSumAsStringAsLongAsStringAsLongAsString.toLong\n        val resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsString\
    \ = resultSumAsStringAsLongAsStringAsLongAsStringAsLong.toBinaryString\n     \
    \   val resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong = resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong.toBinaryString\n\
    \        val resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong\
    \ = resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong.toBinaryString\n\
    \        val resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong\
    \ = resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong.toBinaryString\n\
    \        val resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong\
    \ = resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong.toBinaryString\n\
    \        val resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLong\
    \ = resultSumAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsStringAsLongAsString",
  "        val binary = N.toBinaryString\n        val result = mutable.ListBuffer.empty[String]\n\
    \        val len = binary.length\n        val digits = binary.toCharArray\n  \
    \      var sum = 0\n        var i = 0\n        while (i < len) {\n           \
    \ val d = digits(i)\n            sum += d\n            i += 1\n        }\n   \
    \     val bin = sum.toBinaryString\n        val len = bin.length\n        val\
    \ digits = bin.toCharArray\n        var sum = 0\n        var i = 0\n        while\
    \ (i < len) {\n            val d = digits(i)\n            sum += d\n         \
    \   i += 1\n        }\n        val bin = sum.toBinaryString\n        val len =\
    \ bin.length\n        val digits = bin.toCharArray\n        var sum = 0\n    \
    \    var i = 0\n        while (i < len) {\n            val d = digits(i)\n   \
    \         sum += d\n            i += 1\n        }\n        val bin = sum.toBinaryString\n\
    \        val len = bin.length\n        val digits = bin.toCharArray\n        var\
    \ sum = 0\n        var i = 0\n        while (i < len) {\n            val d = digits(i)\n\
    \            sum += d\n            i += 1\n        }\n        val bin = sum.toBinaryString\n\
    \        val len = bin.length\n        val digits = bin.toCharArray\n        var\
    \ sum = 0\n        var i = 0\n        while (i < len) {\n            val d = digits(i)\n\
    \            sum += d\n            i += 1\n        }\n        val bin = sum.toBinaryString\n\
    \        val len = bin.length\n        val digits = bin.toCharArray\n        var\
    \ sum = 0\n        var i = 0\n        while (i < len) {\n            val d = digits(i)\n\
    \            sum += d\n            i += 1\n        }\n        val bin = sum.toBinaryString\n\
    \        val len = bin.length\n        val digits = bin.toCharArray\n        var\
    \ sum = 0\n        var i = 0\n        while (i < len) {\n            val d = digits(i)\n\
    \            sum += d\n            i += 1\n        }\n        val bin = sum.toBinaryString\n\
    \        val len = bin.length\n        val digits = bin.toCharArray\n        var\
    \ sum = 0\n        var i = 0\n        while (i < len) {\n            val d = digits(i)\n\
    \            sum += d\n            i += 1\n        }\n        val bin = sum.toBinaryString\n\
    \        val len = bin.length\n        val digits = bin.toCharArray\n        var\
    \ sum = 0\n        var i = 0\n        while (i < len) {\n            val d = digits(i)\n\
    \            sum += d\n            i += 1\n        }\n        val bin = sum.toBinaryString\n\
    \        val len = bin.length\n        val digits = bin.toCharArray\n        var\
    \ sum = 0\n        var i = 0", "        val binary = N.toBinaryString\n      \
    \  val sum = 0\n        for(i <- 0 to binary.length-1){\n            sum += binary(i).toInt\n\
    \        }\n        sum.toString", "        val binary = N.toBinaryString\n  \
    \      val sum = binary.toInt\n        val binary = binary.reverse\n        val\
    \ result = binary.foldLeft(\"\")(_ + _)\n        result + sum.toString", "   \
    \     val sum = 0\n        val binary = new mutable.MutableList[String]()\n  \
    \      while(N /= 10) {\n            val remainder = N % 10\n            sum +=\
    \ remainder\n            binary.append(remainder)\n            N = (N - remainder)\
    \ / 10\n        }\n        binary.reverse.foldLeft(\"\")(_ + _ + _)", "      \
    \  val result = new mutable.ListBuffer[String]()\n        var sum = 0\n      \
    \  var remainder = 0\n        for(i <- 0 until N) {\n            sum += i\n  \
    \          remainder = sum % 2\n            result += (if (remainder == 0) \"\
    0\" else \"1\")\n            sum = (sum - remainder) / 2\n        }\n        result.reverse.mkString",
  "        val binary = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ sum = 0\n        var remainder = N\n        while (remainder > 0) {\n      \
    \      val remainderDigit = remainder % 10\n            sum += remainderDigit\n\
    \            binary.append(remainderDigit.toString)\n            remainder = remainder\
    \ / 10\n        }\n        binary.reverse.mkString(\"\")", "        var sum =\
    \ 0\n        var binary = \"\"\n        while(N /= 10) {\n            sum += N\
    \ % 10\n            N = (N - N / 10).toInt\n        }\n        while(sum > 0)\
    \ {\n            binary += sum % 2\n            sum = (sum - sum / 2).toInt\n\
    \        }\n        return binary", "        val binary = N.toBinaryString\n \
    \       val sum = 0\n        val bin = binary.toList\n        for(i <- 0 until\
    \ bin.length)\n            sum += bin(i).toInt\n        binary.toString + sum.toString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i).toInt\n        }\n        sum.toString",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var i = 0\n        while (i < N) {\n            sum = sum + i.toBinaryString\n\
    \            i = i + 1\n        }\n        binary = sum.toBinaryString\n     \
    \   remainder = N - sum.toBinaryString.length\n        while (binary.length <\
    \ remainder) {\n            binary = \"0\" + binary\n        }\n        binary",
  "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n  \
    \      val sums = digits.map(_.toInt)\n        val sum = sums.sum\n        val\
    \ binary = digits.map(_.toBinaryString).mkString(\"\")\n        val result = binary.padRight(sum,\
    \ \"0\")\n        result", "        var sum = 0\n        var binary = \"\"\n \
    \       var remainder = 0\n        var i = 0\n        while (i < N) {\n      \
    \      sum = sum + i.toBinaryString().charAt(0)\n            i = i + 1\n     \
    \   }\n        while (sum > 0) {\n            binary = binary + sum.toBinaryString().charAt(0)\n\
    \            sum = sum - i.toBinaryString().charAt(0)\n            i = i + 1\n\
    \        }\n        return binary", "        val digits = N.toString.reverse.grouped(2).map(_.toString).reverse\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) {\n           \
    \ sum += digits(i).toLong\n        }\n        sum.toString", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val binary = digits.foldLeft(\"\
    \")(_ + _)\n        binary.reverse", "        var sum = 0\n        var binary\
    \ = \"\"\n        for(i <- 0 until N) {\n            val digit = N % 2\n     \
    \       sum += digit\n            binary += digit.toString\n            N /= 2\n\
    \        }\n        binary = binary.reverse\n        binary.reverse", "      \
    \  val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i)\n        }\n        sum.toString", " \
    \       val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n \
    \       val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => if (x == 1) \"1\" else \"0\").reverse.mkString\n        val\
    \ binarySum = binaryDigits + binaryDigits.reverse\n        val result = binarySum\
    \ + binaryDigits.reverse\n        result + binaryDigits.reverse", "        val\
    \ binary = scala.collection.mutable.ListBuffer[String]()\n        var sum = 0\n\
    \        while(N /= 10) {\n            sum += N % 10\n            N /= 10\n  \
    \      }\n        while(sum > 0) {\n            val remainder = sum % 2\n    \
    \        sum += remainder\n            binary.append(remainder)\n        }\n \
    \       binary.reverse.mkString(\"\")", "        var sum = 0\n        var binary\
    \ = \"\"\n        var remainder = 0\n        var i = 0\n        while (i < N)\
    \ {\n            remainder = N % 2\n            sum += remainder\n           \
    \ N = N / 2\n            i += 1\n        }\n        binary = sum.toBinaryString\n\
    \        if (binary.length < 8) {\n            while (binary.length < 8) {\n \
    \               binary += \"0\"\n            }\n        }\n        return binary",
  "        val binary = scala.collection.mutable.ListBuffer[String]()\n        val\
    \ remainder = N % 2\n        val digits = N / 2\n        val currentBinary = scala.collection.mutable.ListBuffer[String]()\n\
    \        while(digits > 0) {\n            val remainderDigit = digits % 10\n \
    \           currentBinary.append(remainderDigit)\n            digits /= 10\n \
    \       }\n        val currentBinaryString = currentBinary.mkString(\"\")\n  \
    \      binary.append(currentBinaryString)\n        binary.append(remainder)\n\
    \        binary.mkString(\"\")", "        val binary = N.toBinaryString\n    \
    \    val sum = 0\n        for(i <- 0 until binary.length){\n            val temp\
    \ = binary.charAt(i).toInt\n            sum += temp * Math.pow(2,i)\n        }\n\
    \        binary.reverse", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        for(i <- 0 to binary.length-1){\n            val digit = binary.charAt(i).toInt\n\
    \            sum += digit\n        }\n        binary.reverse", "        val sum\
    \ = 0\n        val binary = new mutable.MutableList[String]()\n        while(N\
    \ >=0){\n            val remainder = N % 2\n            sum += remainder\n   \
    \         N /= 2\n            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val binary = binary.substring(binary.length\
    \ - 1)\n        val binary = binary.substring(0, binary.length - 1)\n        val\
    \ binary = binary.toCharArray\n        val binary = binary.map(x => if (x == '1')\
    \ '0' else '1')\n        val binary = binary.toList\n        val binary = binary.foldLeft(0)((acc,\
    \ x) => acc + x)\n        binary.toString", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ sum = 0\n        while(N /= 10) {\n            digits += N % 10\n          \
    \  sum += N % 10\n            N /= 10\n        }\n        while(sum > 0) {\n \
    \           binary += digits.takeWhile(_ < 2).mkString(\"\") + digits.dropWhile(_\
    \ < 2).mkString(\"\")\n            sum -= digits.takeWhile(_ < 2).sum\n      \
    \      digits -= digits.takeWhile(_ < 2).dropWhile(_ < 2).sum\n        }\n   \
    \     binary.reverse", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n \
    \       val binary = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        while(sum > 0) {\n            val remainder\
    \ = sum % 2\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        var sum = 0\n   \
    \     var binary = \"\"\n        var remainder = 0\n        var remainder1 = 0\n\
    \        var remainder2 = 0\n        var remainder3 = 0\n        var remainder4\
    \ = 0\n        var remainder5 = 0\n        var remainder6 = 0\n        var remainder7\
    \ = 0\n        var remainder8 = 0\n        var remainder9 = 0\n        var remainder10\
    \ = 0\n        var remainder11 = 0\n        var remainder12 = 0\n        var remainder13\
    \ = 0\n        var remainder14 = 0\n        var remainder15 = 0\n        var remainder16\
    \ = 0\n        var remainder17 = 0\n        var remainder18 = 0\n        var remainder19\
    \ = 0\n        var remainder20 = 0\n        var remainder21 = 0\n        var remainder22\
    \ = 0\n        var remainder23 = 0\n        var remainder24 = 0\n        var remainder25\
    \ = 0\n        var remainder26 = 0\n        var remainder27 = 0\n        var remainder28\
    \ = 0\n        var remainder29 = 0\n        var remainder30 = 0\n        var remainder31\
    \ = 0\n        var remainder32 = 0\n        var remainder33 = 0\n        var remainder34\
    \ = 0\n        var remainder35 = 0\n        var remainder36 = 0\n        var remainder37\
    \ = 0\n        var remainder38 = 0\n        var remainder39 = 0\n        var remainder40\
    \ = 0\n        var remainder41 = 0\n        var remainder42 = 0\n        var remainder43\
    \ = 0\n        var remainder44 = 0\n        var remainder45 = 0\n        var remainder46\
    \ = 0\n        var remainder47 = 0\n        var remainder48 = 0\n        var remainder49\
    \ = 0\n        var remainder50 = 0\n        var remainder51 = 0\n        var remainder52\
    \ = 0\n        var remainder53 = 0\n        var remainder54 = 0\n        var remainder55\
    \ = 0\n        var remainder56 = 0\n        var remainder57 = 0\n        var remainder58\
    \ = 0\n        var remainder59 = 0\n        var remainder60 = 0\n        var remainder61\
    \ = 0\n        var remainder62 = 0\n        var remainder63 = 0\n        var remainder64\
    \ = 0\n        var remainder65 = 0\n        var remainder66 = 0\n        var remainder67\
    \ = 0\n        var remainder68 = 0\n        var remainder69 = 0\n        var remainder70\
    \ = 0\n        var remainder71 = 0\n        var remainder72 = 0\n        var remainder73\
    \ = 0\n        var remainder74 = 0\n        var remainder75 = 0\n        var remainder76\
    \ = 0\n        var remainder77 = 0\n        var remainder78 = 0\n        var remainder79\
    \ = 0\n        var remainder80 = 0\n        var remainder81 = 0\n        var remainder82\
    \ = 0\n        var remainder83 = 0\n", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val binary = binary.reverse\n        for(i <- 0\
    \ until binary.length) {\n            val temp = binary(i)\n            sum +=\
    \ temp.charAt(0).toInt * Math.pow(2,binary.length - i - 1)\n        }\n      \
    \  binary.reverse", "        val sum = 0\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        while(N >=0){\n            val digit = N % 2\n            sum += digit\n\
    \            binary.append(digit.toString)\n            N = (N - digit) / 2\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sumOfDigits = digits.foldLeft(0)((sum, digit) => sum + digit.toInt)\n\
    \        val binaryDigits = digits.map(digit => if (digit == 1) \"1\" else \"\
    0\").reverse\n        val binarySum = binaryDigits.foldLeft(0)((sum, digit) =>\
    \ sum + digit.toInt)\n        val binarySumString = binarySum.toString.reverse\n\
    \        val binarySumStringWithZeros = binarySumStringWithZeros.padTo(binarySumString.length,\
    \ \"0\")\n        val binarySumStringWithOnes = binarySumStringWithZeros.padTo(binarySumString.length,\
    \ \"1\")\n        val binarySumStringWithOnesAndZeros = binarySumStringWithOnes\
    \ + binarySumStringWithZeros\n        val binarySumStringWithOnesAndOnes = binarySumStringWithOnesAndZeros\
    \ + binarySumStringWithOnes\n        val binarySumStringWithOnesAndZerosAndOnes\
    \ = binarySumStringWithOnesAndOnes + binarySumStringWithOnesAndZeros\n       \
    \ val binarySumStringWithOnesAndZerosAndOnesAndZeros = binarySumStringWithOnesAndZerosAndOnes\
    \ + binarySumStringWithOnesAndOnesAndZeros\n        val binarySumStringWithOnesAndZerosAndOnesAndOnesAndZeros\
    \ = binarySumStringWithOnesAndZerosAndOnesAndOnes + binarySumStringWithOnesAndZerosAndOnesAndOnes\n\
    \        val binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnes = binarySumStringWithOnesAndZerosAndOnesAndOnesAndZeros\
    \ + binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnes\n        val binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnesAndZeros\
    \ = binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnesAndZeros + binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnesAndOnes\n\
    \        val binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndZeros + binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\n\
    \        val binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ = binarySumStringWithOnesAndZerosAndOnesAndOnesAndOnesAndOnesAndOnesAndZeros\
    \ + binarySumStringWithOnesAndZerosAndOnesAndOne", "        val sum = 0\n    \
    \    val binary = new mutable.ListBuffer[String]\n        while(N >0) {\n    \
    \        val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary += remainder.toString\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = scala.collection.mutable.ListBuffer[String]()\n  \
    \      val digits = scala.collection.mutable.ListBuffer[Int]()\n        val remainder\
    \ = N % 2\n        val remainderDigit = remainder % 10\n        val remainderDigits\
    \ = remainderDigit :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = ", "        var sum = 0\n        var binary = \"\"\n        var remainder\
    \ = 0\n        var i = 0\n        while (i < N) {\n            sum = sum + N %\
    \ 10\n            N = N / 10\n            binary = binary + Integer.toBinaryString(N\
    \ % 2)\n            N = N / 2\n            i = i + 1\n        }\n        remainder\
    \ = sum % 10\n        binary = binary + Integer.toBinaryString(remainder)\n  \
    \      binary", "        val binary = N.toBinaryString\n        val sum = 0\n\
    \        val bin = binary.toCharArray\n        for(i <- 0 until bin.length){\n\
    \            sum += bin(i).toInt\n        }\n        val result = sum.toBinaryString\n\
    \        return result", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        for(i <- 0 until digits.size) {\n            val\
    \ d = digits(i)\n            val s = d.toString.reverse.grouped(2).map(_.toInt)\n\
    \            sum += s.sum\n        }\n        sum.toString", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val sums = digits.foldLeft(0)((sum,\
    \ digit) => sum + digit)\n        val result = sums.toBinaryString\n        return\
    \ result", "        val binary = N.toBinaryString\n        val sum = 0\n     \
    \   for(i <- 0 to binary.length-1){\n            val digit = binary.charAt(i)\n\
    \            sum += digit.toInt\n        }\n        val result = sum.toBinaryString\n\
    \        return result", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ sum = 0L\n        while(N /= 10) {\n            digits += N % 10\n         \
    \   sum += N % 10\n            N = (N / 10).toLong\n        }\n        while(sum\
    \ > 0) {\n            binary.append(digits(sum % 10).asInstanceOf[Char])\n   \
    \         sum += digits(sum % 10).asInstanceOf[Long]\n        }\n        binary.reverse",
  "        val sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var remainder2 = 0\n        var remainder3 = 0\n        var remainder4 =\
    \ 0\n        var remainder5 = 0\n        var remainder6 = 0\n        var remainder7\
    \ = 0\n        var remainder8 = 0\n        var remainder9 = 0\n        var remainder10\
    \ = 0\n        var remainder11 = 0\n        var remainder12 = 0\n        var remainder13\
    \ = 0\n        var remainder14 = 0\n        var remainder15 = 0\n        var remainder16\
    \ = 0\n        var remainder17 = 0\n        var remainder18 = 0\n        var remainder19\
    \ = 0\n        var remainder20 = 0\n        var remainder21 = 0\n        var remainder22\
    \ = 0\n        var remainder23 = 0\n        var remainder24 = 0\n        var remainder25\
    \ = 0\n        var remainder26 = 0\n        var remainder27 = 0\n        var remainder28\
    \ = 0\n        var remainder29 = 0\n        var remainder30 = 0\n        var remainder31\
    \ = 0\n        var remainder32 = 0\n        var remainder33 = 0\n        var remainder34\
    \ = 0\n        var remainder35 = 0\n        var remainder36 = 0\n        var remainder37\
    \ = 0\n        var remainder38 = 0\n        var remainder39 = 0\n        var remainder40\
    \ = 0\n        var remainder41 = 0\n        var remainder42 = 0\n        var remainder43\
    \ = 0\n        var remainder44 = 0\n        var remainder45 = 0\n        var remainder46\
    \ = 0\n        var remainder47 = 0\n        var remainder48 = 0\n        var remainder49\
    \ = 0\n        var remainder50 = 0\n        var remainder51 = 0\n        var remainder52\
    \ = 0\n        var remainder53 = 0\n        var remainder54 = 0\n        var remainder55\
    \ = 0\n        var remainder56 = 0\n        var remainder57 = 0\n        var remainder58\
    \ = 0\n        var remainder59 = 0\n        var remainder60 = 0\n        var remainder61\
    \ = 0\n        var remainder62 = 0\n        var remainder63 = 0\n        var remainder64\
    \ = 0\n        var remainder65 = 0\n        var remainder66 = 0\n        var remainder67\
    \ = 0\n        var remainder68 = 0\n        var remainder69 = 0\n        var remainder70\
    \ = 0\n        var remainder71 = 0\n        var remainder72 = 0\n        var remainder73\
    \ = 0\n        var remainder74 = 0\n        var remainder75 = 0\n        var remainder76\
    \ = 0\n        var remainder77 = 0\n        var remainder78 = 0\n        var remainder79\
    \ = 0\n        var remainder80 = 0\n        var remainder81 = 0\n        var remainder82\
    \ = 0\n        var remainder83 = 0\n        var remainder84 = 0", "        val\
    \ binary = N.toBinaryString\n        val bin = binary.toList\n        val sum\
    \ = 0\n        for(i <- 0 until bin.length){\n            sum += bin(i).toInt\n\
    \        }\n        val result = sum.toBinaryString\n        return result", " \
    \       var sum = 0\n        var binary = \"\"\n        var remainder = 0\n  \
    \      var i = 0\n        while (i < N) {\n            val digit = N % 10\n  \
    \          sum += digit\n            binary = digit + binary\n            N /=\
    \ 10\n            i += 1\n        }\n        while (sum > 0) {\n            val\
    \ digit = sum % 10\n            sum += digit\n            binary = digit + binary\n\
    \            sum /= 10\n        }\n        remainder = N\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.reverse\n\
    \        binary = binary.reverse\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        binary = binary.reverse\n        binary = binary.",
  "        val result = new mutable.ListBuffer[String]()\n        var sum = 0\n  \
    \      var remainder = 0\n        var index = 0\n        while(index<N) {\n  \
    \          sum = sum + N % 10\n            remainder = N / 10\n            N =\
    \ (N - remainder) / 10\n            index += 1\n        }\n        while(sum>0)\
    \ {\n            val temp = sum % 2\n            sum = sum / 2\n            if(temp\
    \ == 1) {\n                result += \"1\"\n            } else {\n           \
    \     result += \"0\"\n            }\n        }\n        return result.toString()",
  "        val binary = scala.collection.mutable.StringBuilder()\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer(N.toInt)\n        val sum = 0\n     \
    \   while(digits.length > 0) {\n            val digit = digits.head\n        \
    \    digits -= digit\n            sum += digit\n            binary.append(digit)\n\
    \        }\n        binary.reverse\n        binary.toString", "        var sum\
    \ = 0\n        var binary = \"\"\n        var remainder = 0\n        var i = 0\n\
    \        while (i < N) {\n            sum = sum + N % 10\n            N = N /\
    \ 10\n            i += 1\n        }\n        while (sum > 0) {\n            remainder\
    \ = sum % 2\n            binary = remainder + binary\n            sum = sum /\
    \ 2\n        }\n        binary", "        val binary = new mutable.ArrayBuffer[String]()\n\
    \        var sum = 0\n        var i = N\n        while(i > 0) {\n            val\
    \ remainder = i % 2\n            binary.append(remainder)\n            sum +=\
    \ remainder\n            i /= 2\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = scala.collection.mutable.StringBuilder()\n       \
    \ val digits = scala.collection.mutable.ArrayBuffer(N.toInt)\n        val sum\
    \ = 0\n        while(digits.hasNext) {\n            val d = digits.next\n    \
    \        sum += d * 2\n        }\n        binary.append(sum.toBinaryString).reverse",
  "        val result = mutable.StringBuilder()\n        val digits = N.toString.reverse.grouped(2).map(_.mkString).toList\n\
    \        val sum = 0\n        for (i <- 0 until digits.size) {\n            sum\
    \ += digits(i).toLong\n        }\n        val binary = sum.toBinaryString\n  \
    \      result ++= binary.reverse\n        result.toString", "        val binary\
    \ = new mutable.ListBuffer[String]\n        val remainder = N % 2\n        val\
    \ quotient = N / 2\n        val remainderString = remainder.toString\n       \
    \ val quotientString = quotient.toString\n        val quotientLength = quotientString.length\n\
    \        val remainderLength = remainderString.length\n        val quotientStringLength\
    \ = quotientString.length\n        val remainderStringLength = remainderString.length\n\
    \        val quotientStringLength = quotientString.length\n        val remainderStringLength\
    \ = remainderString.length\n        val quotientStringLength = quotientString.length\n\
    \        val remainderStringLength = remainderString.length\n        val quotientStringLength\
    \ = quotientString.length\n        val remainderStringLength = remainderString.length\n\
    \        val quotientStringLength = quotientString.length\n        val remainderStringLength\
    \ = remainderString.length\n        val quotientStringLength = quotientString.length\n\
    \        val remainderStringLength = remainderString.length\n        val quotientStringLength\
    \ = quotientString.length\n        val remainderStringLength = remainderString.length\n\
    \        val quotientStringLength = quotientString.length\n        val remainderStringLength\
    \ = remainderString.length\n        val quotientStringLength = quotientString.length\n\
    \        val remainderStringLength = remainderString.length\n        val quotientStringLength\
    \ = quotientString.length\n        val remainderStringLength = remainderString.length\n\
    \        val quotientStringLength = quotientString.length\n        val remainderStringLength\
    \ = remainderString.length\n        val quotientStringLength = quotientString.length\n\
    \        val remainderStringLength = remainderString.length\n        val quotientStringLength\
    \ = quotientString.length\n        val remainderStringLength = remainderString.length\n\
    \        val quotientStringLength = quotientString.length\n        val remainderStringLength\
    \ = remainderString.length\n        val quotientStringLength = quotientString.length\n\
    \        val remainderStringLength = remainderString.length\n        val quotientStringLength\
    \ = quotientString.length\n        val remainderStringLength = remainderString.length\n\
    \        val quotientStringLength = quotientString.length\n        val remainderStringLength\
    \ = remainderString.length\n        val quotientStringLength = quotientString.length\n\
    \        val remainderStringLength = remainderString.length\n        val quotientStringLength\
    \ = quotientString.length\n        val remainderStringLength = remainderString.length\n\
    \        val quotientStringLength = quotientString.length\n        val remainderStringLength\
    \ = remainderString.length\n        val quotient", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        val digits = scala.collection.mutable.ArrayBuffer(N.toInt)\n        val\
    \ sum = 0\n        while (digits.nonEmpty) {\n            val digit = digits.head\n\
    \            digits.remove(digit)\n            sum += digit\n            binary.append(digit)\n\
    \        }\n        binary.reverse", "        var sum = 0\n        var binary\
    \ = \"\"\n        var remainder = N\n        while (remainder > 0) {\n       \
    \     val remainderDigit = remainder % 10\n            binary = remainderDigit\
    \ + binary\n            sum += remainderDigit\n            remainder = remainder\
    \ / 10\n        }\n        binary = binary.reverse\n        sum.toString", " \
    \       val result = new mutable.StringBuilder\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val digitsInBinary\
    \ = digits.map(x => Integer.toBinaryString(x))\n        val digitsInBinaryString\
    \ = digitsInBinary.mkString(\"\")\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digitsInBinaryString.length\n      \
    \  val digitsInBinaryStringLength = digitsInBinaryString.length\n        val digitsInBinaryStringLength\
    \ = digitsInBinaryString.length\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digitsInBinaryString.length\n      \
    \  val digitsInBinaryStringLength = digitsInBinaryString.length\n        val digitsInBinaryStringLength\
    \ = digitsInBinaryString.length\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digitsInBinaryString.length\n      \
    \  val digitsInBinaryStringLength = digitsInBinaryString.length\n        val digitsInBinaryStringLength\
    \ = digitsInBinaryString.length\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digitsInBinaryString.length\n      \
    \  val digitsInBinaryStringLength = digitsInBinaryString.length\n        val digitsInBinaryStringLength\
    \ = digitsInBinaryString.length\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digitsInBinaryString.length\n      \
    \  val digitsInBinaryStringLength = digitsInBinaryString.length\n        val digitsInBinaryStringLength\
    \ = digitsInBinaryString.length\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digitsInBinaryString.length\n      \
    \  val digitsInBinaryStringLength = digitsInBinaryString.length\n        val digitsInBinaryStringLength\
    \ = digitsInBinaryString.length\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digitsInBinaryString.length\n      \
    \  val digitsInBinaryStringLength = digitsInBinaryString.length\n        val digitsInBinaryStringLength\
    \ = digitsInBinaryString.length\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digitsInBinaryString.length\n      \
    \  val digitsInBinaryStringLength = digitsInBinaryString.length\n        val digitsInBinaryStringLength\
    \ = digitsInBinaryString.length\n        val digitsInBinaryStringLength = digitsInBinaryString.length\n\
    \        val digitsInBinaryStringLength = digit", "        val binary = new mutable.ArrayBuffer[String]()\n\
    \        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) {\n           \
    \ val digit = digits(i)\n            val bin = digit.charAt(0).toString + digit.charAt(1).toString\n\
    \            sum += Integer.parseInt(bin, 2)\n            binary.append(bin)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val bin = binary.toList\n        for(i <- 0 until\
    \ bin.length){\n            sum += bin(i).toInt\n        }\n        binary.toString.reverse.foldLeft(\"\
    \"){(acc, x) =>\n            acc + (if (x == '1') \"1\" else \"0\") + x\n    \
    \    }", "        val binary = N.toBinaryString\n        val binary = binary.dropRight(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.reverse\n        val binary = binary.drop(binary.length\
    \ - 1)\n        val binary = binary.", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        while(N >0) {\n            val remainder = N % 2\n\
    \            sum += remainder\n            N /= 2\n        }\n        val bin\
    \ = scala.collection.mutable.StringBuilder()\n        while(sum > 0) {\n     \
    \       val remainder = sum % 10\n            bin.append(remainder)\n        \
    \    sum /= 10\n        }\n        binary.append(bin)\n        binary.toString",
  "        val binary = scala.collection.mutable.StringBuilder()\n        var sum\
    \ = 0\n        var remainder = 0\n        for(i <- 0 until N) {\n            sum\
    \ += i\n            remainder = sum % 2\n            binary.append(remainder)\n\
    \            sum = sum / 2\n        }\n        binary.toString", "        val\
    \ result = new mutable.MutableList[String]()\n        var sum = 0\n        var\
    \ remainder = 0\n        var i = 0\n        while(i < N) {\n            sum =\
    \ sum + N % 10\n            remainder = N / 10\n            N = (N - remainder)\
    \ / 10\n            i = i + 1\n        }\n        val binary = sum.toBinaryString\n\
    \        val reversed = binary.reverse\n        val reversedString = reversed.toUpperCase\n\
    \        val reversedStringArray = reversedString.toCharArray\n        var j =\
    \ 0\n        while(j < reversedStringArray.length) {\n            val currentChar\
    \ = reversedStringArray(j)\n            if(currentChar == '1') {\n           \
    \     result.add(\"1\")\n            } else {\n                result.add(\"0\"\
    )\n            }\n            j = j + 1\n        }\n        result.toString",
  "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum\
    \ = 0\n        digits.foreach(sum ++= _)\n        val binary = digits(0).toString\
    \ + digits(1).toString + digits(2).toString + digits(3).toString + digits(4).toString\
    \ + digits(5).toString + digits(6).toString + digits(7).toString + digits(8).toString\
    \ + digits(9).toString + digits(10).toString + digits(11).toString + digits(12).toString\
    \ + digits(13).toString + digits(14).toString + digits(15).toString + digits(16).toString\
    \ + digits(17).toString + digits(18).toString + digits(19).toString + digits(20).toString\
    \ + digits(21).toString + digits(22).toString + digits(23).toString + digits(24).toString\
    \ + digits(25).toString + digits(26).toString + digits(27).toString + digits(28).toString\
    \ + digits(29).toString + digits(30).toString + digits(31).toString + digits(32).toString\
    \ + digits(33).toString + digits(34).toString + digits(35).toString + digits(36).toString\
    \ + digits(37).toString + digits(38).toString + digits(39).toString + digits(40).toString\
    \ + digits(41).toString + digits(42).toString + digits(43).toString + digits(44).toString\
    \ + digits(45).toString + digits(46).toString + digits(47).toString + digits(48).toString\
    \ + digits(49).toString + digits(50).toString + digits(51).toString + digits(52).toString\
    \ + digits(53).toString + digits(54).toString + digits(55).toString + digits(56).toString\
    \ + digits(57).toString + digits(58).toString + digits(59).toString + digits(60).toString\
    \ + digits(61).toString + digits(62).toString + digits(63).toString + digits(64).toString\
    \ + digits(65).toString + digits(66).toString + digits(67).toString + digits(68).toString\
    \ + digits(69).toString + digits(70).toString + digits(71).toString + digits(72).toString\
    \ + digits(73).toString + digits(74).toString + digits(75).toString + digits(76).toString\
    \ + digits(77).toString + digits(78).toString + ", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < N) {\n           \
    \ val digit = math.pow(2, i)\n            sum += digit\n            binary.append(digit.toString)\n\
    \            i += 1\n        }\n        val result = sum.toString\n        binary.reverse.mkString(\"\
    \") + result", "        val binary = N.toBinaryString\n        val sum = 0\n \
    \       for(i <- 0 to binary.length - 1) {\n            val digit = binary.charAt(i)\n\
    \            sum += digit.toInt\n        }\n        binary.reverse", "       \
    \ val s = mutable.StringBuilder()\n        var sum = 0\n        while(N /= 10)\
    \ {\n            sum += N % 10\n            N /= 10\n        }\n        s += sum.toString\n\
    \        while(s.size > 1) {\n            s += \"0\"\n        }\n        s", " \
    \       val binary = scala.collection.mutable.StringBuilder()\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer(N.toInt)\n        val sum = 0\n     \
    \   while(digits.length > 0) {\n            val digit = digits.head\n        \
    \    digits -= digit\n            sum += digit\n            binary.append(digit)\n\
    \        }\n        binary.reverse.toString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sum = 0\n        for(i <- 0 until digits.length)\n            sum\
    \ += digits(i).toLong * 2\n        sum.toString", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        sum.toString", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ remainder = N.toInt\n        val remainderDigits = remainder % 2\n        val\
    \ digit = remainder / 2\n        val digitString = digit.toString\n        val\
    \ digitStrings = digitString.split(\"0\")\n        digitStrings.foreach(x => digits\
    \ += x.toInt)\n        digits.foreach(x => binary += x.toString)\n        binary\
    \ += digitStrings.last\n        binary.toList.toString", "        var sum = 0\n\
    \        var binary = \"\"\n        var remainder = 0\n        var remainder2\
    \ = 0\n        var remainder3 = 0\n        var remainder4 = 0\n        var remainder5\
    \ = 0\n        var remainder6 = 0\n        var remainder7 = 0\n        var remainder8\
    \ = 0\n        var remainder9 = 0\n        var remainder10 = 0\n        var remainder11\
    \ = 0\n        var remainder12 = 0\n        var remainder13 = 0\n        var remainder14\
    \ = 0\n        var remainder15 = 0\n        var remainder16 = 0\n        var remainder17\
    \ = 0\n        var remainder18 = 0\n        var remainder19 = 0\n        var remainder20\
    \ = 0\n        var remainder21 = 0\n        var remainder22 = 0\n        var remainder23\
    \ = 0\n        var remainder24 = 0\n        var remainder25 = 0\n        var remainder26\
    \ = 0\n        var remainder27 = 0\n        var remainder28 = 0\n        var remainder29\
    \ = 0\n        var remainder30 = 0\n        var remainder31 = 0\n        var remainder32\
    \ = 0\n        var remainder33 = 0\n        var remainder34 = 0\n        var remainder35\
    \ = 0\n        var remainder36 = 0\n        var remainder37 = 0\n        var remainder38\
    \ = 0\n        var remainder39 = 0\n        var remainder40 = 0\n        var remainder41\
    \ = 0\n        var remainder42 = 0\n        var remainder43 = 0\n        var remainder44\
    \ = 0\n        var remainder45 = 0\n        var remainder46 = 0\n        var remainder47\
    \ = 0\n        var remainder48 = 0\n        var remainder49 = 0\n        var remainder50\
    \ = 0\n        var remainder51 = 0\n        var remainder52 = 0\n        var remainder53\
    \ = 0\n        var remainder54 = 0\n        var remainder55 = 0\n        var remainder56\
    \ = 0\n        var remainder57 = 0\n        var remainder58 = 0\n        var remainder59\
    \ = 0\n        var remainder60 = 0\n        var remainder61 = 0\n        var remainder62\
    \ = 0\n        var remainder63 = 0\n        var remainder64 = 0\n        var remainder65\
    \ = 0\n        var remainder66 = 0\n        var remainder67 = 0\n        var remainder68\
    \ = 0\n        var remainder69 = 0\n        var remainder70 = 0\n        var remainder71\
    \ = 0\n        var remainder72 = 0\n        var remainder73 = 0\n        var remainder74\
    \ = 0\n        var remainder75 = 0\n        var remainder76 = 0\n        var remainder77\
    \ = 0\n        var remainder78 = 0\n        var remainder79 = 0\n        var remainder80\
    \ = 0\n        var remainder81 = 0\n        var remainder82 = 0\n        var remainder83\
    \ = 0\n        var remainder84 = 0\n", "        var sum = 0\n        var binary\
    \ = \"\"\n        for(i <- 0 until N) {\n            val remainder = N % 2\n \
    \           val digit = N / 2\n            sum += digit\n            binary =\
    \ remainder + binary\n            N = digit\n        }\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.dropRight(1)\n        binary = binary.reverse\n     \
    \   binary = binary.dropRight(1)\n        binary = binary.reverse\n        binary\
    \ = binary.dropRight(1)\n        binary = binary.reverse\n        binary = binary.dropRight(1)\n\
    \        binary = binary.reverse\n        binary = binary.dropRight(1)\n     \
    \   binary = binary.reverse\n        binary = binary.dropRight(1)\n        binary\
    \ = binary.reverse\n        binary = binary.dropRight(1)\n        binary = binary.reverse\n\
    \        binary = binary.", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        var remainder = N\n        while(true){\n            val remainderToBinary\
    \ = remainder % 2\n            binary.append(remainderToBinary)\n            remainder\
    \ = remainder / 2\n            if(remainder == 0){\n                sum += binary.mkString\n\
    \                binary.clear()\n                break\n            }\n      \
    \  }\n        sum.toString", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        val binNum = binary.toList\n        binNum.foreach(x => {\n\
    \            val y = x.toInt\n            sum += y\n        })\n        val binStr\
    \ = sum.toBinaryString\n        binStr", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        var remainder = 0\n        while(N !=0){\n     \
    \       remainder = N % 2\n            sum = sum + remainder\n            N =\
    \ N / 2\n        }\n        binary.append(sum)\n        return binary.toString",
  "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n  \
    \      for(i <- 0 until N) {\n            val remainder = N % 2\n            val\
    \ digit = N / 2\n            sum += digit\n            binary.append(remainder)\n\
    \            N = digit\n        }\n        binary.reverse.mkString(\"\")", " \
    \       val binary = new mutable.ListBuffer[String]()\n        val remainder =\
    \ N % 2\n        val remainder2 = N / 2\n        val remainder3 = N / 3\n    \
    \    val remainder4 = N / 4\n        val remainder5 = N / 5\n        val remainder6\
    \ = N / 6\n        val remainder7 = N / 7\n        val remainder8 = N / 8\n  \
    \      val remainder9 = N / 9\n        val remainder10 = N / 10\n        val remainder11\
    \ = N / 11\n        val remainder12 = N / 12\n        val remainder13 = N / 13\n\
    \        val remainder14 = N / 14\n        val remainder15 = N / 15\n        val\
    \ remainder16 = N / 16\n        val remainder17 = N / 17\n        val remainder18\
    \ = N / 18\n        val remainder19 = N / 19\n        val remainder20 = N / 20\n\
    \        val remainder21 = N / 21\n        val remainder22 = N / 22\n        val\
    \ remainder23 = N / 23\n        val remainder24 = N / 24\n        val remainder25\
    \ = N / 25\n        val remainder26 = N / 26\n        val remainder27 = N / 27\n\
    \        val remainder28 = N / 28\n        val remainder29 = N / 29\n        val\
    \ remainder30 = N / 30\n        val remainder31 = N / 31\n        val remainder32\
    \ = N / 32\n        val remainder33 = N / 33\n        val remainder34 = N / 34\n\
    \        val remainder35 = N / 35\n        val remainder36 = N / 36\n        val\
    \ remainder37 = N / 37\n        val remainder38 = N / 38\n        val remainder39\
    \ = N / 39\n        val remainder40 = N / 40\n        val remainder41 = N / 41\n\
    \        val remainder42 = N / 42\n        val remainder43 = N / 43\n        val\
    \ remainder44 = N / 44\n        val remainder45 = N / 45\n        val remainder46\
    \ = N / 46\n        val remainder47 = N / 47\n        val remainder48 = N / 48\n\
    \        val remainder49 = N / 49\n        val remainder50 = N / 50\n        val\
    \ remainder51 = N / 51\n        val ", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ c = binary.charAt(i)\n            val d = c.toInt\n            sum += d\n  \
    \      }\n        binary.toString + sum.toString", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i).toInt\n\
    \        }\n        binary.reverse", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ sum = 0\n        while(N /= 10) {\n            digits += N % 10\n          \
    \  sum += N % 10\n            N /= 10\n        }\n        while(sum > 0) {\n \
    \           binary += digits.toString.reverse.takeWhile(_ != '0').mkString(\"\"\
    )\n            digits -= digits.toString.reverse.takeWhile(_ != '0').mkString(\"\
    \")\n            sum -= digits.toString.reverse.takeWhile(_ != '0').mkString(\"\
    \")\n        }\n        binary.reverse.mkString(\"\")", "        val binary =\
    \ scala.collection.mutable.ListBuffer[String]()\n        val digits = scala.collection.mutable.ListBuffer[Long]()\n\
    \        val remainder = N / 2\n        val digit = remainder % 2\n        val\
    \ remainder2 = (remainder - digit) / 2\n        val digit2 = remainder2 % 2\n\
    \        val remainder3 = (remainder2 - digit2) / 2\n        val digit3 = remainder3\
    \ % 2\n        val remainder4 = (remainder3 - digit3) / 2\n        val digit4\
    \ = remainder4 % 2\n        val remainder5 = (remainder4 - digit4) / 2\n     \
    \   val digit5 = remainder5 % 2\n        val remainder6 = (remainder5 - digit5)\
    \ / 2\n        val digit6 = remainder6 % 2\n        val remainder7 = (remainder6\
    \ - digit6) / 2\n        val digit7 = remainder7 % 2\n        val remainder8 =\
    \ (remainder7 - digit7) / 2\n        val digit8 = remainder8 % 2\n        val\
    \ remainder9 = (remainder8 - digit8) / 2\n        val digit9 = remainder9 % 2\n\
    \        val remainder10 = (remainder9 - digit9) / 2\n        val digit10 = remainder10\
    \ % 2\n        val remainder11 = (remainder10 - digit10) / 2\n        val digit11\
    \ = remainder11 % 2\n        val remainder12 = (remainder11 - digit11) / 2\n \
    \       val digit12 = remainder12 % 2\n        val remainder13 = (remainder12\
    \ - digit12) / 2\n        val digit13 = remainder13 % 2\n        val remainder14\
    \ = (remainder13 - digit13) / 2\n        val digit14 = remainder14 % 2\n     \
    \   val remainder15 = (remainder14 - digit14) / 2\n        val digit15 = remainder15\
    \ % 2\n        val remainder16 = (remainder15 - digit15) / 2\n        val digit16\
    \ = remainder16 % 2\n        val remainder17 = (remainder16 - digit16) / 2\n \
    \       val digit17 = remainder17 % 2\n        val remainder18 = (remainder17\
    \ - digit17) / 2\n        val digit18 = remainder18 % 2\n        val remainder19\
    \ = (remainder18 - digit18) / 2\n        val digit19 = remainder19 % 2\n     \
    \   val remainder20 = (remainder19 - digit19) / 2\n        val digit20 = remainder20\
    \ % 2\n        val remainder", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        var remainder = 0\n        while(N /= 10) {\n  \
    \          sum += N % 10\n            N /= 10\n        }\n        while(sum >\
    \ 0) {\n            val remainder = sum % 2\n            sum += remainder\n  \
    \          binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val result = mutable.ListBuffer.empty[String]\n\
    \        var sum = 0\n        for(i <- 0 until binary.length){\n            sum\
    \ += binary.charAt(i).toInt\n        }\n        result += \"0\"\n        while(sum\
    \ > 0){\n            result += \"1\"\n            sum -= 1\n        }\n      \
    \  result.toString", "        var sum = 0\n        var binary = \"\"\n       \
    \ var remainder = 0\n        var remainder2 = 0\n        var remainder3 = 0\n\
    \        var remainder4 = 0\n        var remainder5 = 0\n        var remainder6\
    \ = 0\n        var remainder7 = 0\n        var remainder8 = 0\n        var remainder9\
    \ = 0\n        var remainder10 = 0\n        var remainder11 = 0\n        var remainder12\
    \ = 0\n        var remainder13 = 0\n        var remainder14 = 0\n        var remainder15\
    \ = 0\n        var remainder16 = 0\n        var remainder17 = 0\n        var remainder18\
    \ = 0\n        var remainder19 = 0\n        var remainder20 = 0\n        var remainder21\
    \ = 0\n        var remainder22 = 0\n        var remainder23 = 0\n        var remainder24\
    \ = 0\n        var remainder25 = 0\n        var remainder26 = 0\n        var remainder27\
    \ = 0\n        var remainder28 = 0\n        var remainder29 = 0\n        var remainder30\
    \ = 0\n        var remainder31 = 0\n        var remainder32 = 0\n        var remainder33\
    \ = 0\n        var remainder34 = 0\n        var remainder35 = 0\n        var remainder36\
    \ = 0\n        var remainder37 = 0\n        var remainder38 = 0\n        var remainder39\
    \ = 0\n        var remainder40 = 0\n        var remainder41 = 0\n        var remainder42\
    \ = 0\n        var remainder43 = 0\n        var remainder44 = 0\n        var remainder45\
    \ = 0\n        var remainder46 = 0\n        var remainder47 = 0\n        var remainder48\
    \ = 0\n        var remainder49 = 0\n        var remainder50 = 0\n        var remainder51\
    \ = 0\n        var remainder52 = 0\n        var remainder53 = 0\n        var remainder54\
    \ = 0\n        var remainder55 = 0\n        var remainder56 = 0\n        var remainder57\
    \ = 0\n        var remainder58 = 0\n        var remainder59 = 0\n        var remainder60\
    \ = 0\n        var remainder61 = 0\n        var remainder62 = 0\n        var remainder63\
    \ = 0\n        var remainder64 = 0\n        var remainder65 = 0\n        var remainder66\
    \ = 0\n        var remainder67 = 0\n        var remainder68 = 0\n        var remainder69\
    \ = 0\n        var remainder70 = 0\n        var remainder71 = 0\n        var remainder72\
    \ = 0\n        var remainder73 = 0\n        var remainder74 = 0\n        var remainder75\
    \ = 0\n        var remainder76 = 0\n        var remainder77 = 0\n        var remainder78\
    \ = 0\n        var remainder79 = 0\n        var remainder80 = 0\n        var remainder81\
    \ = 0\n        var remainder82 = 0\n        var remainder83 = 0\n        var remainder84\
    \ = 0\n", "        val result = new mutable.ListBuffer[String]\n        val remainder\
    \ = N % 2\n        val remainders = N / 2\n        val remaindersString = remainders.toString\n\
    \        val remaindersString2 = remaindersString.reverse\n        val remaindersString3\
    \ = remaindersString2.reverse\n        val remaindersString4 = remaindersString3.reverse\n\
    \        val remaindersString5 = remaindersString4.reverse\n        val remaindersString6\
    \ = remaindersString5.reverse\n        val remaindersString7 = remaindersString6.reverse\n\
    \        val remaindersString8 = remaindersString7.reverse\n        val remaindersString9\
    \ = remaindersString8.reverse\n        val remaindersString10 = remaindersString9.reverse\n\
    \        val remaindersString11 = remaindersString10.reverse\n        val remaindersString12\
    \ = remaindersString11.reverse\n        val remaindersString13 = remaindersString12.reverse\n\
    \        val remaindersString14 = remaindersString13.reverse\n        val remaindersString15\
    \ = remaindersString14.reverse\n        val remaindersString16 = remaindersString15.reverse\n\
    \        val remaindersString17 = remaindersString16.reverse\n        val remaindersString18\
    \ = remaindersString17.reverse\n        val remaindersString19 = remaindersString18.reverse\n\
    \        val remaindersString20 = remaindersString19.reverse\n        val remaindersString21\
    \ = remaindersString20.reverse\n        val remaindersString22 = remaindersString21.reverse\n\
    \        val remaindersString23 = remaindersString22.reverse\n        val remaindersString24\
    \ = remaindersString23.reverse\n        val remaindersString25 = remaindersString24.reverse\n\
    \        val remaindersString26 = remaindersString25.reverse\n        val remaindersString27\
    \ = remaindersString26.reverse\n        val remaindersString28 = remaindersString27.reverse\n\
    \        val remaindersString29 = remaindersString28.reverse\n        val remaindersString30\
    \ = remaindersString29.reverse\n        val remaindersString31 = remaindersString30.reverse\n\
    \        val remaindersString32 = remaindersString31.reverse\n        val remaindersString33\
    \ = remaindersString32.reverse\n        val remainder", "        val binary =\
    \ N.toBinaryString\n        val sum = 0\n        for(i <- 0 until binary.length){\n\
    \            val c = binary.charAt(i)\n            val d = c.toInt\n         \
    \   sum += d\n        }\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    binary.reverse\n        binary.reverse\n        binary.reverse\n        binary.reverse\n\
    \        binary.reverse\n        binary.reverse\n        binary.reverse\n    \
    \    ", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        while(sum > 0) {\n            val remainder\
    \ = sum % 2\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        var sum = 0\n   \
    \     var binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n\
    \        while (remainder2 > 0) {\n            sum += remainder2 % 2\n       \
    \     remainder2 = (remainder2 / 2)\n        }\n        val remainder3 = N - sum\n\
    \        while (remainder3 > 0) {\n            binary += \"1\"\n            remainder3\
    \ = (remainder3 / 2)\n        }\n        binary += sum.toString\n        binary",
  "        var sum = 0\n        var binary = \"\"\n        for(i <- 0 until N) {\n\
    \            val digit = math.floor(math.abs(N % math.pow(2, i)))\n          \
    \  sum += digit\n            binary += digit.toBinaryString\n        }\n     \
    \   binary.reverse", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        for(i <- 0 until N) {\n            val digit = math.floor(math.abs(N\
    \ % 10) / 2)\n            binary.append(digit)\n            sum += digit\n   \
    \         N /= 10\n        }\n        binary.append(sum)\n        binary.toString",
  "        val result = new mutable.ListBuffer[String]()\n        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        for (i <- 0 until digits.size) {\n            sum\
    \ += digits(i)\n            if (sum > 9) {\n                result += \"1\"\n\
    \                sum -= 10\n            } else {\n                result += \"\
    0\"\n            }\n        }\n        result.reverse.mkString", "        val\
    \ s = N.toBinaryString\n        val sum = 0\n        for(i <- 0 until s.length)\
    \ sum += s.charAt(i) - '0'\n        sum.toBinaryString", "        val binary =\
    \ scala.collection.mutable.ListBuffer[String]()\n        var sum = 0\n       \
    \ while(N !=0){\n            val digit = N % 10\n            sum += digit\n  \
    \          binary.append(digit)\n            N /= 10\n        }\n        val result\
    \ = sum.toBinaryString\n        binary.reverse.foreach(x => result += x)\n   \
    \     result", "        val binary = N.toBinaryString\n        val sum = 0\n \
    \       for(i <- binary.indices) {\n            sum += binary(i)\n        }\n\
    \        sum.toString", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sumOfDigits = digits.foldLeft(0)(_ + _)\n        val binaryDigits\
    \ = digits.map(x => if (x % 2 == 0) \"1\" + \"0\"\n        else \"0\" + \"1\"\
    )\n        val result = binaryDigits.take(digits.length).mkString(\"\")\n    \
    \    result + sumOfDigits.toString", "        var sum = 0\n        var binary\
    \ = \"\"\n        var remainder = 0\n        var i = N\n        while(i > 0) {\n\
    \            remainder = i % 2\n            sum = sum + remainder\n          \
    \  i = i / 2\n        }\n        while(sum > 0) {\n            binary = binary\
    \ + Integer.toBinaryString(sum % 10)\n            sum = sum / 10\n        }\n\
    \        binary", "        var sum = 0\n        var binary = \"\"\n        var\
    \ remainder = 0\n        var remainder2 = N\n        while (remainder2 > 0) {\n\
    \            sum += remainder2 % 2\n            remainder2 = (remainder2 / 2)\n\
    \        }\n        binary = Integer.toBinaryString(sum)\n        remainder2 =\
    \ N\n        while (remainder2 > 0) {\n            sum += remainder2 % 2\n   \
    \         remainder2 = (remainder2 / 2)\n        }\n        binary = Integer.toBinaryString(sum)\n\
    \        remainder2 = N\n        while (remainder2 > 0) {\n            sum +=\
    \ remainder2 % 2\n            remainder2 = (remainder2 / 2)\n        }\n     \
    \   binary = Integer.toBinaryString(sum)\n        remainder2 = N\n        while\
    \ (remainder2 > 0) {\n            sum += remainder2 % 2\n            remainder2\
    \ = (remainder2 / 2)\n        }\n        binary = Integer.toBinaryString(sum)\n\
    \        remainder2 = N\n        while (remainder2 > 0) {\n            sum +=\
    \ remainder2 % 2\n            remainder2 = (remainder2 / 2)\n        }\n     \
    \   binary = Integer.toBinaryString(sum)\n        remainder2 = N\n        while\
    \ (remainder2 > 0) {\n            sum += remainder2 % 2\n            remainder2\
    \ = (remainder2 / 2)\n        }\n        binary = Integer.toBinaryString(sum)\n\
    \        remainder2 = N\n        while (remainder2 > 0) {\n            sum +=\
    \ remainder2 % 2\n            remainder2 = (remainder2 / 2)\n        }\n     \
    \   binary = Integer.toBinaryString(sum)\n        remainder2 = N\n        while\
    \ (remainder2 > 0) {\n            sum += remainder2 % 2\n            remainder2\
    \ = (remainder2 / 2)\n        }\n        binary = Integer.toBinaryString(sum)\n\
    \        remainder2 = N\n        while (remainder2 > 0) {\n            sum +=\
    \ remainder2 % 2\n            remainder2 = (remainder2 / 2)\n        }\n     \
    \   binary = Integer.toBinaryString(sum)\n        remainder2 = N\n        while\
    \ (remainder2 > 0) {\n            sum += remainder2 % 2\n            remainder2\
    \ = (remainder2 / 2)\n        }\n        binary = Integer.toBinaryString(sum)\n\
    \        remainder2 = N\n        while (remainder2 > 0) {\n            sum +=\
    \ remainder2 % 2\n            remainder2 = (remainder2 / 2)\n        }\n     \
    \   binary = Integer.toBinaryString(sum)\n        remainder2 = N\n        while\
    \ (remainder2 > 0) {\n            sum += remainder2 % 2\n            remainder",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val sum = 0\n        val result = new mutable.ListBuffer[String]()\n  \
    \      for(i <- 0 until binary.length){\n            val c = binary(i)\n     \
    \       val n = c.toInt\n            sum += n\n            val s = n.toBinaryString\n\
    \            val s = s.reverse\n            result += s\n        }\n        val\
    \ s = sum.toBinaryString\n        val s = s.reverse\n        result += s\n   \
    \     result.mkString(\"\")", "        val binary = N.toBinaryString\n       \
    \ val binary = binary.reverse\n        val sum = 0\n        var i = 0\n      \
    \  while (i < binary.length) {\n            val digit = binary.charAt(i)\n   \
    \         sum += digit.toInt\n            i += 1\n        }\n        val result\
    \ = sum.toBinaryString\n        return result", "        var sum = 0\n       \
    \ var binary = \"\"\n        var remainder = 0\n        for(i <- 0 until N) {\n\
    \            remainder = i % 2\n            sum = sum + remainder\n          \
    \  binary = binary + remainder\n            i = i / 2\n        }\n        binary\
    \ = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n    \
    \    binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = binary.reverse\n        binary = binary.dropWhile(_ == '0').reverse\n\
    \        binary = bin", "        val binary = N.toBinaryString\n        val binary\
    \ = binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.dropRight(binary.length-1)\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.dropRight(binary.length-1)", "        val sum = 0\n\
    \        val binary = new mutable.ListBuffer[String]()\n        while(N /= 10)\
    \ {\n            val digit = N % 10\n            sum += digit\n            binary.append(digit)\n\
    \            N = (N - digit) / 10\n        }\n        binary.reverse.mkString(\"\
    \") + sum.toString", "        val binary = N.toBinaryString\n        val sum =\
    \ 0\n        for(i <- 0 until binary.length){\n            val c = binary(i)\n\
    \            val n = c.toInt\n            sum += n\n        }\n        val result\
    \ = sum.toBinaryString\n        result + \" \"", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Long]()\n        val\
    \ total = 0L\n        val remainder = N % 2\n        val remainderDigit = remainder\
    \ / 2\n        val remainderDigitString = remainderDigit.toString\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse\n        val remainderDigitString\
    \ = remainderDigitString.reverse\n        val remainderDigitString = remainderDigitString.reverse\n\
    \        val remainderDigitString = remainderDigitString.reverse\n        val\
    \ remainderDigitString = remainderDigitString.reverse", "        var sum = 0\n\
    \        var binary = \"\"\n        var remainder = 0\n        var remainder2\
    \ = 0\n        var remainder3 = 0\n        var remainder4 = 0\n        var remainder5\
    \ = 0\n        var remainder6 = 0\n        var remainder7 = 0\n        var remainder8\
    \ = 0\n        var remainder9 = 0\n        var remainder10 = 0\n        var remainder11\
    \ = 0\n        var remainder12 = 0\n        var remainder13 = 0\n        var remainder14\
    \ = 0\n        var remainder15 = 0\n        var remainder16 = 0\n        var remainder17\
    \ = 0\n        var remainder18 = 0\n        var remainder19 = 0\n        var remainder20\
    \ = 0\n        var remainder21 = 0\n        var remainder22 = 0\n        var remainder23\
    \ = 0\n        var remainder24 = 0\n        var remainder25 = 0\n        var remainder26\
    \ = 0\n        var remainder27 = 0\n        var remainder28 = 0\n        var remainder29\
    \ = 0\n        var remainder30 = 0\n        var remainder31 = 0\n        var remainder32\
    \ = 0\n        var remainder33 = 0\n        var remainder34 = 0\n        var remainder35\
    \ = 0\n        var remainder36 = 0\n        var remainder37 = 0\n        var remainder38\
    \ = 0\n        var remainder39 = 0\n        var remainder40 = 0\n        var remainder41\
    \ = 0\n        var remainder42 = 0\n        var remainder43 = 0\n        var remainder44\
    \ = 0\n        var remainder45 = 0\n        var remainder46 = 0\n        var remainder47\
    \ = 0\n        var remainder48 = 0\n        var remainder49 = 0\n        var remainder50\
    \ = 0\n        var remainder51 = 0\n        var remainder52 = 0\n        var remainder53\
    \ = 0\n        var remainder54 = 0\n        var remainder55 = 0\n        var remainder56\
    \ = 0\n        var remainder57 = 0\n        var remainder58 = 0\n        var remainder59\
    \ = 0\n        var remainder60 = 0\n        var remainder61 = 0\n        var remainder62\
    \ = 0\n        var remainder63 = 0\n        var remainder64 = 0\n        var remainder65\
    \ = 0\n        var remainder66 = 0\n        var remainder67 = 0\n        var remainder68\
    \ = 0\n        var remainder69 = 0\n        var remainder70 = 0\n        var remainder71\
    \ = 0\n        var remainder72 = 0\n        var remainder73 = 0\n        var remainder74\
    \ = 0\n        var remainder75 = 0\n        var remainder76 = 0\n        var remainder77\
    \ = 0\n        var remainder78 = 0\n        var remainder79 = 0\n        var remainder80\
    \ = 0\n        var remainder81 = 0\n        var remainder82 = 0\n        var remainder83\
    \ = 0\n        var remainder84 = 0\n", "        val sum = 0\n        val binary\
    \ = new mutable.ArrayBuffer[String]()\n        while(N >0) {\n            val\
    \ remainder = N % 2\n            N /= 2\n            sum += remainder\n      \
    \      binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val sum = 0\n        val\
    \ binSum = mutable.ArrayBuffer.empty[String]\n        for (i <- 0 until binary.length)\
    \ {\n            val bin = binary.charAt(i)\n            if (bin == '1') {\n \
    \               sum += i.toLong\n                binSum += i.toString + \" \"\n\
    \            }\n        }\n        binSum.mkString(\" \")", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices) {\n\
    \            sum += binary(i)\n        }\n        sum.toString", "        val\
    \ binary = N.toBinaryString\n        val sum = 0\n        for(i <- 0 to binary.length-1){\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \      }\n        binary.reverse\n        binary.padTo(binary.length, \"0\")\n\
    \        binary.reverse\n        binary.padTo(binary.length, \"0\")\n        binary.reverse\n\
    \        binary.padTo(binary.length, \"0\")\n        binary.reverse\n        binary.padTo(binary.length,\
    \ \"0\")\n        binary.reverse\n        binary.padTo(binary.length, \"0\")\n\
    \        binary.reverse\n        binary.padTo(binary.length, \"0\")\n        binary.reverse\n\
    \        binary.padTo(binary.length, \"0\")\n        binary.reverse\n        binary.padTo(binary.length,\
    \ \"0\")\n        binary.reverse\n        binary.padTo(binary.length, \"0\")\n\
    \        binary.reverse\n        binary.padTo(binary.length, \"0\")\n        binary.reverse\n\
    \        binary.padTo(binary.length, \"0\")\n        binary.reverse\n        binary.padTo(binary.length,\
    \ \"0\")\n        binary.reverse\n        binary.padTo(binary.length, \"0\")\n\
    \        binary.reverse\n        binary.padTo(binary.length, \"0\")\n        binary.reverse\n\
    \        binary.padTo(binary.length, \"0\")\n        binary.reverse\n        binary.padTo(binary.length,\
    \ \"0\")\n        binary.reverse\n        binary.padTo(binary.length, \"0\")\n\
    \        binary.reverse\n        binary.padTo(binary.length, \"0\")\n        binary.reverse\n\
    \        binary.padTo(binary.length, \"0\")\n        binary.reverse\n        binary.padTo(binary.length,\
    \ \"0\")\n        binary.reverse\n        binary.padTo(binary.length, \"0\")\n\
    \        binary.reverse\n        binary.padTo(binary.length, \"0\")\n        binary.reverse\n\
    \        binary.padTo(binary.length, \"0\")\n        binary.reverse\n        binary.padTo(binary.length,\
    \ \"0\")\n        binary.reverse\n        binary.padTo(binary.length, \"0\")\n\
    \        binary.reverse\n        binary.padTo(binary.length, \"0\")\n        binary.reverse\n\
    \        binary.padTo(binary.length, \"0\")\n        binary.reverse\n        binary.padTo(binary.length,\
    \ \"0\")\n        binary.reverse\n        binary.padTo(binary.length, \"0\")\n\
    \        binary.reverse\n        ", "        var sum = 0\n        var binary =\
    \ \"\"\n        var remainder = 0\n        for(i <- 0 until N) {\n           \
    \ val temp = N % 10\n            sum += temp\n            N = (N - temp) / 10\n\
    \            binary += temp\n        }\n        while(sum > 0) {\n           \
    \ remainder = sum % 2\n            sum = sum / 2\n            binary += remainder\n\
    \        }\n        binary", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        for(i <- binary.indices) {\n            sum += binary.charAt(i)\n\
    \        }\n        sum.toString", "        val result = mutable.StringBuilder()\n\
    \        val digits = N.toString.reverse.grouped(2).map(_.mkString).toList\n \
    \       val sum = 0\n        for (i <- 0 until digits.size) {\n            sum\
    \ += digits(i).toLong\n        }\n        val binary = sum.toBinaryString\n  \
    \      result += binary.reverse\n        result.toString", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        for(i <- 0 to binary.length-1){\n\
    \            sum += binary(i).toInt\n        }\n        binary.reverse", "   \
    \     val sum = 0\n        var i = 0\n        while(i < N) {\n            val\
    \ temp = N % 2\n            sum += temp\n            N = N / 2\n            i\
    \ += 1\n        }\n        val result = sum.toBinaryString\n        return result",
  "        var sum = 0\n        var binary = \"\"\n        var remainder = 0\n   \
    \     var remainder2 = 0\n        var remainder3 = 0\n        var remainder4 =\
    \ 0\n        var remainder5 = 0\n        var remainder6 = 0\n        var remainder7\
    \ = 0\n        var remainder8 = 0\n        var remainder9 = 0\n        var remainder10\
    \ = 0\n        var remainder11 = 0\n        var remainder12 = 0\n        var remainder13\
    \ = 0\n        var remainder14 = 0\n        var remainder15 = 0\n        var remainder16\
    \ = 0\n        var remainder17 = 0\n        var remainder18 = 0\n        var remainder19\
    \ = 0\n        var remainder20 = 0\n        var remainder21 = 0\n        var remainder22\
    \ = 0\n        var remainder23 = 0\n        var remainder24 = 0\n        var remainder25\
    \ = 0\n        var remainder26 = 0\n        var remainder27 = 0\n        var remainder28\
    \ = 0\n        var remainder29 = 0\n        var remainder30 = 0\n        var remainder31\
    \ = 0\n        var remainder32 = 0\n        var remainder33 = 0\n        var remainder34\
    \ = 0\n        var remainder35 = 0\n        var remainder36 = 0\n        var remainder37\
    \ = 0\n        var remainder38 = 0\n        var remainder39 = 0\n        var remainder40\
    \ = 0\n        var remainder41 = 0\n        var remainder42 = 0\n        var remainder43\
    \ = 0\n        var remainder44 = 0\n        var remainder45 = 0\n        var remainder46\
    \ = 0\n        var remainder47 = 0\n        var remainder48 = 0\n        var remainder49\
    \ = 0\n        var remainder50 = 0\n        var remainder51 = 0\n        var remainder52\
    \ = 0\n        var remainder53 = 0\n        var remainder54 = 0\n        var remainder55\
    \ = 0\n        var remainder56 = 0\n        var remainder57 = 0\n        var remainder58\
    \ = 0\n        var remainder59 = 0\n        var remainder60 = 0\n        var remainder61\
    \ = 0\n        var remainder62 = 0\n        var remainder63 = 0\n        var remainder64\
    \ = 0\n        var remainder65 = 0\n        var remainder66 = 0\n        var remainder67\
    \ = 0\n        var remainder68 = 0\n        var remainder69 = 0\n        var remainder70\
    \ = 0\n        var remainder71 = 0\n        var remainder72 = 0\n        var remainder73\
    \ = 0\n        var remainder74 = 0\n        var remainder75 = 0\n        var remainder76\
    \ = 0\n        var remainder77 = 0\n        var remainder78 = 0\n        var remainder79\
    \ = 0\n        var remainder80 = 0\n        var remainder81 = 0\n        var remainder82\
    \ = 0\n        var remainder83 = 0\n        var remainder84 = 0\n", "        val\
    \ binary = scala.collection.mutable.StringBuilder()\n        val digits = scala.collection.mutable.ListBuffer[Int]()\n\
    \        val sum = 0\n        while(N /= 10) {\n            digits += N % 10\n\
    \            sum += N % 10\n            N = (N / 10).toInt\n        }\n      \
    \  binary.append(digits.reverse.mkString(\"\"))\n        while(sum > 0) {\n  \
    \          binary.append(digits(sum % 10).reverse.mkString(\"\"))\n          \
    \  sum = (sum / 10).toInt\n        }\n        binary.toString()", "        val\
    \ sum = 0\n        val binary = new mutable.ListBuffer[String]()\n        for(i\
    \ <- 0 until N) {\n            val digit = i % 10\n            sum += digit\n\
    \            binary.append(digit)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val sum = 0\n        for(i\
    \ <- binary.indices) {\n            sum += binary(i)\n        }\n        binary.reverse",
  "        val binary = new mutable.ListBuffer[String]()\n        var sum = 0\n  \
    \      var remainder = 0\n        while(N /= 10) {\n            sum += N % 10\n\
    \            N /= 10\n        }\n        while(sum > 0) {\n            val remainder\
    \ = sum % 2\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        binary.reverse", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        var remainder = N\n        while(true){\n      \
    \      sum += remainder\n            binary.append(remainder % 2)\n          \
    \  remainder = remainder / 2\n            if(remainder == 0){\n              \
    \  break\n            }\n        }\n        binary.reverse\n        binary.toString",
  "        val binary = N.toBinaryString\n        val bin = binary.toList\n      \
    \  val sum = 0\n        for(i <- 0 until bin.length) sum += bin(i).toInt\n   \
    \     binary.toString.reverse.foldLeft(\"\")(_ + _ + _)", "        val binary\
    \ = scala.collection.mutable.StringBuilder()\n        val digits = scala.collection.mutable.ArrayBuffer(N.toInt)\n\
    \        val sum = 0\n        while (digits.nonEmpty) {\n            val digit\
    \ = digits.head\n            digits.remove(digit)\n            sum += digit\n\
    \            binary.append(digit)\n        }\n        binary.reverse", "     \
    \   var sum = 0\n        var binary = \"\"\n        var remainder = 0\n      \
    \  while(N !=0){\n            remainder = N % 2\n            N = N / 2\n     \
    \       sum = sum + remainder\n            binary = binary + remainder\n     \
    \   }\n        binary = binary.reverse\n        sum.toString", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        for(i <- 0 until binary.length)\
    \ sum += binary(i).toInt\n        binary.reverse.foldLeft(\"\")(_ + _ + _)", " \
    \       val binary = scala.collection.mutable.StringBuilder()\n        val digits\
    \ = scala.collection.mutable.ArrayBuffer.empty[Int]\n        val sum = 0\n   \
    \     while(N /= 10) {\n            digits += N % 10\n            sum += N % 10\n\
    \            N /= 10\n        }\n        val digit = digits.reverse\n        while(digit.length\
    \ > 0) {\n            binary.append(digit.head)\n            digit = digit.tail\n\
    \        }\n        binary.reverse", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        val binary = binary.reverse\n        for(i <- 0\
    \ until binary.length){\n            sum += binary(i).toInt\n        }\n     \
    \   binary.reverse", "        var sum = 0\n        var binary = \"\"\n       \
    \ for(i <- 0 until N) {\n            val digit = math.pow(2, i)\n            sum\
    \ += digit\n            binary += digit.toBinaryString\n        }\n        binary.toUpperCase",
  "        val binary = N.toBinaryString\n        val binary = binary.reverse\n  \
    \      val binary = binary.dropRight(binary.length-1)\n        val binary = binary.reverse\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.",
  "        val binary = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ sum = 0\n        var remainder = 0\n        while(N /= 10) {\n            val\
    \ digit = N % 10\n            sum += digit\n            binary.append(digit)\n\
    \            N = (N - digit) / 10\n        }\n        while(sum > 0) {\n     \
    \       val digit = sum % 10\n            sum += digit\n            binary.append(digit)\n\
    \            sum = (sum - digit) / 10\n        }\n        binary.reverse", " \
    \       val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n \
    \       val sum = 0\n        digits.foreach(x => sum += x.toInt)\n        val\
    \ result = sum.toBinaryString\n        result + \" \"", "        val binary =\
    \ N.toBinaryString\n        val sum = 0\n        val bin = binary.toList\n   \
    \     bin.foreach(x => {\n            sum += x.toInt\n        })\n        binary.toString.reverse.foldLeft(\"\
    \")(_ + _ + _)", "        val binary = N.toBinaryString\n        val sum = 0\n\
    \        for(i <- 0 until binary.length){\n            val digit = binary.charAt(i)\n\
    \            sum += digit.toInt\n        }\n        binary.reverse", "       \
    \ val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i)\n        }\n        sum.toString", " \
    \       var sum = 0\n        var binary = \"\"\n        var remainder = 0\n  \
    \      var remainder2 = N\n        while (remainder2 > 0) {\n            val remainder3\
    \ = remainder2 % 2\n            binary = remainder3 + binary\n            remainder2\
    \ = remainder2 / 2\n        }\n        while (remainder > 0) {\n            val\
    \ remainder3 = remainder % 2\n            binary = remainder3 + binary\n     \
    \       remainder = remainder / 2\n        }\n        sum.toBinaryString", " \
    \       val binary = scala.collection.mutable.StringBuilder()\n        var sum\
    \ = 0\n        var remainder = 0\n        var i = 0\n        while (i < N) {\n\
    \            sum += N % 2\n            N = (N / 2)\n            i += 1\n     \
    \   }\n        while (sum > 0) {\n            binary.append((sum % 2).toString())\n\
    \            sum = (sum / 2)\n        }\n        return binary.toString()", " \
    \       val s = mutable.StringBuilder()\n        var sum = 0\n        var i =\
    \ 0\n        while (i < N) {\n            val x = math.pow(10, i)\n          \
    \  sum += x\n            s += x.toBinaryString\n            i += 1\n        }\n\
    \        s += sum.toString\n        s", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        for(i <- 0 until binary.length){\n            val\
    \ bin = binary.charAt(i)\n            val val = if(bin=='1') 1 else 0\n      \
    \      sum += val\n        }\n        binary.reverse", "        val sum = 0\n\
    \        val binary = new mutable.ListBuffer[String]()\n        while(N >0) {\n\
    \            val remainder = N % 2\n            sum += remainder\n           \
    \ N /= 2\n            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        while(N >0) {\n            val remainder = N % 2\n            sum +=\
    \ remainder\n            N /= 2\n            binary.append(remainder)\n      \
    \  }\n        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val binary = binary.dropRight(1)\n        val binary = binary.dropRight(1)\n\
    \        val bin", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        while(sum > 0) {\n            val remainder\
    \ = sum % 2\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val binary = N.toBinaryString\n\
    \        val sum = 0\n        var i = 0\n        while (i < binary.length) {\n\
    \            val digit = binary.charAt(i)\n            sum += digit.toInt\n  \
    \          i += 1\n        }\n        val result = sum.toBinaryString\n      \
    \  return result", "        val sum = 0\n        val binary = new mutable.ListBuffer[String]()\n\
    \        while(N !=0){\n            val remainder = N % 2\n            sum +=\
    \ remainder\n            binary.append(remainder)\n            N=N/2\n       \
    \ }\n        val result = sum.toBinaryString\n        binary.reverse.foreach(x\
    \ => result += x)\n        result", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ remainder = N % 2\n        val remainderDigit = remainder % 10\n        val\
    \ remainderDigits = remainderDigit :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = remainderDigits :: digits\n        val remainderDigits = remainderDigits\
    \ :: digits\n        val remainderDigits = remainderDigits :: digits\n       \
    \ val remainderDigits = remainderDigits :: digits\n        val remainderDigits\
    \ = remainderDigits :: digits\n        val remainderDigits = remainderDigits ::\
    \ digits\n        val remainderDigits = remainderDigits :: digits\n        val\
    \ remainderDigits = ", "        val binary = N.toBinaryString\n        val sum\
    \ = 0\n        for(i <- 0 to binary.length - 1) {\n            sum += binary(i).toInt\n\
    \        }\n        binary.reverse", "        val result = new mutable.StringBuilder\n\
    \        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        digits.foreach(x => result.append(x))\n        result.toString", "  \
    \      val binary = N.toBinaryString\n        val bin = binary.toList\n      \
    \  val binSum = bin.foldLeft(0)(_ + _)\n        val binSumString = binSum.toBinaryString\n\
    \        binSumString", "        val s = mutable.StringBuilder()\n        var\
    \ sum = 0\n        for(i <- 0 until N.toInt){\n            sum += i.toBinaryString().length\n\
    \        }\n        s += sum.toString\n        return s", "        val binary\
    \ = N.toBinaryString\n        val sum = 0\n        val binSum = binary.toInt\n\
    \        val binSumList = binSum.toList\n        binSumList.foreach(x => sum +=\
    \ x)\n        val binSumString = sum.toBinaryString\n        binSumString.reverse",
  "        val binary = scala.collection.mutable.StringBuilder()\n        var sum\
    \ = 0\n        var remainder = 0\n        var i = 0\n        while(i < N) {\n\
    \            remainder = N % 2\n            sum += remainder\n            N /=\
    \ 2\n            i += 1\n        }\n        binary.append(sum.toString)\n    \
    \    binary.reverse", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        var i = 0\n        while (i < N) {\n           \
    \ val digit = math.pow(10, i)\n            sum += digit\n            binary.append(digit.toString)\n\
    \            i += 1\n        }\n        binary.reverse", "        val digits =\
    \ N.toString.reverse.grouped(2).map(_.toString).map(_.toInt)\n        val sum\
    \ = 0\n        digits.foreach(sum ++= _)\n        sum.toString", "        val\
    \ sum = 0\n        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until N) {\n            val remainder = i rem 2\n        \
    \    val digit = i / 2\n            val bin = if (remainder == 0) \"0\" else \"\
    1\"\n            binary.append(bin)\n            sum += digit\n        }\n   \
    \     binary.reverse.mkString(\"\")", "        val binary = scala.collection.mutable.ListBuffer.empty[String]\n\
    \        var sum = 0\n        for(i <- 0 until N) {\n            val digit = math.pow(10,\
    \ i).toInt\n            sum += digit\n            binary.append(digit.toString)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        var sum = 0\n   \
    \     var binary = \"\"\n        var remainder = 0\n        var remainder2 = N\n\
    \        while(true){\n            sum += remainder2\n            binary = remainder\
    \ + binary\n            remainder2 = remainder\n            remainder = remainder\
    \ % 10\n            if(sum == 0){\n                break\n            }\n    \
    \    }\n        return binary", "        val digits = N.toString.reverse.grouped(2).map(_.mkString).reverse\n\
    \        val sums = digits.map(_.toInt).sum\n        val binary = digits.map(_.toInt).map(_.toBinaryString).mkString\n\
    \        val result = binary.padTo(sums.length, \"0\")\n        binary.padTo(sums.length,\
    \ \"0\")", "        val binary = N.toBinaryString\n        val sum = 0\n     \
    \   for(i <- 0 until binary.length){\n            val bin = binary.charAt(i)\n\
    \            val val = if (bin=='1') 1 else 0\n            sum += val\n      \
    \  }\n        binary.toString + sum.toString", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        var sum = 0\n        while(N /= 10) {\n            sum += N % 10\n  \
    \          N /= 10\n        }\n        while(sum > 0) {\n            val remainder\
    \ = sum % 2\n            sum += remainder\n            binary.append(remainder)\n\
    \        }\n        binary.reverse.mkString(\"\")", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ sum = 0\n        val N = N.toInt\n        val maxDigit = math.pow(10, math.ceil(math.log(N)\
    \ / math.log(2)))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigit)\
    \ / math.log(2))))\n        val maxDigit = math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2)))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigit)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits)\
    \ / math.log(2))))\n        val maxDigits = math.ceil(math.pow(10, math.ceil(math.log(maxDigits",
  "        val binary = N.toBinaryString\n        val sum = 0\n        for(i <- binary.indices)\
    \ {\n            sum += binary.charAt(i).toInt\n        }\n        sum.toString",
  "        val binary = N.toBinaryString\n        val sum = 0\n        var i = 0\n\
    \        while (i < binary.length) {\n            val c = binary.charAt(i)\n \
    \           val d = c.toInt\n            sum += d\n            i += 1\n      \
    \  }\n        val result = sum.toBinaryString\n        return result", "     \
    \   val binary = N.toBinaryString\n        val sum = 0\n        val bin = binary.toCharArray\n\
    \        for(i <- 0 until bin.length){\n            sum += bin(i).toInt\n    \
    \    }\n        binary.toCharArray.mkString", "        val binary = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        var sum = 0\n        var i = 0\n        while (i < N) {\n           \
    \ val digit = N % 10\n            sum += digit\n            binary.append(digit.toString)\n\
    \            N /= 10\n            i += 1\n        }\n        val result = sum.toBinaryString\n\
    \        binary.reverse.foreach(x => result += x)\n        result", "        val\
    \ binary = N.toBinaryString\n        val sum = 0\n        val bin = binary.toCharArray\n\
    \        var i = 0\n        while (i < bin.length) {\n            sum += bin(i).toInt\n\
    \            i += 1\n        }\n        sum.toString", "        val binary = scala.collection.mutable.StringBuilder()\n\
    \        var sum = 0\n        while(N !=0){\n            val temp = N % 2\n  \
    \          sum += temp\n            N /= 2\n        }\n        val temp = sum\n\
    \        while(temp != 0){\n            val temp = temp % 2\n            binary.append(temp.toString)\n\
    \            sum /= 2\n        }\n        binary.toString", "        val binary\
    \ = scala.collection.mutable.StringBuilder()\n        val digits = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n    \
    \    val digitSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val digitSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n       \
    \ val digitSumsSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n      \
    \  val digitSumsSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n  \
    \      val digitSumsSumsSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSumsSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSumsSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSumsSumsSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSumsSumsSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSumsSumsSumsSums = scala.collection.mutable.ArrayBuffer.empty[Int]\n\
    \        val digitSumsSumsSumsSumsSumsSumsSumsSumsSumsSum = scala.collection.mutable.ArrayBuffer.empty[Int",
  "        val binary = scala.collection.mutable.StringBuilder()\n        var sum\
    \ = 0\n        var remainder = N\n        while (remainder > 0) {\n          \
    \  sum += remainder % 2\n            remainder = remainder / 2\n        }\n  \
    \      binary.append(sum)\n        binary.toString", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(binary.length-1)\n        val binary =\
    \ binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n   \
    \     val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = bin", "        val binary = N.toBinaryString\n        val\
    \ sum = 0\n        for(i <- binary.indices) {\n            sum += binary(i)\n\
    \        }\n        binary.reverse.foldLeft(\"\")(_ + _)", "        val digits\
    \ = N.toString.reverse.grouped(2).map(_.toInt)\n        val sum = 0\n        for(i\
    \ <- 0 until digits.length) sum += digits(i)\n        sum.toString.reverse", " \
    \       val sum = 0\n        val binary = new mutable.ListBuffer[String]\n   \
    \     for(i <- 0 until N) {\n            val digit = i % 10\n            sum +=\
    \ digit\n            binary.append(digit)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val sum = 0\n        val binary = scala.collection.mutable.StringBuilder()\n\
    \        for(i <- 0 until N.toInt){\n            val digit = N % 2\n         \
    \   sum += digit\n            binary.append(digit)\n            N /= 2\n     \
    \   }\n        binary.reverse\n        binary.toString + sum.toString", "    \
    \    val binary = scala.collection.mutable.ListBuffer[String]()\n        var sum\
    \ = 0\n        var remainder = 0\n        var remainderSum = 0\n        var remainderSum2\
    \ = 0\n        var remainderSum3 = 0\n        var remainderSum4 = 0\n        var\
    \ remainderSum5 = 0\n        var remainderSum6 = 0\n        var remainderSum7\
    \ = 0\n        var remainderSum8 = 0\n        var remainderSum9 = 0\n        var\
    \ remainderSum10 = 0\n        var remainderSum11 = 0\n        var remainderSum12\
    \ = 0\n        var remainderSum13 = 0\n        var remainderSum14 = 0\n      \
    \  var remainderSum15 = 0\n        var remainderSum16 = 0\n        var remainderSum17\
    \ = 0\n        var remainderSum18 = 0\n        var remainderSum19 = 0\n      \
    \  var remainderSum20 = 0\n        var remainderSum21 = 0\n        var remainderSum22\
    \ = 0\n        var remainderSum23 = 0\n        var remainderSum24 = 0\n      \
    \  var remainderSum25 = 0\n        var remainderSum26 = 0\n        var remainderSum27\
    \ = 0\n        var remainderSum28 = 0\n        var remainderSum29 = 0\n      \
    \  var remainderSum30 = 0\n        var remainderSum31 = 0\n        var remainderSum32\
    \ = 0\n        var remainderSum33 = 0\n        var remainderSum34 = 0\n      \
    \  var remainderSum35 = 0\n        var remainderSum36 = 0\n        var remainderSum37\
    \ = 0\n        var remainderSum38 = 0\n        var remainderSum39 = 0\n      \
    \  var remainderSum40 = 0\n        var remainderSum41 = 0\n        var remainderSum42\
    \ = 0\n        var remainderSum43 = 0\n        var remainderSum44 = 0\n      \
    \  var remainderSum45 = 0\n        var remainderSum46 = 0\n        var remainderSum47\
    \ = 0\n        var remainderSum48 = 0\n        var remainderSum49 = 0\n      \
    \  var remainderSum50 = 0\n        var remainderSum51 = 0\n        var remainderSum52\
    \ = 0\n        var remainderSum53 = 0\n        var remainderSum54 = 0\n      \
    \  var remainderSum55 = 0\n        var remainderSum56 = 0\n        var remainderSum57\
    \ = 0\n        var remainderSum58 = 0\n        var remainderSum59 = 0\n      \
    \  var remainderSum60 = 0\n        var remainderSum61 = 0\n        var remainderSum62\
    \ = 0\n        var remainderSum63 = 0\n        var remainderSum64 = 0\n      \
    \  var remainderSum65 = 0\n        var remainderSum66 = 0\n        var remainderSum67\
    \ = 0\n        var remainderSum68 = 0\n        var remainderSum69 = 0\n      \
    \  var remainderSum70", "        val digits = N.toString.reverse.grouped(2).map(_.toInt)\n\
    \        val sum = 0\n        for (i <- 0 until digits.length) {\n           \
    \ sum += digits(i)\n        }\n        sum.toString", "        val binary = N.toBinaryString\n\
    \        val binary = binary.dropRight(binary.length - 1)\n        val sum = 0\n\
    \        for(i <- binary.indices) {\n            sum += binary(i)\n        }\n\
    \        binary.reverse", "        val binary = scala.collection.mutable.ListBuffer[String]()\n\
    \        val digits = scala.collection.mutable.ListBuffer[Int]()\n        val\
    \ remainder = N % 2\n        val quotient = N / 2\n        while (quotient > 0)\
    \ {\n            digits += quotient\n            quotient = quotient / 2\n   \
    \     }\n        digits += remainder\n        digits.reverse.foreach(x => binary\
    \ += x.toString)\n        binary.reverse.mkString(\"\")", "        val binary\
    \ = N.toBinaryString\n        val binary = binary.dropRight(binary.length-1)\n\
    \        val binary = binary.reverse\n        val binary = binary.toCharArray\n\
    \        val binary = binary.map(x => if (x == '1') '0' else '1')\n        val\
    \ binary = binary.mkString\n        binary.toUpperCase", "        val binary =\
    \ N.toBinaryString\n        val sum = 0\n        for(i <- 0 to binary.length -\
    \ 1) {\n            val digit = binary.charAt(i)\n            sum += digit.toInt\n\
    \        }\n        val result = sum.toBinaryString\n        result + (if (result.length\
    \ < 8) \"0\" * (8 - result.length) else \"\")", "        val sum = 0\n       \
    \ val binary = new mutable.ListBuffer[String]()\n        while(N >=0){\n     \
    \       val remainder = N % 2\n            N /= 2\n            sum += remainder\n\
    \            binary.append(remainder)\n        }\n        binary.reverse.mkString(\"\
    \")", "        val binary = N.toBinaryString\n        val sum = 0\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = binary.dropRight(1)\n        val\
    \ binary = binary.reverse\n        val binary = "]
stop_tokens:
- "\n    }\n"
