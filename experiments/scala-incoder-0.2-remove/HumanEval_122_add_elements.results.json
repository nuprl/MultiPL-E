{
  "language": "scala",
  "name": "HumanEval_122_add_elements",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var index = 0\n        while (index < k) {\n            sum += arr(index)\n            index += 1\n        }\n        val maxIndex = arr.length - 1\n        while (index >= 0) {\n            sum += arr(index)\n            index += 1\n        }\n        val maxValue = arr(maxIndex)\n        if (sum > maxValue) {\n            result += maxValue\n        }\n        result.toList.reduceLeft(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1e6omtgi.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1e6omtgi.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += arr(index)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1e6omtgi.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            sum += arr(index)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val max = (arr.length - k).toInt\n        var j = 0\n        while (j < max) {\n            sum += arr(j + 1)\n            j += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsx5pxccx.scala:26)\n\tat Problem.main(tmpsx5pxccx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLenIndex = maxLen - 1\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValueIndex = maxLenValue - 1\n        val maxLenValueValue = arr(maxLenValueIndex)\n        val maxLenValueValueIndex = maxLenValueValue - 1\n        val maxLenValueValueValue = arr(maxLenValueValueIndex)\n        val maxLenValueValueValueIndex = maxLenValueValueValue - 1\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueValue - 1\n        val maxLenValueValue\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7bi4bpfa.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7bi4bpfa.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueValueValueValue - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7bi4bpfa.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueValueValueValue - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7bi4bpfa.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueValueValueValue - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7bi4bpfa.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueVa",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val max = (len - k).toInt\n        val sum = 0L\n        for(i <- 0 until max) {\n            sum += arr(i)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpgj4ui8ak.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgj4ui8ak.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until arr.size) {\n            val str = arr(i).toString.padRight(maxLength, \"0\")\n            val digits = str.take(k)\n            val sum = digits.sum\n            if(sum > 9) {\n                result += sum\n            }\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphhs15ku4.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphhs15ku4.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphhs15ku4.scala:14:38 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mstr\u001b[0m = arr(i).toString.padRight(maxLength, \u001b[31m\"0\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value padRight is not a member of String\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0L\n        val maxLen = len - k\n        val maxLenList = arr.take(maxLen)\n        val maxLenSum = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList2 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList3 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList4 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList5 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList6 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList7 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList8 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList9 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList10 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList11 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList12 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList13 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList14 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList15 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList16 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList17 = maxLenList.fold\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpad4i3pli.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpad4i3pli.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979629
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i <- 0 until k) {\n            sum += arr(i)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i+k)\n        }\n        result.add(sum)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuuvvbuz5.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuvvbuz5.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (k : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuvvbuz5.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (k : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuuvvbuz5.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += arr(i+k)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuvvbuz5.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += arr(i+k)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Long\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = arr.take(k).map(_.toString.length).max\n        val sum = 0L\n        for(i <- 0 until k) {\n            sum += arr(i).toString.substring(0,maxLen)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpkbdukq50.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkbdukq50.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkbdukq50.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            sum += arr(i).toString.substring(\u001b[31m0\u001b[0m,maxLen)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk1jnj8vh.scala:21)\n\tat Problem.main(tmpk1jnj8vh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7kjpipan.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7kjpipan.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979629
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = maxDigits.toInt\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).min\n        val minDigits = arr.take(k).map(_.toString).map(_.length).max\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigits.toInt\n        val maxDigit = maxDigits.toInt\n        val minDigit = minDigit\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpau66i8lu.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigits\u001b[0m = arr.take(k).map(_.toString).map(_.length).min\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpau66i8lu.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = maxDigits.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpau66i8lu.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mminDigit\u001b[0m = minDigits.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mminDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mminDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpau66i8lu.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = maxDigits.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpau66i8lu.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mminDigit\u001b[0m = minDigits.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mminDigit is already defined as \u001b[33mvalue",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n        val maxLen = len - k\n        val maxLenIndex = math.max(0, maxLen)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValueIndex = math.max(0, maxLenValue)\n        val maxLenValueValue = arr(maxLenValueIndex)\n        val maxLenValueValueIndex = math.max(0, maxLenValueValue)\n        val maxLenValueValueValue = arr(maxLenValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValue\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp08p2_bwq.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp08p2_bwq.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueIndex\u001b[0m = math.max(\u001b[31m0\u001b[0m, maxLenValueValueValue)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp08p2_bwq.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValue\u001b[0m = arr(maxLenValueValueValueIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp08p2_bwq.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueIndex\u001b[0m = math.max(\u001b[31m0\u001b[0m, maxLenValueValueValue)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp08p2_bwq.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValue\u001b[0m = arr(maxLenValueValueValueIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659979632
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val max = (len - k).toInt\n        val sum = 0L\n        for(i <- 0 until max){\n            val cur = arr(i+k)\n            val next = (i+1)%len\n            val nextCur = arr(next)\n            val nextNext = (next+1)%len\n            val curNext = arr(i+next)\n            val curNextNext = arr(i+next+1)\n            val curNextNextNext = arr(i+next+2)\n            val curNextNextNextNext = arr(i+next+3)\n            val curNextNextNextNextNext = arr(i+next+4)\n            val curNextNextNextNextNext = arr(i+next+5)\n            val curNextNextNextNextNextNext = arr(i+next+6)\n            val curNextNextNextNextNextNextNext = arr(i+next+7)\n            val curNextNextNextNextNextNextNext = arr(i+next+8)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+9)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+10)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+11)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+12)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+13)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+14)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+15)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+16)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+17)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+18)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+19)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+20)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+21)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+22)\n            val curNextNextNextNextNextNextNextNext = arr(i+next+23)\n            val curNextNextNextNextNextNextNextNext = arr\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp4fyepom.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpp4fyepom.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp4fyepom.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpp4fyepom.scala:46:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m46 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < arr.length) {\n            sum += arr(i)\n            if (sum < 10) {\n                sum = 0L\n            }\n            i += 1\n        }\n        if (sum > 10) {\n            sum -= 10\n        }\n        val maxSum = sum - k\n        var j = 0\n        while (j < arr.length) {\n            val curSum = arr(j)\n            if (curSum < 10) {\n                curSum = 0L\n            }\n            if (curSum > maxSum) {\n                maxSum = curSum\n            }\n            j += 1\n        }\n        val maxSum2 = maxSum * maxSum\n        var sum2 = 0L\n        var k2 = k\n        while (j < arr.length) {\n            val curSum = arr(j)\n            if (curSum < 10) {\n                curSum = 0L\n            }\n            sum2 += curSum\n            if (sum2 < maxSum2) {\n                sum2 = 0L\n            }\n            j += 1\n        }\n        sum2 + sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpko6fin3j.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpko6fin3j.scala:29:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                curSum = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val curSum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpko6fin3j.scala:32:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m                maxSum = curSum\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val maxSum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpko6fin3j.scala:42:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m                curSum = \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val curSum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979626
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toString.length).max\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprwi16tbf.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSum\u001b[0m = arr.take(k).map(_.toString).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxTwoDigitsSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxTwoDigitsSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprwi16tbf.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSum\u001b[0m = arr.take(k).map(_.toString).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxTwoDigitsSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxTwoDigitsSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprwi16tbf.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSum\u001b[0m = arr.take(k).map(_.toString).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxTwoDigitsSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxTwoDigitsSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprwi16tbf.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSum\u001b[0m = arr.take(k).map(_.toString).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxTwoDigitsSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxTwoDigitsSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overl",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for(i <- 0 until k){\n            sum += arr(i)\n        }\n        for(i <- 0 until k){\n            val cur = arr(i)\n            val next = (i+1) < k ? arr(i+1) : 0L\n            val curDigit = cur % 10\n            val nextDigit = next % 10\n            if(curDigit == nextDigit){\n                sum += cur\n            }\n        }\n        result.toList().sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0nx7qilz.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nx7qilz.scala:13:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nx7qilz.scala:16:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0nx7qilz.scala:18:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnext\u001b[0m = (i+\u001b[31m1\u001b[0m) < k ? arr(i+\u001b[31m1\u001b[0m) : \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value ? is not a member of Long\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val max = (len / k).toInt\n        val min = (len - k).toInt\n        for (i<- 0 until min) {\n            val sum = arr(i) + arr(i + 1)\n            if (sum < 10) {\n                result.add(sum)\n            }\n        }\n        for (i<- 0 until max) {\n            val sum = arr(i) + arr(i + 1)\n            if (sum < 10) {\n                result.add(sum)\n            }\n        }\n        val sum = result.sum\n        if (sum < 10) {\n            sum\n        } else {\n            sum + 9\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv_2kd00k.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979626
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnxhrmibl.scala:21)\n\tat Problem.main(tmpnxhrmibl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        for(i <- 0 until k) {\n            val key = arr(i)\n            val value = result.getOrElse(key, 0)\n            result += key -> value + 1\n        }\n        val maxValue = result.maxBy(_._2)._2\n        val maxKey = result.maxBy(_._2)._1\n        val maxValue = maxValue / 10\n        val maxKey = maxKey / 10\n        val maxValue = maxValue * 10\n        val maxKey = maxKey * 10\n        val maxValue = maxValue + maxKey\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + k\n        val maxKey = maxKey + k\n        val maxValue = maxValue + \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmptyie6mcc.scala:67:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxValue\u001b[0m = maxValue + \n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptyie6mcc.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxValue\u001b[0m = maxValue / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptyie6mcc.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxKey\u001b[0m = maxKey / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxKey is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxKey\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptyie6mcc.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxValue\u001b[0m = maxValue * \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptyie6mcc.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxKey\u001b[0m = maxKey * \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxKey is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxKey\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be def",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0L)(_ + \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpscaszsdo.scala:36:51 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum23\u001b[0m = arr.take(k).foldLeft(\u001b[31m0L\u001b[0m)(_ + \n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpscaszsdo.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpscaszsdo.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val sum = 0L\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until k){\n            val twoDigits = arr.take(i).map(_.toString.length).max\n            sum += arr(i) + twoDigits\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpymtttcjh.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpymtttcjh.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpymtttcjh.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += arr(i) + twoDigits\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toArray\n        val len = arr.length\n        val maxLen = len - k\n        val maxLenIndex = maxLen - 1\n        val maxLenValue = arr(maxLenIndex)\n        val minLenValue = arr(0)\n        val minLenIndex = len - k\n        val minLenIndex = minLenIndex - 1\n        val minLenValue = arr(minLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val minLenValue = arr(0)\n        val minLenValue = arr(0)\n        val minLenIndex = len - k\n        val minLenIndex = minLenIndex - 1\n        val minLenValue = arr(minLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val minLenValue = arr(0)\n        val minLenValue = arr(0)\n        val minLenIndex = len - k\n        val minLenIndex = minLenIndex - 1\n        val minLenValue = arr(minLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val minLenValue = arr(0)\n        val minLenValue = arr(0)\n        val minLenIndex = len - k\n        val minLenIndex = minLenIndex - 1\n        val minLenValue = arr(minLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val minLenValue = arr(0)\n        val minLenValue = arr(0)\n        val minLenIndex = len - k\n        val minLenIndex = minLenIndex - 1\n        val minLenValue = arr(minLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val minLenValue = arr(0)\n        val minLenValue = arr(0)\n        val minLenIndex = len - k\n        val minLenIndex = minLenIndex - 1\n        val minLenValue = arr(minLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val minLenValue = arr(0)\n        val minLenValue = arr(0)\n        val minLenIndex = len - k\n        val minLenIndex = minLenIndex - 1\n        val minLenValue = arr(minLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValue = arr(maxLenIndex)\n        val minLenValue = arr(0)\n        val min\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgxhhixix.scala:67:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgxhhixix.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mminLenIndex\u001b[0m = minLenIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mminLenIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mminLenIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgxhhixix.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mminLenValue\u001b[0m = arr(minLenIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mminLenValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mminLenValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgxhhixix.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValue\u001b[0m = arr(maxLenIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgxhhixix.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValue\u001b[0m = arr(maxLenIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgxhhixix.scala:23:12 ---------------------------\u001b[0m",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val nums = arr.take(k)\n        for(i <- 0 until nums.length){\n            val num = nums(i)\n            val digit = num.toString.charAt(0)\n            val remainder = num.toString.substring(1).drop(1)\n            sum += if (digit == '1') 1 else 0\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpr60pot_1.scala:17:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += \u001b[33mif\u001b[0m (digit == \u001b[31m'1'\u001b[0m) \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^\u001b[0m\n\u001b[31m   |\u001b[0m                   expression expected but \u001b[31mif\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr60pot_1.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnums\u001b[0m = arr.take(k)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (k : Long)\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr60pot_1.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += \u001b[33mif\u001b[0m (digit == \u001b[31m'1'\u001b[0m) \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979630
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzenimqr.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzenimqr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxDigit = math.pow(10, arr.length-1)\n        for(i <- 0 until len) {\n            val digit = arr(i) % maxDigit\n            val sum = digit + result(i).asInstanceOf[Long]\n            if(sum < 10) {\n                result.append(sum)\n            }\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmouaz0t8.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979634
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        val len = arr.length\n        val maxTwoDigits = len / 2\n        val maxDigits = len - maxTwoDigits\n        val maxDigit = arr.max\n        val maxTwoDigit = arr.take(maxTwoDigits).max\n        val maxTwoDigitMax = maxTwoDigit * maxDigit\n        val maxTwoDigitMaxIndex = arr.lastIndexWhere(x => x > maxTwoDigitMax)\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex + 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = maxTwoDigitMaxIndex - 1\n        val maxTwoDigitMaxIndex = \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpt95l3o1r.scala:48:33 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitMaxIndex\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt95l3o1r.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitMaxIndex\u001b[0m = maxTwoDigitMaxIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxTwoDigitMaxIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxTwoDigitMaxIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt95l3o1r.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitMaxIndex\u001b[0m = maxTwoDigitMaxIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxTwoDigitMaxIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxTwoDigitMaxIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt95l3o1r.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitMaxIndex\u001b[0m = maxTwoDigitMaxIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxTwoDigitMaxIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxTwoDigitMaxIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt95l3o1r.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitMaxIndex\u001b[0m = max",
      "stdout": "",
      "timestamp": 1659979639
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n        val maxDigit = arr.max\n        val maxDigitIndex = arr.indexWhere(x => x == maxDigit)\n        val maxDigitIndex2 = maxDigitIndex + 1\n        val maxDigitIndex3 = maxDigitIndex + 2\n        val maxDigitIndex4 = maxDigitIndex + 3\n        val maxDigitIndex5 = maxDigitIndex + 4\n        val maxDigitIndex6 = maxDigitIndex + 5\n        val maxDigitIndex7 = maxDigitIndex + 6\n        val maxDigitIndex8 = maxDigitIndex + 7\n        val maxDigitIndex9 = maxDigitIndex + 8\n        val maxDigitIndex10 = maxDigitIndex + 9\n        val maxDigitIndex11 = maxDigitIndex + 10\n        val maxDigitIndex12 = maxDigitIndex + 11\n        val maxDigitIndex13 = maxDigitIndex + 12\n        val maxDigitIndex14 = maxDigitIndex + 13\n        val maxDigitIndex15 = maxDigitIndex + 14\n        val maxDigitIndex16 = maxDigitIndex + 15\n        val maxDigitIndex17 = maxDigitIndex + 16\n        val maxDigitIndex18 = maxDigitIndex + 17\n        val maxDigitIndex19 = maxDigitIndex + 18\n        val maxDigitIndex20 = maxDigitIndex + 19\n        val maxDigitIndex21 = maxDigitIndex + 20\n        val maxDigitIndex22 = maxDigitIndex + 21\n        val maxDigitIndex23 = maxDigitIndex + 22\n        val maxDigitIndex24 = maxDigitIndex + 23\n        val maxDigitIndex25 = maxDigitIndex + 24\n        val maxDigitIndex26 = maxDigitIndex + 25\n        val maxDigitIndex27 = maxDigitIndex + 26\n        val maxDigitIndex28 = maxDigitIndex + 27\n        val maxDigitIndex29 = maxDigitIndex + 28\n        val maxDigitIndex30 = maxDigitIndex + 29\n        val maxDigitIndex31 = maxDigitIndex + 30\n        val maxDigitIndex32 = maxDigitIndex + 31\n        val maxDigitIndex33 = maxDigitIndex + 32\n        val maxDigitIndex34 = maxDigitIndex + 33\n        val maxDigitIndex35 = maxDigitIndex + 34\n        val maxDigitIndex36 = maxDigitIndex + 35\n        val maxDigitIndex37 = maxDigitIndex + 36\n        val maxDigitIndex38 = maxDigitIndex + 37\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1v7775ih.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1v7775ih.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979640
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).size\n        val maxLength = arr.take(k).size\n        for (i <- 0 until maxLength) {\n            val element = arr(i)\n            if (element % 10 == 0 && element % 100 != 0) {\n                sum += element\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqkr9b6ku.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqkr9b6ku.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqkr9b6ku.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).size\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979639
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val max = (len / 2).toInt\n        val sum = 0L\n        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until max) {\n            val start = i * 2\n            val end = start + 2\n            val sum = arr(start) + arr(end)\n            if (sum > k) {\n                result.add(sum - k)\n            }\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp4rrs13cb.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4rrs13cb.scala:15:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val sum = 0\n        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        for(i <- 0 until k) {\n            val curSum = arr(i) + arr(i + 1)\n            val curSum2 = arr(i) + arr(i + 2)\n            val curSum3 = arr(i) + arr(i + 3)\n            val curSum4 = arr(i) + arr(i + 4)\n            val curSum5 = arr(i) + arr(i + 5)\n            val curSum6 = arr(i) + arr(i + 6)\n            val curSum7 = arr(i) + arr(i + 7)\n            val curSum8 = arr(i) + arr(i + 8)\n            val curSum9 = arr(i) + arr(i + 9)\n            val curSum10 = arr(i) + arr(i + 10)\n            val curSum11 = arr(i) + arr(i + 11)\n            val curSum12 = arr(i) + arr(i + 12)\n            val curSum13 = arr(i) + arr(i + 13)\n            val curSum14 = arr(i) + arr(i + 14)\n            val curSum15 = arr(i) + arr(i + 15)\n            val curSum16 = arr(i) + arr(i + 16)\n            val curSum17 = arr(i) + arr(i + 17)\n            val curSum18 = arr(i) + arr(i + 18)\n            val curSum19 = arr(i) + arr(i + 19)\n            val curSum20 = arr(i) + arr(i + 20)\n            val curSum21 = arr(i) + arr(i + 21)\n            val curSum22 = arr(i) + arr(i + 22)\n            val curSum23 = arr(i) + arr(i + 23)\n            val curSum24 = arr(i) + arr(i + 24)\n            val curSum25 = arr(i) + arr(i + 25)\n            val curSum26 = arr(i) + arr(i + 26)\n            val curSum27 = arr(i) + arr(i + 27)\n            val curSum28 = arr(i) + arr(i + 28)\n            val curSum29 = arr(i) + arr(i + 29)\n            val curSum30 = arr(i) + arr(i + 30)\n            val curSum31 = arr(i) + arr(i + 31)\n            val curSum32 = arr(i) + arr(i + 32)\n            val curSum33\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb8sts9dc.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb8sts9dc.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpb8sts9dc.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb8sts9dc.scala:16:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb8sts9dc.scala:59:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpb8sts9dc.scala:51:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659979642
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val twoDigits = arr.take(k).map(_.toString.length).max\n        arr.take(k).foreach(x => sum += x.toString.substring(0,twoDigits))\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1fpi5vch.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwoDigits\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1fpi5vch.scala:13:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => sum += x.toString.substring(\u001b[31m0\u001b[0m,twoDigits))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1fpi5vch.scala:13:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => sum += x.toString.substring(\u001b[31m0\u001b[0m,twoDigits))\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979643
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n        val minSum = arr.drop(maxLen).sum\n        return maxSum + minSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpz64blyvc.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979637
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzenimqr.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzenimqr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n        while (i < len) {\n            sum += arr(i)\n            i += 1\n            if (sum >= 10) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 10000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 10000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 10000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 10000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 10000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 10000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 10000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 10000000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 100000000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum >= 1000000000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnnoe1n7p.scala:138:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m138 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnnoe1n7p.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnnoe1n7p.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnnoe1n7p.scala:55:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m            \u001b[33mif\u001b[0m (sum >= \u001b[31m10000000000\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnnoe1n7p.scala:59:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mif\u001b[0m (sum >= \u001b[31m100000000000\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnnoe1n7p.scala:63:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mif\u001b[0m (sum >= \u001b[31m1000000000000\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnnoe1n7p.scala:67:23 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m            \u001b[33mif\u001b[0m (sum >= \u001b[31m10000000000000\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             ",
      "stdout": "",
      "timestamp": 1659979643
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val sum = 0L\n        val maxSum = 0L\n        for(i <- 0 until k){\n            val curSum = arr(i) + arr(i+1) + arr(i+2)\n            val curMaxSum = curSum + arr(i+3)\n            if(curMaxSum > maxSum){\n                maxSum = curMaxSum\n            }\n        }\n        return maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpevcsi02l.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpevcsi02l.scala:16:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpevcsi02l.scala:20:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                maxSum = curMaxSum\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val maxSum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979641
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7zaoeu5c.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zaoeu5c.scala:61:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979641
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        var i = 0\n        while (i < len) {\n            val curr = arr(i)\n            val next = (i + 1 < len) ? arr(i + 1) : 0\n            val diff = next - curr\n            if (diff <= 9) {\n                sum += curr\n                i += 2\n            } else if (diff <= 18) {\n                sum += curr + next\n                i += 1\n            } else {\n                sum += curr\n                i += 1\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmptdd1e64u.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptdd1e64u.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                sum += curr\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptdd1e64u.scala:23:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                sum += curr + next\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptdd1e64u.scala:26:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                sum += curr\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean sum.!=?\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979643
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzenimqr.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzenimqr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0L\n        val twoDigits = arr.take(k).filter(_ % 10 == 0)\n        for(i <- 0 until k) {\n            sum += twoDigits(i)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwlcgi6cf.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwlcgi6cf.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwlcgi6cf.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            sum += twoDigits(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979644
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzenimqr.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzenimqr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxDigits = len / 2\n        val maxDigit = arr(maxDigits)\n        val maxDigit2 = arr(maxDigits - 1)\n        val maxDigit3 = arr(maxDigits - 2)\n        val maxDigit4 = arr(maxDigits - 3)\n        val maxDigit5 = arr(maxDigits - 4)\n        val maxDigit6 = arr(maxDigits - 5)\n        val maxDigit7 = arr(maxDigits - 6)\n        val maxDigit8 = arr(maxDigits - 7)\n        val maxDigit9 = arr(maxDigits - 8)\n        val maxDigit10 = arr(maxDigits - 9)\n        val maxDigit11 = arr(maxDigits - 10)\n        val maxDigit12 = arr(maxDigits - 11)\n        val maxDigit13 = arr(maxDigits - 12)\n        val maxDigit14 = arr(maxDigits - 13)\n        val maxDigit15 = arr(maxDigits - 14)\n        val maxDigit16 = arr(maxDigits - 15)\n        val maxDigit17 = arr(maxDigits - 16)\n        val maxDigit18 = arr(maxDigits - 17)\n        val maxDigit19 = arr(maxDigits - 18)\n        val maxDigit20 = arr(maxDigits - 19)\n        val maxDigit21 = arr(maxDigits - 20)\n        val maxDigit22 = arr(maxDigits - 21)\n        val maxDigit23 = arr(maxDigits - 22)\n        val maxDigit24 = arr(maxDigits - 23)\n        val maxDigit25 = arr(maxDigits - 24)\n        val maxDigit26 = arr(maxDigits - 25)\n        val maxDigit27 = arr(maxDigits - 26)\n        val maxDigit28 = arr(maxDigits - 27)\n        val maxDigit29 = arr(maxDigits - 28)\n        val maxDigit30 = arr(maxDigits - 29)\n        val maxDigit31 = arr(maxDigits - 30)\n        val maxDigit32 = arr(maxDigits - 31)\n        val maxDigit33 = arr(maxDigits - 32)\n        val maxDigit34 = arr(maxDigits - 33)\n        val maxDigit35 = arr(maxDigits - 34)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg3_j2gbx.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg3_j2gbx.scala:49:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979643
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val sum = 0\n        var i = 0\n        var j = 0\n        while (i < len) {\n            val curr = arr(i)\n            if (j >= maxLen2) {\n                sum += curr\n                i += 1\n                j = 0\n            } else {\n                j += 1\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr5y4bzeb.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr5y4bzeb.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                sum += curr\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979643
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26 = arr.take(k).fold\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpx1ia7oqs.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx1ia7oqs.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979643
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val max = (len / 2).toInt\n        val min = (len - max).toInt\n        val sum = 0L\n        for(i <- 0 until max) {\n            sum += arr(i)\n        }\n        for(i <- 0 until min) {\n            sum += arr(i + max)\n        }\n        sum += arr(max - min)\n        sum += arr(max - min + 1)\n        sum += arr(max - min + 2)\n        sum += arr(max - min + 3)\n        sum += arr(max - min + 4)\n        sum += arr(max - min + 5)\n        sum += arr(max - min + 6)\n        sum += arr(max - min + 7)\n        sum += arr(max - min + 8)\n        sum += arr(max - min + 9)\n        sum += arr(max - min + 10)\n        sum += arr(max - min + 11)\n        sum += arr(max - min + 12)\n        sum += arr(max - min + 13)\n        sum += arr(max - min + 14)\n        sum += arr(max - min + 15)\n        sum += arr(max - min + 16)\n        sum += arr(max - min + 17)\n        sum += arr(max - min + 18)\n        sum += arr(max - min + 19)\n        sum += arr(max - min + 20)\n        sum += arr(max - min + 21)\n        sum += arr(max - min + 22)\n        sum += arr(max - min + 23)\n        sum += arr(max - min + 24)\n        sum += arr(max - min + 25)\n        sum += arr(max - min + 26)\n        sum += arr(max - min + 27)\n        sum += arr(max - min + 28)\n        sum += arr(max - min + 29)\n        sum += arr(max - min + 30)\n        sum += arr(max - min + 31)\n        sum += arr(max - min + 32)\n        sum += arr(max - min + 33)\n        sum += arr(max - min + 34)\n        sum += arr(max - min + 35)\n        sum += arr(max - min + 36)\n        sum += arr(max - min + 37)\n        sum += arr(max - min + 38)\n        sum += arr(max - min + 39)\n        sum += arr(max - min + 40)\n        sum += arr(max - min + 41)\n        sum += arr(max - min + 42)\n        sum += arr(max - min + 43)\n        sum += arr(max - min + 44)\n        sum += arr(max - min + 45)\n        sum += arr(max - \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmptb5umswi.scala:68:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m        sum += arr(max - \n\u001b[31m\u001b[31m   |\u001b[0m                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                        expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptb5umswi.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptb5umswi.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptb5umswi.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            sum += arr(i + max)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptb5umswi.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        sum += arr(max - min)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptb5umswi.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        sum += arr(max - min + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptb5umswi.scala:24:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        sum += arr(max - min + \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        value += is not a member of Lo",
      "stdout": "",
      "timestamp": 1659979649
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val twoDigitSum = arr.take(k).foldLeft(0L)(_ + _)\n        val threeDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _)\n        val fourDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _)\n        val fiveDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _)\n        val sixDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _)\n        val sevenDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _)\n        val eightDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _ + _)\n        val nineDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _ + _ + _)\n        val tenDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _ + _ + _ + _)\n        val elevenDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _)\n        val twelveDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _)\n        val thirteenDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _)\n        val fourteenDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _)\n        val fifteenDigitSum = arr.take(k).foldLeft(0L)(_ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmplz7j_rw9.scala:27:106 --------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfifteenDigitSum\u001b[0m = arr.take(k).foldLeft(\u001b[31m0L\u001b[0m)(_ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + _ + \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplz7j_rw9.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplz7j_rw9.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979643
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val max = (sum % 10).max(0)\n        val min = (sum % 10).min(0)\n        val max2 = max / 10\n        val min2 = min / 10\n        val max3 = max2 / 10\n        val min3 = min2 / 10\n        val max4 = max3 / 10\n        val min4 = min3 / 10\n        val max5 = max4 / 10\n        val min5 = min4 / 10\n        val max6 = max5 / 10\n        val min6 = min5 / 10\n        val max7 = max6 / 10\n        val min7 = min6 / 10\n        val max8 = max7 / 10\n        val min8 = min7 / 10\n        val max9 = max8 / 10\n        val min9 = min8 / 10\n        val max10 = max9 / 10\n        val min10 = min9 / 10\n        val max11 = max10 / 10\n        val min11 = min10 / 10\n        val max12 = max11 / 10\n        val min12 = min11 / 10\n        val max13 = max12 / 10\n        val min13 = min12 / 10\n        val max14 = max13 / 10\n        val min14 = min13 / 10\n        val max15 = max14 / 10\n        val min15 = min14 / 10\n        val max16 = max15 / 10\n        val min16 = min15 / 10\n        val max17 = max16 / 10\n        val min17 = min16 / 10\n        val max18 = max17 / 10\n        val min18 = min17 / 10\n        val max19 = max18 / 10\n        val min19 = min18 / 10\n        val max20 = max19 / 10\n        val min20 = min19 / 10\n        val max21 = max20 / 10\n        val min21 = min20 / 10\n        val max22 = max21 / 10\n        val min22 = min21 / 10\n        val max23 = max22 / 10\n        val min23 = min22 / 10\n        val max24 = max23 / 10\n        val min24 = min23 / 10\n        val max25 = max24 / 10\n        val min25 = min24 / 10\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt_5w113i.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt_5w113i.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979643
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val twoDigits = arr.take(k).map(_.toString.length).max\n        arr.take(k).foreach(x => sum += x)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqlnf5ez.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwoDigits\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdqlnf5ez.scala:13:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqlnf5ez.scala:13:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => sum += x)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979644
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigit = math.max(arr.take(k).map(_.toString.length))\n        val maxDigitSum = math.max(arr.take(k).map(_.toString).map(_.length))\n        val maxDigitSum2 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length))\n        val maxDigitSum3 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length).map(_.toString.length))\n        val maxDigitSum4 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length).map(_.toString.length).map(_.toString.length))\n        val maxDigitSum5 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length))\n        val maxDigitSum6 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length))\n        val maxDigitSum7 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length))\n        val maxDigitSum8 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length))\n        val maxDigitSum9 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length))\n        val maxDigitSum10 = math.max(arr.take(k).map(_.toString).map(_.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.toString.length).map(_.to\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzyuxcp81.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzyuxcp81.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyuxcp81.scala:18:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = math.max(arr.take(k).map(_.toString.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpzyuxcp81.scala:18:28 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = math.max(arr.take(k).map(_.toString.length))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments (List[Int])\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzyuxcp81.scala:19:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitSum\u001b[0m = math.max(arr.take(k).map(_.toString).map(_.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (k : Long)\n\u001b[31m   |\u001b[0m         ",
      "stdout": "",
      "timestamp": 1659979648
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxDigit = arr.take(k).max\n        val maxDigitIndex = arr.lastIndexWhere(x => x == maxDigit)\n        val maxDigitIndexInRange = maxDigitIndex - k\n        val maxDigitIndexInRangeInRange = maxDigitIndexInRange / 2\n        val maxDigitIndexInRangeInRangeInRange = maxDigitIndexInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / 2\n        val maxDigit\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmpyo3caf.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmpyo3caf.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRange\u001b[0m = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRange / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRange is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRange\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmpyo3caf.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\u001b[0m = maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmpyo3caf.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitIndexInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRangeInRange\u001b[0m = maxDigitIndexInRangeInRan",
      "stdout": "",
      "timestamp": 1659979645
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength2 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength3 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength4 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength5 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength6 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength7 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength8 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength9 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength10 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength11 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength12 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength13 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength14 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength15 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength16 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength17 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength18 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength19 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength20 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength21 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength22 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength23 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength24 = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength25 = arr.take(k\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2pt6jxuk.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2pt6jxuk.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2pt6jxuk.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2pt6jxuk.scala:19:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength2\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2pt6jxuk.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength3\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch",
      "stdout": "",
      "timestamp": 1659979652
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        val len = arr.size\n        val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3 = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n        val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n        val max17 = max / 17\n        val max18 = max / 18\n        val max19 = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n        val max22 = max / 22\n        val max23 = max / 23\n        val max24 = max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n        val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n        val max35 = max / 35\n        val max36 = max / 36\n        val max37 = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n        val max40 = max / 40\n        val max41 = max / 41\n        val max42 = max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n        val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n        val max53 = max / 53\n        val max54 = max / 54\n        val max55 = max / 55\n        val max56 = max / \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmplv04byd3.scala:68:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax56\u001b[0m = max / \n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplv04byd3.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplv04byd3.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979650
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_ + _)\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0t6_h4rp.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0t6_h4rp.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0t6_h4rp.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979651
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n        while (i < len) {\n            sum += arr(i)\n            i += 1\n            if (sum < 10) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 10000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 10000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 10000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 10000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 10000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 10000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 10000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 10000000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 100000000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n            if (sum < 1000000000000000000000000000) {\n                sum += arr(i)\n                i += 1\n            }\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpddm88x6s.scala:138:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m138 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpddm88x6s.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpddm88x6s.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpddm88x6s.scala:55:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m            \u001b[33mif\u001b[0m (sum < \u001b[31m10000000000\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpddm88x6s.scala:59:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m            \u001b[33mif\u001b[0m (sum < \u001b[31m100000000000\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpddm88x6s.scala:63:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m            \u001b[33mif\u001b[0m (sum < \u001b[31m1000000000000\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpddm88x6s.scala:67:22 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m            \u001b[33mif\u001b[0m (sum < \u001b[31m10000000000000\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      num",
      "stdout": "",
      "timestamp": 1659979652
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            sum += arr(i)\n            if (sum > k) {\n                sum += arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i + k)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpibjz2wg9.scala:109:4 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m109 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m    ^\u001b[0m\n\u001b[31m    |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpibjz2wg9.scala:119:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m119 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpibjz2wg9.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpibjz2wg9.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                sum += arr(i + k)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpibjz2wg9.scala:16:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                sum += arr(i + k)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpibjz2wg9.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                sum -= arr(i + k)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value -= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpibjz2wg9.scala:19:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                sum -= arr(i + k)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Long\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[",
      "stdout": "",
      "timestamp": 1659979658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n        val len = arr.length\n        val maxDigit = arr.take(k).max\n        val maxDigitIndex = arr.indexOf(maxDigit)\n        val maxDigitCount = k - maxDigitIndex\n        val maxDigitSum = arr.take(maxDigitIndex).sum\n        val maxDigitSumIndex = arr.indexOf(maxDigitSum)\n        val maxDigitSumCount = k - maxDigitSumIndex\n        val maxDigitSumSum = arr.take(maxDigitSumIndex).sum\n        val maxDigitSumSumIndex = arr.indexOf(maxDigitSumSum)\n        val maxDigitSumSumCount = k - maxDigitSumSumIndex\n        val maxDigitSumSumSum = arr.take(maxDigitSumSumIndex).sum\n        val maxDigitSumSumSumIndex = arr.indexOf(maxDigitSumSumSum)\n        val maxDigitSumSumSumCount = k - maxDigitSumSumSumIndex\n        val maxDigitSumSumSumSum = arr.take(maxDigitSumSumSumIndex).sum\n        val maxDigitSumSumSumSumIndex = arr.indexOf(maxDigitSumSumSumSum)\n        val maxDigitSumSumSumSumCount = k - maxDigitSumSumSumSumIndex\n        val maxDigitSumSumSumSumSum = arr.take(maxDigitSumSumSumSumIndex).sum\n        val maxDigitSumSumSumSumSumIndex = arr.indexOf(maxDigitSumSumSumSumSum)\n        val maxDigitSumSumSumSumSumCount = k - maxDigitSumSumSumSumSumIndex\n        val maxDigitSumSumSumSumSumSum = arr.take(maxDigitSumSumSumSumSumIndex).sum\n        val maxDigitSumSumSumSumSumSumIndex = arr.indexOf(maxDigitSumSumSumSumSum)\n        val maxDigitSumSumSumSumSumSumCount = k - maxDigitSumSumSumSumSumSumIndex\n        val maxDigitSumSumSumSumSumSumSum = arr.take(maxDigitSumSumSumSumSumSumIndex).sum\n        val maxDigitSumSumSumSumSumSumSumIndex = arr.indexOf(maxDigitSumSumSumSumSumSumSum)\n        val maxDigitSumSumSumSumSumSumSumCount = k - maxDigitSumSumSumSumSumSumSumSumIndex\n        val maxDigitSumSumSumSumSumSumSumSum = arr.take(maxDigitSumSumSumSumSumSumSumIndex).sum\n        val maxDigitSumSumSumSumSumSumSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9oy_s5th.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9oy_s5th.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9oy_s5th.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9oy_s5th.scala:37:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitSumSumSumSumSumSumSumCount\u001b[0m = k - maxDigitSumSumSumSumSumSumSumSumIndex\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: maxDigitSumSumSumSumSumSumSumSumIndex\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9oy_s5th.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659979652
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigit = math.ceil(math.log10(sum))\n        var j = 0\n        while (j < arr.length) {\n            val digit = math.ceil(math.log10(arr(j)))\n            if (digit <= maxDigit) {\n                result += arr(j)\n                j += 1\n            }\n        }\n        sum.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6ruj8tg8.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979649
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnxhrmibl.scala:21)\n\tat Problem.main(tmpnxhrmibl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val maxSum = arr.take(k).foldLeft(0L)(_ + _)\n        for(i <- 0 until k) {\n            val curSum = arr(i) + arr(i + 1)\n            sum += curSum\n            if(curSum > maxSum) {\n                maxSum = curSum\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0t396zc6.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0t396zc6.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0t396zc6.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += curSum\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp0t396zc6.scala:19:23 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                maxSum = curSum\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Reassignment to val maxSum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979655
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val maxSum = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0L)(_ + _)\n        for(i <- 0 until k) {\n            val sum = arr(i) + arr(i + 1)\n            val maxSum = arr.take(i + 1).foldLeft(0L)(_ + _)\n            val maxSum2 = arr.take(i + 1).foldLeft(0L)(_ + _)\n            sum += maxSum\n            sum += maxSum2\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum2\n            sum += maxSum - maxSum\n            sum += maxSum + maxSum2\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += maxSum - maxSum2\n            sum += maxSum + maxSum\n            sum += \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp5eouy4fm.scala:66:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m            sum += \n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5eouy4fm.scala:77:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m77 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp5eouy4fm.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5eouy4fm.scala:16:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5eouy4fm.scala:76:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp5eouy4fm.scala:68:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m68 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659979655
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val sum = 0\n        var i = 0\n        while (i < len) {\n            if (arr(i).toString.length == maxTwoDigits) {\n                sum += arr(i)\n                i += 1\n            } else {\n                i += 1\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjqi1khl1.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjqi1khl1.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979655
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n        while (i < len) {\n            val element = arr(i)\n            sum += element\n            if (sum >= 10) {\n                sum += element - 10\n            }\n            i += 1\n        }\n        if (sum > k) {\n            sum -= k\n        }\n        val result = sum\n        return result.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa26kqmpe.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mresult is already defined as \u001b[33mvalue\u001b[0m \u001b[35mresult\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpa26kqmpe.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa26kqmpe.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa26kqmpe.scala:25:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            sum -= k\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value -= is not a member of Int - did you mean Int.!=?\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979655
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpf8i9uyfz.scala:59:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf8i9uyfz.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf8i9uyfz.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979655
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxDigit = math.max(arr.take(k).map(_.toString.length))\n        for(i <- 0 until len) {\n            val digit = math.min(arr.take(i).map(_.toString.length), maxDigit)\n            result += arr.take(i).map(_.toString.substring(0,digit))\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphx4fbfqe.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphx4fbfqe.scala:13:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = math.max(arr.take(k).map(_.toString.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmphx4fbfqe.scala:13:28 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = math.max(arr.take(k).map(_.toString.length))\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments (List[Int])\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979656
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < len) {\n            val cur = arr(i)\n            sum += cur\n            i += 1\n            if (sum >= k) {\n                val cur2 = arr(i)\n                sum += cur2\n                i += 1\n            }\n            if (sum >= k) {\n                val cur3 = arr(i)\n                sum += cur3\n                i += 1\n            }\n            if (sum >= k) {\n                val cur4 = arr(i)\n                sum += cur4\n                i += 1\n            }\n            if (sum >= k) {\n                val cur5 = arr(i)\n                sum += cur5\n                i += 1\n            }\n            if (sum >= k) {\n                val cur6 = arr(i)\n                sum += cur6\n                i += 1\n            }\n            if (sum >= k) {\n                val cur7 = arr(i)\n                sum += cur7\n                i += 1\n            }\n            if (sum >= k) {\n                val cur8 = arr(i)\n                sum += cur8\n                i += 1\n            }\n            if (sum >= k) {\n                val cur9 = arr(i)\n                sum += cur9\n                i += 1\n            }\n            if (sum >= k) {\n                val cur10 = arr(i)\n                sum += cur10\n                i += 1\n            }\n            if (sum >= k) {\n                val cur11 = arr(i)\n                sum += cur11\n                i += 1\n            }\n            if (sum >= k) {\n                val cur12 = arr(i)\n                sum += cur12\n                i += 1\n            }\n            if (sum >= k) {\n                val cur13 = arr(i)\n                sum += cur13\n                i += 1\n            }\n            if (sum >= k) {\n                val cur14 = arr(i)\n                sum += cur14\n                i += 1\n            }\n            if (sum >= k) {\n                val cur15 = arr(i)\n                sum += cur15\n                i += 1\n            }\n            if (sum >= k) {\n                val cur16 = arr(i)\n                sum += cur16\n                i += 1\n            }\n            if (sum >= k) {\n                val cur17 = arr(i)\n                sum += cur17\n                i += 1\n            }\n            if (sum >= k) {\n                val cur18 = arr(i)\n                sum += cur18\n                i += 1\n            }\n            if (sum >= k) {\n                val cur19 = arr(i)\n                sum += cur19\n                i += 1\n            }\n            if (sum >= k) {\n                val cur20 = arr(i)\n                sum += cur20\n                i += 1\n            }\n            if (sum >= k) {\n                val cur21 = arr(i)\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxvuz9qm5.scala:128:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m128 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpxvuz9qm5.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvuz9qm5.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvuz9qm5.scala:16:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m 16 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < len) {\n\u001b[31m\u001b[31m    |\u001b[0m        ^\u001b[0m\n\u001b[31m    |\u001b[0m        Found:    Unit\n\u001b[31m    |\u001b[0m        Required: Long\n\u001b[31m 17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcur\u001b[0m = arr(i)\n\u001b[31m 18 |\u001b[0m            sum += cur\n\u001b[31m 19 |\u001b[0m            i += \u001b[31m1\u001b[0m\n\u001b[31m 20 |\u001b[0m            \u001b[33mif\u001b[0m (sum >= k) {\n\u001b[31m 21 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mcur2\u001b[0m = arr(i)\n\u001b[31m 22 |\u001b[0m                sum += cur2\n\u001b[31m 23 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m 24 |\u001b[0m            }\n\u001b[31m 25 |\u001b[0m            \u001b[33mif\u001b[0m (sum >= k) {\n\u001b[31m 26 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mcur3\u001b[0m = arr(i)\n\u001b[31m 27 |\u001b[0m                sum += cur3\n\u001b[31m 28 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m 29 |\u001b[0m            }\n\u001b[31m 30 |\u001b[0m            \u001b[33mif\u001b[0m (sum >= k) {\n\u001b[31m 31 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mcur4\u001b[0m = arr(i)\n\u001b[31m 32 |\u001b[0m                sum += cur4\n\u001b[31m 33 |\u001b[0m                i += \u001b[31m1\u001b[0m\n\u001b[31m 34 |\u001b[0m            }\n\u001b[3",
      "stdout": "",
      "timestamp": 1659979656
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk1jnj8vh.scala:21)\n\tat Problem.main(tmpk1jnj8vh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val maxDigits = len - k\n        val maxDigitSum = arr.take(k).sum\n        val maxDigitSum2 = maxDigitSum * maxDigits\n        val maxDigitSum3 = maxDigitSum2 * maxDigits\n        val maxDigitSum4 = maxDigitSum3 * maxDigits\n        val maxDigitSum5 = maxDigitSum4 * maxDigits\n        val maxDigitSum6 = maxDigitSum5 * maxDigits\n        val maxDigitSum7 = maxDigitSum6 * maxDigits\n        val maxDigitSum8 = maxDigitSum7 * maxDigits\n        val maxDigitSum9 = maxDigitSum8 * maxDigits\n        val maxDigitSum10 = maxDigitSum9 * maxDigits\n        val maxDigitSum11 = maxDigitSum10 * maxDigits\n        val maxDigitSum12 = maxDigitSum11 * maxDigits\n        val maxDigitSum13 = maxDigitSum12 * maxDigits\n        val maxDigitSum14 = maxDigitSum13 * maxDigits\n        val maxDigitSum15 = maxDigitSum14 * maxDigits\n        val maxDigitSum16 = maxDigitSum15 * maxDigits\n        val maxDigitSum17 = maxDigitSum16 * maxDigits\n        val maxDigitSum18 = maxDigitSum17 * maxDigits\n        val maxDigitSum19 = maxDigitSum18 * maxDigits\n        val maxDigitSum20 = maxDigitSum19 * maxDigits\n        val maxDigitSum21 = maxDigitSum20 * maxDigits\n        val maxDigitSum22 = maxDigitSum21 * maxDigits\n        val maxDigitSum23 = maxDigitSum22 * maxDigits\n        val maxDigitSum24 = maxDigitSum23 * maxDigits\n        val maxDigitSum25 = maxDigitSum24 * maxDigits\n        val maxDigitSum26 = maxDigitSum25 * maxDigits\n        val maxDigitSum27 = maxDigitSum26 * maxDigits\n        val maxDigitSum28 = maxDigitSum27 * maxDigits\n        val maxDigitSum29 = maxDigitSum28 * maxDigits\n        val maxDigitSum30 = maxDigitSum29 * maxDigits\n        val maxDigitSum31 = maxDigitSum30 * maxDigits\n        val maxDigitSum32 = maxDigitSum31 * maxDigits\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbawno6ec.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbawno6ec.scala:47:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979656
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val maxSum = arr.take(k).sum\n        val maxSum2 = maxSum * maxSum\n        val maxSum3 = maxSum2 * maxSum\n        val maxSum4 = maxSum3 * maxSum\n        val maxSum5 = maxSum4 * maxSum\n        val maxSum6 = maxSum5 * maxSum\n        val maxSum7 = maxSum6 * maxSum\n        val maxSum8 = maxSum7 * maxSum\n        val maxSum9 = maxSum8 * maxSum\n        val maxSum10 = maxSum9 * maxSum\n        val maxSum11 = maxSum10 * maxSum\n        val maxSum12 = maxSum11 * maxSum\n        val maxSum13 = maxSum12 * maxSum\n        val maxSum14 = maxSum13 * maxSum\n        val maxSum15 = maxSum14 * maxSum\n        val maxSum16 = maxSum15 * maxSum\n        val maxSum17 = maxSum16 * maxSum\n        val maxSum18 = maxSum17 * maxSum\n        val maxSum19 = maxSum18 * maxSum\n        val maxSum20 = maxSum19 * maxSum\n        val maxSum21 = maxSum20 * maxSum\n        val maxSum22 = maxSum21 * maxSum\n        val maxSum23 = maxSum22 * maxSum\n        val maxSum24 = maxSum23 * maxSum\n        val maxSum25 = maxSum24 * maxSum\n        val maxSum26 = maxSum25 * maxSum\n        val maxSum27 = maxSum26 * maxSum\n        val maxSum28 = maxSum27 * maxSum\n        val maxSum29 = maxSum28 * maxSum\n        val maxSum30 = maxSum29 * maxSum\n        val maxSum31 = maxSum30 * maxSum\n        val maxSum32 = maxSum31 * maxSum\n        val maxSum33 = maxSum32 * maxSum\n        val maxSum34 = maxSum33 * maxSum\n        val maxSum35 = maxSum34 * maxSum\n        val maxSum36 = maxSum35 * maxSum\n        val maxSum37 = maxSum36 * maxSum\n        val maxSum38 = maxSum37 * maxSum\n        val maxSum39 = maxSum38 * maxSum\n        val maxSum40 = maxSum39 * maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsxp46akz.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsxp46akz.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979655
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxDigit = math.pow(10, maxLen)\n        for(i <- 0 until len) {\n            val cur = arr(i)\n            val curDigit = math.floor(cur / maxDigit)\n            val curDigit2 = cur % maxDigit\n            val curDigit3 = math.floor(curDigit2 / 10)\n            val curDigit4 = curDigit2 % 10\n            val curDigit5 = math.floor(curDigit3 / 100)\n            val curDigit6 = curDigit3 % 100\n            val curDigit7 = math.floor(curDigit4 / 1000)\n            val curDigit8 = curDigit4 % 1000\n            val curDigit9 = math.floor(curDigit5 / 10000)\n            val curDigit10 = curDigit5 % 10000\n            val curDigit11 = math.floor(curDigit6 / 100000)\n            val curDigit12 = curDigit6 % 100000\n            val curDigit13 = math.floor(curDigit7 / 1000000)\n            val curDigit14 = curDigit7 % 1000000\n            val curDigit15 = math.floor(curDigit8 / 10000000)\n            val curDigit16 = curDigit8 % 10000000\n            val curDigit17 = math.floor(curDigit9 / 100000000)\n            val curDigit18 = curDigit9 % 100000000\n            val curDigit19 = math.floor(curDigit10 / 1000000000)\n            val curDigit20 = curDigit10 % 1000000000\n            val curDigit21 = math.floor(curDigit11 / 10000000000)\n            val curDigit22 = curDigit11 % 10000000000\n            val curDigit23 = math.floor(curDigit12 / 100000000000)\n            val curDigit24 = curDigit12 % 100000000000\n            val curDigit25 = math.floor(curDigit13 / 1000000000000)\n            val curDigit26 = curDigit13 % 1000000000000\n            val curDigit27 = math.floor(curDigit14 / 10000000000000)\n            val curDigit28 = curDigit14 % 10000000000000\n            val curDigit29 = math.floor(curDigit15 / 1000000000000000)\n            val curDigit30 = curDigit15 % 1000000000000000\n            val curDigit31 = math.floor(curDigit16 / 10000000000000000)\n            val curDigit32 = curDigit16 % 10000000000000000\n            val curDigit33 = math.floor(curDigit17\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp15eu365m.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp15eu365m.scala:61:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp15eu365m.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp15eu365m.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp15eu365m.scala:38:53 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcurDigit21\u001b[0m = math.floor(curDigit11 / \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp15eu365m.scala:39:42 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcurDigit22\u001b[0m = curDigit11 % \u001b[31m10000000000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmp15eu365m.scala:40:53 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcurDigit23\u001b[0m = math.floor(curDigit12 / \u001b[31m100000",
      "stdout": "",
      "timestamp": 1659979656
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i <- 0 until k) {\n            sum += arr(i)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 1)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 2)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 3)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 4)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 5)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 6)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 7)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 8)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 9)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 10)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 11)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 12)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 13)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 14)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 15)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 16)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 17)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 18)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 19)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 20)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 21)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 22)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 23)\n        }\n        for (i <- 0 until k) {\n            sum += arr(i + k + 24)\n        }\n        for (i <- 0 until \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphq7tsg7p.scala:91:25 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m91 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until \n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphq7tsg7p.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphq7tsg7p.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (k : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphq7tsg7p.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (k : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphq7tsg7p.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += arr(i + k)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphq7tsg7p.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += arr(i + k)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^",
      "stdout": "",
      "timestamp": 1659979666
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxSum = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0L)(_ + _)\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkg3gy3c_.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpkg3gy3c_.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkg3gy3c_.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkg3gy3c_.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3 = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n        val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n        val max17 = max / 17\n        val max18 = max / 18\n        val max19 = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n        val max22 = max / 22\n        val max23 = max / 23\n        val max24 = max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n        val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n        val max35 = max / 35\n        val max36 = max / 36\n        val max37 = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n        val max40 = max / 40\n        val max41 = max / 41\n        val max42 = max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n        val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n        val max53 = max / 53\n        val max54 = max / 54\n        val max55 = max / 55\n        val max56 = max / 56\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp12izel48.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp12izel48.scala:70:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979657
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxDigit = arr.take(k).max\n        val maxDigitCount = arr.count(_ == maxDigit)\n        val maxDigitCount = maxDigitCount / 2\n        val maxDigitCount = maxDigitCount + 1\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigitCount * 2\n        val maxDigitCount = maxDigit\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0bzm4nu3.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitCount\u001b[0m = maxDigitCount / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigitCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigitCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0bzm4nu3.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitCount\u001b[0m = maxDigitCount + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigitCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigitCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0bzm4nu3.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitCount\u001b[0m = maxDigitCount * \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigitCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigitCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0bzm4nu3.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitCount\u001b[0m = maxDigitCount * \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigitCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigitCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0bzm4nu3.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitCount\u001b[0m = maxDigitCount * \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^",
      "stdout": "",
      "timestamp": 1659979658
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdg79w3k_.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdg79w3k_.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp4w218wmx.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4w218wmx.scala:61:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = mutable.ArrayBuffer.empty[Long]\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpck2lg1rw.scala:59:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpck2lg1rw.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = mutable.ArrayBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpck2lg1rw.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until len) {\n            val digits = arr(i).toString.length\n            val digit = arr(i).toString.charAt(digits)\n            val sum = digit + digit + digit\n            if(sum > maxDigits) {\n                result += arr(i)\n            }\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7c9oxe6d.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7c9oxe6d.scala:13:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigits\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979662
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n        val max = (arr(0).toString.length + arr(len-1).toString.length)\n        var sum = 0L\n        for (i <- 0 until len) {\n            sum += arr(i).toString.length\n            if (sum > k) {\n                sum += arr(i).toString.substring(sum - k).toLong\n            }\n            if (sum > max) {\n                sum += arr(i).toString.substring(sum - max).toLong\n            }\n            if (sum == max) {\n                result += arr(i).toString.substring(sum - max).toLong\n            }\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpxw4knmoj.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxw4knmoj.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979661
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val max = (len - k).toInt\n        val sum = 0L\n        for(i <- 0 until max){\n            val temp = arr(i).toInt\n            sum += temp\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvkw1wc_r.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvkw1wc_r.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += temp\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979665
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0L\n        var j = 0L\n        while (i < k) {\n            sum += arr(i).toLong\n            i += 1L\n        }\n        while (j < k) {\n            sum += arr(j).toLong\n            j += 1L\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyc2sx9sq.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += arr(i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyc2sx9sq.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += arr(i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyc2sx9sq.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            sum += arr(j).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyc2sx9sq.scala:19:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            sum += arr(j).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (j : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979666
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) + x))\n        val maxValue = result.get(arr.last).max\n        val maxKeys = result.filter(_._2 == maxValue).keys\n        val maxKeysCount = maxKeys.size\n        val maxKeysSum = maxKeys.sum\n        val maxKeysSumOfDigits = maxKeysSum / 10\n        val maxKeysSumOfDigitsLessThanK = maxKeysSumOfDigits - k\n        val maxKeysSumOfDigitsLessThanKAndLessThanK = maxKeysSumOfDigitsLessThanK + k\n        val maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanK = maxKeysSumOfDigitsLessThanKAndLessThanK + k\n        val maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanK = maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanK + k\n        val maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK = maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanK + k\n        val maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK = maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK + k\n        val maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK = maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK + k\n        val maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK = maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK + k\n        val maxKeysSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwrcms1xg.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwrcms1xg.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcms1xg.scala:12:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => result.put(x, result.getOrElse(x, \u001b[31m0\u001b[0m) + x))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwrcms1xg.scala:24:114 --------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK\u001b[0m = maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK + k\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  maxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwrcms1xg.scala:25:126 --------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxKeysSumOfDigitsLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanKAndLessThanK\u001b[0m",
      "stdout": "",
      "timestamp": 1659979665
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0\n        val twoDigitSum = arr.take(k).foldLeft(0) { (sum, element) =>\n            val digit = element % 10\n            val newSum = sum + digit\n            if (newSum > 9) {\n                newSum - 10\n            } else {\n                newSum\n            }\n        }\n        sum + twoDigitSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpn17sa0po.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979663
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvkeczkrc.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvkeczkrc.scala:11:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum\u001b[0m = arr.take(k).foldLeft(\u001b[31m0\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (k : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvkeczkrc.scala:11:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum\u001b[0m = arr.take(k).foldLeft(\u001b[31m0\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    Long\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvkeczkrc.scala:12:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum2\u001b[0m = arr.take(k).foldLeft(\u001b[31m0\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (k : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvkeczkrc.scala:12:46 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum2\u001b[0m = arr.take(k).foldLeft(\u001b[31m0\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                              Found:    Long\n\u001b[31m   |\u001b[0m                                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "stdout": "",
      "timestamp": 1659979674
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for(i <- 0 until arr.length){\n            sum += arr(i)\n            if(sum > k){\n                sum -= arr(i)\n            }\n            if(sum > k){\n                result.add(sum)\n                sum = 0L\n            }\n        }\n        if(sum > k){\n            result.add(sum)\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvug1e4_w.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979665
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0u4g3m_a.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0u4g3m_a.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979667
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val maxSum = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum24 = arr.take(k).foldLeft(0L)(_\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfl17spw5.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfl17spw5.scala:11:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum\u001b[0m = arr.take(k).foldLeft(\u001b[31m0L\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (k : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfl17spw5.scala:12:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum2\u001b[0m = arr.take(k).foldLeft(\u001b[31m0L\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (k : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfl17spw5.scala:13:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum3\u001b[0m = arr.take(k).foldLeft(\u001b[31m0L\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (k : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfl17spw5.scala:14:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum4\u001b[0m = arr.take(k).foldLeft(\u001b[31m0L\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (k : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type ",
      "stdout": "",
      "timestamp": 1659979673
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0L\n        while (i < k) {\n            sum += arr(i)\n            i += 1L\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp50gm960w.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50gm960w.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979669
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzenimqr.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzenimqr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu681_rcf.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu681_rcf.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979668
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0u4g3m_a.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0u4g3m_a.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979667
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2ljo88fw.scala:24)\n\tat Problem.main(tmp2ljo88fw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979669
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val twoDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until k) {\n            sum += arr(i).toString.substring(0,twoDigits).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpm9x1e1r0.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9x1e1r0.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm9x1e1r0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            sum += arr(i).toString.substring(\u001b[31m0\u001b[0m,twoDigits).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979669
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var maxSum = 0L\n        var maxSumIndex = 0L\n        var maxSumIndex2 = 0L\n        var maxSumIndex3 = 0L\n        var maxSumIndex4 = 0L\n        var maxSumIndex5 = 0L\n        var maxSumIndex6 = 0L\n        var maxSumIndex7 = 0L\n        var maxSumIndex8 = 0L\n        var maxSumIndex9 = 0L\n        var maxSumIndex10 = 0L\n        var maxSumIndex11 = 0L\n        var maxSumIndex12 = 0L\n        var maxSumIndex13 = 0L\n        var maxSumIndex14 = 0L\n        var maxSumIndex15 = 0L\n        var maxSumIndex16 = 0L\n        var maxSumIndex17 = 0L\n        var maxSumIndex18 = 0L\n        var maxSumIndex19 = 0L\n        var maxSumIndex20 = 0L\n        var maxSumIndex21 = 0L\n        var maxSumIndex22 = 0L\n        var maxSumIndex23 = 0L\n        var maxSumIndex24 = 0L\n        var maxSumIndex25 = 0L\n        var maxSumIndex26 = 0L\n        var maxSumIndex27 = 0L\n        var maxSumIndex28 = 0L\n        var maxSumIndex29 = 0L\n        var maxSumIndex30 = 0L\n        var maxSumIndex31 = 0L\n        var maxSumIndex32 = 0L\n        var maxSumIndex33 = 0L\n        var maxSumIndex34 = 0L\n        var maxSumIndex35 = 0L\n        var maxSumIndex36 = 0L\n        var maxSumIndex37 = 0L\n        var maxSumIndex38 = 0L\n        var maxSumIndex39 = 0L\n        var maxSumIndex40 = 0L\n        var maxSumIndex41 = 0L\n        var maxSumIndex42 = 0L\n        var maxSumIndex43 = 0L\n        var maxSumIndex44 = 0L\n        var maxSumIndex45 = 0L\n        var maxSumIndex46 = 0L\n        var maxSumIndex47 = 0L\n        var maxSumIndex48 = 0L\n        var maxSumIndex49 = 0L\n        var maxSumIndex50 = 0L\n        var maxSumIndex51 = 0L\n        var maxSumIndex52 = 0L\n        var maxSumIndex53 = 0L\n        var maxSumIndex54 = 0L\n        var maxSumIndex55 = 0L\n        var maxSumIndex56 = 0L\n        var maxSumIndex57 = 0L\n        var maxSumIndex58 = 0L\n        var maxSumIndex59 = 0L\n        var maxSumIndex60 = 0L\n        var maxSumIndex61 = 0L\n        var maxSumIndex62 = 0L\n        var maxSumIndex63 = 0\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mu_ddx2.scala:76:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m76 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979667
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until k) {\n            val twoDigits = arr.take(i).map(_.toString.length).max\n            sum += if (twoDigits > maxTwoDigits) 0 else arr.take(i).sum\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpxm5c8z_s.scala:17:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += \u001b[33mif\u001b[0m (twoDigits > maxTwoDigits) \u001b[31m0\u001b[0m \u001b[33melse\u001b[0m arr.take(i).sum\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^\u001b[0m\n\u001b[31m   |\u001b[0m                   expression expected but \u001b[31mif\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpxm5c8z_s.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxm5c8z_s.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxm5c8z_s.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += \u001b[33mif\u001b[0m (twoDigits > maxTwoDigits) \u001b[31m0\u001b[0m \u001b[33melse\u001b[0m arr.take(i).sum\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979670
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzenimqr.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzenimqr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val result = arr.take(k).foldLeft(0)((sum, element) => sum + element)\n        val rest = arr.drop(k)\n        val restSum = rest.toList.foldLeft(0)((sum, element) => sum + element)\n        return result + restSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpyh2c5kwc.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979666
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < len) {\n            val curr = arr(i)\n            val next = (i + 1) % len\n            val nextCurr = arr(next)\n            val nextNext = (next + 1) % len\n            if (curr % 10 == nextCurr % 10) {\n                if (curr % 10 == nextNext % 10) {\n                    sum += curr\n                    result.add(sum)\n                    sum = 0L\n                    i += k\n                } else {\n                    sum += curr\n                    result.add(sum)\n                    sum = 0L\n                    i += k\n                }\n            } else {\n                sum += curr\n                result.add(sum)\n                sum = 0L\n                i += k\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpcpmymw6r.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcpmymw6r.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcpmymw6r.scala:26:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                    i += k\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcpmymw6r.scala:31:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                    i += k\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcpmymw6r.scala:37:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m                i += k\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659979671
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxTwoDigits = math.max(arr.take(k).map(_.toString.length))\n        val maxTwoDigitSum = math.max(sum.toString.length)\n        while (i < arr.length) {\n            val currentSum = arr(i).toString.length\n            if (currentSum == maxTwoDigits) {\n                result += arr(i)\n                i += 1\n            } else if (currentSum == maxTwoDigitSum) {\n                result += arr(i)\n                i += 1\n            } else {\n                result += arr(i).toString.padTo(maxTwoDigits, \" \")\n                i += 1\n            }\n        }\n        sum.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpztq0_tlh.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpztq0_tlh.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpztq0_tlh.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigits\u001b[0m = math.max(arr.take(k).map(_.toString.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpztq0_tlh.scala:18:32 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigits\u001b[0m = math.max(arr.take(k).map(_.toString.length))\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmax\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m   |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m   |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m   |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m   |\u001b[0mmatch arguments (List[Int])\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpztq0_tlh.scala:19:34 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitSum\u001b[0m = math.max(sum.toString.length)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded",
      "stdout": "",
      "timestamp": 1659979672
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0L\n        while(i < k){\n            sum += arr(i)\n            i += 1\n        }\n        while(i < arr.length){\n            sum += arr(i)\n            i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpecc7kp2l.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpecc7kp2l.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpecc7kp2l.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpecc7kp2l.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979675
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n        val minSum = arr.drop(maxLen).sum\n        val sum = maxSum + minSum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmps_go89k9.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979670
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.length).max\n        val maxTwoDigitsSumOfTwoDigits = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSum = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigits = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSum = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigits = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSum = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigits = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSum = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigits = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSum = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigits = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSumOfTwoDigitsSum = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfsy3qi3e.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsy3qi3e.scala:17:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigits\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsy3qi3e.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSum\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsy3qi3e.scala:19:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSumOfTwoDigits\u001b[0m = arr.take(k).map(_.toString).map(_.length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfsy3qi3e.scala:20:53 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSumOfTwoDigitsSum\u001b[0m = arr.take(k).map(_.toString).map(_.length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                        ",
      "stdout": "",
      "timestamp": 1659979677
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n        val maxDigit = arr.take(k).max\n        val maxDigitIndex = arr.indexWhere(x => x == maxDigit)\n        val maxDigitIndex2 = arr.indexWhere(x => x == maxDigit * 10)\n        val maxDigitIndex3 = arr.indexWhere(x => x == maxDigit * 100)\n        val maxDigitIndex4 = arr.indexWhere(x => x == maxDigit * 1000)\n        val maxDigitIndex5 = arr.indexWhere(x => x == maxDigit * 10000)\n        val maxDigitIndex6 = arr.indexWhere(x => x == maxDigit * 100000)\n        val maxDigitIndex7 = arr.indexWhere(x => x == maxDigit * 1000000)\n        val maxDigitIndex8 = arr.indexWhere(x => x == maxDigit * 10000000)\n        val maxDigitIndex9 = arr.indexWhere(x => x == maxDigit * 100000000)\n        val maxDigitIndex10 = arr.indexWhere(x => x == maxDigit * 1000000000)\n        val maxDigitIndex11 = arr.indexWhere(x => x == maxDigit * 10000000000)\n        val maxDigitIndex12 = arr.indexWhere(x => x == maxDigit * 100000000000)\n        val maxDigitIndex13 = arr.indexWhere(x => x == maxDigit * 1000000000000)\n        val maxDigitIndex14 = arr.indexWhere(x => x == maxDigit * 1000000000000)\n        val maxDigitIndex15 = arr.indexWhere(x => x == maxDigit * 100000000000000)\n        val maxDigitIndex16 = arr.indexWhere(x => x == maxDigit * 100000000000000)\n        val maxDigitIndex17 = arr.indexWhere(x => x == maxDigit * 1000000000000000)\n        val maxDigitIndex18 = arr.indexWhere(x => x == maxDigit * 1000000000000000)\n        val maxDigitIndex19 = arr.indexWhere(x => x == maxDigit * 10000000000000000)\n        val maxDigitIndex20 = arr.indexWhere(x => x == maxDigit * 10000000000000000)\n        val maxDigitIndex21 = arr.indexWhere(x => x == maxDigit * 100000000000000000)\n        val maxDigitIndex22 = arr.indexWhere(x => x == maxDigit * 100000000000000000)\n        val maxDigitIndex23 = arr.indexWhere(x => x == maxDigit * 100\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy1a58w0w.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy1a58w0w.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy1a58w0w.scala:13:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = arr.take(k).max\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy1a58w0w.scala:24:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitIndex11\u001b[0m = arr.indexWhere(\u001b[36mx\u001b[0m => x == maxDigit * \u001b[31m10000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy1a58w0w.scala:25:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitIndex12\u001b[0m = arr.indexWhere(\u001b[36mx\u001b[0m => x == maxDigit * \u001b[31m100000000000\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        number too large\n\u001b[31m\u001b[31m-- Error: /tmp/tmpy1a58w0w.scala:26:66 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitIndex13\u001b[0m = arr.indexWhere(\u001b[36mx\u001b[0m => x ",
      "stdout": "",
      "timestamp": 1659979676
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val max = (len / 2).toInt\n        val sum = 0L\n        var i = 0\n        while (i < max) {\n            sum += arr(i)\n            i += 1\n        }\n        if (arr.size < k) {\n            sum += arr(k)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpz4rn7dsd.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz4rn7dsd.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpz4rn7dsd.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            sum += arr(k)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979675
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxDigits = arr.take(k).map(_.toString).map(_.length).max\n        val maxDigit = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            sum += arr(i)\n            i += 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwe89e6h0.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigits\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwe89e6h0.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwe89e6h0.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigits\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwe89e6h0.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwe89e6h0.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b",
      "stdout": "",
      "timestamp": 1659979680
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7zaoeu5c.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zaoeu5c.scala:61:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979641
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength2 = arr.take(k).map(_.toString).map(_.length).max\n        while (i < arr.length) {\n            val length = arr(i).toString().length\n            if (length < maxLength) {\n                sum += arr(i)\n                i += 1\n            } else if (length < maxLength2) {\n                sum += arr(i)\n                i += 1\n            } else {\n                val index = arr.indexOf(i.toString, k)\n                val element = arr(i)\n                val newElement = arr(index)\n                result.add(sum + element)\n                sum += newElement\n                i += 1\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpekgkr8e6.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekgkr8e6.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekgkr8e6.scala:19:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength2\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekgkr8e6.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mindex\u001b[0m = arr.indexOf(i.toString, k)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979679
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk1jnj8vh.scala:21)\n\tat Problem.main(tmpk1jnj8vh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n        val minSum = arr.drop(maxLen).sum\n        val maxSum2 = arr.take(maxLen).sum\n        val minSum2 = arr.drop(maxLen).sum\n        val maxSum3 = arr.take(maxLen).sum\n        val minSum3 = arr.drop(maxLen).sum\n        val maxSum4 = arr.take(maxLen).sum\n        val minSum4 = arr.drop(maxLen).sum\n        val maxSum5 = arr.take(maxLen).sum\n        val minSum5 = arr.drop(maxLen).sum\n        val maxSum6 = arr.take(maxLen).sum\n        val minSum6 = arr.drop(maxLen).sum\n        val maxSum7 = arr.take(maxLen).sum\n        val minSum7 = arr.drop(maxLen).sum\n        val maxSum8 = arr.take(maxLen).sum\n        val minSum8 = arr.drop(maxLen).sum\n        val maxSum9 = arr.take(maxLen).sum\n        val minSum9 = arr.drop(maxLen).sum\n        val maxSum10 = arr.take(maxLen).sum\n        val minSum10 = arr.drop(maxLen).sum\n        val maxSum11 = arr.take(maxLen).sum\n        val minSum11 = arr.drop(maxLen).sum\n        val maxSum12 = arr.take(maxLen).sum\n        val minSum12 = arr.drop(maxLen).sum\n        val maxSum13 = arr.take(maxLen).sum\n        val minSum13 = arr.drop(maxLen).sum\n        val maxSum14 = arr.take(maxLen).sum\n        val minSum14 = arr.drop(maxLen).sum\n        val maxSum15 = arr.take(maxLen).sum\n        val minSum15 = arr.drop(maxLen).sum\n        val maxSum16 = arr.take(maxLen).sum\n        val minSum16 = arr.drop(maxLen).sum\n        val maxSum17 = arr.take(maxLen).sum\n        val minSum17 = arr.drop(maxLen).sum\n        val maxSum18 = arr.take(maxLen).sum\n        val minSum18 = arr.drop(maxLen).sum\n        val maxSum19\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps1xta2ww.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1xta2ww.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1xta2ww.scala:14:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum\u001b[0m = arr.take(maxLen).sum\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (maxLen : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1xta2ww.scala:15:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mminSum\u001b[0m = arr.drop(maxLen).sum\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (maxLen : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1xta2ww.scala:16:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum2\u001b[0m = arr.take(maxLen).sum\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (maxLen : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1xta2ww.scala:17:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m      ",
      "stdout": "",
      "timestamp": 1659979684
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0L\n        while (i < k) {\n            sum += arr(i)\n            i += 1L\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp50gm960w.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp50gm960w.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979669
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0L\n        while(i < k){\n            sum += arr(i)\n            i += 1\n        }\n        while(i < arr.length){\n            sum += arr(i)\n            i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpecc7kp2l.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpecc7kp2l.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpecc7kp2l.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpecc7kp2l.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979675
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzenimqr.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzenimqr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen * maxLen\n        val maxLen3 = maxLen2 * maxLen\n        val maxLen4 = maxLen3 * maxLen\n        val maxLen5 = maxLen4 * maxLen\n        val maxLen6 = maxLen5 * maxLen\n        val maxLen7 = maxLen6 * maxLen\n        val maxLen8 = maxLen7 * maxLen\n        val maxLen9 = maxLen8 * maxLen\n        val maxLen10 = maxLen9 * maxLen\n        val maxLen11 = maxLen10 * maxLen\n        val maxLen12 = maxLen11 * maxLen\n        val maxLen13 = maxLen12 * maxLen\n        val maxLen14 = maxLen13 * maxLen\n        val maxLen15 = maxLen14 * maxLen\n        val maxLen16 = maxLen15 * maxLen\n        val maxLen17 = maxLen16 * maxLen\n        val maxLen18 = maxLen17 * maxLen\n        val maxLen19 = maxLen18 * maxLen\n        val maxLen20 = maxLen19 * maxLen\n        val maxLen21 = maxLen20 * maxLen\n        val maxLen22 = maxLen21 * maxLen\n        val maxLen23 = maxLen22 * maxLen\n        val maxLen24 = maxLen23 * maxLen\n        val maxLen25 = maxLen24 * maxLen\n        val maxLen26 = maxLen25 * maxLen\n        val maxLen27 = maxLen26 * maxLen\n        val maxLen28 = maxLen27 * maxLen\n        val maxLen29 = maxLen28 * maxLen\n        val maxLen30 = maxLen29 * maxLen\n        val maxLen31 = maxLen30 * maxLen\n        val maxLen32 = maxLen31 * maxLen\n        val maxLen33 = maxLen32 * maxLen\n        val maxLen34 = maxLen33 * maxLen\n        val maxLen35 = maxLen34 * maxLen\n        val maxLen36 = maxLen35 * maxLen\n        val maxLen37 = maxLen36 * maxLen\n        val maxLen38 = maxLen37 * maxLen\n        val maxLen39 = maxLen38 * maxLen\n        val maxLen40 = maxLen39\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7pbkv44o.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7pbkv44o.scala:54:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979677
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i <- 0 until arr.size) {\n            sum += arr(i)\n            if (sum > k) {\n                sum += arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i+1) - arr\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplirt5onv.scala:105:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m105 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplirt5onv.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplirt5onv.scala:94:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m                sum -= arr(i+\u001b[31m1\u001b[0m) - arr\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value -= is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmplirt5onv.scala:94:32 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m                sum -= arr(i+\u001b[31m1\u001b[0m) - arr\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m-\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments ((arr : List[Long]))\n\u001b[33m\u001b[33m-- Warning: /tmp/tmplirt5onv.scala:96:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m96 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979681
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val max = (len - k).toInt\n        val sum = 0L\n        for(i <- 0 until max){\n            sum += arr(i)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp61n2u1ox.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp61n2u1ox.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979678
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.length).max\n        val maxTwoDigitsSumOfElements = arr.take(k).map(_.toString).map(_.length).sum\n        val maxTwoDigitsSumOfElementsOfElements = arr.take(k).map(_.toString).map(_.length).map(_.length).sum\n        val maxTwoDigitsSumOfElementsOfElementsOfElements = arr.take(k).map(_.toString).map(_.length).map(_.length).map(_.length).sum\n        val maxTwoDigitsSumOfElementsOfElementsOfElementsOfElements = arr.take(k).map(_.toString).map(_.length).map(_.length).map(_.length).map(_.length).sum\n        val maxTwoDigitsSumOfElementsOfElementsOfElementsOfElementsOfElements = arr.take(k).map(_.toString).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).sum\n        val maxTwoDigitsSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = arr.take(k).map(_.toString).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).sum\n        val maxTwoDigitsSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = arr.take(k).map(_.toString).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).sum\n        val maxTwoDigitsSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = arr.take(k).map(_.toString).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).map(_.length).sum\n        val maxTwoDigitsSumOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElementsOfElements = arr.take(k).map(_.toString).map(_.length).\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpygxjb0wk.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpygxjb0wk.scala:17:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigits\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpygxjb0wk.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSum\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpygxjb0wk.scala:19:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSumOfElements\u001b[0m = arr.take(k).map(_.toString).map(_.length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpygxjb0wk.scala:20:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitsSumOfElementsOfElements\u001b[0m = arr.take(k).map(_.toString).map(_.length).map(_.length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m  ",
      "stdout": "",
      "timestamp": 1659979689
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk1jnj8vh.scala:21)\n\tat Problem.main(tmpk1jnj8vh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            sum += arr(i)\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (sum >= 10) {\n                sum += arr(i) - 10\n            }\n            if (sum >= k) {\n                sum += arr(i) - k\n            }\n            if (\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphqm2andm.scala:111:16 --------------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m            \u001b[33mif\u001b[0m (\n\u001b[31m\u001b[31m    |\u001b[0m                ^\u001b[0m\n\u001b[31m    |\u001b[0m                expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphqm2andm.scala:122:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m122 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphqm2andm.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqm2andm.scala:121:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m121 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: Long\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmphqm2andm.scala:113:4 ---------------------------------------\u001b[0m\u001b[0m\n\u001b[33m113 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m    |\u001b[0m    ^\u001b[0m\n\u001b[33m    |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979681
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxNum = arr.take(k).max\n        val maxNumIndex = arr.lastIndexWhere(x => x == maxNum)\n        val maxNumDigit = maxNum.toString.length\n        val maxNumDigitIndex = arr.lastIndexWhere(x => x == maxNum.toString.charAt(maxNumDigit))\n        val maxNumDigitIndex = maxNumDigitIndex + 1\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val maxNumDigit = maxNum.toString.charAt(maxNumDigitIndex)\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsse9qtfx.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsse9qtfx.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxNumDigitIndex\u001b[0m = maxNumDigitIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxNumDigitIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxNumDigitIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsse9qtfx.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxNumDigit\u001b[0m = maxNum.toString.charAt(maxNumDigitIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxNumDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxNumDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsse9qtfx.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxNumDigit\u001b[0m = maxNum.toString.charAt(maxNumDigitIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxNumDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxNumDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsse9qtfx.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxNumDigit\u001b[0m = maxNum.toString.charAt(maxNumDigitIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxNumDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxNumDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that o",
      "stdout": "",
      "timestamp": 1659979681
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val twoDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until k) {\n            val index = arr.indexOf(twoDigits)\n            sum += arr(index)\n            arr.remove(index)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1jga3ux9.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1jga3ux9.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1jga3ux9.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += arr(index)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979684
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        val maxTwoDigitsSum = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum2 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum3 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum4 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum5 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum6 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum7 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum8 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum9 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum10 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum11 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum12 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum13 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum14 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum15 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum16 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum17 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum18 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum19 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum20 = arr.take(k).map(_.toString).map(_.toLong).sum\n        val maxTwoDigitsSum21 = arr.take(k).\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1a9oaki7.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1a9oaki7.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1a9oaki7.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979682
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0\n        val twoDigits = arr.take(k).map(x => x % 10).sum\n        val threeDigits = arr.take(k).map(x => x % 100).sum\n        val fourDigits = arr.take(k).map(x => x % 1000).sum\n        val fiveDigits = arr.take(k).map(x => x % 10000).sum\n        val sixDigits = arr.take(k).map(x => x % 100000).sum\n        val sevenDigits = arr.take(k).map(x => x % 1000000).sum\n        val eightDigits = arr.take(k).map(x => x % 10000000).sum\n        val nineDigits = arr.take(k).map(x => x % 100000000).sum\n        val tenDigits = arr.take(k).map(x => x % 1000000000).sum\n        val elevenDigits = arr.take(k).map(x => x % 10000000000).sum\n        val twelveDigits = arr.take(k).map(x => x % 100000000000).sum\n        val thirteenDigits = arr.take(k).map(x => x % 1000000000000).sum\n        val fourteenDigits = arr.take(k).map(x => x % 10000000000000).sum\n        val fifteenDigits = arr.take(k).map(x => x % 100000000000000).sum\n        val sixteenDigits = arr.take(k).map(x => x % 1000000000000000).sum\n        val seventeenDigits = arr.take(k).map(x => x % 10000000000000000).sum\n        val eighteenDigits = arr.take(k).map(x => x % 100000000000000000).sum\n        val nineteenDigits = arr.take(k).map(x => x % 1000000000000000000).sum\n        val twentyDigits = arr.take(k).map(x => x % 10000000000000000000).sum\n        val thirtyDigits = arr.take(k).map(x => x % 100000000000000000000).sum\n        val fourtyDigits = arr.take(k).map(x => x % 1000000000000000000000).sum\n        val fiftyDigits = arr.take(k).map(x => x % 10000000000000000000000).sum\n        val sixtyDigits = arr.take(k).map(x => x % 100000000000000000000000).sum\n        val seventyDigits = arr.take(k).map(x => x % 1000000000000000000000000).sum\n        val eightyDigits = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdv6qer6i.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdv6qer6i.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdv6qer6i.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979681
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i <- 0 until k) {\n            sum += arr(i)\n        }\n        for (i <- 0 until k) {\n            val cur = arr(i)\n            if (cur < 10) {\n                result += cur\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp2rm4x58.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2rm4x58.scala:13:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (k : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp2rm4x58.scala:16:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (k : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979684
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(k).sum\n        val maxSum2 = maxSum * maxSum\n        val maxSum3 = maxSum2 * maxSum\n        val maxSum4 = maxSum3 * maxSum\n        val maxSum5 = maxSum4 * maxSum\n        val maxSum6 = maxSum5 * maxSum\n        val maxSum7 = maxSum6 * maxSum\n        val maxSum8 = maxSum7 * maxSum\n        val maxSum9 = maxSum8 * maxSum\n        val maxSum10 = maxSum9 * maxSum\n        val maxSum11 = maxSum10 * maxSum\n        val maxSum12 = maxSum11 * maxSum\n        val maxSum13 = maxSum12 * maxSum\n        val maxSum14 = maxSum13 * maxSum\n        val maxSum15 = maxSum14 * maxSum\n        val maxSum16 = maxSum15 * maxSum\n        val maxSum17 = maxSum16 * maxSum\n        val maxSum18 = maxSum17 * maxSum\n        val maxSum19 = maxSum18 * maxSum\n        val maxSum20 = maxSum19 * maxSum\n        val maxSum21 = maxSum20 * maxSum\n        val maxSum22 = maxSum21 * maxSum\n        val maxSum23 = maxSum22 * maxSum\n        val maxSum24 = maxSum23 * maxSum\n        val maxSum25 = maxSum24 * maxSum\n        val maxSum26 = maxSum25 * maxSum\n        val maxSum27 = maxSum26 * maxSum\n        val maxSum28 = maxSum27 * maxSum\n        val maxSum29 = maxSum28 * maxSum\n        val maxSum30 = maxSum29 * maxSum\n        val maxSum31 = maxSum30 * maxSum\n        val maxSum32 = maxSum31 * maxSum\n        val maxSum33 = maxSum32 * maxSum\n        val maxSum34 = maxSum33 * maxSum\n        val maxSum35 = maxSum34 * maxSum\n        val maxSum36 = maxSum35 * maxSum\n        val maxSum37 = maxSum36 * maxSum\n        val maxSum38 = maxSum37 * maxSum\n        val maxSum39 = maxSum38 * maxSum\n        val maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9s46blms.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9s46blms.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9s46blms.scala:54:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979683
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toArray\n        val len = arr.length\n        val maxLen = len - k\n        val maxLenIndex = maxLen - 1\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValueIndex = maxLenValue - 1\n        val maxLenValueValue = arr(maxLenValueIndex)\n        val maxLenValueValueIndex = maxLenValueValue - 1\n        val maxLenValueValueValue = arr(maxLenValueValueIndex)\n        val maxLenValueValueValueIndex = maxLenValueValueValue - 1\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex =\n            if (maxLenValueValueValueIndex == maxLenValueValueValueIndex) maxLenValueValueValueIndex\n            else maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcii0saml.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueIndex\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m24 |\u001b[0m            \u001b[33mif\u001b[0m (maxLenValueValueValueIndex == maxLenValueValueValueIndex) maxLenValueValueValueIndex\n\u001b[31m25 |\u001b[0m            \u001b[33melse\u001b[0m maxLenValueValueValueIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcii0saml.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueValueValueIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcii0saml.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueValueValueIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcii0saml.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueValueValueIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659979684
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for(i <- 0 until arr.length){\n            sum += arr(i)\n            if(sum >= 10){\n                sum -= 10\n            }\n            if(sum < 10){\n                sum += 10\n            }\n            if(sum > k){\n                result.add(sum)\n                sum = 0\n            }\n        }\n        if(sum > k){\n            result.add(sum)\n        }\n        sum = 0L\n        for(i <- 0 until result.length){\n            sum += result(i)\n            if(sum >= 10){\n                sum -= 10\n            }\n            if(sum < 10){\n                sum += 10\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzq5n3x2e.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979682
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val sum = 0L\n        val twoDigits = arr.take(k).map(x => x % 10).sum\n        for(i <- 0 until k) {\n            val curr = arr.take(i).map(x => x % 10).sum\n            sum += curr\n            if(sum > twoDigits) {\n                sum += curr - twoDigits\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv82iaxxs.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv82iaxxs.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv82iaxxs.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            sum += curr\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv82iaxxs.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                sum += curr - twoDigits\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean sum.!=?\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979686
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0\n        val maxLen = arr.take(k).map(_.toString.length).max\n        val maxLen2 = maxLen / 2\n        for(i <- 0 until k){\n            val cur = arr(i)\n            val curStr = cur.toString\n            val curLen = curStr.length\n            if(curLen > maxLen2){\n                sum += cur\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpuzx4o_bo.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuzx4o_bo.scala:16:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuzx4o_bo.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                sum += cur\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979687
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val result = arr.take(k).foldLeft(0)(_ + _)\n        val remain = arr.drop(k).foldLeft(0)(_ + _)\n        result + remain\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpba_a_77s.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979683
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0L\n        while(i < k) {\n            sum += arr(i)\n            i += 1L\n        }\n        while(i < arr.length) {\n            sum += arr(i)\n            i += 1L\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprlceslqk.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprlceslqk.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprlceslqk.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprlceslqk.scala:18:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979688
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val max = (len / 2).toInt\n        val sum = 0\n        for(i <- 0 until max) {\n            sum += arr(i + k - 1) * arr(i + k)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp3eudpwju.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3eudpwju.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            sum += arr(i + k - \u001b[31m1\u001b[0m) * arr(i + k)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979688
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen * maxLen\n        val maxLen3 = maxLen2 * maxLen\n        val maxLen4 = maxLen3 * maxLen\n        val maxLen5 = maxLen4 * maxLen\n        val maxLen6 = maxLen5 * maxLen\n        val maxLen7 = maxLen6 * maxLen\n        val maxLen8 = maxLen7 * maxLen\n        val maxLen9 = maxLen8 * maxLen\n        val maxLen10 = maxLen9 * maxLen\n        val maxLen11 = maxLen10 * maxLen\n        val maxLen12 = maxLen11 * maxLen\n        val maxLen13 = maxLen12 * maxLen\n        val maxLen14 = maxLen13 * maxLen\n        val maxLen15 = maxLen14 * maxLen\n        val maxLen16 = maxLen15 * maxLen\n        val maxLen17 = maxLen16 * maxLen\n        val maxLen18 = maxLen17 * maxLen\n        val maxLen19 = maxLen18 * maxLen\n        val maxLen20 = maxLen19 * maxLen\n        val maxLen21 = maxLen20 * maxLen\n        val maxLen22 = maxLen21 * maxLen\n        val maxLen23 = maxLen22 * maxLen\n        val maxLen24 = maxLen23 * maxLen\n        val maxLen25 = maxLen24 * maxLen\n        val maxLen26 = maxLen25 * maxLen\n        val maxLen27 = maxLen26 * maxLen\n        val maxLen28 = maxLen27 * maxLen\n        val maxLen29 = maxLen28 * maxLen\n        val maxLen30 = maxLen29 * maxLen\n        val maxLen31 = maxLen30 * maxLen\n        val maxLen32 = maxLen31 * maxLen\n        val maxLen33 = maxLen32 * maxLen\n        val maxLen34 = maxLen33 * maxLen\n        val maxLen35 = maxLen34 * maxLen\n        val maxLen36 = maxLen35 * maxLen\n        val maxLen37 = maxLen36 * maxLen\n        val maxLen38 = maxLen37 * maxLen\n        val maxLen39 = maxLen38 * maxLen\n        val maxLen40 = maxLen39\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7pbkv44o.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7pbkv44o.scala:54:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979677
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).size\n        while (i < arr.size) {\n            val length = arr(i) - sum\n            if (length < 2) {\n                sum += arr(i)\n                i += 1\n            } else {\n                result.add(sum)\n                sum = 0\n            }\n        }\n        if (result.size == maxLength) {\n            sum\n        } else {\n            0L\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdc54b249.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdc54b249.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).size\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979689
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n        val len = arr.length\n        val maxLength = len - k\n        val maxLength2 = maxLength * maxLength\n        val maxLength3 = maxLength2 * maxLength\n        val maxLength4 = maxLength3 * maxLength\n        val maxLength5 = maxLength4 * maxLength\n        val maxLength6 = maxLength5 * maxLength\n        val maxLength7 = maxLength6 * maxLength\n        val maxLength8 = maxLength7 * maxLength\n        val maxLength9 = maxLength8 * maxLength\n        val maxLength10 = maxLength9 * maxLength\n        val maxLength11 = maxLength10 * maxLength\n        val maxLength12 = maxLength11 * maxLength\n        val maxLength13 = maxLength12 * maxLength\n        val maxLength14 = maxLength13 * maxLength\n        val maxLength15 = maxLength14 * maxLength\n        val maxLength16 = maxLength15 * maxLength\n        val maxLength17 = maxLength16 * maxLength\n        val maxLength18 = maxLength17 * maxLength\n        val maxLength19 = maxLength18 * maxLength\n        val maxLength20 = maxLength19 * maxLength\n        val maxLength21 = maxLength20 * maxLength\n        val maxLength22 = maxLength21 * maxLength\n        val maxLength23 = maxLength22 * maxLength\n        val maxLength24 = maxLength23 * maxLength\n        val maxLength25 = maxLength24 * maxLength\n        val maxLength26 = maxLength25 * maxLength\n        val maxLength27 = maxLength26 * maxLength\n        val maxLength28 = maxLength27 * maxLength\n        val maxLength29 = maxLength28 * maxLength\n        val maxLength30 = maxLength29 * maxLength\n        val maxLength31 = maxLength30 * maxLength\n        val maxLength32 = maxLength31 * maxLength\n        val maxLength33 = maxLength32 * maxLength\n        val maxLength34 = maxLength33 * maxLength\n        val maxLength35 = maxLength34 * maxLength\n        val maxLength36 = maxLength35 * maxLength\n        val maxLength37 = maxLength36 * maxLength\n        val maxLength38 = maxLength37 * maxLength\n        val maxLength39 = maxLength38 * maxLength\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpeyg8719e.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeyg8719e.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpeyg8719e.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeyg8719e.scala:54:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979690
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        var i = 0\n        while (i < len) {\n            val curr = arr(i)\n            if (curr < 10) {\n                sum += curr\n                i += 1\n            } else if (curr < 100) {\n                val next = Math.round(curr / 10)\n                sum += next\n                i += next\n            } else {\n                val next = Math.round(curr / 100)\n                sum += next\n                i += next\n            }\n        }\n        if (sum < k) {\n            sum\n        } else {\n            sum + addElements(arr.take(k), k)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmppiq90qai.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppiq90qai.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                sum += curr\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppiq90qai.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                sum += next\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean sum.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppiq90qai.scala:26:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                sum += next\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Long - did you mean sum.!=?\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979692
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen4\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpumodn9zr.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpumodn9zr.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpumodn9zr.scala:12:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumodn9zr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979692
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val sum = 0\n        for(i <- 0 until len) {\n            val digits = arr(i).toString.length\n            if(digits <= maxDigits) {\n                sum += arr(i)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp98pimywd.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp98pimywd.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979692
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until len) {\n            val twoDigits = arr(i).toString.length\n            if(twoDigits <= maxTwoDigits) {\n                result += arr(i)\n            }\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd65v76lx.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd65v76lx.scala:13:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigits\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979692
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7zaoeu5c.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zaoeu5c.scala:61:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979641
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0\n        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26 = \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp1iispot1.scala:39:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum26\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1iispot1.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1iispot1.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979694
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        val len = arr.length\n        val max = (len / 2).toInt\n        val min = (len - max).toInt\n        val sum = 0L\n        for(i <- 0 until max) {\n            val key = arr(i).toLong\n            val value = arr(i + min).toLong\n            sum += value\n            result(key, value)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpskupgwfv.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpskupgwfv.scala:19:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            sum += value\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979693
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0\n        val twoDigits = arr.take(k).map(_.toString.length).max\n        val twoDigitSum = arr.take(twoDigits).map(_.toString).sum\n        val threeDigits = arr.take(len - twoDigits).map(_.toString.length).max\n        val threeDigitSum = arr.take(len - twoDigits - threeDigits).map(_.toString).sum\n        val fourDigits = arr.take(len - twoDigits - threeDigits - fourDigits).map(_.toString.length).max\n        val fourDigitSum = arr.take(len - twoDigits - threeDigits - fourDigits - fiveDigits).map(_.toString).sum\n        val fiveDigits = arr.take(len - twoDigits - threeDigits - fourDigits - fiveDigits - sixDigits).map(_.toString.length).max\n        val fiveDigitSum = arr.take(len - twoDigits - threeDigits - fourDigits - fiveDigits - sixDigits - sevenDigits).map(_.toString).sum\n        val sixDigits = arr.take(len - twoDigits - threeDigits - fourDigits - fiveDigits - sixDigits - sevenDigits - eightDigits).map(_.toString.length).max\n        val sixDigitSum = arr.take(len - twoDigits - threeDigits - fourDigits - fiveDigits - sixDigits - sevenDigits - eightDigits - nineDigits).map(_.toString).sum\n        val sevenDigits = arr.take(len - twoDigits - threeDigits - fourDigits - fiveDigits - sixDigits - sevenDigits - eightDigits - nineDigits - tenDigits).map(_.toString.length).max\n        val sevenDigitSum = arr.take(len - twoDigits - threeDigits - fourDigits - fiveDigits - sixDigits - sevenDigits - eightDigits - nineDigits - tenDigits - elevenDigits).map(_.toString).sum\n        val eightDigits = arr.take(len - twoDigits - threeDigits - fourDigits - fiveDigits - sixDigits - sevenDigits - eightDigits - nineDigits - tenDigits - elevenDigits - twelveDigits).\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwuib46jy.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwuib46jy.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwuib46jy.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979693
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu681_rcf.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu681_rcf.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979668
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        var i = 0\n        while (i < len) {\n            val curr = arr(i)\n            val next = (i + 1) < len ? arr(i + 1) : 0\n            val next2 = (next + 1) < len ? arr(next + 1) : 0\n            val next3 = (next2 + 1) < len ? arr(next2 + 1) : 0\n            val next4 = (next3 + 1) < len ? arr(next3 + 1) : 0\n            val next5 = (next4 + 1) < len ? arr(next4 + 1) : 0\n            val next6 = (next5 + 1) < len ? arr(next5 + 1) : 0\n            val next7 = (next6 + 1) < len ? arr(next6 + 1) : 0\n            val next8 = (next7 + 1) < len ? arr(next7 + 1) : 0\n            val next9 = (next8 + 1) < len ? arr(next8 + 1) : 0\n            val next10 = (next9 + 1) < len ? arr(next9 + 1) : 0\n            val next11 = (next10 + 1) < len ? arr(next10 + 1) : 0\n            val next12 = (next11 + 1) < len ? arr(next11 + 1) : 0\n            val next13 = (next12 + 1) < len ? arr(next12 + 1) : 0\n            val next14 = (next13 + 1) < len ? arr(next13 + 1) : 0\n            val next15 = (next14 + 1) < len ? arr(next14 + 1) : 0\n            val next16 = (next15 + 1) < len ? arr(next15 + 1) : 0\n            val next17 = (next16 + 1) < len ? arr(next16 + 1) : 0\n            val next18 = (next17 + 1) < len ? arr(next17 + 1) : 0\n            val next19 = (next18 + 1) < len ? arr(next18 + 1) : 0\n            val next20 = (next19 + 1) < len ? arr(next19 + 1) : 0\n            val next21 = (next20 + 1) < len ? arr(next20 + 1) : 0\n            val next22 = (next21 + 1) < len ? arr(next21 + 1) : 0\n            val next23 = (next22 + 1) < len ? arr(next22 + 1) : 0\n            val next24 = (next23 + 1) < len ? arr(next23 + 1) : 0\n            val next25 = (next24 + 1) < len\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiu1ru5vv.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpiu1ru5vv.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiu1ru5vv.scala:51:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpiu1ru5vv.scala:43:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979694
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0L\n        while(i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq6qxtok5.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq6qxtok5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (i : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979696
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        val len = arr.length\n        val maxTwoDigit = arr.take(k).max\n        val maxThreeDigit = arr.take(k).max\n        val maxFourDigit = arr.take(k).max\n        val maxFiveDigit = arr.take(k).max\n        val maxSix = arr.take(k).max\n        val maxSeven = arr.take(k).max\n        val maxEight = arr.take(k).max\n        val maxNine = arr.take(k).max\n        val maxTen = arr.take(k).max\n        val maxEleven = arr.take(k).max\n        val maxTwelve = arr.take(k).max\n        val maxThirteen = arr.take(k).max\n        val maxFourteen = arr.take(k).max\n        val maxFifteen = arr.take(k).max\n        val maxSixteen = arr.take(k).max\n        val maxSeventeen = arr.take(k).max\n        val maxEighteen = arr.take(k).max\n        val maxNineteen = arr.take(k).max\n        val maxTwenty = arr.take(k).max\n        val maxThirty = arr.take(k).max\n        val maxForty = arr.take(k).max\n        val maxFifty = arr.take(k).max\n        val maxSixty = arr.take(k).max\n        val maxSeventy = arr.take(k).max\n        val maxEighty = arr.take(k).max\n        val maxNinety = arr.take(k).max\n        val maxTwentyOne = arr.take(k).max\n        val maxTwentyTwo = arr.take(k).max\n        val maxTwentyThree = arr.take(k).max\n        val maxTwentyFour = arr.take(k).max\n        val maxTwentyFive = arr.take(k).max\n        val maxTwentySix = arr.take(k).max\n        val maxTwentySeven = arr.take(k).max\n        val maxTwentyEight = arr.take(k).max\n        val maxTwentyNine = arr.take(k).max\n        val maxThirtyOne = arr.take(k).max\n        val maxThirtyTwo = arr.take(k).max\n        val maxThirtyThree = arr.take(k).max\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmppmyhqn_z.scala:51:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppmyhqn_z.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmyhqn_z.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigit\u001b[0m = arr.take(k).max\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmyhqn_z.scala:14:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxThreeDigit\u001b[0m = arr.take(k).max\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmyhqn_z.scala:15:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxFourDigit\u001b[0m = arr.take(k).max\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when co",
      "stdout": "",
      "timestamp": 1659979699
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        val maxLength = arr.take(k).map(_.toString.length).max\n        arr.take(k).foreach(x => {\n            val digits = x.toString.substring(0,maxLength)\n            val count = result.getOrElseUpdate(digits, 0) + 1\n            result.put(digits, count)\n        })\n        val sum = result.values.sum\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi0tg94yc.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0tg94yc.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0tg94yc.scala:13:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979696
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLenList = arr.take(maxLen)\n        val maxLenSum = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList2 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList3 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList4 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList5 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList6 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList7 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList8 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList9 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList10 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList11 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList12 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList13 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList14 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList15 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList16 = maxLenList.foldLeft(0L){ (sum, element) => sum + element }\n        val maxLenSumList17 = maxLenList.fold\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp3vo5ars2.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3vo5ars2.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979696
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val max = (sum / 10).toInt\n        var j = 0\n        while (j < arr.length) {\n            if (arr(j) < max) {\n                result.add(arr(j))\n                j += 1\n            } else {\n                val max2 = (sum / 10).toInt\n                while (j < arr.length && arr(j) < max2) {\n                    result.add(arr(j))\n                    j += 1\n                }\n                j = 0\n                sum += arr(j)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp81am7vf4.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979692
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.size\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu681_rcf.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu681_rcf.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979668
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) + x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) - x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) * x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) / x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) % x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) * x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) / x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) % x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) * x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) / x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) % x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) * x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) / x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) % x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) * x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) / x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) % x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) * x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) / x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) % x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) * x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) / x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse(x, 0) % x))\n        arr.take(k).foreach(x => result.put(x, result.getOrElse\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpidf3q_wh.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpidf3q_wh.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpidf3q_wh.scala:12:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => result.put(x, result.getOrElse(x, \u001b[31m0\u001b[0m) + x))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpidf3q_wh.scala:13:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => result.put(x, result.getOrElse(x, \u001b[31m0\u001b[0m) - x))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpidf3q_wh.scala:14:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => result.put(x, result.getOrElse(x, \u001b[31m0\u001b[0m) * x))\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpidf3q_wh.scala:15:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => r",
      "stdout": "",
      "timestamp": 1659979701
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n        val arr = arr.toArray\n        val len = arr.length\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa1ycw4cr.scala:14:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0marr is already defined as \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa1ycw4cr.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlen\u001b[0m = arr.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mlen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mlen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa1ycw4cr.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0marr is already defined as \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa1ycw4cr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlen\u001b[0m = arr.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mlen is already defined as \u001b[33mvalue\u001b[0m \u001b[35mlen\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa1ycw4cr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0marr is already defined as \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa1ycw4cr.scala:19:12 ----",
      "stdout": "",
      "timestamp": 1659979697
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n        var j = 0\n        while (j < maxLength) {\n            sum += arr(j)\n            j += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2nlpoajj.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2nlpoajj.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979697
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString.length).max\n        while (i < arr.size) {\n            val length = arr(i).toString.length\n            if (length < maxLength) {\n                sum += arr(i)\n                i += 1\n            } else {\n                result.add(sum)\n                sum = 0L\n                val maxLength = arr.take(k).map(_.toString.length).max\n            }\n        }\n        result.add(sum)\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdua07gsi.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdua07gsi.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdua07gsi.scala:27:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979700
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).size\n        val maxLength2 = maxLength / 2\n        for(i <- 0 until arr.size) {\n            val currentLength = arr(i).size\n            if(currentLength <= maxLength2) {\n                result.add(arr(i))\n            }\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpku4x5133.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpku4x5133.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).size\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpku4x5133.scala:15:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcurrentLength\u001b[0m = arr(i).size\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value size is not a member of Long\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979700
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).size\n        val maxLength = maxLength.toInt\n        val maxLength2 = maxLength * maxLength\n        val maxLength3 = maxLength2 * maxLength\n        val maxLength4 = maxLength3 * maxLength\n        val maxLength5 = maxLength4 * maxLength\n        val maxLength6 = maxLength5 * maxLength\n        val maxLength7 = maxLength6 * maxLength\n        val maxLength8 = maxLength7 * maxLength\n        val maxLength9 = maxLength8 * maxLength\n        val maxLength10 = maxLength9 * maxLength\n        val maxLength11 = maxLength10 * maxLength\n        val maxLength12 = maxLength11 * maxLength\n        val maxLength13 = maxLength12 * maxLength\n        val maxLength14 = maxLength13 * maxLength\n        val maxLength15 = maxLength14 * maxLength\n        val maxLength16 = maxLength15 * maxLength\n        val maxLength17 = maxLength16 * maxLength\n        val maxLength18 = maxLength17 * maxLength\n        val maxLength19 = maxLength18 * maxLength\n        val maxLength20 = maxLength19 * maxLength\n        val maxLength21 = maxLength20 * maxLength\n        val maxLength22 = maxLength21 * maxLength\n        val maxLength23 = maxLength22 * maxLength\n        val maxLength24 = maxLength23 * maxLength\n        val maxLength25 = maxLength24 * maxLength\n        val maxLength26 = maxLength25 * maxLength\n        val maxLength27 = maxLength26 * maxLength\n        val maxLength28 = maxLength27 * maxLength\n        val maxLength29 = maxLength28 * maxLength\n        val maxLength30 = maxLength29 * maxLength\n        val maxLength31 = maxLength30 * maxLength\n        val maxLength32 = maxLength31 * maxLength\n        val maxLength33 = maxLength32 * maxLength\n        val maxLength34 = maxLength33 * maxLength\n        val maxLength35 = maxLength34 * maxLength\n        val maxLength36 = maxLength35 * maxLength\n        val maxLength37 = maxLength36 * maxLength\n        val maxLength38 = maxLength37 * maxLength\n        val maxLength39 = maxLength38 * maxLength\n        val maxLength\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprxdqn0t7.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprxdqn0t7.scala:13:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = maxLength.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprxdqn0t7.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxdqn0t7.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).size\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprxdqn0t7.scala:53:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659979701
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpk1jnj8vh.scala:21)\n\tat Problem.main(tmpk1jnj8vh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLenIndex = math.max(0, maxLen)\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValueIndex = math.max(0, maxLenValue)\n        val maxLenValueValue = arr(maxLenValueIndex)\n        val maxLenValueValueIndex = math.max(0, maxLenValueValue)\n        val maxLenValueValueValue = arr(maxLenValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValueValueValue)\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex = math.max(0, maxLenValue\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplyuznn5m.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplyuznn5m.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueIndex\u001b[0m = math.max(\u001b[31m0\u001b[0m, maxLenValueValueValue)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplyuznn5m.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValue\u001b[0m = arr(maxLenValueValueValueIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplyuznn5m.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueIndex\u001b[0m = math.max(\u001b[31m0\u001b[0m, maxLenValueValueValue)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplyuznn5m.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValue\u001b[0m = arr(maxLenValueValueValueIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659979703
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var index = 0L\n        while (index < arr.length) {\n            sum += arr(index)\n            if (sum > k) {\n                result.add(sum - k)\n                sum = 0\n            }\n            index += 1\n        }\n        if (sum > k) {\n            result.add(sum - k)\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2xpvxu52.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2xpvxu52.scala:15:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += arr(index)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean Long.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2xpvxu52.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            sum += arr(index)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (index : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979702
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0\n        val maxLen = arr.take(k).length\n        for(i <- 0 until k){\n            val cur = arr(i)\n            val curLen = cur.length\n            val curMaxLen = cur.take(maxLen).length\n            val curSum = cur.drop(curLen).sum\n            val curMaxSum = cur.drop(curMaxLen).sum\n            val curMax = cur.take(maxLen).sum\n            val curMaxSum2 = cur.drop(maxLen).sum\n            val curMaxSum3 = cur.drop(maxLen).sum\n            val curMaxSum4 = cur.drop(maxLen).sum\n            val curMaxSum5 = cur.drop(maxLen).sum\n            val curMaxSum6 = cur.drop(maxLen).sum\n            val curMaxSum7 = cur.drop(maxLen).sum\n            val curMaxSum8 = cur.drop(maxLen).sum\n            val curMaxSum9 = cur.drop(maxLen).sum\n            val curMaxSum10 = cur.drop(maxLen).sum\n            val curMaxSum11 = cur.drop(maxLen).sum\n            val curMaxSum12 = cur.drop(maxLen).sum\n            val curMaxSum13 = cur.drop(maxLen).sum\n            val curMaxSum14 = cur.drop(maxLen).sum\n            val curMaxSum15 = cur.drop(maxLen).sum\n            val curMaxSum16 = cur.drop(maxLen).sum\n            val curMaxSum17 = cur.drop(maxLen).sum\n            val curMaxSum18 = cur.drop(maxLen).sum\n            val curMaxSum19 = cur.drop(maxLen).sum\n            val curMaxSum20 = cur.drop(maxLen).sum\n            val curMaxSum21 = cur.drop(maxLen).sum\n            val curMaxSum22 = cur.drop(maxLen).sum\n            val curMaxSum23 = cur.drop(maxLen).sum\n            val curMaxSum24 = cur.drop(maxLen).sum\n            val curMaxSum25 = cur.drop(maxLen).sum\n            val curMaxSum26 = cur.drop(maxLen).sum\n            val curMaxSum27 = cur.drop(maxLen).sum\n            val curMaxSum28 = cur.drop(maxLen).sum\n            val curMaxSum29 = cur.drop(\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpg6tyq2cu.scala:49:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcurMaxSum29\u001b[0m = cur.drop(\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpg6tyq2cu.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpg6tyq2cu.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6tyq2cu.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg6tyq2cu.scala:59:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpg6tyq2cu.scala:51:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n5 errors found\n",
      "stdout": "",
      "timestamp": 1659979704
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxTwoDigit = arr.take(k).max\n        val maxThreeDigit = arr.take(k).max\n        val maxFourDigit = arr.take(k).max\n        val maxFiveDigit = arr.take(k).max\n        val maxSixDigit = arr.take(k).max\n        val maxSevenDigit = arr.take(k).max\n        val maxEightDigit = arr.take(k).max\n        val maxNineDigit = arr.take(k).max\n        val maxTenDigit = arr.take(k).max\n        val maxElevenDigit = arr.take(k).max\n        val maxTwelveDigit = arr.take(k).max\n        val maxThirteenDigit = arr.take(k).max\n        val maxFourteenDigit = arr.take(k).max\n        val maxFifteenDigit = arr.take(k).max\n        val maxSixteenDigit = arr.take(k).max\n        val maxSeventeenDigit = arr.take(k).max\n        val maxEighteenDigit = arr.take(k).max\n        val maxNineteenDigit = arr.take(k).max\n        val maxTwentyDigit = arr.take(k).max\n        val maxTwentyOneDigit = arr.take(k).max\n        val maxTwentyTwoDigit = arr.take(k).max\n        val maxTwentyThreeDigit = arr.take(k).max\n        val maxTwentyFourDigit = arr.take(k).max\n        val maxTwentyFiveDigit = arr.take(k).max\n        val maxTwentySixDigit = arr.take(k).max\n        val maxTwentySevenDigit = arr.take(k).max\n        val maxTwentyEightDigit = arr.take(k).max\n        val maxTwentyNineDigit = arr.take(k).max\n        val maxThirtyDigit = arr.take(k).max\n        val maxThirtyOneDigit = arr.take(k).max\n        val maxThirtyTwoDigit = arr.take(k).max\n        val maxThirtyThreeDigit = arr.take(k).max\n        val maxThirtyFourDigit = arr.take(k).max\n        val maxThirtyFiveDigit = arr.take(k).max\n        val maxThirtySixDigit = arr.take(k).max\n        val maxThir\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyxj0832m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxj0832m.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyxj0832m.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigit\u001b[0m = arr.take(k).max\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyxj0832m.scala:14:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxThreeDigit\u001b[0m = arr.take(k).max\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyxj0832m.scala:15:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxFourDigit\u001b[0m = arr.take(k).max\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyxj0832m.scala:16:36 --------------------\u001b[0m\u001b",
      "stdout": "",
      "timestamp": 1659979708
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for(i <- 0 until k){\n            sum += arr(i)\n        }\n        for(i <- 0 until k){\n            val x = arr(i)\n            val y = arr(i+1)\n            val z = arr(i+2)\n            val w = arr(i+3)\n            val v = arr(i+4)\n            val u = arr(i+5)\n            val t = arr(i+6)\n            val s = arr(i+7)\n            val r = arr(i+8)\n            val q = arr(i+9)\n            val p = arr(i+10)\n            val o = arr(i+11)\n            val n = arr(i+12)\n            val m = arr(i+13)\n            val l = arr(i+14)\n            val k = arr(i+15)\n            val j = arr(i+16)\n            val h = arr(i+17)\n            val g = arr(i+18)\n            val f = arr(i+19)\n            val e = arr(i+20)\n            val d = arr(i+21)\n            val c = arr(i+22)\n            val b = arr(i+23)\n            val a = arr(i+24)\n            val z = arr(i+25)\n            val y = arr(i+26)\n            val x = arr(i+27)\n            val w = arr(i+28)\n            val v = arr(i+29)\n            val u = arr(i+30)\n            val t = arr(i+31)\n            val s = arr(i+32)\n            val r = arr(i+33)\n            val q = arr(i+34)\n            val p = arr(i+35)\n            val o = arr(i+36)\n            val n = arr(i+37)\n            val m = arr(i+38)\n            val l = arr(i+39)\n            val k = arr(i+40)\n            val j = arr(i+41)\n            val h = arr(i+42)\n            val g = arr(i+43)\n            val f = arr(i+44)\n            val e = arr(i+45)\n            val d = arr(i+46)\n            val c = arr(i+47)\n            val b = arr(i+48)\n            val a = arr(i+49)\n            val z = arr(i+50)\n            val y = arr(i+51)\n            val x = arr(i+52)\n            val w = arr(i+53)\n            val v = arr(i+54)\n            val u = arr(i+\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmptb8m3yub.scala:72:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mu\u001b[0m = arr(i+\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptb8m3yub.scala:83:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m83 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptb8m3yub.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptb8m3yub.scala:13:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptb8m3yub.scala:16:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptb8m3yub.scala:42:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mz\u001b[0m = arr(i+\u001b[31m25\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mz is already defined as \u001b[33mvalue\u001b[0m \u001b[35mz",
      "stdout": "",
      "timestamp": 1659979707
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpud_x56b1.scala:60:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpud_x56b1.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpud_x56b1.scala:61:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979705
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0L\n        var i = 0\n        while (i < len) {\n            val curr = arr(i)\n            val next = (i + 1) < len ? arr(i + 1) : 0L\n            val nextNext = (i + 2) < len ? arr(i + 2) : 0L\n            val nextNextNext = (i + 3) < len ? arr(i + 3) : 0L\n            val nextNextNextNext = (i + 4) < len ? arr(i + 4) : 0L\n            val nextNextNextNextNext = (i + 5) < len ? arr(i + 5) : 0L\n            val nextNextNextNextNextNext = (i + 6) < len ? arr(i + 6) : 0L\n            val nextNextNextNextNextNext = (i + 7) < len ? arr(i + 7) : 0L\n            val nextNextNextNextNextNextNext = (i + 8) < len ? arr(i + 8) : 0L\n            val nextNextNextNextNextNextNext = (i + 9) < len ? arr(i + 9) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 10) < len ? arr(i + 10) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 11) < len ? arr(i + 11) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 12) < len ? arr(i + 12) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 13) < len ? arr(i + 13) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 14) < len ? arr(i + 14) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 15) < len ? arr(i + 15) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 16) < len ? arr(i + 16) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 17) < len ? arr(i + 17) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 18) < len ? arr(i + 18) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 19) < len ? arr(i + 19) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 20) < len ? arr(i + 20) : 0L\n            val nextNextNextNextNextNextNextNext = (i + 21) < len ? arr(i + 21) : 0L\n            val nextNextNextNext\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0x2cus5e.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0x2cus5e.scala:49:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0x2cus5e.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0x2cus5e.scala:23:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnextNextNextNextNextNext\u001b[0m = (i + \u001b[31m7\u001b[0m) < len ? arr(i + \u001b[31m7\u001b[0m) : \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnextNextNextNextNextNext is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnextNextNextNextNextNext\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0x2cus5e.scala:25:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnextNextNextNextNextNextNext\u001b[0m = (i + \u001b[31m9\u001b[0m) < len ? arr(i + \u001b[31m9\u001b[0m) : \u001b[31m0L\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnextNextNextNextNextNextNext is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnextNextNextNextNextNextNext\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0x2cus5e.scala:27:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnextNextNextNextNextNextNextNext\u001b[0m = (",
      "stdout": "",
      "timestamp": 1659979706
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var index = 0\n        while (index < k) {\n            sum += arr(index)\n            index += 1\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppfsjwgpp.scala:21)\n\tat Problem.main(tmppfsjwgpp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979707
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3 = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n        val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n        val max17 = max / 17\n        val max18 = max / 18\n        val max19 = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n        val max22 = max / 22\n        val max23 = max / 23\n        val max24 = max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n        val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n        val max35 = max / 35\n        val max36 = max / 36\n        val max37 = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n        val max40 = max / 40\n        val max41 = max / 41\n        val max42 = max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n        val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n        val max53 = max / 53\n        val max54 = max / 54\n        val max55 = max / 55\n        val max56 = max / 56\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1k2feawd.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1k2feawd.scala:69:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979704
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val maxSum = 0L\n        val maxSumIndex = 0L\n        val maxSumIndex2 = 0L\n        for(i <- 0 until len) {\n            val curSum = arr(i) + arr(i+1)\n            val curSum2 = curSum * curSum\n            if(curSum2 > maxSum2) {\n                maxSum2 = curSum2\n                maxSumIndex = i\n                maxSumIndex2 = i\n            }\n        }\n        for(i <- 0 until len) {\n            val curSum = arr(i) + arr(i+1)\n            val curSum2 = curSum * curSum\n            if(curSum2 > maxSum2) {\n                maxSum2 = curSum2\n                maxSumIndex = i\n                maxSumIndex2 = i\n            }\n        }\n        for(i <- 0 until len) {\n            val curSum = arr(i) + arr(i+1)\n            val curSum2 = curSum * curSum\n            if(curSum2 > maxSum2) {\n                maxSum2 = curSum2\n                maxSumIndex = i\n                maxSumIndex2 = i\n            }\n        }\n        val maxSum = maxSum2\n        val maxSumIndex = maxSumIndex2\n        val maxSumIndex2 = maxSumIndex\n        val maxSumIndex3 = maxSumIndex\n        val maxSumIndex4 = maxSumIndex\n        val maxSumIndex5 = maxSumIndex\n        val maxSumIndex6 = maxSumIndex\n        val maxSumIndex7 = maxSumIndex\n        val maxSumIndex8 = maxSumIndex\n        val maxSumIndex9 = maxSumIndex\n        val maxSumIndex10 = maxSumIndex\n        val maxSumIndex11 = maxSumIndex\n        val maxSumIndex12 = maxSumIndex\n        val maxSumIndex13 = maxSumIndex\n        val maxSumIndex14 = maxSumIndex\n        val maxSumIndex15 = maxSumIndex\n        val maxSumIndex16 = maxSumIndex\n        val maxSumIndex17 = maxSumIndex\n        val maxSumIndex18 = maxSumIndex\n        val maxSumIndex19 = maxSumIndex\n        val maxSumIndex20 = maxSumIndex\n        val maxSumIndex21 = maxSumIndex\n        val maxSumIndex22 = maxSumIndex\n        val maxSumIndex23 = maxSumIndex\n        val maxSumIndex24 = maxSumIndex\n        val maxSumIndex25 = maxSumIndex\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp402278me.scala:44:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum\u001b[0m = maxSum2\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp402278me.scala:45:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSumIndex\u001b[0m = maxSumIndex2\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxSumIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxSumIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp402278me.scala:46:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSumIndex2\u001b[0m = maxSumIndex\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxSumIndex2 is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxSumIndex2\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp402278me.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp402278me.scala:21:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                maxSum2 = curSum2\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: maxSum2\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp402278me.scala:22:28 ------------------------",
      "stdout": "",
      "timestamp": 1659979706
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzenimqr.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptzenimqr.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979638
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLenIndex = maxLen - 1\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValueIndex = maxLenIndex - 1\n        val maxLenValueValue = arr(maxLenValueIndex)\n        val maxLenValueValueIndex = maxLenValueIndex - 1\n        val maxLenValueValueValue = arr(maxLenValueValueIndex)\n        val maxLenValueValueValueIndex = maxLenValueValueIndex - 1\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex =\n            maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValue\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0x8hu97u.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0x8hu97u.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueIndex\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m24 |\u001b[0m            maxLenValueValueValueIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0x8hu97u.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValue\u001b[0m = arr(maxLenValueValueValueIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0x8hu97u.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueValueValueIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0x8hu97u.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueValue\u001b[0m = arr(maxLenValueValueValueIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659979706
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until k) {\n            val twoDigits = arr(i).toString.length\n            val digits = twoDigits - maxTwoDigits + 1\n            sum += arr(i).asInstanceOf[Long] * digits\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2qm7qpqa.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2qm7qpqa.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2qm7qpqa.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            sum += arr(i).asInstanceOf[\u001b[35mLong\u001b[0m] * digits\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979708
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnxhrmibl.scala:21)\n\tat Problem.main(tmpnxhrmibl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n        val maxLength2 = arr.take(k).map(_.toString).map(_.length).filter(_ > 1).max\n        val maxLength3 = arr.take(k).map(_.toString).map(_.length).filter(_ > 2).max\n        val maxLength4 = arr.take(k).map(_.toString).map(_.length).filter(_ > 3).max\n        val maxLength5 = arr.take(k).map(_.toString).map(_.length).filter(_ > 4).max\n        val maxLength6 = arr.take(k).map(_.toString).map(_.length).filter(_ > 5).max\n        val maxLength7 = arr.take(k).map(_.toString).map(_.length).filter(_ > 6).max\n        val maxLength8 = arr.take(k).map(_.toString).map(_.length).filter(_ > 7).max\n        val maxLength9 = arr.take(k).map(_.toString).map(_.length).filter(_ > 8).max\n        val maxLength10 = arr.take(k).map(_.toString).map(_.length).filter(_ > 9).max\n        val maxLength11 = arr.take(k).map(_.toString).map(_.length).filter(_ > 10).max\n        val maxLength12 = arr.take(k).map(_.toString).map(_.length).filter(_ > 11).max\n        val maxLength13 = arr.take(k).map(_.toString).map(_.length).filter(_ > 12).max\n        val maxLength14 = arr.take(k).map(_.toString).map(_.length).filter(_ > 13).max\n        val maxLength15 = arr.take(k).map(_.toString).map(_.length).filter(_ > 14).max\n        val maxLength16 = arr.take(k).map(_.toString).map(_.length).filter(_ > 15).max\n        val maxLength17 = arr.take(k).map(_.toString).map(_.length).filter(_ > 16).max\n        val maxLength18 = arr.take(k).map(_.toString).map(_.length).filter(_ > 17).max\n        val maxLength19 = arr.take(k).map(_.toString).map(_.length).filter(_ > 18).max\n        val maxLength20 = arr.take(k).map(_.toString).map(_.length).filter(_ > 19\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfgu0v93v.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfgu0v93v.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgu0v93v.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgu0v93v.scala:19:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength2\u001b[0m = arr.take(k).map(_.toString).map(_.length).filter(_ > \u001b[31m1\u001b[0m).max\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgu0v93v.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength3\u001b[0m = arr.take(k).map(_.toString).map(_.length).filter(_ > \u001b[31m2\u001b[0m).max\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wit",
      "stdout": "",
      "timestamp": 1659979711
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_ + _)\n        val max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0t6_h4rp.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp0t6_h4rp.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0t6_h4rp.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979651
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val arr = arr.toList\n        val len = arr.size\n        val max = (len / 2).toInt\n        val max2 = max / 2\n        val max3 = max / 3\n        val max4 = max / 4\n        val max5 = max / 5\n        val max6 = max / 6\n        val max7 = max / 7\n        val max8 = max / 8\n        val max9 = max / 9\n        val max10 = max / 10\n        val max11 = max / 11\n        val max12 = max / 12\n        val max13 = max / 13\n        val max14 = max / 14\n        val max15 = max / 15\n        val max16 = max / 16\n        val max17 = max / 17\n        val max18 = max / 18\n        val max19 = max / 19\n        val max20 = max / 20\n        val max21 = max / 21\n        val max22 = max / 22\n        val max23 = max / 23\n        val max24 = max / 24\n        val max25 = max / 25\n        val max26 = max / 26\n        val max27 = max / 27\n        val max28 = max / 28\n        val max29 = max / 29\n        val max30 = max / 30\n        val max31 = max / 31\n        val max32 = max / 32\n        val max33 = max / 33\n        val max34 = max / 34\n        val max35 = max / 35\n        val max36 = max / 36\n        val max37 = max / 37\n        val max38 = max / 38\n        val max39 = max / 39\n        val max40 = max / 40\n        val max41 = max / 41\n        val max42 = max / 42\n        val max43 = max / 43\n        val max44 = max / 44\n        val max45 = max / 45\n        val max46 = max / 46\n        val max47 = max / 47\n        val max48 = max / 48\n        val max49 = max / 49\n        val max50 = max / 50\n        val max51 = max / 51\n        val max52 = max / 52\n        val max53 = max / 53\n        val max54 = max / 54\n        val max55 = max / 55\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp5hn_qam.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpp5hn_qam.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp5hn_qam.scala:70:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979709
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        val maxLen47 = max\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmppd_cc56s.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppd_cc56s.scala:60:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979708
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxSum = arr.take(k).foldLeft(0L)(_ + _)\n        sum += maxSum\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1vzot2x7.scala:17:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum\u001b[0m = arr.take(k).foldLeft(\u001b[31m0L\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (k : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979709
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val sum = 0L\n        var i = 0\n        while (i < maxLen2) {\n            sum += arr(i + k)\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpjfv6vdam.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjfv6vdam.scala:18:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            sum += arr(i + k)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979709
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxLength = arr.take(k).length\n        val maxSum = arr.take(k).sum\n        val maxSum2 = arr.take(k).sum * arr.take(k).sum\n        val maxSum3 = arr.take(k).sum * arr.take(k).sum * arr.take(k).sum\n        val maxSum4 = arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum\n        val maxSum5 = arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum\n        val maxSum6 = arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum\n        val maxSum7 = arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum\n        val maxSum8 = arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum\n        val maxSum9 = arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp20g29w7v.scala:22:489 --------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum9\u001b[0m = arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * arr.take(k).sum * \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp20g29w7v.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp20g29w7v.scala:13:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).length\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                     ",
      "stdout": "",
      "timestamp": 1659979717
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxTwoDigitSum = arr.take(k).foldLeft(0L)(_ + _)\n        return sum + maxTwoDigitSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq7xtz681.scala:17:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxTwoDigitSum\u001b[0m = arr.take(k).foldLeft(\u001b[31m0L\u001b[0m)(_ + _)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979712
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for(i <- 0 until k){\n            sum += arr(i)\n        }\n        for(i <- 0 until k){\n            val num = arr(i)\n            if(num < 10){\n                sum += num\n            }\n            else{\n                val temp = sum\n                sum += num - 10\n                result.add(temp)\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvqb5350o.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvqb5350o.scala:13:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvqb5350o.scala:14:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            sum += arr(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvqb5350o.scala:16:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvqb5350o.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                sum += num\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvqb5350o.scala:23:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                sum += num - \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n6 errors found\n",
      "stdout": "",
      "timestamp": 1659979714
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toArray\n        val len = arr.length\n        val sum = 0L\n        val maxSum = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum2 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum3 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum4 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum5 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum6 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum7 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum8 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum9 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum10 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum11 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum12 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum13 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum14 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum15 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum16 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum17 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum18 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum19 = arr.take(k).foldLeft(0L){ (sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsa1_i658.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsa1_i658.scala:43:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpsa1_i658.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toArray\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsa1_i658.scala:42:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpsa1_i658.scala:34:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m34 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979713
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val maxDigit = maxDigits + 1\n        val digits = arr.take(k).map(_.toString).map(_.length)\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndex = maxDigitIndex + 1\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val maxDigit = maxDigits + 1\n        val digits = arr.take(k).map(_.toString).map(_.length)\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndex = maxDigitIndex + 1\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val maxDigit = maxDigits + 1\n        val digits = arr.take(k).map(_.toString).map(_.length)\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndex = maxDigitIndex + 1\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val maxDigit = maxDigits + 1\n        val digits = arr.take(k).map(_.toString).map(_.length)\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndex = maxDigitIndex + 1\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val maxDigit = maxDigits + 1\n        val digits = arr.take(k).map(_.toString).map(_.length)\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndex = maxDigitIndex + 1\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val maxDigit = maxDigits + 1\n        val digits = arr.take(k).map(_.toString).map(_.length)\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndex = maxDigitIndex + 1\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val maxDigit = maxDigits + 1\n        val digits = arr.take(k).map(_.toString).map(_.length)\n        val maxDigitIndex = digits.indexOf(maxDigit)\n        val maxDigitIndex = maxDigitIndex + 1\n        val maxDigits = arr.take(k).map(_.toString.length).max\n        val maxDigit = maxDigits + 1\n        val digits = arr.take(k).map(_.toString).map(_.length)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpuibjckfw.scala:51:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuibjckfw.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigitIndex\u001b[0m = maxDigitIndex + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigitIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigitIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuibjckfw.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigits\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuibjckfw.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxDigit\u001b[0m = maxDigits + \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxDigit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxDigit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpuibjckfw.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdigits\u001b[0m = arr.take(k).map(_.toString).map(_.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mdigits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mdigits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that",
      "stdout": "",
      "timestamp": 1659979715
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0\n        val twoDigits = arr.take(k).map(_.toString.length).max\n        for(i <- 0 until k){\n            sum += arr(i).toString.substring(0,twoDigits).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpi0xkiefl.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi0xkiefl.scala:15:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k){\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi0xkiefl.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            sum += arr(i).toString.substring(\u001b[31m0\u001b[0m,twoDigits).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean sum.!=?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979714
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n        val maxLenList = arr.take(maxLen)\n        val maxLenListSum = maxLenList.sum\n        val maxLenListSumList = maxLenListSum.toList\n        val maxLenListSumListSum = maxLenListSumList.sum\n        val maxLenListSumListSumList = maxLenListSumListSum.toList\n        val maxLenListSumListSumListSum = maxLenListSumListSumList.sum\n        val maxLenListSumListSumListSumList = maxLenListSumListSumList.toList\n        val maxLenListSumListSumListSumListSum = maxLenListSumListSumListSumList.toList\n        val maxLenListSumListSumListSumListSumList = maxLenListSumListSumListSumListList.toList\n        val maxLenListSumListSumListSumListSumListSum = maxLenListSumListSumListSumListSumListSum.toList\n        val maxLenListSumListSumListSumListSumListSumListSum = maxLenListSumListSumListSumListSumListSumListSum.toList\n        val maxLenListSumListSumListSumListSumListSumListSumListSum = maxLenListSumListSumListSumListSumListSumListSumListSum.toList\n        val maxLenListSumListSumListSumListSumListSumListSumListSum = maxLenListSumListSumListSumListSumListSumListSumListSumListSum.toList\n        val maxLenListSumListSumListSumListSumListSumListSumListSumListSumListSum = maxLenListSumListSumListSumListSumListSumListSumListSumListSumListSum.toList\n        val maxLenListSumListSumListSumListSumListSumListSumListSumListSumListSum = maxLenListSumListSumListSumListSumListSumListSumListSumListSumListSum.toList\n        val maxLenListSumListSumListSumListSumListSumListSumListSumListSumListSumListSum = maxLenListSumListSumListSumListSumListSumListSumListSumListSumListSumListSumListSum.toList\n        val maxLenListSumListSumListSumListSumListSumListSumListSumListSumListSumListSumListSum = maxLenListSumListSumListSumListSumListSumListSum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph9azvys5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenListSumListSumListSumListSumListSumListSumListSum\u001b[0m = maxLenListSumListSumListSumListSumListSumListSumListSumListSum.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenListSumListSumListSumListSumListSumListSumListSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenListSumListSumListSumListSumListSumListSumListSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmph9azvys5.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenListSumListSumListSumListSumListSumListSumListSumListSumListSum\u001b[0m = maxLenListSumListSumListSumListSumListSumListSumListSumListSumListSum.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenListSumListSumListSumListSumListSumListSumListSumListSumListSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenListSumListSumListSumListSumListSumListSumListSumListSumListSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmph9azvys5.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph9azvys5.scala:22:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenListSumListSumListSumLi",
      "stdout": "",
      "timestamp": 1659979713
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        val len = arr.length\n        val maxLength = len - k\n        for(i <- 0 until maxLength) {\n            val key = arr(i+k)\n            if(result.contains(key)) {\n                result(key) += arr(i)\n            } else {\n                result.put(key, arr(i))\n            }\n        }\n        val sum = 0L\n        for(i <- 0 until result.size) {\n            sum += result.get(i)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwustaea5.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwustaea5.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until maxLength) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (maxLength : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwustaea5.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mkey\u001b[0m = arr(i+k)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Long\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwustaea5.scala:24:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            sum += result.get(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Long - did you mean sum.!=?\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659979716
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.size\n        val maxLen = len - k\n        val maxSum = arr.take(maxLen).sum\n        val minSum = arr.drop(maxLen).sum\n        val sum = (maxSum + minSum) / 2\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpzin2k1in.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979712
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen / 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n        val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8 = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n        val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19 = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n        val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30 = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n        val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41 = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n        val maxLen46 = maxLen / 46\n        \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7zaoeu5c.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zaoeu5c.scala:61:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979641
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0L\n        val maxSum = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem }\n        val maxSum2 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum3 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum4 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum5 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum6 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum7 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum8 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum9 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum10 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum11 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum12 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum13 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum14 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum15 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum16 = arr.take(k).foldLeft(0L){ (sum, elem) => sum + elem.toString.toLong }\n        val maxSum17 = arr.take(k).foldLef\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp2_9mluf7.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2_9mluf7.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979716
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnxhrmibl.scala:21)\n\tat Problem.main(tmpnxhrmibl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1659979631
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n        arr.take(k).foreach(x => {\n            val length = x.toString().length\n            if (length > maxLength) {\n                val key = x.toString().substring(0, maxLength)\n                val value = x.toString().substring(maxLength)\n                result.put(key, value)\n            }\n        })\n        val sumOfTwoDigits = result.values.sum\n        sumOfTwoDigits\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2w897pdg.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2w897pdg.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2w897pdg.scala:19:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        arr.take(k).foreach(\u001b[36mx\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979718
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.HashMap[Long, Long]()\n        val len = arr.length\n        val maxLen = len - k\n        for(i <- 0 until maxLen) {\n            val cur = arr(i+k)\n            val cur2 = arr(i+k+1)\n            val cur3 = arr(i+k+2)\n            val cur4 = arr(i+k+3)\n            val cur5 = arr(i+k+4)\n            val cur6 = arr(i+k+5)\n            val cur7 = arr(i+k+6)\n            val cur8 = arr(i+k+7)\n            val cur9 = arr(i+k+8)\n            val cur10 = arr(i+k+9)\n            val cur11 = arr(i+k+10)\n            val cur12 = arr(i+k+11)\n            val cur13 = arr(i+k+12)\n            val cur14 = arr(i+k+13)\n            val cur15 = arr(i+k+14)\n            val cur16 = arr(i+k+15)\n            val cur17 = arr(i+k+16)\n            val cur18 = arr(i+k+17)\n            val cur19 = arr(i+k+18)\n            val cur20 = arr(i+k+19)\n            val cur21 = arr(i+k+20)\n            val cur22 = arr(i+k+21)\n            val cur23 = arr(i+k+22)\n            val cur24 = arr(i+k+23)\n            val cur25 = arr(i+k+24)\n            val cur26 = arr(i+k+25)\n            val cur27 = arr(i+k+26)\n            val cur28 = arr(i+k+27)\n            val cur29 = arr(i+k+28)\n            val cur30 = arr(i+k+29)\n            val cur31 = arr(i+k+30)\n            val cur32 = arr(i+k+31)\n            val cur33 = arr(i+k+32)\n            val cur34 = arr(i+k+33)\n            val cur35 = arr(i+k+34)\n            val cur36 = arr(i+k+35)\n            val cur37 = arr(i+k+36)\n            val cur38 = arr(i+k+37)\n            val cur39 = arr(i+k+38)\n            val cur40 = arr(i+\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpcchpgfmn.scala:54:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcur40\u001b[0m = arr(i+\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcchpgfmn.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcchpgfmn.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcchpgfmn.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until maxLen) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (maxLen : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcchpgfmn.scala:15:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcur\u001b[0m = arr(i+k)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Long\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcchpgfmn.scala:16:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcur2\u001b[0m = arr(i+k+\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b",
      "stdout": "",
      "timestamp": 1659979721
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        val maxLength = arr.take(k).map(_.toString).map(_.length).max\n        for(i <- 0 until k) {\n            val maxLength = arr.take(i).map(_.toString).map(_.length).max\n            val maxLength2 = arr.take(i + 1).map(_.toString).map(_.length).max\n            val maxLength3 = arr.take(i + 2).map(_.toString).map(_.length).max\n            val maxLength4 = arr.take(i + 3).map(_.toString).map(_.length).max\n            val maxLength5 = arr.take(i + 4).map(_.toString).map(_.length).max\n            val maxLength6 = arr.take(i + 5).map(_.toString).map(_.length).max\n            val maxLength7 = arr.take(i + 6).map(_.toString).map(_.length).max\n            val maxLength8 = arr.take(i + 7).map(_.toString).map(_.length).max\n            val maxLength9 = arr.take(i + 8).map(_.toString).map(_.length).max\n            val maxLength10 = arr.take(i + 9).map(_.toString).map(_.length).max\n            val maxLength11 = arr.take(i + 10).map(_.toString).map(_.length).max\n            val maxLength12 = arr.take(i + 11).map(_.toString).map(_.length).max\n            val maxLength13 = arr.take(i + 12).map(_.toString).map(_.length).max\n            val maxLength14 = arr.take(i + 13).map(_.toString).map(_.length).max\n            val maxLength15 = arr.take(i + 14).map(_.toString).map(_.length).max\n            val maxLength16 = arr.take(i + 15).map(_.toString).map(_.length).max\n            val maxLength17 = arr.take(i + 16).map(_.toString).map(_.length).max\n            val maxLength18 = arr.take(i + 17).map(_.toString).map(_.length).max\n            val maxLength19 = arr.take(i + 18).map(_.toString).map(_.length).max\n            val maxLength20 = arr.take(i + 19).map(_.toString).map(_.length).max\n            val maxLength21 = arr.take(i + 20).map(_.toString).map(_.length).max\n            val maxLength22 = arr.take(i + 21).map(_.toString).map(_.length).max\n            val maxLength23 = \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpczyo2m69.scala:36:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmaxLength23\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpczyo2m69.scala:47:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczyo2m69.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpczyo2m69.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString).map(_.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpczyo2m69.scala:13:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m until k) {\n\u001b[31m\u001b[31m   |\u001b[0m                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    (k : Long)\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpczyo2m69.scala:46:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m ",
      "stdout": "",
      "timestamp": 1659979719
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i <- 0 until arr.size) {\n            if (sum + arr(i) <= k) {\n                sum += arr(i)\n                result += arr(i)\n            }\n        }\n        result.sum\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplxdtsvlm.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659979716
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val arr = arr.toList\n        val len = arr.length\n        val maxLen = len - k\n        val maxLenIndex = maxLen - 1\n        val maxLenValue = arr(maxLenIndex)\n        val maxLenValueIndex = maxLenIndex - 1\n        val maxLenValueValue = arr(maxLenValueIndex)\n        val maxLenValueValueIndex = maxLenValueIndex - 1\n        val maxLenValueValueValue = arr(maxLenValueValueIndex)\n        val maxLenValueValueValueIndex = maxLenValueValueIndex - 1\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueIndex =\n            maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex =\n            maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex =\n            maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr(maxLenValueValueValueIndex)\n        val maxLenValueValueValueValueIndex = maxLenValueValueValueIndex - 1\n        val maxLenValueValueValueValueValue = arr\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptolpk_s1.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueIndex\u001b[0m =\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m24 |\u001b[0m            maxLenValueValueValueIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptolpk_s1.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValue\u001b[0m = arr(maxLenValueValueValueIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptolpk_s1.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueIndex\u001b[0m = maxLenValueValueValueIndex - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValueIndex is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValueIndex\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptolpk_s1.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLenValueValueValueValueValue\u001b[0m = arr(maxLenValueValueValueIndex)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmaxLenValueValueValueValueValue is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmaxLenValueValueValueValueValue\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote t",
      "stdout": "",
      "timestamp": 1659979718
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n        val maxLength = arr.take(k).map(_.toString.length).max\n        val maxLength2 = arr.take(k).map(_.toString.length).filter(_ > 2).max\n        val maxLength3 = arr.take(k).map(_.toString.length).filter(_ > 3).max\n        val maxLength4 = arr.take(k).map(_.toString.length).filter(_ > 4).max\n        val maxLength5 = arr.take(k).map(_.toString.length).filter(_ > 5).max\n        val maxLength6 = arr.take(k).map(_.toString.length).filter(_ > 6).max\n        val maxLength7 = arr.take(k).map(_.toString.length).filter(_ > 7).max\n        val maxLength8 = arr.take(k).map(_.toString.length).filter(_ > 8).max\n        val maxLength9 = arr.take(k).map(_.toString.length).filter(_ > 9).max\n        val maxLength10 = arr.take(k).map(_.toString.length).filter(_ > 10).max\n        val maxLength11 = arr.take(k).map(_.toString.length).filter(_ > 11).max\n        val maxLength12 = arr.take(k).map(_.toString.length).filter(_ > 12).max\n        val maxLength13 = arr.take(k).map(_.toString.length).filter(_ > 13).max\n        val maxLength14 = arr.take(k).map(_.toString.length).filter(_ > 14).max\n        val maxLength15 = arr.take(k).map(_.toString.length).filter(_ > 15).max\n        val maxLength16 = arr.take(k).map(_.toString.length).filter(_ > 16).max\n        val maxLength17 = arr.take(k).map(_.toString.length).filter(_ > 17).max\n        val maxLength18 = arr.take(k).map(_.toString.length).filter(_ > 18).max\n        val maxLength19 = arr.take(k).map(_.toString.length).filter(_ > 19).max\n        val maxLength20 = arr.take(k).map(_.toString.length).filter(_ > 20).max\n        val maxLength21 = arr.take(k).map(_.toString.length).filter(_ > 21).max\n        val maxLength22 = arr.take(k).map(_.to\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_m31qyz5.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_m31qyz5.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_m31qyz5.scala:18:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength\u001b[0m = arr.take(k).map(_.toString.length).max\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_m31qyz5.scala:19:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength2\u001b[0m = arr.take(k).map(_.toString.length).filter(_ > \u001b[31m2\u001b[0m).max\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_m31qyz5.scala:20:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxLength3\u001b[0m = arr.take(k).map(_.toString.length).filter(_ > \u001b[31m3\u001b[0m).max\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[3",
      "stdout": "",
      "timestamp": 1659979721
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val max = (len/k).toInt\n        val sum = 0L\n        val max2 = max\n        val max3 = max\n        val max4 = max\n        val max5 = max\n        val max6 = max\n        val max7 = max\n        val max8 = max\n        val max9 = max\n        val max10 = max\n        val max11 = max\n        val max12 = max\n        val max13 = max\n        val max14 = max\n        val max15 = max\n        val max16 = max\n        val max17 = max\n        val max18 = max\n        val max19 = max\n        val max20 = max\n        val max21 = max\n        val max22 = max\n        val max23 = max\n        val max24 = max\n        val max25 = max\n        val max26 = max\n        val max27 = max\n        val max28 = max\n        val max29 = max\n        val max30 = max\n        val max31 = max\n        val max32 = max\n        val max33 = max\n        val max34 = max\n        val max35 = max\n        val max36 = max\n        val max37 = max\n        val max38 = max\n        val max39 = max\n        val max40 = max\n        val max41 = max\n        val max42 = max\n        val max43 = max\n        val max44 = max\n        val max45 = max\n        val max46 = max\n        val max47 = max\n        val max48 = max\n        val max49 = max\n        val max50 = max\n        val max51 = max\n        val max52 = max\n        val max53 = max\n        val max54 = max\n        val max55 = max\n        val max56 = max\n        val max57 = max\n        val max58 = max\n        val max59 = max\n        val max60 = max\n        val max61 = max\n        val max62 = max\n        val max63 = max\n        val max64 = max\n        val max65 = max\n        val max66 = max\n        val max67 = max\n        val max68 = max\n        val max69 = max\n        val max70 = max\n        val max71 = max\n        val max7\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphcxvq0sf.scala:86:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphcxvq0sf.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcxvq0sf.scala:86:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979719
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0L\n        val maxSum = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpx43oo7t2.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx43oo7t2.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979718
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = 0L\n        val twoDigits = arr.take(k).map(_.toString.toInt)\n        val twoDigitsSum = twoDigits.sum\n        val threeDigits = arr.drop(twoDigits.size)\n        val threeDigitsSum = threeDigits.sum\n        val fourDigits = threeDigits.drop(threeDigitsSum)\n        val fourDigitsSum = fourDigits.sum\n        val fiveDigits = fourDigits.drop(fourDigitsSum)\n        val fiveDigitsSum = fiveDigits.sum\n        val sixDigits = fiveDigits.drop(fiveDigitsSum)\n        val sixDigitsSum = sixDigits.sum\n        val sevenDigits = sixDigits.drop(sixDigitsSum)\n        val sevenDigitsSum = sevenDigits.sum\n        val eightDigits = sevenDigits.drop(sevenDigitsSum)\n        val eightDigitsSum = eightDigits.sum\n        val nineDigits = eightDigits.drop(eightDigitsSum)\n        val nineDigitsSum = nineDigits.sum\n        val tenDigits = nineDigits.drop(nineDigitsSum)\n        val tenDigitsSum = tenDigits.sum\n        val elevenDigits = tenDigits.drop(tenDigitsSum)\n        val elevenDigitsSum = elevenDigits.sum\n        val twelveDigits = elevenDigits.drop(elevenDigitsSum)\n        val twelveDigitsSum = twelveDigits.sum\n        val thirteenDigits = twelveDigits.drop(twelveDigitsSum)\n        val thirteenDigitsSum = thirteenDigits.sum\n        val fourteenDigits = thirteenDigits.drop(thirteenDigitsSum)\n        val fourteenDigitsSum = fourteenDigits.sum\n        val fifteenDigits = fourteenDigits.drop(fourteenDigitsSum)\n        val fifteenDigitsSum = fifteenDigits.sum\n        val sixteenDigits = fifteenDigits.drop(fifteenDigitsSum)\n        val sixteenDigitsSum = sixteenDigits.sum\n        val seventeenDigits = sixteenDigits.drop(sixteenDigitsSum)\n        val seventeenDigitsSum = seventeenDigits.sum\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpqo_vbnh1.scala:44:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqo_vbnh1.scala:12:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtwoDigits\u001b[0m = arr.take(k).map(_.toString.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (k : Long)\n\u001b[31m   |\u001b[0m                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqo_vbnh1.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfourDigits\u001b[0m = threeDigits.drop(threeDigitsSum)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (threeDigitsSum : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqo_vbnh1.scala:18:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mfiveDigits\u001b[0m = fourDigits.drop(fourDigitsSum)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (fourDigitsSum : Long)\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqo_vbnh1.scala:20:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msixDigits\u001b[0m = fiveDigits.drop(fiveDigitsSum)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m     ",
      "stdout": "",
      "timestamp": 1659979720
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0\n        val maxSum = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum24 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum25 = arr.take(k).foldLeft(0)(_ + _)\n        val maxSum26 = \n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9_msm7qa.scala:39:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum26\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp9_msm7qa.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9_msm7qa.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659979719
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            sum += arr(i)\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n                sum -= arr(i)\n            }\n            if (sum > k) {\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps2qtabyf.scala:128:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m128 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps2qtabyf.scala:11:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps2qtabyf.scala:13:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m 13 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until arr.length) {\n\u001b[31m\u001b[31m    |\u001b[0m        ^\u001b[0m\n\u001b[31m    |\u001b[0m        Found:    Unit\n\u001b[31m    |\u001b[0m        Required: Long\n\u001b[31m 14 |\u001b[0m            sum += arr(i)\n\u001b[31m 15 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 16 |\u001b[0m                sum -= arr(i)\n\u001b[31m 17 |\u001b[0m            }\n\u001b[31m 18 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 19 |\u001b[0m                sum -= arr(i)\n\u001b[31m 20 |\u001b[0m            }\n\u001b[31m 21 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 22 |\u001b[0m                sum -= arr(i)\n\u001b[31m 23 |\u001b[0m            }\n\u001b[31m 24 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 25 |\u001b[0m                sum -= arr(i)\n\u001b[31m 26 |\u001b[0m            }\n\u001b[31m 27 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 28 |\u001b[0m                sum -= arr(i)\n\u001b[31m 29 |\u001b[0m            }\n\u001b[31m 30 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 31 |\u001b[0m                sum -= arr(i)\n\u001b[31m 32 |\u001b[0m            }\n\u001b[31m 33 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 34 |\u001b[0m                sum -= arr(i)\n\u001b[31m 35 |\u001b[0m            }\n\u001b[31m 36 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 37 |\u001b[0m                sum -= arr(i)\n\u001b[31m 38 |\u001b[0m            }\n\u001b[31m 39 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b[31m 40 |\u001b[0m                sum -= arr(i)\n\u001b[31m 41 |\u001b[0m            }\n\u001b[31m 42 |\u001b[0m            \u001b[33mif\u001b[0m (sum > k) {\n\u001b",
      "stdout": "",
      "timestamp": 1659979720
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val maxLen = arr.length\n        val maxSum = arr.take(k).sum\n        val maxSum2 = arr.take(k).sum\n        val maxSum3 = arr.take(k).sum\n        val maxSum4 = arr.take(k).sum\n        val maxSum5 = arr.take(k).sum\n        val maxSum6 = arr.take(k).sum\n        val maxSum7 = arr.take(k).sum\n        val maxSum8 = arr.take(k).sum\n        val maxSum9 = arr.take(k).sum\n        val maxSum10 = arr.take(k).sum\n        val maxSum11 = arr.take(k).sum\n        val maxSum12 = arr.take(k).sum\n        val maxSum13 = arr.take(k).sum\n        val maxSum14 = arr.take(k).sum\n        val maxSum15 = arr.take(k).sum\n        val maxSum16 = arr.take(k).sum\n        val maxSum17 = arr.take(k).sum\n        val maxSum18 = arr.take(k).sum\n        val maxSum19 = arr.take(k).sum\n        val maxSum20 = arr.take(k).sum\n        val maxSum21 = arr.take(k).sum\n        val maxSum22 = arr.take(k).sum\n        val maxSum23 = arr.take(k).sum\n        val maxSum24 = arr.take(k).sum\n        val maxSum25 = arr.take(k).sum\n        val maxSum26 = arr.take(k).sum\n        val maxSum27 = arr.take(k).sum\n        val maxSum28 = arr.take(k).sum\n        val maxSum29 = arr.take(k).sum\n        val maxSum30 = arr.take(k).sum\n        val maxSum31 = arr.take(k).sum\n        val maxSum32 = arr.take(k).sum\n        val maxSum33 = arr.take(k).sum\n        val maxSum34 = arr.take(k).sum\n        val maxSum35 = arr.take(k).sum\n        val maxSum36 = arr.take(k).sum\n        val maxSum37 = arr.take(k).sum\n        val maxSum38 = arr.take(k).sum\n        val maxSum39 = arr.take(k).sum\n        val maxSum40 = arr.take(k).sum\n        val maxSum41 = arr.take(k).sum\n        val maxSum42 = arr.take(k).sum\n        val maxSum43 = arr.take(k).sum\n\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd2vkg6ri.scala:12:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum\u001b[0m = arr.take(k).sum\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (k : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd2vkg6ri.scala:13:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum2\u001b[0m = arr.take(k).sum\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (k : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd2vkg6ri.scala:14:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum3\u001b[0m = arr.take(k).sum\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (k : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd2vkg6ri.scala:15:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum4\u001b[0m = arr.take(k).sum\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (k : Long)\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd2vkg6ri.scala:16:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxSum5\u001b[0m = arr.take(k).sum\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    (k : Long)\n\u001b[31m   |\u001b[0m               ",
      "stdout": "",
      "timestamp": 1659979721
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty array of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arr = arr.toList\n        val len = arr.length\n        val sum = 0L\n        val maxSum = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum2 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum3 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum4 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum5 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum6 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum7 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum8 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum9 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum10 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum11 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum12 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum13 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum14 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum15 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum16 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum17 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum18 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum19 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum20 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum21 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum22 = arr.take(k).foldLeft(0L)(_ + _)\n        val maxSum23 = arr.take(k).foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong, 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong, 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n    assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n    assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpx43oo7t2.scala:11:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36marr\u001b[0m = arr.toList\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35marr\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx43oo7t2.scala:37:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659979718
    }
  ]
}