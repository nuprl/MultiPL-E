name: HumanEval_56_correct_bracketing
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // brackets is a string of \"<\" and \">\".\n    // return True if every opening\
  \ bracket has a corresponding closing bracket.\n    def correctBracketing(brackets\
  \ : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
  <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n   \
  \ assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
  <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
  )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
  <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
  >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n    assert(correctBracketing((\"\
  <><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        val closingBracketsMap = mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(x => {\n            val key = x.trim\n\
    \            openingBracketsMap += key -> openingBracketsMap.getOrElse(key, 0)\
    \ + 1\n        })\n        closingBrackets.foreach(x => {\n            val key\
    \ = x.trim\n            closingBracketsMap += key -> closingBracketsMap.getOrElse(key,\
    \ 0) + 1\n        })\n        openingBracketsMap.forall(_._2 > 0)\n        &&\
    \ closingBracketsMap.forall(_._2 > 0)", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(x => closingBrackets.contains(x))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        for(i <- 0 until bracketsArray.length){\n            if(bracketsArray(i)\
    \ == '<'){\n                openingBracketsCount += 1\n                openingBrackets\
    \ += bracketsArray(i)\n            }\n            if(bracketsArray(i) == '>'){\n\
    \                closingBracketsCount += 1\n                closingBrackets +=\
    \ bracketsArray(i)\n            }\n        }\n        if(openingBracketsCount\
    \ == closingBracketsCount){\n            true\n        }\n        else{\n    \
    \        false\n        }", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets,\
    \ _.length).forall(x => x._1 == x._2)", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(x => closingBrackets.contains(x))", "      \
    \  val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = new mutable.HashMap[String, Int]()\n        val closingBracketsMap = new mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(x => {\n            val y = x.split(\"\
    -\")\n            openingBracketsMap += (y(0) -> 1)\n        })\n        closingBrackets.foreach(x\
    \ => {\n            val y = x.split(\"-\")\n            closingBracketsMap +=\
    \ (y(0) -> 1)\n        })\n        openingBracketsMap.foreach {\n            case\
    \ (k, v) =>\n                val count = closingBracketsMap.get(k)\n         \
    \       if (count != 0) {\n                    val newCount = count - 1\n    \
    \                closingBracketsMap += (k -> newCount)\n                }\n  \
    \      }\n        closingBracketsMap.foreach {\n            case (k, v) =>\n \
    \               val count = openingBracketsMap.get(k)\n                if (count\
    \ != 0) {\n                    val newCount = count - 1\n                    openingBracketsMap\
    \ += (k -> newCount)\n                }\n        }\n        openingBracketsMap.size\
    \ == closingBracketsMap.size", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = new mutable.HashMap[String, Int]()\n        val closingBracketsMap = new mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(x => {\n            val y = x.split(\"\
    -\")\n            openingBracketsMap += (y(0) -> 1)\n        })\n        closingBrackets.foreach(x\
    \ => {\n            val y = x.split(\"-\")\n            closingBracketsMap +=\
    \ (y(0) -> 1)\n        })\n        openingBracketsMap.foreach { case (k, v) =>\n\
    \            val count = closingBracketsMap.get(k)\n            if (count != 0)\
    \ {\n                val newCount = count - 1\n                closingBracketsMap\
    \ += (k -> newCount)\n            }\n        }\n        openingBracketsMap ==\
    \ closingBracketsMap", "        val bracketsArray = brackets.toCharArray\n   \
    \     val openingBracketsArray = Array(\"<\", \">\")\n        val closingBracketsArray\
    \ = Array(\"<\", \">\")\n        val openingBracketsCount = openingBracketsArray.length\n\
    \        val closingBracketsCount = closingBracketsArray.length\n        val openingBracketsArrayLength\
    \ = openingBracketsArray.length\n        val closingBracketsArrayLength = closingBracketsArray.length\n\
    \        var openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        var openingBracketsArrayLength = 0\n        var closingBracketsArrayLength\
    \ = 0\n        var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsCount = 0\n        var closingBracketsCount = 0\n      \
    \  var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsCount = 0\n        var closingBracketsCount = 0\n      \
    \  var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsCount = 0\n        var closingBracketsCount = 0\n      \
    \  var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var openingBracketsCount = 0\n        var closingBracketsCount = 0\n      \
    \  var openingBracketsArray = Array.empty[String]\n        var closingBracketsArray\
    \ = Array.empty[String]\n        var openingBracketsArrayLength = openingBracketsArray.length\n\
    \        var closingBracketsArrayLength = closingBracketsArray.length\n      \
    \  var opening", "        val openingBrackets = brackets.split(\"<\")\n      \
    \  val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))", "        val bracketsArray = brackets.toCharArray\n\
    \        val bracketsArrayLength = bracketsArray.length\n        var openingBracketsCount\
    \ = 0\n        var closingBracketsCount = 0\n        var openingBracketsCountInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracket = 0\n        var openingBracketsCountInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracket = 0\n      \
    \  var openingBracketsCountInsideBracketInsideBracketInsideBracket = 0\n     \
    \   var closingBracketsCountInsideBracketInsideBracketInsideBracket = 0\n    \
    \    var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var openingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketInsideBracket\
    \ = 0\n        var closingBracketsCountInsideBracketInsideBracketInsideBracketInsideBracketInsideBracketIn",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = new mutable.HashMap[String, Int]()\n        val closingBracketsMap = new mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(x => {\n            val openingBracket\
    \ = x.split(\"-\")\n            openingBracketsMap.put(openingBracket(0), openingBracketsMap.getOrElse(openingBracket(0),\
    \ 0) + 1)\n        })\n        closingBrackets.foreach(x => {\n            val\
    \ closingBracket = x.split(\"-\")\n            closingBracketsMap.put(closingBracket(0),\
    \ closingBracketsMap.getOrElse(closingBracket(0), 0) + 1)\n        })\n      \
    \  openingBracketsMap.forall { case (k, v) => closingBracketsMap.get(k) == v }",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        openingBrackets.forall(x => closingBrackets.contains(x))", "   \
    \     val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets, (a,\
    \ b) => a != b).forall(x => x._1 == x._2)", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        val closingBracketsMap = mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(x => {\n            val openingBracket\
    \ = x.trim\n            val closingBracket = closingBrackets.find(y => y.trim\
    \ == openingBracket).trim\n            openingBracketsMap(openingBracket) = openingBracketsMap(openingBracket)\
    \ + 1\n            closingBracketsMap(closingBracket) = closingBracketsMap(closingBracket)\
    \ + 1\n        })\n        openingBracketsMap.forall(x => closingBracketsMap(x)\
    \ == openingBracketsMap(x))", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(c => c == '<')\n        val closingBracketsCount = bracketsArray.count(c\
    \ => c == '>')\n        openingBracketsCount == closingBracketsCount", "     \
    \   val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.zipAll(closingBrackets, _.length).forall { case (opening,\
    \ closing, length) =>\n            opening == closing\n        }", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsMap = mutable.HashMap[String,\
    \ Int]()\n        val closingBracketsMap = mutable.HashMap[String, Int]()\n  \
    \      openingBrackets.foreach(x => {\n            val openingBracket = x.split(\"\
    [\")\n            val closingBracket = x.split(\"]\")\n            val openingBracketCount\
    \ = openingBracket.length\n            val closingBracketCount = closingBracket.length\n\
    \            openingBracketCount match {\n                case 1 => {\n      \
    \              openingBracketsMap.put(openingBracket(0), openingBracketCount)\n\
    \                }\n                case 2 => {\n                    openingBracketsMap.put(openingBracket(0),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(1),\
    \ openingBracketCount)\n                }\n                case 3 => {\n     \
    \               openingBracketsMap.put(openingBracket(0), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(1), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(2), openingBracketCount)\n\
    \                }\n                case 4 => {\n                    openingBracketsMap.put(openingBracket(0),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(1),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(2),\
    \ openingBracketCount)\n                    openingBracketsMap.put(openingBracket(3),\
    \ openingBracketCount)\n                }\n                case 5 => {\n     \
    \               openingBracketsMap.put(openingBracket(0), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(1), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(2), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(3), openingBracketCount)\n\
    \                    openingBracketsMap.put(openingBracket(4), openingBracketCount)\n\
    \                }\n                case 6 => {\n                    openingBracketsMap.put(openingBracket(0),\
    \ openingBracketCoun", "        val openingBrackets = brackets.split(\"<\")\n\
    \        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val bracketsArray =\
    \ brackets.toCharArray\n        val openingBracketsCount = bracketsArray.count(_\
    \ == '<')\n        val closingBracketsCount = bracketsArray.count(_ == '>')\n\
    \        openingBracketsCount != closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsMap = new mutable.HashMap[String,\
    \ Int]()\n        val closingBracketsMap = new mutable.HashMap[String, Int]()\n\
    \        openingBrackets.foreach(x => {\n            val openingBracket = x.trim\n\
    \            val closingBracket = closingBrackets.find(y => y.trim==openingBracket).trim\n\
    \            openingBracketsMap += openingBracket -> openingBracketsMap.getOrElse(openingBracket,\
    \ 0)+1\n            closingBracketsMap += closingBracket -> closingBracketsMap.getOrElse(closingBracket,\
    \ 0)-1\n        })\n        openingBracketsMap.forall(_._2==0)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        if (openingBracketsCount != closingBracketsCount)\
    \ {\n            return false\n        }\n        var openingBracketsIndex = 0\n\
    \        var closingBracketsIndex = 0\n        while (openingBracketsIndex < openingBracketsCount\
    \ && closingBracketsIndex < closingBracketsCount) {\n            if (openingBrackets(openingBracketsIndex)\
    \ != closingBrackets(closingBracketsIndex)) {\n                return false\n\
    \            }\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        }\n        return true", "        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        for (i <- 0 until bracketsArray.length) {\n\
    \            if (bracketsArray(i) == '<') {\n                openingBrackets +=\
    \ bracketsArray(i + 1)\n            } else if (bracketsArray(i) == '>') {\n  \
    \              closingBrackets += bracketsArray(i + 1)\n            }\n      \
    \  }\n        openingBrackets.size == closingBrackets.size", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(x => closingBrackets.contains(x))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(x => closingBrackets.contains(x))", "      \
    \  val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = new mutable.HashMap[String, Int]()\n        val closingBracketsMap = new mutable.HashMap[String,\
    \ Int]()\n        for (i <- 0 until openingBracketsCount) {\n            val openingBracket\
    \ = openingBrackets(i)\n            val closingBracket = closingBrackets(i)\n\
    \            openingBracketsMap.put(openingBracket, openingBracketsMap.getOrElse(openingBracket,\
    \ 0) + 1)\n            closingBracketsMap.put(closingBracket, closingBracketsMap.getOrElse(closingBracket,\
    \ 0) + 1)\n        }\n        for (i <- 0 until closingBracketsCount) {\n    \
    \        val openingBracket = openingBrackets(i)\n            val closingBracket\
    \ = closingBrackets(i)\n            val openingBracketsCount = openingBracketsMap.getOrElse(openingBracket,\
    \ 0)\n            val closingBracketsCount = closingBracketsMap.getOrElse(closingBracket,\
    \ 0)\n            if (openingBracketsCount != closingBracketsCount) {\n      \
    \          return false\n            }\n        }\n        true", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsMap = mutable.Map[String,\
    \ Int]()\n        val closingBracketsMap = mutable.Map[String, Int]()\n      \
    \  openingBrackets.foreach(openingBracket => {\n            val openingBracketIndex\
    \ = openingBracket.indexOf(\"(\")\n            val closingBracketIndex = openingBracket.indexOf(\"\
    )\")\n            openingBracketsMap(openingBracket) = openingBracketIndex\n \
    \           closingBracketsMap(openingBracket) = closingBracketIndex\n       \
    \ })\n        closingBrackets.foreach(closingBracket => {\n            val openingBracketIndex\
    \ = closingBracket.indexOf(\"(\")\n            val closingBracketIndex = closingBracket.indexOf(\"\
    )\")\n            openingBracketsMap(closingBracket) = openingBracketIndex\n \
    \           closingBracketsMap(closingBracket) = closingBracketIndex\n       \
    \ })\n        openingBracketsMap.forall(_._2 != closingBracketsMap(_._2))", " \
    \       val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        var\
    \ openingBracketsIndex = 0\n        var closingBracketsIndex = 0\n        while\
    \ (openingBracketsIndex < openingBracketsCount && closingBracketsIndex < closingBracketsCount)\
    \ {\n            if (openingBrackets(openingBracketsIndex) != closingBrackets(closingBracketsIndex))\
    \ {\n                return false\n            }\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        }\n        return true",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets, (a,\
    \ b) => a != b).forall { case (a, b) => a }", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsMap = new mutable.HashMap[String,\
    \ Int]()\n        val closingBracketsMap = new mutable.HashMap[String, Int]()\n\
    \        openingBrackets.foreach(openingBracket => {\n            val closingBracket\
    \ = closingBrackets(openingBracketsCount - 1)\n            openingBracketsMap.put(openingBracket,\
    \ closingBracketsMap.getOrElse(closingBracket, 0) + 1)\n        })\n        closingBrackets.foreach(closingBracket\
    \ => {\n            val openingBracket = openingBracketsMap.getOrElse(closingBracket,\
    \ 0)\n            closingBracketsMap.put(closingBracket, openingBracketsMap.getOrElse(openingBracket,\
    \ 0) - 1)\n        })\n        openingBracketsMap.size == closingBracketsMap.size",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        var openingBracketCount = 0\n        var closingBracketCount = 0\n  \
    \      var openingBracketIndex = 0\n        var closingBracketIndex = 0\n    \
    \    while (openingBracketIndex < bracketsArray.length) {\n            val currentChar\
    \ = bracketsArray(openingBracketIndex)\n            if (currentChar == '<') {\n\
    \                openingBracketCount += 1\n                openingBracketIndex\
    \ += 1\n            } else if (currentChar == '>') {\n                closingBracketCount\
    \ += 1\n                closingBracketIndex += 1\n            } else {\n     \
    \           openingBracketCount -= 1\n                closingBracketCount -= 1\n\
    \            }\n            if (openingBracketCount == 0 && closingBracketCount\
    \ == 0) {\n                openingBracketIndex += 1\n                closingBracketIndex\
    \ += 1\n            }\n        }\n        return openingBracketIndex == closingBracketIndex",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(c => c == '<')\n        val closingBracketsCount = bracketsArray.count(c\
    \ => c == '>')\n        openingBracketsCount == closingBracketsCount", "     \
    \   val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.filter(c => c == '<').length\n        val closingBracketsCount\
    \ = bracketsArray.filter(c => c == '>').length\n        openingBracketsCount ==\
    \ closingBracketsCount", "        val openingBrackets = brackets.split(\"<\")\n\
    \        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = new mutable.HashMap[String, Int]()\n        val closingBracketsMap = new mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(x => openingBracketsMap += (x -> 1))\n\
    \        closingBrackets.foreach(x => closingBracketsMap += (x -> 1))\n      \
    \  openingBracketsMap.foreach(x => openingBracketsMap += (x -> openingBracketsMap.getOrElse(x,\
    \ 0) - 1))\n        closingBracketsMap.foreach(x => closingBracketsMap += (x ->\
    \ closingBracketsMap.getOrElse(x, 0) - 1))\n        openingBracketsMap.forall(x\
    \ => closingBracketsMap.getOrElse(x, 0) == 0)", "        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        val openingBracketsArray = mutable.ArrayBuffer.empty[Char]\n\
    \        val closingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        for\
    \ (i <- 0 until bracketsArray.length) {\n            val c = bracketsArray(i)\n\
    \            if (c == '<') {\n                openingBrackets += c\n         \
    \       openingBracketsArray += c\n            } else if (c == '>') {\n      \
    \          closingBrackets += c\n                closingBracketsArray += c\n \
    \           }\n        }\n        openingBrackets.size == closingBrackets.size",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        val closingBracketsMap = mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(x => {\n            val openingBracket\
    \ = x.trim\n            val closingBracket = closingBrackets(openingBracketsCount\
    \ - openingBracketsMap.getOrElse(openingBracket, 0) - 1).trim\n            openingBracketsMap\
    \ += (openingBracket -> 1)\n            closingBracketsMap += (closingBracket\
    \ -> 1)\n        })\n        closingBrackets.foreach(x => {\n            val openingBracket\
    \ = x.trim\n            val closingBracket = openingBracketsMap.getOrElse(openingBracket,\
    \ \"\").trim\n            openingBracketsMap += (openingBracket -> -1)\n     \
    \       closingBracketsMap += (closingBracket -> -1)\n        })\n        openingBracketsMap.forall(x\
    \ => closingBracketsMap.getOrElse(x._1, \"\") == x._2)", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount", "        val bracketsArray = brackets.toCharArray\n\
    \        val openingBrackets = mutable.HashSet[Char]()\n        val closingBrackets\
    \ = mutable.HashSet[Char]()\n        val openingBracketsArray = mutable.ArrayBuffer.empty[Char]\n\
    \        val closingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        val\
    \ openingBracketsCount = mutable.HashSet[Int]()\n        val closingBracketsCount\
    \ = mutable.HashSet[Int]()\n        var openingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n    \
    \    var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n  \
    \      var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n\
    \        var openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        val closingBracketsMap = mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(openingBracket => {\n            val\
    \ closingBracket = closingBrackets(openingBracketsMap.get(openingBracket))\n \
    \           openingBracketsMap.put(openingBracket, openingBracketsMap.get(openingBracket)\
    \ + 1)\n            closingBracketsMap.put(closingBracket, closingBracketsMap.get(closingBracket)\
    \ + 1)\n        })\n        openingBracketsMap.size == closingBracketsMap.size",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        var openingBracketsCount = 0\n        var closingBracketsCount = 0\n\
    \        for(i <- 0 until bracketsArray.length){\n            if(bracketsArray(i)\
    \ == '<'){\n                openingBracketsCount += 1\n                openingBrackets\
    \ += bracketsArray(i)\n            }\n            else if(bracketsArray(i) ==\
    \ '>'){\n                closingBracketsCount += 1\n                closingBrackets\
    \ += bracketsArray(i)\n            }\n        }\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets,\
    \ (a, b) => a != b).forall(x => x._2)", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        val openingBracketsCount = mutable.HashMap[Char, Int]()\n        val\
    \ closingBracketsCount = mutable.HashMap[Char, Int]()\n        val openingBracketsCountArray\
    \ = mutable.ArrayBuffer.empty[Int]\n        val closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until bracketsArray.length) {\n            val currentChar\
    \ = bracketsArray(i)\n            if (currentChar == '<') {\n                openingBrackets\
    \ += currentChar\n                openingBracketsCount += currentChar -> 1\n \
    \               openingBracketsCountArray += openingBracketsCount.getOrElse(currentChar,\
    \ 0)\n            }\n            if (currentChar == '>') {\n                closingBrackets\
    \ += currentChar\n                closingBracketsCount += currentChar -> 1\n \
    \               closingBracketsCountArray += closingBracketsCount.getOrElse(currentChar,\
    \ 0)\n            }\n        }\n        openingBracketsCountArray.forall(x =>\
    \ x == closingBracketsCountArray.last)", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val bracketsArray =\
    \ brackets.toCharArray\n        val openingBracketsCount = bracketsArray.count(c\
    \ => c == '<')\n        val closingBracketsCount = bracketsArray.count(c => c\
    \ == '>')\n        openingBracketsCount == closingBracketsCount", "        val\
    \ bracketsArray = brackets.toCharArray\n        val bracketsArrayLength = bracketsArray.length\n\
    \        val openingBracketsCount = bracketsArray.count(_ == '<')\n        val\
    \ closingBracketsCount = bracketsArray.count(_ == '>')\n        openingBracketsCount\
    \ != closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(x => closingBrackets.contains(x))", "      \
    \  val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.zipAll(closingBrackets, (a,\
    \ b) => a + b).forall(x => x == 0)", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(x\
    \ => closingBrackets.contains(x))", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(x\
    \ => closingBrackets.contains(x))", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        openingBrackets.forall(x => closingBrackets.contains(x))", "   \
    \     val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ bracketsArray = brackets.toCharArray\n        val openingBracketsArray = Array(\"\
    <\", \">\")\n        val closingBracketsArray = Array(\"<\", \">\")\n        val\
    \ openingBracketsCount = openingBracketsArray.length\n        val closingBracketsCount\
    \ = closingBracketsArray.length\n        val openingBracketsMap = mutable.HashMap[Char,\
    \ Int]()\n        val closingBracketsMap = mutable.HashMap[Char, Int]()\n    \
    \    var openingBracketsCountInCurrentLine = 0\n        var closingBracketsCountInCurrentLine\
    \ = 0\n        var currentLine = 0\n        var currentLineChar = 0\n        var\
    \ currentLineCharCount = 0\n        var currentLineCharCountInCurrentLine = 0\n\
    \        var currentLineCharCountInCurrentLineInCurrentLine = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var currentLineCharCountInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLineInCurrentLine\
    \ = 0\n        var ", "        val openingBrackets = brackets.split(\"<\")\n \
    \       val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsMap = mutable.Map[Char, Int]()\n        val closingBracketsMap\
    \ = mutable.Map[Char, Int]()\n        openingBrackets.foreach(c => {\n       \
    \     openingBracketsMap += (c -> 1)\n        })\n        closingBrackets.foreach(c\
    \ => {\n            closingBracketsMap += (c -> 1)\n        })\n        openingBracketsMap.forall(c\
    \ => closingBracketsMap.get(c.toChar) != null)", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        if (openingBracketsCount != closingBracketsCount)\
    \ {\n            return false\n        }\n        var openingBracketsIndex = 0\n\
    \        var closingBracketsIndex = 0\n        while (openingBracketsIndex < openingBracketsCount\
    \ && closingBracketsIndex < closingBracketsCount) {\n            if (openingBrackets(openingBracketsIndex)\
    \ != closingBrackets(closingBracketsIndex)) {\n                return false\n\
    \            }\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        }\n        if (openingBracketsIndex != openingBracketsCount) {\n\
    \            return false\n        }\n        if (closingBracketsIndex != closingBracketsCount)\
    \ {\n            return false\n        }\n        return true", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(x => closingBrackets.contains(x))", "      \
    \  val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        if (openingBracketsCount != closingBracketsCount)\
    \ {\n            return false\n        }\n        val openingBracketsMap = mutable.HashMap[Char,\
    \ Int]()\n        val closingBracketsMap = mutable.HashMap[Char, Int]()\n    \
    \    for (i <- 0 until openingBracketsCount) {\n            val openingBracket\
    \ = openingBrackets(i)\n            val closingBracket = closingBrackets(i)\n\
    \            val openingBracketIndex = openingBracket.length\n            val\
    \ closingBracketIndex = closingBracket.length\n            if (openingBracketIndex\
    \ != closingBracketIndex) {\n                return false\n            }\n   \
    \         openingBracketsMap(openingBracket) = (openingBracketsMap(openingBracket)\
    \ + 1)\n            closingBracketsMap(closingBracket) = (closingBracketsMap(closingBracket)\
    \ + 1)\n        }\n        for (i <- 0 until closingBracketsCount) {\n       \
    \     val closingBracket = closingBrackets(i)\n            val closingBracketIndex\
    \ = closingBracket.length\n            if (openingBracketsMap(closingBracket)\
    \ != closingBracketsMap(closingBracket)) {\n                return false\n   \
    \         }\n        }\n        true", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(x => closingBrackets.contains(x))", "      \
    \  val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.Map[String, Int]()\n        val closingBracketsMap = mutable.Map[String,\
    \ Int]()\n        openingBrackets.foreach(x => {\n            val y = x.split(\"\
    [\")\n            val z = y.length\n            val a = y.last\n            val\
    \ b = y.head\n            openingBracketsMap += (a -> 1)\n            openingBracketsMap\
    \ += (b -> 1)\n        })\n        closingBrackets.foreach(x => {\n          \
    \  val y = x.split(\"[\")\n            val z = y.length\n            val a = y.last\n\
    \            val b = y.head\n            closingBracketsMap += (a -> 1)\n    \
    \        closingBracketsMap += (b -> 1)\n        })\n        openingBracketsMap.forall\
    \ { case (k, v) => closingBracketsMap.get(k) == v }", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(x => closingBrackets.contains(x))", "      \
    \  val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        val openingBracketsMap = mutable.Map[Char,\
    \ Int]()\n        val closingBracketsMap = mutable.Map[Char, Int]()\n        openingBrackets.foreach(c\
    \ => openingBracketsMap += c -> 0)\n        closingBrackets.foreach(c => closingBracketsMap\
    \ += c -> 0)\n        openingBracketsMap.foreach { case (c, count) =>\n      \
    \      closingBracketsMap += c -> count\n        }\n        openingBracketsMap.toSeq.forall(c\
    \ => closingBracketsMap.getOrElse(c, 0) == 0)", "        val openingBrackets =\
    \ brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\")\n\
    \        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount", "        val openingBrackets = brackets.split(\"<\"\
    )\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.size == closingBrackets.size", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = new mutable.HashMap[Char,\
    \ Int]()\n        val closingBracketsCount = new mutable.HashMap[Char, Int]()\n\
    \        var openingBracketsCountCount = 0\n        var closingBracketsCountCount\
    \ = 0\n        var openingBracketsCountCountMax = 0\n        var closingBracketsCountCountMax\
    \ = 0\n        var openingBracketsCountCountMin = 0\n        var closingBracketsCountCountMin\
    \ = 0\n        var openingBracketsCountCountMaxMin = 0\n        var closingBracketsCountCountMaxMin\
    \ = 0\n        var openingBracketsCountCountMinMax = 0\n        var closingBracketsCountCountMinMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMax = 0\n        var closingBracketsCountCountMaxMinMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMaxMinMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMaxMinMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMinMaxMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax\
    \ = 0\n        var openingBracketsCountCountMaxMinMaxMax = 0\n        var closingBracketsCountCountMinMaxMaxMax",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\"\
    >\")\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.size == closingBrackets.size",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val bracketsArray = brackets.toCharArray\n        var openingBrackets =\
    \ 0\n        var closingBrackets = 0\n        var openingBracketsArray = new Array[Char](bracketsArray.length)\n\
    \        var closingBracketsArray = new Array[Char](bracketsArray.length)\n  \
    \      var openingBracketsArrayIndex = 0\n        var closingBracketsArrayIndex\
    \ = 0\n        var openingBracketsArrayIndex2 = 0\n        var closingBracketsArrayIndex2\
    \ = 0\n        var openingBracketsArrayIndex3 = 0\n        var closingBracketsArrayIndex3\
    \ = 0\n        var openingBracketsArrayIndex4 = 0\n        var closingBracketsArrayIndex4\
    \ = 0\n        var openingBracketsArrayIndex5 = 0\n        var closingBracketsArrayIndex5\
    \ = 0\n        var openingBracketsArrayIndex6 = 0\n        var closingBracketsArrayIndex6\
    \ = 0\n        var openingBracketsArrayIndex7 = 0\n        var closingBracketsArrayIndex7\
    \ = 0\n        var openingBracketsArrayIndex8 = 0\n        var closingBracketsArrayIndex8\
    \ = 0\n        var openingBracketsArrayIndex9 = 0\n        var closingBracketsArrayIndex9\
    \ = 0\n        var openingBracketsArrayIndex10 = 0\n        var closingBracketsArrayIndex10\
    \ = 0\n        var openingBracketsArrayIndex11 = 0\n        var closingBracketsArrayIndex11\
    \ = 0\n        var openingBracketsArrayIndex12 = 0\n        var closingBracketsArrayIndex12\
    \ = 0\n        var openingBracketsArrayIndex13 = 0\n        var closingBracketsArrayIndex13\
    \ = 0\n        var openingBracketsArrayIndex14 = 0\n        var closingBracketsArrayIndex14\
    \ = 0\n        var openingBracketsArrayIndex15 = 0\n        var closingBracketsArrayIndex15\
    \ = 0\n        var openingBracketsArrayIndex16 = 0\n        var closingBracketsArrayIndex16\
    \ = 0\n        var openingBracketsArrayIndex17 = 0\n        var closingBracketsArrayIndex17\
    \ = 0\n        var openingBracketsArrayIndex18 = 0\n        var closingBracketsArrayIndex18\
    \ = 0\n        var openingBracketsArrayIndex19 = 0\n        var closingBracketsArrayIndex19\
    \ = 0\n        var openingBracketsArrayIndex20 = 0\n        var closingBracketsArrayIndex20\
    \ = 0\n        var openingBracketsArrayIndex21 = 0\n        var closingBracketsArrayIndex21\
    \ = 0\n        var openingBracketsArrayIndex22", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.size == closingBrackets.size", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = new mutable.HashMap[Char, Int]()\n        val closingBracketsMap = new mutable.HashMap[Char,\
    \ Int]()\n        openingBrackets.foreach(c => {\n            openingBracketsMap\
    \ += (c -> 1)\n        })\n        closingBrackets.foreach(c => {\n          \
    \  closingBracketsMap += (c -> 1)\n        })\n        openingBracketsMap.foreach\
    \ { case (k, v) =>\n            closingBracketsMap -= (k)\n        }\n       \
    \ openingBracketsMap.size == closingBracketsCount", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        if (openingBracketsCount != closingBracketsCount)\
    \ {\n            return false\n        }\n        val openingBracketsMap = openingBrackets.toMap\n\
    \        val closingBracketsMap = closingBrackets.toMap\n        val openingBracketsKeys\
    \ = openingBracketsMap.keys\n        val closingBracketsKeys = closingBracketsMap.keys\n\
    \        val openingBracketsValues = openingBracketsMap.values.toList\n      \
    \  val closingBracketsValues = closingBracketsMap.values.toList\n        val openingBracketsValuesCount\
    \ = openingBracketsValues.size\n        val closingBracketsValuesCount = closingBracketsValues.size\n\
    \        if (openingBracketsValuesCount != closingBracketsValuesCount) {\n   \
    \         return false\n        }\n        val openingBracketsKeysCount = openingBracketsKeys.size\n\
    \        val closingBracketsKeysCount = closingBracketsKeys.size\n        if (openingBracketsKeysCount\
    \ != closingBracketsKeysCount) {\n            return false\n        }\n      \
    \  val openingBracketsValuesList = openingBracketsValues.toList\n        val closingBracketsValuesList\
    \ = closingBracketsValues.toList\n        val openingBracketsValuesCount = openingBracketsValuesList.size\n\
    \        val closingBracketsValuesCount = closingBracketsValuesList.size\n   \
    \     if (openingBracketsValuesCount != closingBracketsValuesCount) {\n      \
    \      return false\n        }\n        val openingBracketsValuesSet = openingBracketsValuesList.toSet\n\
    \        val closingBracketsValuesSet = closingBracketsValuesList.toSet\n    \
    \    val openingBracketsValuesSetCount = openingBracketsValuesSet.size\n     \
    \   val closingBracketsValuesSetCount = closingBracketsValuesSet.size\n      \
    \  if (openingBracketsValuesSetCount != closingBracketsValuesSetCount) {\n   \
    \         return false\n        }\n        val openingBracketsKeysSet = openingBracketsKeysList.toSet\n\
    \        val closingBracketsKeysSet = closingBracketsKeysList", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(x => closingBrackets.contains(x))", "      \
    \  val openingBrackets = brackets.split(\"<\")\n        val closingBrackets =\
    \ brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        openingBrackets.size == closingBrackets.size",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"<\")\n        val closingBrackets\
    \ = brackets.split(\">\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        val closingBracketsMap = mutable.HashMap[String,\
    \ Int]()\n        openingBrackets.foreach(x => {\n            val openingBracket\
    \ = x.split(\"[\")\n            val closingBracket = x.split(\"]\")\n        \
    \    openingBracketsMap(openingBracket(0)) = openingBracketsMap.getOrElse(openingBracket(0),\
    \ 0) + 1\n            closingBracketsMap(closingBracket(0)) = closingBracketsMap.getOrElse(closingBracket(0),\
    \ 0) + 1\n        })\n        closingBracketsMap.foreach {\n            case (closingBracket,\
    \ count) =>\n                if (openingBracketsMap.get(closingBracket) == count)\
    \ {\n                    true\n                } else {\n                    false\n\
    \                }\n        }", "        val bracketsArray = brackets.toCharArray\n\
    \        var openingBrackets : List[Char] = Nil\n        var closingBrackets :\
    \ List[Char] = Nil\n        var openingBracketsCount : Int = 0\n        var closingBracketsCount\
    \ : Int = 0\n        var openingBracketsIndex : Int = 0\n        var closingBracketsIndex\
    \ : Int = 0\n        var openingBracketsIndex2 : Int = 0\n        var closingBracketsIndex2\
    \ : Int = 0\n        var openingBracketsIndex3 : Int = 0\n        var closingBracketsIndex3\
    \ : Int = 0\n        var openingBracketsIndex4 : Int = 0\n        var closingBracketsIndex4\
    \ : Int = 0\n        var openingBracketsIndex5 : Int = 0\n        var closingBracketsIndex5\
    \ : Int = 0\n        var openingBracketsIndex6 : Int = 0\n        var closingBracketsIndex6\
    \ : Int = 0\n        var openingBracketsIndex7 : Int = 0\n        var closingBracketsIndex7\
    \ : Int = 0\n        var openingBracketsIndex8 : Int = 0\n        var closingBracketsIndex8\
    \ : Int = 0\n        var openingBracketsIndex9 : Int = 0\n        var closingBracketsIndex9\
    \ : Int = 0\n        var openingBracketsIndex10 : Int = 0\n        var closingBracketsIndex10\
    \ : Int = 0\n        var openingBracketsIndex11 : Int = 0\n        var closingBracketsIndex11\
    \ : Int = 0\n        var openingBracketsIndex12 : Int = 0\n        var closingBracketsIndex12\
    \ : Int = 0\n        var openingBracketsIndex13 : Int = 0\n        var closingBracketsIndex13\
    \ : Int = 0\n        var openingBracketsIndex14 : Int = 0\n        var closingBracketsIndex14\
    \ : Int = 0\n        var openingBracketsIndex15 : Int = 0\n        var closingBracketsIndex15\
    \ : Int = 0\n        var openingBracketsIndex16 : Int = 0\n        var closingBracketsIndex16\
    \ : Int = 0\n        var openingBracketsIndex17 : Int = 0\n        var closingBracketsIndex17\
    \ : Int = 0\n        var openingBracketsIndex18 : Int = 0\n        var closingBracketsIndex18\
    \ : Int = 0\n        var openingBracketsIndex19 : Int = 0\n        var closingBracketsIndex19\
    \ : Int = 0\n        var openingBracketsIndex20 : Int = 0\n        var closingBracketsIndex20\
    \ : Int = 0\n        var open", "        val openingBrackets = brackets.split(\"\
    <\")\n        val closingBrackets = brackets.split(\">\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        val openingBracketsSet = openingBrackets.toSet\n        val closingBracketsSet\
    \ = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val bracketsArray = brackets.toCharArray\n        val openingBrackets =\
    \ mutable.HashSet[Char]()\n        val closingBrackets = mutable.HashSet[Char]()\n\
    \        val openingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        val\
    \ closingBracketsArray = mutable.ArrayBuffer.empty[Char]\n        val openingBracketsCount\
    \ = mutable.HashSet[Int]()\n        val closingBracketsCount = mutable.HashSet[Int]()\n\
    \        val openingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n    \
    \    val closingBracketsCountArray = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ openingBracketsCountArrayLength = mutable.ArrayBuffer.empty[Int]\n        val\
    \ closingBracketsCountArrayLength = mutable.Array", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        val openingBracketsCount = openingBrackets.length\n        val closingBracketsCount\
    \ = closingBrackets.length\n        openingBracketsCount == closingBracketsCount\
    \ && openingBrackets.forall(x => closingBrackets.contains(x))", "        val openingBrackets\
    \ = brackets.split(\"<\")\n        val closingBrackets = brackets.split(\">\"\
    )\n        openingBrackets.forall(x => closingBrackets.contains(x))"]
stop_tokens:
- "\n    }\n"
