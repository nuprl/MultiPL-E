name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        })\n        map.toMap",
  "        val letters = test.toCharArray.map(_.toLower)\n        val counts = mutable.HashMap.empty[String,Long]\n\
    \        for (letter <- letters) {\n            val count = counts.getOrElse(letter,\
    \ 0)\n            counts.put(letter, count + 1)\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.get(letter)\n\
    \            map += (letter -> (count match {\n                case None => 1\n\
    \                case Some(count) => count + 1\n            }))\n        })\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val histogram = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.put(letter,map.getOrElse(letter,0L)+1))\n        map.toMap", "      \
    \  val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.toCharArray\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> (count+1)\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.updated(letter,map.getOrElse(letter,0)+1))\n\
    \        map.toMap", "        val letters = test.toCharArray\n        val map\
    \ = mutable.Map[String,Long]()\n        for (letter <- letters) {\n          \
    \  val count = map.getOrElse(letter,0)\n            map += (letter -> (count +\
    \ 1))\n        }\n        map.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val freq = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = freq.getOrElse(letter,0)\n            freq +=\
    \ letter -> (count+1)\n        })\n        freq.map{case (letter,count) => (letter,count)}.toMap",
  "        val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val histogram\
    \ = mutable.Map.empty[String,Long]\n        for (letter <- letters) {\n      \
    \      val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        }\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = counts.getOrElse(letter,0)\n        \
    \    counts += letter -> (count+1)\n        }\n        counts.toMap", "      \
    \  val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.update(letter,map.getOrElse(letter,0L)\
    \ + 1L))\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val freq = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            freq += letter -> (freq(letter) +1)\n        }\n        freq.mapValues(_.toLong).maxBy(_._2)._1",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val freq = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => freq += letter -> (freq(letter) + 1))\n   \
    \     freq.mapValues(_.toLong).maxBy(_._2)._1", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = counts.getOrElse(letter,0)\n            counts\
    \ += letter -> (count+1)\n        })\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> count + 1\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1).mkString(\"\
    \ \")\n        letterCounts.filter(_._2 == maxCount).map(_._1).mkString(\" \"\
    ) -> (letterCounts.filter(_._2 == maxCount).map(_._2).sum)", "        val letters\
    \ = test.split(\" \").toList\n        val counts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n\
    \        val maxLetterCount = counts.maxBy(_._2)._2\n        val maxLetterCountLetters\
    \ = counts.filter(x => x._2 == maxLetterCount).map(x => x._1)\n        val maxLetterCountLettersCount\
    \ = maxLetterCountLetters.map(x => x._1).sum\n        val maxLetterCountLettersCountLetters\
    \ = maxLetterCountLetters.map(x => x._2).sum\n        val maxLetterCountLettersCountLettersCount\
    \ = maxLetterCountLettersCountLetters.map(x => x._1).sum\n        val maxLetterCountLettersCountLettersCountLetters\
    \ = maxLetterCountLettersCountLetters.map(x => x._2).sum\n        val maxLetterCountLettersCountLettersCountLettersCount\
    \ = maxLetterCountLettersCountLettersCountLetters.map(x => x._1).sum\n       \
    \ val maxLetterCountLettersCountLettersCountLettersCountLetters = maxLetterCountLettersCountLettersCountLetters.map(x\
    \ => x._2).sum\n        val maxLetterCountLettersCountLettersCountLettersCountLettersCount\
    \ = maxLetterCountLettersCountLettersCountLettersCountLetters.map(x => x._1).sum\n\
    \        val maxLetterCountLettersCountLettersCountLettersCountLettersCountLetters\
    \ = maxLetterCountLettersCountLettersCountLettersCountLetters.map(x => x._2).sum\n\
    \        val maxLetterCountLettersCountLettersCountLettersCountLettersCountLettersCount\
    \ = maxLetterCountLettersCountLettersCountLettersCountLettersCountLetters.map(x\
    \ => x._1).sum\n        val maxLetterCountLettersCountLettersCountLettersCountLettersCountLettersCountLetters\
    \ = maxLetterCountLettersCountLettersCountLettersCountLettersCountLettersCountLetters.map(x\
    \ => x._2).sum\n        val maxLetterCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\
    \ = maxLetterCountLettersCountLettersCountLettersCountLettersCountLettersCountLetters.map(x\
    \ => x._1).sum\n        val maxLetterCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetters\
    \ = maxLetterCountLettersCountLettersCountLetter", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter, 0)\n          \
    \  map += (letter -> (count + 1))\n        }\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => histogram.update(letter,histogram.getOrElse(letter,0L)\
    \ + 1L))\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = letters.map(letter => letter -> letters.count(_ == letter)).toMap\n\
    \        val maxCount = counts.values.max\n        val maxLetter = counts.keys.max\n\
    \        val maxLetterCount = counts.values.filter(_.toLong == maxCount).max\n\
    \        val maxLetterCountLetter = counts.keys.filter(_.toLong == maxLetterCount).max\n\
    \        val maxLetterCountLetterCount = counts.values.filter(_.toLong == maxLetterCountLetter).max\n\
    \        val maxLetterCountLetterCountLetter = counts.keys.filter(_.toLong ==\
    \ maxLetterCountLetterCount).max\n        val maxLetterCountLetterCountLetterCount\
    \ = counts.values.filter(_.toLong == maxLetterCountLetterCountLetter).max\n  \
    \      val maxLetterCountLetterCountLetterCountLetter = counts.keys.filter(_.toLong\
    \ == maxLetterCountLetterCountLetterCount).max\n        val maxLetterCountLetterCountLetterCountLetterCount\
    \ = counts.values.filter(_.toLong == maxLetterCountLetterCountLetterCountLetter).max\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetter = counts.keys.filter(_.toLong\
    \ == maxLetterCountLetterCountLetterCountLetterCountLetter).max\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCount\
    \ = counts.values.filter(_.toLong == maxLetterCountLetterCountLetterCountLetterCountLetter).max\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.keys.filter(_.toLong == maxLetterCountLetterCountLetterCountLetterCountLetterCountLetter).max\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.values.filter(_.toLong == maxLetterCountLetterCountLetterCountLetterCountLetterCountLetter).max\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.keys.filter(_.toLong == maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter).max\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.values.filter(_.toLong == maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter).max\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.keys.filter(_.toLong == maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter).max\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.get(letter)\n\
    \            if (count == null) map.put(letter, 1L)\n            else map.put(letter,\
    \ count + 1L)\n        }\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts += letter -> count\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        }\n        map.toMap", "    \
    \    val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            histogram(letter) += letter.length\n\
    \        }\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.get(letter)\n            map += (letter ->\
    \ (count match {\n                case None => 1\n                case Some(count)\
    \ => count + 1\n            }))\n        })\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => counts(letter) += 1)\n        counts.toMap",
  "        val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val histogram\
    \ = mutable.Map[String,Long]()\n        for (letter <- letters) {\n          \
    \  histogram(letter) += 1\n        }\n        histogram.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        }\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            if (counts(letter) == null) {\n                counts(letter)\
    \ = count\n            } else {\n                counts(letter) = counts(letter)\
    \ + count\n            }\n        }\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       for (letter <- letters) {\n            val count = map.get(letter).getOrElse(0)\
    \ + 1\n            map += (letter -> count)\n        }\n        map.toMap", " \
    \       val letters = test.toCharArray\n        val histogram = mutable.HashMap.empty[String,Long]\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            if (count > counts.contains(letter)) {\n              \
    \  counts += letter -> count\n            }\n        }\n        counts", "   \
    \     val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> (count + 1))\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(x\
    \ => x == letter)\n            counts += letter -> count\n        })\n       \
    \ counts.toMap", "        val letters = test.split(\" \").toList\n        val\
    \ counts = mutable.Map[String,Long]()\n        letters.foreach(letter => {\n \
    \           val count = counts.getOrElse(letter,0)\n            counts += letter\
    \ -> count + 1\n        })\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0)\n           \
    \ map += letter -> (count+1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        }\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.toCharArray\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            histogram(letter) += letters.length\n\
    \        }\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += letter\
    \ -> (count+1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.get(letter)\n            if (count\
    \ == null) map.put(letter, 1)\n            else map.put(letter, count + 1)\n \
    \       }\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val counts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)._1\n        val maxCount\
    \ = counts.maxBy(_._2)._1\n        val maxLetters = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxLettersCount = counts.filter(_._2 == maxCount).map(_._2)\n   \
    \     val maxLettersCounts = counts.filter(_._2 == maxCount).map(_._1)\n     \
    \   val maxLettersCountsCount = counts.filter(_._2 == maxCount).map(_._2)\n  \
    \      val maxLettersCountsCounts = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxLettersCountsCountsCount = counts.filter(_._2 == maxCount).map(_._2)\n\
    \        val maxLettersCountsCountsCounts = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxLettersCountsCountsCountsCount = counts.filter(_._2 == maxCount).map(_._2)\n\
    \        val maxLettersCountsCountsCountsCounts = counts.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxLettersCountsCountsCountsCountsCount = counts.filter(_._2 == maxCount).map(_._2)\n\
    \        val maxLettersCountsCountsCountsCountsCounts = counts.filter(_._2 ==\
    \ maxCount).map(_._1)\n        val maxLettersCountsCountsCountsCountsCountsCount\
    \ = counts.filter(_._2 == maxCount).map(_._2)\n        val maxLettersCountsCountsCountsCountsCountsCounts\
    \ = counts.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCountsCountsCountsCountsCountsCountsCount\
    \ = counts.filter(_._2 == maxCount).map(_._2)\n        val maxLettersCountsCountsCountsCountsCountsCountsCounts\
    \ = counts.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCountsCountsCountsCountsCountsCountsCountsCount\
    \ = counts.filter(_._2 == maxCount).map(_._2)\n        val maxLettersCountsCountsCountsCountsCountsCountsCountsCounts\
    \ = counts.filter(_._2 == maxCount).map(_._1)\n        val maxLettersCountsCountsCountsCounts",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.get(letter).getOrElse(0)\
    \ + 1\n            map += (letter -> count)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        }\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            if (count > counts.contains(letter)) {\n              \
    \  counts += letter -> count\n            }\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.get(letter) match\
    \ {\n                case Some(count) => count + 1\n                case None\
    \ => 1\n            }\n            map.put(letter, count)\n        }\n       \
    \ map.toMap", "        val letters = test.split(\" \").toList\n        val letterCounts\
    \ = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountMap : Map[String,Long] = maxLetterCounts.map(_._1)\n        val\
    \ maxLetterMap : Map[String,Long] = maxLetterCounts.map(_._2)\n        val maxLetterMapWithCounts\
    \ = maxLetterMap.zip(maxLetterCounts)\n        val maxLetterMapWithCountsSorted\
    \ = maxLetterMapWithCounts.sortBy(_._1).reverse\n        val maxLetterMapWithCountsSortedWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._1)\n        val maxLetterMapWithCountsSortedWithCountsWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._2)\n        val maxLetterMapWithCountsSortedWithCountsWithCountsWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._3)\n        val maxLetterMapWithCountsSortedWithCountsWithCountsWithCountsWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._4)\n        val maxLetterMapWithCountsSortedWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._5)\n        val maxLetterMapWithCountsSortedWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._6)\n        val maxLetterMapWithCountsSortedWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._7)\n        val maxLetterMapWithCountsSortedWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._8)\n        val maxLetterMapWithCountsSortedWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ = maxLetterMapWithCountsSorted.map(_._9)\n        val maxLetterMapWithCountsSortedWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCountsWithCounts\
    \ = maxLetterMapWithCoun", "        val letters = test.split(\" \").toList\n \
    \       val letterCounts = letters.map(letter => letter -> letters.count(_ ==\
    \ letter)).toMap\n        letterCounts.maxBy(_._2)._1", "        val letters =\
    \ test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n   \
    \     letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += letter -> (count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val histogram\
    \ = mutable.HashMap.empty[String,Long]\n        for (letter <- letters) {\n  \
    \          histogram.put(letter, histogram.getOrElse(letter, 0L) + 1)\n      \
    \  }\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        }\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        for\
    \ (letter <- letters) {\n            val count = histogram.getOrElse(letter, 0)\n\
    \            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.toCharArray.distinct\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            histogram += (letter -> count)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.update(letter,map.getOrElse(letter,0L)\
    \ + 1L))\n        map.toMap", "        val letters = test.toCharArray\n      \
    \  val histogram = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = histogram.getOrElse(letter,0)\n            histogram(letter)\
    \ = histogram.getOrElse(letter,0) + 1 \n        }\n        histogram.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.get(letter)\n\
    \            if (count == null) map.put(letter, 1)\n            else map.put(letter,\
    \ count + 1)\n        }\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0)\n           \
    \ map += (letter -> (count+1))\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> count+1\n        })\n        counts.toMap", " \
    \       val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val\
    \ counts = letters.foldLeft(Map[String,Long]())((m,c) => m + (c -> (m.getOrElse(c,0)+1)))\n\
    \        counts.mapValues(_.toLong).maxBy(_._2)._1", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.get(letter)\n            if (count\
    \ == null) map.put(letter, 1)\n            else map.put(letter, count + 1)\n \
    \       }\n        val maxCount = map.values.max\n        val maxLetter = map.values.maxBy(_._1)._1\n\
    \        val maxLetterCount = map.values.maxBy(_._1)._2\n        val maxLetterCountPair\
    \ = map.values.maxBy(_._1)._2\n        val maxLetterCountPairs = map.values.maxBy(_._1)._2\n\
    \        val maxLetterCountPairsOfTwo = map.values.maxBy(_._1)._2\n        val\
    \ maxLetterCountPairsOfThree = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfFour\
    \ = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfFive = map.values.maxBy(_._1)._2\n\
    \        val maxLetterCountPairsOfSix = map.values.maxBy(_._1)._2\n        val\
    \ maxLetterCountPairsOfSeven = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfEight\
    \ = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfNine = map.values.maxBy(_._1)._2\n\
    \        val maxLetterCountPairsOfTen = map.values.maxBy(_._1)._2\n        val\
    \ maxLetterCountPairsOfEleven = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfTwelve\
    \ = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfThirteen = map.values.maxBy(_._1)._2\n\
    \        val maxLetterCountPairsOfFourteen = map.values.maxBy(_._1)._2\n     \
    \   val maxLetterCountPairsOfFifteen = map.values.maxBy(_._1)._2\n        val\
    \ maxLetterCountPairsOfSixteen = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfSeventeen\
    \ = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfEighteen = map.values.maxBy(_._1)._2\n\
    \        val maxLetterCountPairsOfNineteen = map.values.maxBy(_._1)._2\n     \
    \   val maxLetterCountPairsOfTwenty = map.values.maxBy(_._1)._2\n        val maxLetterCountPairsOfTwenty",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map.empty[String,Long]\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = counts.getOrElse(letter,\
    \ 0)\n            counts += letter -> count + 1\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        }\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> count+1\n        })\n        counts.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += letter -> (count+1)\n        })\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.get(letter).getOrElse(0)\
    \ + 1\n            map += (letter -> count)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter,histogram.getOrElse(letter,0)+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.update(letter,map.getOrElse(letter,0L)+1))\n        map.toMap", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = letters.count(_\
    \ == letter)\n            counts += letter -> count\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> (count+1)\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> (count+1)\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> (count+1)\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.get(letter)\n\
    \            if (count == null) map.put(letter, 1)\n            else map.put(letter,\
    \ count + 1)\n        }\n        val maxCount = map.values.max\n        val maxLetter\
    \ = map.values.maxBy(_._1)._1\n        val maxLetterCount = map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCount = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList2 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList3 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList4 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList5 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList6 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList7 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList8 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList9 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList10 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList11 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList12 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList13 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList14 = map.values.maxBy(_._1)._1 -> map.values.maxBy(_._1)._2\n\
    \        val maxLetterAndCountList15 = map.values.maxBy(_._1)._1 -> map.", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.get(letter)\n\
    \            map += (letter -> (count match {\n                case None => 1\n\
    \                case Some(count) => count + 1\n            }))\n        })\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val histogram = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> (count + 1))\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter, 0)\n            map += (letter\
    \ -> (count + 1))\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> (count+1))\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => map.update(letter,map.getOrElse(letter,0L) + 1L))\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> (count + 1))\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => histogram.put(letter,histogram.getOrElse(letter,0L)+1))\n\
    \        histogram.toMap", "        val letters = test.split(\" \").toList\n \
    \       val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = counts.getOrElse(letter,0)\n            counts +=\
    \ letter -> (count+1)\n        }\n        counts.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = letters.map(letter\
    \ => (letter,1)).toMap\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter => letter).max\n        val maxCount\
    \ = letters.map(letter => counts(letter)).max\n        val maxLetter = letters.map(letter\
    \ => letter).max\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter => letter).max\n        val maxCount\
    \ = letters.map(letter => counts(letter)).max\n        val maxLetter = letters.map(letter\
    \ => letter).max\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter => letter).max\n        val maxCount\
    \ = letters.map(letter => counts(letter)).max\n        val maxLetter = letters.map(letter\
    \ => letter).max\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter => letter).max\n        val maxCount\
    \ = letters.map(letter => counts(letter)).max\n        val maxLetter = letters.map(letter\
    \ => letter).max\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter => letter).max\n        val maxCount\
    \ = letters.map(letter => counts(letter)).max\n        val maxLetter = letters.map(letter\
    \ => letter).max\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter => letter).max\n        val maxCount\
    \ = letters.map(letter => counts(letter)).max\n        val maxLetter = letters.map(letter\
    \ => letter).max\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter => letter).max\n        val maxCount\
    \ = letters.map(letter => counts(letter)).max\n        val maxLetter = letters.map(letter\
    \ => letter).max\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter => letter).max\n        val maxCount\
    \ = letters.map(letter => counts(letter)).max\n        val maxLetter = letters.map(letter\
    \ => letter).max\n        val maxCount = letters.map(letter => counts(letter)).max\n\
    \        val maxLetter = letters.map(letter ", "        val letters = test.toCharArray.distinct\n\
    \        val counts = mutable.Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            val count = letters.count(_ == letter)\n            counts +=\
    \ letter -> count\n        }\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            counts(letter) match {\n                case None\
    \ => counts += letter -> 1\n                case Some(count) => counts += letter\
    \ -> (count + 1)\n            }\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> (count+1)\n        })\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = letters.map(letter\
    \ => (letter,letters.count(_ == letter)).toMap\n        val maxCount = counts.maxBy(_._2)._1\n\
    \        val maxLetter = counts.maxBy(_._2)._2\n        val maxLetterCount = counts.filter(x\
    \ => x._2 == maxCount).maxBy(_._1)._1\n        val maxLetterCountLetter = counts.filter(x\
    \ => x._2 == maxCount).maxBy(_._1)._2\n        val maxLetterCountLetterCount =\
    \ counts.filter(x => x._2 == maxCount).maxBy(_._1)._3\n        val maxLetterCountLetterCountLetter\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._4\n        val maxLetterCountLetterCountLetterCount\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._5\n        val maxLetterCountLetterCountLetterCountLetter\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._6\n        val maxLetterCountLetterCountLetterCountLetterCount\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._7\n        val maxLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._8\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCount\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._9\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._10\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._11\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._12\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._13\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._14\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = counts.filter(x => x._2 == maxCount).maxBy(_._1)._15\n        val maxLetterCountLetterCount",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> (count + 1))\n        })\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetterAndCount = Map(maxLetter -> maxLetterCount)\n        val\
    \ maxLetterAndCountList = maxLetterAndCount.toList.sortBy(_._2)\n        val maxLetterAndCountListWithMaxCount\
    \ = maxLetterAndCountList.take(maxCount)\n        val maxLetterAndCountListWithMaxCountWithMaxCount\
    \ = maxLetterAndCountListWithMaxCount.take(maxCount)\n        val maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCount\
    \ = maxLetterAndCountListWithMaxCountWithMaxCount.take(maxCount)\n        val\
    \ maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCount = maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCount.take(maxCount)\n\
    \        val maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCount.take(maxCount)\n\
    \        val maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount.take(maxCount)\n\
    \        val maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount.take(maxCount)\n\
    \        val maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount.take(maxCount)\n\
    \        val maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxLetterAndCountListWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount.take(maxCount)\n\
    \        val maxLetterAnd", "        val letters = test.toCharArray\n        val\
    \ histogram = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = histogram.getOrElse(letter,0)\n            histogram(letter)\
    \ = histogram.getOrElse(letter,0) + count\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val counts\
    \ = mutable.Map[String,Long]()\n        for (letter <- letters) {\n          \
    \  counts(letter) match {\n                case None => counts += letter -> 1\n\
    \                case Some(count) => counts += letter -> (count + 1)\n       \
    \     }\n        }\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = counts.getOrElse(letter,0)\n        \
    \    counts += letter -> count+1\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = letters.groupBy(x =>\
    \ x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetterCountPair = counts.maxBy(_._2)._2\n        val maxLetterCountPairs\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCountPairsSorted = counts.sortBy(_._2).reverse\n\
    \        val maxLetterCountPairsSortedByCount = counts.sortBy(_._2).reverse.maxBy(_._2)\n\
    \        val maxLetterCountPairsSortedByCountAndLetter = counts.sortBy(_._2).reverse.maxBy(_._2)._1\n\
    \        val maxLetterCountPairsSortedByCountAndLetterCount = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n\
    \        val maxLetterCountPairsSortedByCountAndLetterCountAndLetter = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n\
    \        val maxLetterCountPairsSortedByCountAndLetterCountAndLetterCount = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n\
    \        val maxLetterCountPairsSortedByCountAndLetterCountAndLetterCountAndLetter\
    \ = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n        val maxLetterCountPairsSortedByCountAndLetterCountAndLetterCountAndLetterCount\
    \ = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n        val maxLetterCountPairsSortedByCountAndLetterCountAndLetterCountAndLetterCountAndLetter\
    \ = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n        val maxLetterCountPairsSortedByCountAndLetterCountAndLetterCountAndLetterCountAndLetterCount\
    \ = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n        val maxLetterCountPairsSortedByCountAndLetterCountAndLetterCountAndLetterCountAndLetterCountAndLetter\
    \ = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n        val maxLetterCountPairsSortedByCountAndLetterCountAndLetterCountAndLetterCountAndLetterCountAndLetterCount\
    \ = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n        val maxLetterCountPairsSortedByCountAndLetterCountAndLetterCountAndLetterCountAndLetterCountAndLetterCountAndLetter\
    \ = counts.sortBy(_._2).reverse.maxBy(_._2)._2\n", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts += letter -> count\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += letter -> count+1\n        })\n        counts.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        })\n        map.toMap", " \
    \       val letters = test.toCharArray\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = counts.getOrElse(letter,0)\n\
    \            counts += (letter -> count)\n        }\n        counts.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size).toMap\n        letterCounts.maxBy(_._2).map(_._1)",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        })\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count+1)\n        }\n        map.toMap", "    \
    \    val letters = test.toCharArray.map(_.toString).toSet\n        val histogram\
    \ = mutable.HashMap.empty[String,Long]\n        for (letter <- letters) {\n  \
    \          histogram.put(letter, histogram.getOrElse(letter, 0L) + 1)\n      \
    \  }\n        histogram.toMap", "        val letters = test.split(\" \").map(_.toLowerCase).toSet\n\
    \        val counts = letters.groupBy(_).mapValues(_.size)\n        val maxCount\
    \ = counts.max\n        val maxLetter = counts.maxBy(_._2)\n        val maxLetterCount\
    \ = maxLetter._2\n        val maxLetterKey = maxLetter._1\n        val maxLetterValue\
    \ = maxLetter._2\n        val maxLetterKeyCount = maxLetterKey\n        val maxLetterValueCount\
    \ = maxLetterValue\n        val maxLetterKeyValueCount = maxLetterKeyValue\n \
    \       val maxLetterKeyValueCountCount = maxLetterKeyValueCount\n        val\
    \ maxLetterKeyValueCountCountCount = maxLetterKeyValueCountCount\n        val\
    \ maxLetterKeyValueCountCountCountCount = maxLetterKeyValueCountCountCount\n \
    \       val maxLetterKeyValueCountCountCountCountCount = maxLetterKeyValueCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCount = maxLetterKeyValueCountCountCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCountCount = maxLetterKeyValueCountCountCountCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCountCountCount = maxLetterKeyValueCountCountCountCountCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCountCountCountCount =\
    \ maxLetterKeyValueCountCountCountCountCountCountCountCountCountCount\n      \
    \  val maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\
    \ = maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCountCount\n\
    \        val maxLetterKeyValueCountCountCountCountCountCountCountCountCountCountCountCount",
  "        val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val counts\
    \ = letters.groupBy(identity).mapValues(_.size)\n        val maxCount = counts.max\n\
    \        val maxLetter = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetterCounts = counts.filter(_._2 == maxLetterCount).map(_._1)\n\
    \        val maxLetterCountMap = new scala.collection.mutable.HashMap[String,Long]()\n\
    \        maxLetterCounts.foreach(maxLetterCountMap += _)\n        val maxLetterCountMapSorted\
    \ = maxLetterCountMap.sortBy(_._2)\n        val maxLetterCountMapSortedKeys =\
    \ maxLetterCountMapSorted.map(_._1)\n        val maxLetterCountMapSortedValues\
    \ = maxLetterCountMapSorted.map(_._2)\n        val maxLetterCountMapSortedKeysAndValues\
    \ = maxLetterCountMapSorted.map{case (k,v) => (k,v)}\n        val maxLetterCountMapSortedKeysAndValuesSorted\
    \ = maxLetterCountMapSortedKeysAndValues.sortBy(_._2)\n        val maxLetterCountMapSortedKeysAndValuesSortedKeys\
    \ = maxLetterCountMapSortedKeysAndValuesSorted.map(_._1)\n        val maxLetterCountMapSortedKeysAndValuesSortedValues\
    \ = maxLetterCountMapSortedKeysAndValuesSorted.map(_._2)\n        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValues\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValues.map{case (k,v) =>\
    \ (k,v)}\n        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValues.sortBy(_._2)\n   \
    \     val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeys =\
    \ maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.map(_._1)\n  \
    \      val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedValues\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSorted.map(_._2)\n\
    \        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValues.map{case\
    \ (k,v) => (k,v)}\n        val maxLetterCountMapSortedKeysAndValuesSortedKeysAndValuesSortedKeysAndValuesSorted\
    \ = maxLetterCountMapSortedKeysAndValuesSortedKeysAndValues", "        val letters\
    \ = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => map.update(letter,map.getOrElse(letter,0L)\
    \ + 1L))\n        map.toMap", "        val letters = test.split(\" \").toList\n\
    \        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n      \
    \  val maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount)\n        val maxLetterCountMap : Map[String,Long] = maxLetterCounts.map{case\
    \ (k,v) => (k,v)}.toMap\n        val maxLetterCountMapWithValues : Map[String,Long]\
    \ = maxLetterCountMap.map{case (k,v) => (k,v)}.toMap\n        val maxLetterCountMapWithValuesAndKeys\
    \ : Map[String,(Long,String)] = maxLetterCountMapWithValues.map{case (k,v) =>\
    \ (k,(v,k))}.toMap\n        val maxLetterCountMapWithValuesAndKeysAndMaxCount\
    \ : Map[String,(Long,String,String)] = maxLetterCountMapWithValuesAndKeys.map{case\
    \ (k,(v,k,m)) => (k,(v,k,m.toUpperCase))}.toMap\n        val maxLetterCountMapWithValuesAndKeysAndMaxCountAndMaxLetters\
    \ : Map[String,(Long,String,String,String)] = maxLetterCountMapWithValuesAndKeysAndMaxCount.map{case\
    \ (k,(v,k,m,m2)) => (k,(v,k,m.toUpperCase,m2.toUpperCase))}.toMap\n        val\
    \ maxLetterCountMapWithValuesAndKeysAndMaxCountAndMaxLetters2 : Map[String,(Long,String,String,String,String)]\
    \ = maxLetterCountMapWithValuesAndKeysAndMaxCountAndMaxLetters.map{case (k,(v,k,m,m2,m3))\
    \ => (k,(v,k,m.toUpperCase,m2.toUpperCase,m3.toUpperCase))}.toMap\n        val\
    \ maxLetterCountMapWithValuesAndKeysAndMaxCountAndMaxLetters3 : Map[String,(Long,String,String,String,String,String)]\
    \ = maxLetterCountMapWithValuesAndKeysAndMaxCountAndMaxLetters2.map{case (k,(v,k,m,m2,m3,m4))\
    \ => (k,(v,k,m.toUpperCase,m2.toUpperCase,m3.toUpperCase,m4.toUpperCase))}.toMap\n\
    \        val maxLetterCountMapWithValuesAndKeysAndMaxCountAndMaxLetters4 : Map[String,(Long,String,String,String,String,String,String)]\
    \ = maxLetterCountMapWithValuesAndKeysAndMaxCountAndMaxLetter", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> count + 1)\n        }\n        map.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCount = letters.groupBy(x\
    \ => x).mapValues(_.size).maxBy(_._2)._1\n        letters.groupBy(x => x).mapValues(_.size).maxBy(_._2)._2.map(_._1)",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val\
    \ histogram = mutable.Map[String,Long]()\n        for (letter <- letters) {\n\
    \            val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = letters.count(_ == letter)\n        \
    \    counts += letter -> count\n        }\n        counts.toMap", "        val\
    \ letters = test.toCharArray\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val\
    \ counts = mutable.Map[String,Long]()\n        for (letter <- letters) {\n   \
    \         val count = letters.count(_ == letter)\n            counts += letter\
    \ -> count\n        }\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => counts(letter) += 1)\n        counts.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.get(letter).getOrElse(0) + 1\n  \
    \          map += (letter -> count)\n        }\n        map.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetter = letterCounts.maxBy(_._2)._1\n        val maxLetterCount\
    \ = letterCounts.maxBy(_._2)._2\n        val maxLetterCountLetter = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetterCountLetterCount = letterCounts.maxBy(_._2)._2\n       \
    \ val maxLetterCountLetterCountLetter = letterCounts.maxBy(_._2)._1\n        val\
    \ maxLetterCountLetterCountLetterCount = letterCounts.maxBy(_._2)._2\n       \
    \ val maxLetterCountLetterCountLetterCountLetter = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetterCountLetterCountLetterCountLetterCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetterCountLetterCountLetterCountLetter = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetterCountLetterCountLetterCountLetterCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetter = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetter = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = letterCounts.maxBy(_._2)._1\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\
    \ = letterCounts.maxBy(_._2)._2\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = letterCounts.maxBy(_._2)._1\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\
    \ = letterCounts.maxBy(_._2)._2\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = letterCounts.maxBy(_._2)._1\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\
    \ = letterCounts.maxBy(_._2)._2\n        val maxLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\
    \ = letterCounts.maxBy(_._2)._1\n        val maxLetterCountLetterCount", "   \
    \     val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._1\n\
    \        val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n  \
    \      val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountAndLetters = maxLetterCounts.map(_._1)\n        val maxLetterCountAndLettersCount\
    \ = maxLetterCountAndLetters.map(x => (x, letterCounts.count(_._1 == x)))\n  \
    \      val maxLetterCountAndLettersCountSorted = maxLetterCountAndLettersCount.sortBy(_._1).reverse\n\
    \        val maxLetterCountAndLettersCountSortedWithMax = maxLetterCountAndLettersCountSorted.take(maxLetterCountAndLettersCountSorted.length\
    \ - 1)\n        val maxLetterCountAndLettersCountSortedWithMaxWithMax = maxLetterCountAndLettersCountSortedWithMax.map(_._2)\n\
    \        val maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMax = maxLetterCountAndLettersCountSortedWithMaxWithMax.map(_._1)\n\
    \        val maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMaxWithMax =\
    \ maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMax.map(_._2)\n       \
    \ val maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMaxWithMax = maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMax.map(_._1)\n\
    \        val maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMaxWithMax =\
    \ maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMax.map(_._2)\n       \
    \ val maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMaxWithMax = maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMax.map(_._1)\n\
    \        val maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMaxWithMax =\
    \ maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMax.map(_._2)\n       \
    \ val maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMaxWithMax = maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMax.map(_._1)\n\
    \        val maxLetterCountAndLettersCountSortedWithMaxWithMaxWithMaxWithMax =\
    \ maxLetterCountAndLettersCountSorted", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> (count + 1))\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n\
    \        val maxCount = letterCounts.maxBy(_._2)._1\n        val maxLetters =\
    \ letterCounts.filter(_._2 == maxCount).map(_._1)\n        val maxLetterCounts\
    \ = letterCounts.filter(_._2 == maxCount)\n        val maxLettersCount = maxLetters.map(_._1).size\n\
    \        val maxLettersCounts = maxLettersCount.toString.toInt\n        val maxLettersCountMap\
    \ : Map[String,Long] = maxLettersCounts.toList.zip(maxLetters).map{case (letter,count)\
    \ => (letter,count)}.toMap\n        val maxLettersCountMapWithMaxCount = maxLettersCountMap.filter(_._2\
    \ == maxCount)\n        val maxLettersCountMapWithMaxCountMap : Map[String,Map[String,Long]]\
    \ = maxLettersCountMapWithMaxCount.toList.map{case (letter,countMap) => (letter,countMap)}.toMap\n\
    \        val maxLettersCountMapWithMaxCountMapWithMaxCount : Map[String,Map[String,Long]]\
    \ = maxLettersCountMapWithMaxCountMap.filter(_._2 == maxLettersCountMapWithMaxCount.maxBy(_._2)._1)\n\
    \        val maxLettersCountMapWithMaxCountMapWithMaxCountMap : Map[String,Map[String,Long]]\
    \ = maxLettersCountMapWithMaxCountMapWithMaxCount.toList.map{case (letter,countMap)\
    \ => (letter,countMap)}.toMap\n        val maxLettersCountMapWithMaxCountMapWithMaxCountMapWithMaxCount\
    \ : Map[String,Map[String,Long]] = maxLettersCountMapWithMaxCountMapWithMaxCountMap.toList.map{case\
    \ (letter,countMap) => (letter,countMap)}.toMap\n        val maxLettersCountMapWithMaxCountMapWithMaxCountMapWithMaxCountMap\
    \ : Map[String,Map[String,Long]] = maxLettersCountMapWithMaxCountMapWithMaxCountMapWithMaxCount.toList.map{case\
    \ (letter,countMap) => (letter,countMap)}.toMap\n        val maxLettersCountMapWithMaxCountMapWithMaxCountMapWithMaxCountMapWithMaxCount\
    \ : Map[String,Map[String,Long]] = maxLettersCountMapWithMaxCountMapWithMaxCountMapWithMaxCountMap.toList.map{case\
    \ (letter,countMap) => (letter,countMap)}.toMap\n        ", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += letter -> (count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        }\n        map.toMap", "  \
    \      val letters = test.toCharArray\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,\
    \ 0)\n            histogram.put(letter, count + 1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            histogram(letter) += 1\n     \
    \   }\n        histogram.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> (count + 1))\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val histogram = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = histogram.getOrElse(letter,0)\n            histogram.put(letter,count+1)\n\
    \        })\n        histogram.toMap", "        val letters = test.split(\" \"\
    ).toList\n        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.map(letter => (letter,letters.count(_\
    \ == letter)).toMap\n        letterCounts.maxBy(_._2)._1", "        val letters\
    \ = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            histogram.put(letter, histogram.getOrElse(letter,\
    \ 0L) + 1L)\n        })\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val map = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = map.getOrElse(letter,0)\n           \
    \ map += (letter -> count + 1)\n        }\n        map.toMap", "        val letters\
    \ = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n \
    \       for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += letter -> (count+1)\n        }\n        map.toMap", "    \
    \    val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count + 1))\n        }\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val histogram = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = histogram.getOrElse(letter,0)\n\
    \            histogram.put(letter,count+1)\n        }\n        histogram.toMap",
  "        val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,\
    \ 0)\n            map += (letter -> (count + 1))\n        }\n        map.toMap",
  "        val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val counts\
    \ = mutable.Map[String,Long]()\n        for (letter <- letters) {\n          \
    \  counts += letter -> (counts(letter) match {\n                case None => 0\n\
    \                case Some(count) => count + 1\n            })\n        }\n  \
    \      counts.toMap", "        val letters = test.split(\" \").toList\n      \
    \  val map = mutable.Map[String,Long]()\n        letters.foreach(letter => map.updated(letter,map.getOrElse(letter,0L)+1))\n\
    \        map.toMap", "        val letters = test.split(\" \").toList\n       \
    \ val letterCounts = letters.groupBy(x => x).mapValues(_.size)\n        val maxCount\
    \ = letterCounts.maxBy(_._2)._1\n        val maxLetters = letterCounts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxLetterCounts = letterCounts.filter(_._2\
    \ == maxCount).map(_._2)\n        val maxLetterCountPairs = maxLetterCounts.zipWithIndex.sortBy(_._1).reverse.take(10)\n\
    \        val maxLetterCountPairsMap = maxLetterCountPairs.map(_._2).map(_._1)\n\
    \        val maxLetterCountPairsMapSorted = maxLetterCountPairsMap.sortBy(_._1).reverse\n\
    \        val maxLetterCountPairsMapSortedMap = maxLetterCountPairsMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSorted = maxLetterCountPairsMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMap = maxLetterCountPairsMapSortedMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMapSorted = maxLetterCountPairsMapSortedMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMapSorted = maxLetterCountPairsMapSortedMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMapSortedMap = maxLetterCountPairsMapSortedMapSortedMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMapSortedMapSorted = maxLetterCountPairsMapSortedMapSortedMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMapSortedMapSortedMap = maxLetterCountPairsMapSortedMapSortedMapSortedMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMapSortedMapSortedMapSorted\
    \ = maxLetterCountPairsMapSortedMapSortedMapSortedMapSorted.toMap\n        val\
    \ maxLetterCountPairsMapSortedMapSortedMapSortedMapSortedMapSortedMap = maxLetterCountPairsMapSortedMapSortedMapSortedMapSortedMapSortedMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMapSortedMapSortedMapSortedMapSorted\
    \ = maxLetterCountPairsMapSortedMapSortedMapSortedMapSortedMapSortedMapSorted.toMap\n\
    \        val maxLetterCountPairsMapSortedMapSortedMapSortedMapSortedMapSortedMapSorted\
    \ = maxLetterCountPairsMapSortedMapSorted", "        val letters = test.toCharArray\n\
    \        val counts = mutable.HashMap.empty[String,Long]\n        for (letter\
    \ <- letters) {\n            val count = counts.getOrElse(letter,0)\n        \
    \    counts.put(letter,count+1)\n        }\n        counts.toMap", "        val\
    \ letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        letters.foreach(letter => {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> count + 1)\n        })\n        map.toMap", " \
    \       val letters = test.split(\" \").toList\n        val map = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = map.getOrElse(letter,0)\n\
    \            map += (letter -> (count+1))\n        }\n        map.toMap", "  \
    \      val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        letterCounts.filter(_._2 == maxCount).map(_._1)", "        val letters\
    \ = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x =>\
    \ x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._1\n \
    \       val maxLetters = letterCounts.filter(_._2 == maxCount).map(_._1)\n   \
    \     val maxLetterCounts = letterCounts.filter(_._2 == maxCount)\n        val\
    \ maxLetterCountPair = maxLetterCounts.maxBy(_._1)._1\n        val maxLetterCountPairs\
    \ = maxLetterCounts.filter(_._1 == maxLetterCountPair._1)\n        val maxLetterCountPairWithCount\
    \ = maxLetterCountPairs.maxBy(_._2)._1\n        val maxLetterCountPairWithCounts\
    \ = maxLetterCountPairs.filter(_._1 == maxLetterCountPairWithCount._1)\n     \
    \   val maxLetterCountPairWithCountWithCount = maxLetterCountPairWithCounts.maxBy(_._2)._1\n\
    \        val maxLetterCountPairWithCountWithCounts = maxLetterCountPairWithCounts.filter(_._1\
    \ == maxLetterCountPairWithCountWithCount._1)\n        val maxLetterCountPairWithCountWithCountWithCount\
    \ = maxLetterCountPairWithCountWithCounts.maxBy(_._2)._1\n        val maxLetterCountPairWithCountWithCountWithCounts\
    \ = maxLetterCountPairWithCountWithCounts.filter(_._1 == maxLetterCountPairWithCountWithCountWithCount._1)\n\
    \        val maxLetterCountPairWithCountWithCountWithCountWithCount = maxLetterCountPairWithCountWithCountWithCounts.maxBy(_._2)._1\n\
    \        val maxLetterCountPairWithCountWithCountWithCountWithCounts = maxLetterCountPairWithCountWithCountWithCounts.filter(_._1\
    \ == maxLetterCountPairWithCountWithCountWithCountWithCount._1)\n        val maxLetterCountPairWithCountWithCountWithCountWithCountWithCount\
    \ = maxLetterCountPairWithCountWithCountWithCountWithCounts.maxBy(_._2)._1\n \
    \       val maxLetterCountPairWithCountWithCountWithCountWithCountWithCounts =\
    \ maxLetterCountPairWithCountWithCountWithCountWithCounts.filter(_._1 == maxLetterCountPairWithCountWithCountWithCountWithCountWithCount._1)\n\
    \        val maxLetterCountPairWithCountWithCountWithCountWithCountWithCountWithCount\
    \ = maxLetterCountPairWithCountWithCountWithCountWithCountWithCounts.maxBy(_._2)._1\n\
    \        val maxLetterCountPairWithCountWithCountWithCountWithCountWithCountWithCountWithCount",
  "        val letters = test.split(\" \").toList\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val histogram\
    \ = mutable.Map[String,Long]()\n        for (letter <- letters) {\n          \
    \  val count = histogram.getOrElse(letter, 0)\n            histogram.put(letter,\
    \ count + 1)\n        }\n        histogram.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val counts = mutable.Map[String,Long]()\n        for (letter\
    \ <- letters) {\n            val count = counts.getOrElse(letter,0)\n        \
    \    counts += letter -> count + 1\n        }\n        counts.toMap", "      \
    \  val letters = test.split(\" \").toList\n        val letterCounts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = letterCounts.maxBy(_._2)._2\n\
    \        val maxLetter = letterCounts.maxBy(_._2)._1\n        val maxLetterCounts\
    \ = letterCounts.filter(x => x._1 == maxLetter).map(_._2)\n        val maxLetterCount:\
    \ Long = maxLetterCounts.max\n        val maxLetterCountPair = letterCounts.filter(x\
    \ => x._1 == maxLetter).maxBy(_._2)\n        val maxLetterCountPairCount: Long\
    \ = maxLetterCountPair._2\n        val maxLetterCountPairLetter = maxLetterCountPair._1\n\
    \        val maxLetterCountPairLetterCounts = letterCounts.filter(x => x._1 ==\
    \ maxLetter).filter(x => x._2 == maxLetterCountPairLetter).map(_._2)\n       \
    \ val maxLetterCountPairLetterCount: Long = maxLetterCountPairLetterCounts.max\n\
    \        val maxLetterCountPairLetterCountPair = letterCounts.filter(x => x._1\
    \ == maxLetter).filter(x => x._2 == maxLetterCountPairLetter).filter(x => x._3\
    \ == maxLetterCountPairLetter).maxBy(_._2)\n        val maxLetterCountPairLetterCountPairCount:\
    \ Long = maxLetterCountPairLetterCountPair._2\n        val maxLetterCountPairLetterCountPairLetter\
    \ = maxLetterCountPairLetterCountPair._1\n        val maxLetterCountPairLetterCountPairLetterCounts\
    \ = letterCounts.filter(x => x._1 == maxLetter).filter(x => x._2 == maxLetterCountPairLetter).filter(x\
    \ => x._3 == maxLetterCountPairLetter).filter(x => x._4 == maxLetterCountPairLetter).map(_._2)\n\
    \        val maxLetterCountPairLetterCountPairLetterCount: Long = maxLetterCountPairLetterCountPairLetterCounts.max\n\
    \        val maxLetterCountPairLetterCountPairLetterCountPair = letterCounts.filter(x\
    \ => x._1 == maxLetter).filter(x => x._2 == maxLetterCountPairLetter).filter(x\
    \ => x._3 == maxLetterCountPairLetter).filter(x => x._4 == maxLetterCountPairLetter).filter(x\
    \ => x._5 == maxLetterCountPairLetter).maxBy(_._2)\n        val maxLetterCountPairLetterCountPairLetterCountPairCount:\
    \ Long = maxLetterCountPairLetterCountPairLetterCountPair._2\n        val maxLetterCountPairLetterCountPairLetter",
  "        val letters = test.toCharArray.map(_.toString).toSet\n        val counts\
    \ = mutable.Map[String,Long]()\n        for (letter <- letters) {\n          \
    \  val count = letters.count(_ == letter)\n            counts += letter -> count\n\
    \        }\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> count + 1)\n        })\n        map.toMap", "        val letters = test.split(\"\
    \ \").toList\n        val letterCounts = letters.map(letter => (letter,letters.count(_\
    \ == letter)).toMap\n        letterCounts.maxBy(_._2)._1", "        val letters\
    \ = test.split(\" \").map(_.toLowerCase).toSet\n        val counts = mutable.Map[String,Long]()\n\
    \        for (letter <- letters) {\n            val count = letters.count(_ ==\
    \ letter)\n            counts += letter -> count\n        }\n        counts.toMap",
  "        val letters = test.split(\" \").toList\n        val counts = letters.groupBy(x\
    \ => x).mapValues(_.size)\n        val maxCount = counts.max\n        val maxLetter\
    \ = counts.maxBy(_._2)._1\n        val maxLetterCount = counts.maxBy(_._2)._2\n\
    \        val maxLetterCountPair = counts.maxBy(_._2)._2\n        val maxLetterCountPairs\
    \ = counts.maxBy(_._2)._2\n        val maxLetterCountPairsSorted = counts.sortBy(_._2).reverse\n\
    \        val maxLetterCountPairsSortedByCount = counts.sortBy(_._2).reverse.sortBy(_._1).reverse\n\
    \        val maxLetterCountPairsSortedByCountAndLetter = counts.sortBy(_._2).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse\n\
    \        val maxLetterCountPairsSortedByCountAndLetterAndCount = counts.sortBy(_._2).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse\n\
    \        val maxLetterCountPairsSortedByCountAndLetterAndCountAndLetter = counts.sortBy(_._2).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse\n\
    \        val maxLetterCountPairsSortedByCountAndLetterAndCountAndLetterAndCount\
    \ = counts.sortBy(_._2).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse\n\
    \        val maxLetterCountPairsSortedByCountAndLetterAndCountAndLetterAndCountAndLetter\
    \ = counts.sortBy(_._2).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.sortBy(_._1).reverse.sortBy(_._0).reverse.",
  "        val letters = test.split(\" \").map(_.toLowerCase).toSet\n        val counts\
    \ = mutable.Map[String,Long]()\n        for (letter <- letters) {\n          \
    \  val count = letters.count(_ == letter)\n            counts += letter -> count\n\
    \        }\n        counts.toMap", "        val letters = test.split(\" \").toList\n\
    \        val letterCounts = letters.groupBy(x => x).mapValues(_.size).toMap\n\
    \        letterCounts.maxBy(_._2)", "        val letters = test.split(\" \").toList\n\
    \        val map = mutable.Map[String,Long]()\n        letters.foreach(letter\
    \ => {\n            val count = map.getOrElse(letter,0)\n            map += (letter\
    \ -> (count+1))\n        })\n        map.toMap"]
stop_tokens:
- "\n    }\n"
