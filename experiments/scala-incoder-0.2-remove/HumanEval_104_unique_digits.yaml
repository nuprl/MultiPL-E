name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    def uniqueDigits(x : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        evenDigitsSorted.distinct", "        val result = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).asDigit\n  \
    \          if(digit % 2 == 0) {\n                result += digit\n           \
    \ }\n        }\n        result.sort", "        val evenDigits = x.filter(x =>\
    \ x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n   \
    \     evenDigitsSorted.distinct", "        val evenDigits = mutable.Set[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) evenDigits += x)\n        evenDigits.toList",
  "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        x.foreach { x =>\n \
    \           if (x % 2 == 0) {\n                result += x\n            }\n  \
    \      }\n        result.sort", "        val result = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result += digit\n         \
    \   }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result.add(x(i))\n            }\n        }\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0)\n        evenDigits.union(oddDigits).sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).asDigit\n  \
    \          if(digit % 2 == 0) {\n                result.+=(x(i))\n           \
    \ }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- x) {\n            if (i % 2 == 0) {\n                result\
    \ += i\n            }\n        }\n        result.sort", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        evenDigits.sort", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n      \
    \      val digit = x(i).toString.toInt\n            if (digit % 2 == 0) {\n  \
    \              result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0)\n        val result = oddDigits.union(evenDigits)\n\
    \        result.sort", "        val evenDigits = x.filter(x => x % 2 == 0)\n \
    \       val oddDigits = x.filter(x => x % 2 != 0)\n        val result = oddDigits.union(evenDigits)\n\
    \        val sortedResult = result.sortBy(x => x)\n        sortedResult", "  \
    \      val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach { x =>\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            } else {\n             \
    \   result.add(x)\n            }\n        }\n        result.sortWith(_ < _)",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if (digit\
    \ % 2 == 0) {\n                result.add(x(i))\n            }\n        }\n  \
    \      result.sort", "        val evenDigits = mutable.Set[Long]()\n        x.foreach(x\
    \ => { \n            if (x % 2 == 0) {\n                evenDigits.add(x)\n  \
    \          }\n        })\n        evenDigits.toList", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n           \
    \ val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n        \
    \        result.add(x(i))\n            }\n        }\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n\
    \        evenDigits ++ oddDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits", "    \
    \    val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0)\n        val result = oddDigits.union(evenDigits)\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        for (i\
    \ <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n\
    \            }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => result += x }\n        result.toList", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        evenDigits.union(oddDigits).sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitList =\
    \ evenDigits.toList\n        evenDigitList.sortWith(_ < _)", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        val uniqueEvenDigits = evenDigitsSorted.distinct\n        uniqueEvenDigits",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result.add(x) else ())\n        result.sort", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n\
    \        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            if (x(i) % 2 == 0) {\n                result += x(i)\n\
    \            }\n        }\n        result.sorted", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        oddDigits.union(evenDigits).sort",
  "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n    \
    \        }\n        }\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n\
    \        evenDigits ++ oddDigits", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val\
    \ oddDigits = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0)\n        oddDigits.toList ++ evenDigits.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n\
    \            val digit = x(i).asDigit\n            if(digit % 2 == 0) {\n    \
    \            result.+=(x(i))\n            }\n        }\n        result.sort",
  "        val digits = x.map(x => x.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        evenDigitsList.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => {\n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => result += x)\n    \
    \    result.sort", "        val evenDigits = x.filter(x => x % 2 == 0)\n     \
    \   evenDigits.sortWith(_ < _)", "        val evenDigits = x.filter(x => x % 2\
    \ == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        val digit = x(i).toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val result = evenDigits.distinct\n\
    \        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).asDigit\n  \
    \          if(digit % 2 == 0) {\n                result.add(x(i))\n          \
    \  }\n        }\n        result.sort", "        val evenDigits = mutable.Set[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) evenDigits += x)\n        evenDigits.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x)\n            }\n        })\n        result.sortWith(_\
    \ < _)", "        val result = mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => if (x % 2 == 0) result += x)\n        result.sort", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 !=\
    \ 0)\n        val result = oddDigits.union(evenDigits)\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0)\n        val result = oddDigits.union(evenDigits)\n        result.sortBy(x\
    \ => x)", "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => { \n            if (x % 2 == 0) {\n                result.add(x)\n      \
    \      }\n        })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val result = mutable.ArrayBuffer.empty[Long]\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        x.foreach(x => if (x % 2 == 0) result += x)\n        result.sort", " \
    \       val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sorted\n        oddDigits ++ evenDigits", "    \
    \    val evenDigits = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n\
    \        uniqueEvenDigitsSorted", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n \
    \       evenDigits.union(oddDigits)", "        val evenDigits = x.filter(x =>\
    \ x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n\
    \        oddDigits.filter(x => evenDigits.contains(x)).sorted", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        if (x(i) % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val y = x.toString.reverse.map(_.toInt)\n\
    \            val z = y.filter(y => y % 2 == 0).length\n            if (z > 0)\
    \ {\n                result += x\n            }\n        })\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitList =\
    \ evenDigits.toList\n        evenDigitList.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) result\
    \ += x)\n        result.sort", "        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val uniqueEvenDigits = evenDigits.distinct\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 !=\
    \ 0)\n        evenDigits.union(oddDigits).sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   })\n        result.sort", "        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        evenDigits.toList.sort", "        val result = mutable.ListBuffer[Long]()\n\
    \        for (i <- x.indices) {\n            if (x(i) % 2 == 0) {\n          \
    \      result.add(x(i))\n            }\n        }\n        result.sort", "   \
    \     val result = new mutable.LinkedList[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x))\n        result.sortWith(_ < _)", "        val evenDigits\
    \ = x.filter(_ % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n\
    \        val uniqueEvenDigitsList = uniqueEvenDigits.toList\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigitsList.sort\n        uniqueEvenDigitsSorted", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x\
    \ % 2 != 0).sorted\n        evenDigits ++ oddDigits", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n          \
    \  val digit = x(i).toString.toInt\n            if (digit % 2 == 0) {\n      \
    \          result.add(x(i))\n            }\n        }\n        result.sort", " \
    \       val result = mutable.ListBuffer[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        val uniqueEvenDigits = evenDigitsList.distinct\n\
    \        val uniqueEvenDigitsList = uniqueEvenDigits.toList\n        val uniqueEvenDigitsSortedList\
    \ = uniqueEvenDigitsList.sort\n        uniqueEvenDigitsSortedList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        evenDigits.union(oddDigits).sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n\
    \            }\n        }\n        result.sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).asDigit\n  \
    \          if(digit % 2 == 0) {\n                result.add(x(i))\n          \
    \  }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x) else ())\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- x) {\n \
    \           if (i % 2 == 0) {\n                result += i\n            }\n  \
    \      }\n        result.sort", "        val evenDigits = x.filter(x => x % 2\
    \ == 0).sort\n        val uniqueEvenDigits = evenDigits.distinct\n        val\
    \ uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val y = x % 10\n            val z = x % 100\n            val w =\
    \ x % 1000\n            val a = x % 10000\n            val b = x % 100000\n  \
    \          val c = x % 1000000\n            val d = x % 10000000\n           \
    \ val e = x % 100000000\n            val f = x % 1000000000\n            val g\
    \ = x % 10000000000\n            val h = x % 100000000000\n            val i =\
    \ x % 1000000000000\n            val j = x % 10000000000000\n            val k\
    \ = x % 100000000000000\n            val l = x % 1000000000000000\n          \
    \  val m = x % 10000000000000000\n            val n = x % 100000000000000000\n\
    \            val o = x % 1000000000000000000\n            val p = x % 10000000000000000000\n\
    \            val q = x % 100000000000000000000\n            val r = x % 1000000000000000000000\n\
    \            val s = x % 10000000000000000000000\n            val t = x % 100000000000000000000000\n\
    \            val u = x % 1000000000000000000000000\n            val v = x % 10000000000000000000000000\n\
    \            val w = x % 100000000000000000000000000\n            val x = x %\
    \ 1000000000000000000000000000\n            val y = x % 10000000000000000000000000000\n\
    \            val z = x % 100000000000000000000000000000\n            val a = x\
    \ % 1000000000000000000000000000000\n            val b = x % 10000000000000000000000000000000\n\
    \            val c = x % 100000000000000000000000000000000\n            val d\
    \ = x % 1000000000000000000000000000000000\n            val e = x % 1000000000000000000000000000000000\n\
    \            val f = x % 1000000000000000000000000000000000\n            val g\
    \ = x % 1000000000000000000000000000000000\n            val h = x % 1000000000000000000000000000000000\n\
    \            val i = x % 1000000000000000000000000000000000\n            val j\
    \ = x % 1000000000000000000000000000000000\n            val k = x % 1000000000000000000000000000000000\n\
    \            val l = x % 1000000000000000000000000000000000\n            val m\
    \ = x % 1000000000000000000000000000000000\n            val n = x % 1000000000000000000000000000000000\n\
    \            val o = x % 1000000000000000000000000000000000\n            val p\
    \ = x % 1000000000000000000000000000000000\n            val q = x % 1000000000000000000000000000000000\n\
    \            val r = x % 1000000000000000000000000000000000\n            val s\
    \ = x % 1000000000000000000000000000000000\n            val t = x % 1000000000000000000000000000000000\n\
    \            val u = x % 1000000000000000000000000000000000\n            val v\
    \ = x % 1000000000000000000000000000000000\n            val w = x % 1000000000000000000000000000000000\n\
    \            val x = x % 1000000000000000000000000000000000\n            val y\
    \ = x % ", "        val evenDigitsList = x.filter(x => x % 2 == 0).sorted\n  \
    \      val oddDigitsList = x.filter(x => x % 2 != 0).sorted\n        oddDigitsList.intersect(evenDigitsList).sorted",
  "        val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until\
    \ x.size) {\n            if (x(i) % 2 == 0) {\n                result += x(i)\n\
    \            }\n        }\n        result.sortWith(_ < _)", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n\
    \        val uniqueEvenDigits = evenDigitsList.distinct\n        val uniqueEvenDigitsList\
    \ = uniqueEvenDigits.toList\n        val uniqueEvenDigitsSorted = uniqueEvenDigitsList.sort\n\
    \        uniqueEvenDigitsSorted", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n \
    \       evenDigits ++ oddDigits", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n \
    \       evenDigits ++ oddDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val y = x.toString.reverse.charAt(0).toLong\n\
    \            if (y % 2 == 0) {\n                result.add(y)\n            }\n\
    \        })\n        result.sort", "        val evenDigits = x.filter(_ % 2 ==\
    \ 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(_\
    \ % 2 == 0).distinct", "        val digits = mutable.HashSet[Long]()\n       \
    \ x.foreach(x => digits += x)\n        digits.toList.sortWith(_ < _)", "     \
    \   val evenDigits = x.filter(_ % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        evenDigitsSorted.distinct", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val str = x.toString\n            val digits\
    \ = str.map(_.toInt)\n            val evenDigits = digits.filter(x => x % 2 ==\
    \ 0)\n            if (evenDigits.isEmpty) result += x\n        })\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0)\n        oddDigits.toList ::: evenDigits.toList", "        val\
    \ result = mutable.ArrayBuffer.empty[Long]\n        x.foreach(x => if (x % 2 ==\
    \ 0) result += x)\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n       \
    \ val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted",
  "        val evenDigits = mutable.Set[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        for(i <- x) {\n            if(i.toString.toInt%2 == 0) {\n          \
    \      evenDigits += i\n            }\n        }\n        evenDigits.toList.sortWith(_\
    \ < _)", "        val result = mutable.ArrayBuffer.empty[Long]\n        x.foreach(x\
    \ => if (x % 2 == 0) result += x)\n        result.sort", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n\
    \        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).asDigit\n            if(digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      }\n            result += x\n        })\n        result.toList", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit%2 == 0) {\n                evenDigit.add(digit)\n      \
    \      }\n        }\n        for(i <- 0 until x.size) {\n            val digit\
    \ = x(i).toString.toInt\n            if(evenDigit.contains(digit)) {\n       \
    \         result.add(x(i))\n            }\n        }\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => if (x % 2 == 0) evenDigit.add(x)\
    \ else result.add(x))\n        evenDigit.foreach(x => result.add(x))\n       \
    \ result.sort", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n \
    \       val oddDigits = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++\
    \ oddDigits", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val\
    \ evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_ < _)", " \
    \       val evenDigits = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n\
    \        uniqueEvenDigitsSorted", "        val result = new mutable.LinkedList[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                result.add(x)\n            }\n        })\n        result.toList",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n\
    \        uniqueEvenDigitsSorted", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0)\n        val oddDigits = x.filter(x => x % 2 != 0)\n        oddDigits.toList\
    \ ++ evenDigits.toList", "        val evenDigits = x.filter(x => x % 2 == 0)\n\
    \        val uniqueEvenDigits = evenDigits.distinct\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        if (x(i) % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sort", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n\
    \        val uniqueEvenDigitsList = uniqueEvenDigits.toList\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigitsList.sort\n        uniqueEvenDigitsSorted", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach { x =>\n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        }\n        evenDigit.foreach { x =>\n            if (result.contains(x))\
    \ {\n                return\n            }\n            else {\n             \
    \   result += x\n            }\n        }\n        result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(x => x.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        uniqueEvenDigits.foreach(x => result += x)\n\
    \        result.toList", "        val evenDigits = x.filter(x => x % 2 == 0)\n\
    \        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        for (i\
    \ <- x) {\n            if (i % 2 == 0) {\n                result += i\n      \
    \      }\n        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList", "        val\
    \ evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        evenDigitsSorted.distinct", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.distinct", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigits.foreach { x => \n   \
    \         val lastDigit = oddDigits.last\n            if (x != lastDigit) {\n\
    \                result.add(x)\n            }\n        }\n        result.sorted",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortBy(x => x)\n        evenDigitsSorted.filter(x => x % 2 == 0).distinct",
  "        val result = mutable.ArrayBuffer.empty[Long]\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ evenDigits = mutable.Set[Long]()\n        x.foreach(x => if (x % 2 == 0) evenDigits\
    \ += x)\n        evenDigits.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        x.foreach(x =>\
    \ {\n            if (x % 2 == 0) {\n                evenDigit += x\n         \
    \   } else {\n                result += x\n            }\n        })\n       \
    \ evenDigit.sortWith(_ < _)\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result.add(x(i))\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        val xs2 = xs.filter(_ % 2 == 0)\n        xs2.foreach(x => result += x)\n\
    \        result.sort", "        val evenDigits = x.filter(x => x % 2 == 0)\n \
    \       val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n\
    \        uniqueEvenDigitsSorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- x) {\n            if (i % 2 == 0) {\n                result.add(i)\n\
    \            }\n        }\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        evenDigits.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n\
    \        evenDigits ++ oddDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueDigits = uniqueEvenDigits.filter(x\
    \ => !digits.contains(x))\n        uniqueDigits.sort", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x\
    \ % 2 != 0).sorted\n        oddDigits ++ evenDigits", "        val result = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).asDigit\n  \
    \          if(digit % 2 == 0) {\n                result += digit\n           \
    \ }\n        }\n        result.sort", "        val evenDigits = x.filter(x =>\
    \ x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n   \
    \     val uniqueEvenDigits = evenDigitsSorted.distinct\n        uniqueEvenDigits.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val result = new mutable.LinkedList[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).asDigit\n  \
    \          if(!result.contains(digit)) {\n                result += digit\n  \
    \          }\n        }\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0).sort\n        val\
    \ oddDigits = x.filter(x => x % 2 != 0).sort\n        oddDigits.intersect(evenDigits)",
  "        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n       \
    \ uniqueEvenDigits.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- x) {\n            val str = i.toString\n            val digits\
    \ = str.dropWhile(_ < '0').dropWhile(_ > '9').toList\n            if (digits.length\
    \ == 0) result.add(i)\n            else {\n                val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n                if (evenDigits.isEmpty) result.add(i)\n    \
    \            else {\n                    val evenDigit = evenDigits.head\n   \
    \                 val nextDigit = evenDigits.last\n                    if (nextDigit\
    \ - evenDigit == 1) result.add(i)\n                }\n            }\n        }\n\
    \        result.sort", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n\
    \        val oddDigits = x.filter(x => x % 2 != 0).sorted\n        evenDigits\
    \ ++ oddDigits", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n\
    \        val oddDigits = x.filter(x => x % 2 != 0).sorted\n        oddDigits.diff(evenDigits)",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitList =\
    \ evenDigits.toList\n        evenDigitList.sortWith(_ < _)", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val result = evenDigits.distinct\n    \
    \    result.sort", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                evenDigit.add(digit)\n            }\n        }\n     \
    \   for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(evenDigit.contains(digit)) {\n                result.add(x(i))\n\
    \            }\n        }\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n\
    \        evenDigits ++ oddDigits", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n \
    \       val result = evenDigits ++ oddDigits\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n       \
    \     if (x % 2 == 0) {\n                result.add(x)\n            }\n      \
    \  })\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n           \
    \ val digit = x(i).asDigit\n            if(digit % 2 == 0) {\n               \
    \ result.add(x(i))\n            }\n        }\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n        \
    \    val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n       \
    \         result.add(x)\n            }\n        })\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        val uniqueEvenDigits = evenDigitsList.distinct\n\
    \        val uniqueEvenDigitsList = uniqueEvenDigits.toList\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigitsList.sort\n        uniqueEvenDigitsSorted", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x % 2 == 0) result\
    \ += x)\n        result.sort", "        val evenDigits = x.filter(_ % 2 == 0)\n\
    \        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n\
    \        uniqueEvenDigitsSorted", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        evenDigitsSorted.distinct", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        for (i\
    \ <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n                result\
    \ += x(i)\n            }\n        }\n        result.sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        val digit = x(i).toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.+=(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.distinct", "        val\
    \ evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x =>\
    \ x % 2 != 0)\n        oddDigits.toList ++ evenDigits.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        val digit = x(i).toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueEvenDigitsSorted = uniqueEvenDigits.sort\n\
    \        uniqueEvenDigitsSorted", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n \
    \       val result = oddDigits.filter(x => evenDigits.contains(x)).sorted\n  \
    \      result", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n  \
    \          if(digit % 2 == 0) {\n                result += digit\n           \
    \ }\n        }\n        result.sort", "        val evenDigits = x.filter(x =>\
    \ x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n   \
    \     evenDigitsSorted.distinct", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach { x =>\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result += x\n            }\n     \
    \   }\n        result.sort", "        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val uniqueEvenDigits = evenDigits.distinct\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val result = evenDigits.distinct\n    \
    \    result.sort", "        val evenDigits = x.filter(x => x % 2 == 0)\n     \
    \   val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        val evenDigitsSortedList\
    \ = evenDigitsSorted.toList\n        evenDigitsSortedList.filter(x => x % 2 ==\
    \ 0)", "        val result = new mutable.ListBuffer[Long]()\n        for (i <-\
    \ 0 until x.size) {\n            if (x(i) % 2 == 0) {\n                result.add(x(i))\n\
    \            }\n        }\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val uniqueEvenDigits\
    \ = evenDigits.distinct\n        val uniqueEvenDigitsList = uniqueEvenDigits.toList\n\
    \        uniqueEvenDigitsList.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result.add(digit)\n            }\n\
    \        })\n        result.sort", "        val evenDigits = x.filter(x => x %\
    \ 2 == 0)\n        val uniqueEvenDigits = evenDigits.distinct\n        val uniqueEvenDigitsSorted\
    \ = uniqueEvenDigits.sort\n        uniqueEvenDigitsSorted", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 !=\
    \ 0)\n        val result = oddDigits.union(evenDigits)\n        result.sort",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x\
    \ => x % 2 != 0)\n        evenDigits.union(oddDigits).sort", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0).sorted\n        val oddDigits = x.filter(x => x\
    \ % 2 != 0).sorted\n        oddDigits.filter(x => evenDigits.contains(x)).sorted",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x % 2 == 0) result += x)\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        val uniqueEvenDigitList\
    \ = evenDigitList.distinct\n        val uniqueEvenDigitListSorted = uniqueEvenDigitList.sort\n\
    \        uniqueEvenDigitListSorted", "        val evenDigits = x.filter(x => x\
    \ % 2 == 0).sorted\n        val oddDigits = x.filter(x => x % 2 != 0).sorted\n\
    \        evenDigits ++ oddDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toString.toInt\n            if(digit\
    \ % 2 == 0) {\n                evenDigit.add(digit)\n            }\n        }\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(evenDigit.contains(digit)) {\n                continue\n     \
    \       }\n            result.add(x(i))\n        }\n        result.sort", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).asDigit\n            if(digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        for (i\
    \ <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result.add(x(i))\n            }\n\
    \        }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ } else {\n                result.add(x)\n            }\n        })\n       \
    \ evenDigit.foreach(x => result.add(x))\n        result.sort", "        val result\
    \ = new mutable.LinkedList[Long]()\n        x.foreach(x => if (x.toString.toInt%2\
    \ == 0) result.add(x) else ())\n        result.toList", "        val evenDigits\
    \ = mutable.Set[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                evenDigits += digit\n    \
    \        }\n        }\n        evenDigits.toList.sortWith(_ < _)", "        val\
    \ evenDigits = x.filter(x => x % 2 == 0).sort\n        val uniqueEvenDigits =\
    \ evenDigits.distinct\n        uniqueEvenDigits.toList", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val oddDigits = x.filter(x => x % 2 !=\
    \ 0)\n        evenDigits.union(oddDigits).sort"]
stop_tokens:
- "\n    }\n"
