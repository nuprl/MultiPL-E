name: HumanEval_158_find_max
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings.\n    // The list contains\
  \ different words. Return the word with maximum number\n    // of unique characters.\
  \ If multiple strings have maximum number of unique\n    // characters, return the\
  \ one which comes first in lexicographical order.\n    def findMax(words : List[String])\
  \ : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
  name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
  name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
  aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
  abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
  , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
  this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
  b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\", \"\
  play\"))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) match {\n                    case Some(count)\
    \ => uniqueChars(c) = uniqueChars(c) + 1\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.toSeq.sortWith((a,\
    \ b) => a._2 > b._2).head._1", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxWordCount = words.count(_.toCharArray.contains(maxChars))\n   \
    \     if (maxWordCount == 1) {\n            maxWord\n        } else {\n      \
    \      val maxWordIndex = words.indexOf(maxWord)\n            val maxWordChars\
    \ = chars.filter(_.toString.contains(maxChars))\n            val maxWordCharCount\
    \ = maxWordChars.count(_.toString.contains(maxChars))\n            if (maxWordCharCount\
    \ == 1) {\n                words.take(maxWordIndex + 1)(maxWordIndex + 1)\n  \
    \          } else {\n                words.take(maxWordIndex + 1)\n          \
    \  }\n        }", "        val uniqueChars = mutable.HashSet[Char]()\n       \
    \ val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(char => {\n                uniqueChars += char\n   \
    \         })\n        })\n        uniqueChars.foreach(char => {\n            val\
    \ count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count +\
    \ 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2 > _._2)\n\
    \        val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey\
    \ = maxCharsSorted.keySet().toSeq.head\n        val maxCharsSortedFirstValue =\
    \ maxCharsSorted.valueSet().toSeq.head\n        val maxCharsSortedFirstKeyValue\
    \ = maxCharsSorted.get(maxCharsSortedFirstKey)\n        val maxCharsSortedFirstKeyValueString\
    \ = maxCharsSortedFirstKeyValue.toString\n        val maxCharsSortedFirstKeyValueChar\
    \ = maxCharsSortedFirstKeyValue.toChar\n        val maxCharsSortedFirstKeyValueCharString\
    \ = maxCharsSortedFirstKeyValueChar.toString\n        val maxCharsSortedFirstKeyValueCharString\
    \ = maxCharsSortedFirstKeyValueCharString.toUpperCase\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = maxCharsSortedFirstKeyValueCharString.length\n        val maxCharsSortedFirstKeyValueCharStringLength\
    \ = ", "        val uniqueChars = words.map(_.length).distinct\n        val maxCount\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.length == maxCount).head\n\
    \        val maxWordWithCount = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordWithCountWithMaxCount = words.filter(_.length == maxCount).sortBy(_.length).last\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.filter(_.length\
    \ == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.filter(_.length == maxCount).sortBy(_.length).last\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMax",
  "        val charCount = mutable.Map[Char, Int]()\n        val maxCharCount = mutable.Map[Char,\
    \ Int]()\n        val maxWord = mutable.Map[Char, String]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                charCount(char) +=\
    \ 1\n            })\n        })\n        charCount.foreach(c => {\n          \
    \  if (maxCharCount(c._1) < c._2) {\n                maxCharCount(c._1) = c._2\n\
    \                maxWord(c._1) = c._1\n            }\n        })\n        maxWord.foreach(c\
    \ => {\n            if (maxCharCount(c._1) < c._2) {\n                maxCharCount(c._1)\
    \ = c._2\n                maxWord(c._1) = c._1\n            }\n        })\n  \
    \      maxWord.keys.toList.sortWith(_ < _).head", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        val maxWord\
    \ = mutable.Map[String, Int]()\n        for (word <- words) {\n            for\
    \ (char <- word) {\n                uniqueChars += (char -> 1)\n            }\n\
    \        }\n        for (word <- words) {\n            val maxCount = uniqueChars.values.max\n\
    \            val maxChars = uniqueChars.filter(_._2 == maxCount).map(_._1)\n \
    \           val maxWords = uniqueChars.filter(_._2 == maxCount).map(_._1)\n  \
    \          if (maxChars.size > 0) {\n                maxChar.update(maxChars.head,\
    \ maxCount)\n                maxWord.update(word, maxCount)\n            }\n \
    \       }\n        if (maxChar.size > 0) {\n            val maxChars = maxChar.filter(_._2\
    \ > 1).map(_._1)\n            val maxWords = maxChar.filter(_._2 > 1).map(_._1)\n\
    \            if (maxWords.size > 0) {\n                maxWord.update(maxWords.head,\
    \ maxChar.filter(_._2 == maxWords.head).map(_._1).max)\n            }\n      \
    \  }\n        if (maxWord.size > 0) {\n            val maxWords = maxWord.filter(_._2\
    \ > 1).map(_._1)\n            if (maxWords.size > 0) {\n                maxWord.update(maxWords.head,\
    \ maxChar.filter(_._2 == maxWords.head).map(_._1).max)\n            }\n      \
    \  }\n        if (maxWord.size > 0) {\n            maxWord.keys.toList.sortWith(_\
    \ < _).head\n        } else {\n            \"\"\n        }", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.sortWith(_.compareTo(_) < 0)(0)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.sortWith(_.compareTo(_) < 0)(0)\n        val maxWordWithMaxCharsFirstInLex\
    \ = maxWordWithMaxCharsFirst.sortWith(_.compareTo(_) < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLex\
    \ = maxWordWithMaxCharsFirstInLex.sortWith(_.compareTo(_) < 0)(0)\n        val\
    \ maxWordWithMaxCharsFirstInLexInLexInLex = maxWordWithMaxCharsFirstInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLex = maxWordWithMaxCharsFirstInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex = maxWordWithMaxCharsFirstInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex\
    \ = maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLex.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWord", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        val maxWord\
    \ = mutable.Map[String, Int]()\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                uniqueChars += (char -> 1)\n            })\n        })\n\
    \        uniqueChars.foreach(char => {\n            val count = uniqueChars(char)\n\
    \            if (count > maxChar(char)) {\n                maxChar(char) = count\n\
    \                maxWord(word) = count\n            }\n        })\n        maxWord.foreach(word\
    \ => {\n            if (maxWord(word) > maxWord(words.head)) {\n             \
    \   maxWord(words.head) = maxWord(word)\n            }\n        })\n        maxWord(words.head).key",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        val maxWord = mutable.Map[Char, String]()\n        for (word\
    \ <- words) {\n            val uniqueCharsCount = word.distinct().length\n   \
    \         val maxCharsCount = uniqueCharsCount.max\n            if (maxCharsCount\
    \ == 0) {\n                maxChars.clear()\n                maxWord.clear()\n\
    \            }\n            val maxChar = word.max\n            if (maxCharsCount\
    \ > maxChars(maxChar)) {\n                maxChars(maxChar) = maxCharsCount\n\
    \                maxWord(maxChar) = word\n            }\n        }\n        maxWord.keys.toList.sortWith(_\
    \ < _).head", "        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n     \
    \       word.foreach(c => {\n                uniqueChars += c\n            })\n\
    \        })\n        uniqueChars.toList.sortWith(_ < _).foreach(c => {\n     \
    \       maxChars(c) = uniqueChars.count(_ == c)\n        })\n        maxChars.toList.sortWith(_\
    \ < _).head", "        val uniqueChars = words.map(word => word.distinct).flatten.toSet\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length)\n        val maxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head\n        val maxWordWithMaxCharsAndMaxWord = words.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length).sortBy(word => word.distinct).head.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length)\n        val maxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head.filter(word => word.count(_ == maxChars) == uniqueChars.length).filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length)\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head.filter(word => word.count(_ == maxChars) == uniqueChars.length).filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length).filter(word => word.count(_\
    \ == maxChars) == uniqueChars.length)\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head.filter(word => word.count(_ == maxChars) == uniqueChars.length).filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length).filter(word => word.count(_\
    \ == maxChars) == uniqueChars.length).filter(word => word.count(_ == maxChars)\
    \ == uniqueChars.length)\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == uniqueChars.length).sortBy(word\
    \ => word.distinct).head.filter(word => word.count(_ == maxChars) == uniqueChars.length).filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.length).filter(word => word.count(_\
    \ == maxChars) == uniqueChars.length).filter(word => word.count(_ == maxChars)\
    \ == uniqueChars.length).filter(word => word.count(_ == maxChars) == uniqueChars.length)\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMax", "  \
    \      val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirst = words.filter(_.length\
    \ == maxChars && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxChars = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) ==\
    \ words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirst\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrderWithMaxCharsAndFirstInLexicographicalOrder\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) == words.lastIndex",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.min\n        val maxWordChars = maxWord.map(_.length)\n\
    \        val maxWordCharsIndex = maxWordChars.indexOf(maxChars)\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        if (maxWordCharsIndex < maxWordCharsIndex)\
    \ maxWord else maxWords.min", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.length == maxChars)\n        val maxWordWithMaxChars = words.filter(w =>\
    \ w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxChars.sortWith((a, b) => a.charAt(0).toInt < b.charAt(0).toInt)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWord = maxWordWithMaxCharsSortedByFirstChar(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordLength = maxWordWithMaxCharsSortedByFirstCharFirstWord.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstChar = maxWordWithMaxCharsSortedByFirstCharFirstWord.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharLength = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstChar.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWord =\
    \ maxWordWithMaxCharsSortedByFirstCharFirstWordFirstChar.charAt(0)\n        val\
    \ maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordLength = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWord.length\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWord.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstChar.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWord.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordFirstCharLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWord.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharFirstWordFirstCharFirstWordFirstCharFirstWordFirstCharLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstWord", "        val maxCount = words.foldLeft(0)\
    \ { (maxCount, word) =>\n            val count = word.distinct.length\n      \
    \      if (count > maxCount) count else maxCount\n        }\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).head\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        words.take(maxWordIndex).mkString(\" \")",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) += 1\n            })\n        })\n        uniqueChars.toList.sortWith(_._2\
    \ > _._2).head._1", "        val uniqueChars = mutable.Map[Char, Int]()\n    \
    \    val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                uniqueChars += (c -> 1)\n  \
    \          })\n        })\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                val count = uniqueChars.getOrElse(c, 0) + 1\n        \
    \        if (count > maxChar.getOrElse(c, 0))\n                    maxChar = uniqueChars\n\
    \            })\n        })\n        maxChar.keys.toList.sortWith(_ < _).head",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWord\
    \ = words.filter(w => w.toCharArray.distinct.length == maxChars)\n        val\
    \ maxWordWithMaxChars = words.filter(w => w.toCharArray.distinct.length == maxChars\
    \ && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted)\n\
    \        val maxWordWithMaxCharsFirst = words.filter(w => w.toCharArray.distinct.length\
    \ == maxChars && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted\
    \ && w.toCharArray.distinct.toList.sorted == maxWord.toCharArray.distinct.toList.sorted.head)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(w =>\
    \ w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(w => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(w => w.toCharArray.distinct.length == maxChars && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head && w.toCharArray.distinct.toList.sorted\
    \ == maxWord.toCharArray.distinct.toList.sorted.head)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(w => w.toCharArray.distinct.length == maxChars && w.", "    \
    \    val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val chars\
    \ = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n\
    \        val maxCharCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).max\n\
    \        val maxWordCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWordsOfWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWords = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWords\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n       \
    \ val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWords\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n       \
    \ val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWords\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n       \
    \ val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWords\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n       \
    \ val maxWordWithMaxCharCountInWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOfWordsOf",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               if (uniqueChars.contains(c)) {\n                    uniqueChars(c)\
    \ += 1\n                } else {\n                    uniqueChars(c) = 1\n   \
    \             }\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => b - a)\n            .headOption\n            .map(_._1)", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n       \
    \ val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMax", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += (c -> 1)\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                val count = uniqueChars(c)\n\
    \                if (count > maxChars(c)) {\n                    maxChars(c) =\
    \ count\n                }\n            })\n        })\n        val maxChar =\
    \ maxChars.maxBy(_._2)._1\n        words.find(word => word.contains(maxChar))",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMax = maxWordWithMaxCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMax.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n     \
    \   val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        val maxCharCount = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += (c ->\
    \ 1)\n                maxCharCount += (c -> 1)\n            })\n        })\n \
    \       uniqueChars.toSeq.sortWith((a, b) => a._2 > b._2).head._1", "        val\
    \ maxCount = words.foldLeft(0)((count, word) => count + word.distinct().length)\n\
    \        val maxWord = words.filter(word => word.distinct().length == maxCount)\n\
    \        val maxWordWithCount = words.filter(word => word.distinct().length ==\
    \ maxCount && word.count(_ == word(0)) == 1)\n        val maxWordWithCountWithFirst\
    \ = words.filter(word => word.distinct().length == maxCount && word.count(_ ==\
    \ word(0)) == 1 && word(0) < word(1))\n        val maxWordWithCountWithFirstWithMax\
    \ = words.filter(word => word.distinct().length == maxCount && word.count(_ ==\
    \ word(0)) == 1 && word(0) < word(1) && word(1) < word(2))\n        val maxWordWithCountWithFirstWithMaxWithMax\
    \ = words.filter(word => word.distinct().length == maxCount && word.count(_ ==\
    \ word(0)) == 1 && word(0) < word(1) && word(1) < word(2) && word(2) < word(3))\n\
    \        val maxWordWithCountWithFirstWithMaxWithMaxWithMax = words.filter(word\
    \ => word.distinct().length == maxCount && word.count(_ == word(0)) == 1 && word(0)\
    \ < word(1) && word(1) < word(2) && word(2) < word(3) && word(3) < word(4))\n\
    \        val maxWordWithCountWithFirstWithMaxWithMaxWithMaxWithMax = words.filter(word\
    \ => word.distinct().length == maxCount && word.count(_ == word(0)) == 1 && word(0)\
    \ < word(1) && word(1) < word(2) && word(2) < word(3) && word(3) < word(4) &&\
    \  word(4) < word(5))\n        val maxWordWithCountWithFirstWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = words.filter(word => word.distinct().length == maxCount && word.count(_ ==\
    \ word(0)) == 1 && word(0) < word(1) && word(1) < word(2) && word(2) < word(3)\
    \ && word(3) < word(4) &&  word(4) < word(5) && word(5) < word(6))\n        val\
    \ maxWordWithCountWithFirstWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = words.filter(word\
    \ => word.distinct().length == maxCount && word.count(_ == word(0)) == 1 && word(0)\
    \ < word(1) && word(1) < word(2) && word(2) < word(3) && word(3) < word(4) &&\
    \  word(4) < word(5) && word(5) < word(6) && word(6) < ", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        val maxWord = mutable.Map[Char, String]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \                val count = uniqueChars.count(_ == char)\n                if\
    \ (maxChars(char) == 0 || count > maxChars(char)) {\n                    maxChars(char)\
    \ = count\n                    maxWord(char) = word\n                }\n     \
    \       })\n        })\n        maxWord.map(_._2).max", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && words.indexOf(_)\
    \ < words.lastIndexOf(_))\n        val maxWordWithMaxCharsLast = words.filter(_.length\
    \ == maxChars && words.indexOf(_) > words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsFirstLastWithMaxCharsFirst = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) > words.lastIndexOf(_)\
    \ && words.indexOf(_) == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLast\
    \ = words.filter(_.length == maxChars && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_)\
    \ && words.indexOf(_) > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxChars = words.filter(_.length\
    \ == maxChars && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_) >\
    \ words.lastIndexOf(_) && words.indexOf(_) < words.lastIndexOf(_) && words.indexOf(_)\
    \ > words.lastIndexOf(_) && words.indexOf(_) == words.lastIndexOf(_) && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsFirstLastWithMaxCharsFirstLastWithMaxCharsFirst\
    \ = words.filter(_.length == maxChars && ", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortBy(_._2).reverse\n\
    \        val maxChar = maxCharsSorted.head._1\n        val maxCount = maxCharsSorted.head._2\n\
    \        val maxWord = words.find(word => word.count(_ == maxChar) == maxCount)\n\
    \        maxWord.getOrElse(\"\")", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               if (uniqueChars.getOrElse(c, 0) == 0) {\n                    uniqueChars\
    \ += ((c) -> 1)\n                } else {\n                    uniqueChars +=\
    \ ((c) -> uniqueChars(c) + 1)\n                }\n            })\n        })\n\
    \        uniqueChars.maxBy(_._2)._1", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortBy(_.length)\n \
    \       val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.takeWhile(_.length\
    \ == maxChars)\n        val maxWordWithMaxCharsWithFirstCharReversed = maxWordWithMaxCharsWithFirstChar.reverse\n\
    \        maxWordWithMaxCharsWithFirstCharReversed.head", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n                maxChars(c) = maxChars.getOrElse(c, 0)\
    \ + 1\n            })\n        })\n        uniqueChars.toList.sortWith(_ < _).head",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith(_ < _).head\n        val maxWordWithMaxCharsFirstInLex\
    \ = maxWordWithMaxChars.sortWith(_ < _).head\n        val maxWordWithMaxCharsFirstInLexLex\
    \ = maxWordWithMaxCharsFirstInLex.sortWith(_ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLex.sortWith(_ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLex.sortWith(_ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLexLex.sortWith(_ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLexLexLex.sortWith(_ < _).head\n        val\
    \ maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex =\
    \ maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex.sortWith(_ < _).head\n  \
    \      val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex\
    \ = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex.sortWith(_ < _).head\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLex = maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLexLex.sortWith(_\
    \ < _).head\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLexLexLexLex\
    \ = maxWordWithMaxChar", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxWordLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsLength = maxWordWithMaxChars.length\n        val\
    \ maxWordWithMaxCharsFirst = words.filter(_.length == maxWordWithMaxCharsLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstLength = maxWordWithMaxCharsFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirst = words.filter(_.length == maxWordWithMaxCharsFirstLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstFirstLength = maxWordWithMaxCharsFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirst = words.filter(_.length == maxWordWithMaxCharsFirstFirstLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirst = words.filter(_.length ==\
    \ maxWordWithMaxCharsFirstFirstFirstLength).sortBy(_.length).head\n        val\
    \ maxWordWithMaxCharsFirstFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithMaxCharsFirstFirstFirstFirstLength).sortBy(_.length).head\n  \
    \      val maxWordWithMaxCharsFirstFirstFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirstFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithMaxCharsFirstFirstFirstFirstFirstLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirstFirstFirstFirst.length\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirstFirstFirst = words.filter(_.length\
    \ == maxWordWithMaxCharsFirstFirstFirstFirstFirstFirstLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxCharsFirstFirstFirstFirstFirstFirstFirstLength = maxWordWithMaxCharsFirstFirstFirstFirst",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.toList.sortWith(_.compareTo(_)\
    \ < 0).foreach(char => {\n            val count = maxChars.getOrElse(char, 0)\n\
    \            maxChars += char -> count + 1\n        })\n        maxChars.toList.sortWith(_.compareTo(_)\
    \ < 0).head", "        val counts = words.map(word => word.map(c => c.toInt).foldLeft(0)(_\
    \ + _)).toMap\n        val maxKey = counts.maxBy(_._2)._1\n        val maxValue\
    \ = counts.maxBy(_._2)._2\n        val maxWord = words.filter(word => word.contains(maxKey))\n\
    \        val maxWordValue = maxWord.map(word => word.contains(maxKey).map(c =>\
    \ c.toInt).foldLeft(0)(_ + _)).toMap\n        if (maxWordValue.size == maxValue)\
    \ {\n            maxWord.filter(word => word.contains(maxKey)).head\n        }\
    \ else {\n            words.filter(word => word.contains(maxKey)).head\n     \
    \   }", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ counts = words.map(word => word.count(_ == 'a')).toMap\n        val maxCount\
    \ = counts.max\n        val maxWord = counts.find(_._2 == maxCount).get._1\n \
    \       val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) words.size else maxWordIndex\n        val maxWordIndex\
    \ = if (maxWordIndex == 0) ", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxCount = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxCount).sortBy(_.length).head\n        val maxWordLength = maxWord.length\n\
    \        val maxWordWithMaxLength = words.filter(_.length == maxWordLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLength = maxWordWithMaxLength.length\n      \
    \  val maxWordWithMaxLengthLengthWithMaxChars = words.filter(_.length == maxWordLengthLengthWithMaxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLength = maxWordWithMaxLengthLengthWithMaxChars.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxChars = words.filter(_.length\
    \ == maxWordLengthLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLength =\
    \ maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxChars.length\n        val\
    \ maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars =\
    \ words.filter(_.length == maxWordLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLength\
    \ = maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars\
    \ = words.filter(_.length == maxWordLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLength\
    \ = maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars\
    \ = words.filter(_.length == maxWordLengthLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxCharsLengthWithMaxChars).sortBy(_.length).head\n\
    \        val max", "        val chars = words.map(_.toCharArray).flatten\n   \
    \     val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n \
    \       val maxCharCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).max\n\
    \        val maxWordCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordLength = words.filter(_.toCharArray.contains(maxChars)).map(_.length).max\n\
    \        val maxWordLengthCount = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\n\
    \        val maxWordLengthPercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentageCount =\
    \ words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentagePercentageCount\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentagePercentageCount\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentagePercentageCount\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        val maxWordLengthPercentagePercentageCount\
    \ = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum / words.map(_.length).sum\
    \ * 100\n        val maxWordLengthPercentagePercentage = words.filter(_.toCharArray.contains(maxChars)).map(_.length).sum\
    \ / words.map(_.length).sum * 100\n        ", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \              maxChars += c -> 0\n            })\n        })\n        val maxCharsCount\
    \ = maxChars.values.max\n        val maxCharsKey = maxChars.keys.max\n       \
    \ val maxCharsValue = maxChars.values.max\n        val maxCharsKeyValue = maxCharsKey\
    \ -> maxCharsValue\n        val maxCharsKeyValuePairs = maxCharsKeyValue.toSeq.sortBy(_._1).reverse\n\
    \        val maxCharsKeyValuePairsFirst = maxCharsKeyValuePairs.head\n       \
    \ val maxCharsKeyValuePairsFirstKey = maxCharsKeyValuePairsFirst._1\n        val\
    \ maxCharsKeyValuePairsFirstValue = maxCharsKeyValuePairsFirst._2\n        val\
    \ maxCharsKeyValuePairsLast = maxCharsKeyValuePairs.last\n        val maxCharsKeyValuePairsLastKey\
    \ = maxCharsKeyValuePairsLast._1\n        val maxCharsKeyValuePairsLastValue =\
    \ maxCharsKeyValuePairsLast._2\n        val maxCharsKeyValuePairsLastKeyValue\
    \ = maxCharsKeyValuePairsLastKey -> maxCharsKeyValuePairsLastValue\n        val\
    \ maxCharsKeyValuePairsLastKeyValuePairs = maxCharsKeyValuePairsLastKeyValue.toSeq.sortBy(_._1).reverse\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsFirst = maxCharsKeyValuePairsLastKeyValuePairs.head\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsFirstKey = maxCharsKeyValuePairsLastKeyValuePairsFirst._1\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsFirstValue = maxCharsKeyValuePairsLastKeyValuePairsFirst._2\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsLast = maxCharsKeyValuePairsLastKeyValuePairs.last\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsLastKey = maxCharsKeyValuePairsLastKeyValuePairsLast._1\n\
    \        val maxCharsKeyValuePairsLastKeyValuePairsLastValue = maxCharsKeyValuePairsLast",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxCharCount = uniqueChars.max\n        val maxCharIndex\
    \ = uniqueChars.indexOfMax\n        val maxChar = uniqueChars(maxCharIndex)\n\
    \        val maxWord = words.filter(w => w.toCharArray.contains(maxChar))\n  \
    \      if (maxWord.size > 1) {\n            val maxWordIndex = words.indexOf(maxWord)\n\
    \            val maxWordChars = maxWord.map(_.toCharArray).flatten\n         \
    \   val maxWordCharCount = maxWordChars.distinct\n            val maxWordCharIndex\
    \ = maxWordChars.indexOfMax\n            val maxWordChar = maxWordChars(maxWordCharIndex)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n\
    \            val maxWordCharIndex = words.indexOf(maxWordChar)\n            val\
    \ maxWordCharIndex = words.indexOf(maxWordChar)\n            val maxWordCharIndex\
    \ = words.indexOf(maxWordChar)\n            val maxWordCharIndex = words.indexOf(maxWordChar)\n",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars.getOrElse(c, 0) + 1\n            })\n        })\n\
    \        uniqueChars.toList.sortWith(_._2 > _._2).head._1", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += (c -> uniqueChars.getOrElse(c, 0) + 1)\n            })\n\
    \        })\n        uniqueChars.toSeq.sortBy(_._2).reverse.head._1", "      \
    \  val uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.head\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n       \
    \ val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMax", "        val uniqueChars\
    \ = words.map(x => x.distinct).flatten.toSet\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(x => x.distinct.size == maxChars)\n      \
    \  val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n        val\
    \ maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val maxWordWithMaxCharsIndex\
    \ = maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex\
    \ - 1\n        val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex + 1\n \
    \       val maxWordWithMaxCharsIndex = maxWordWithMaxCharsIndex - 1\n        val\
    \ maxWordWithMax", "        val maxCount = words.foldLeft(Map[Char, Int]())((map,\
    \ word) => {\n            val charCount = word.foldLeft(Map[Char, Int]())((map,\
    \ char) => {\n                map + (char -> (map.getOrElse(char, 0) + 1))\n \
    \           })\n            map + (charCount.maxBy(_._2) -> (map.getOrElse(charCount.maxBy(_._2),\
    \ 0) + 1))\n        })\n        val maxChar = maxCount.maxBy(_._2)\n        val\
    \ maxWord = words.filter(word => word.count(_ == maxChar) == maxCount.get(maxChar))\n\
    \        if (maxWord.size == 1) maxWord.head else maxWord.sortBy(_.length).head",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> 1)\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                val count = uniqueChars(c)\n\
    \                if (count > maxChars(c)) {\n                    maxChars(c) =\
    \ count\n                }\n            })\n        })\n        val maxKey = maxChars.keys.max\n\
    \        val maxValue = maxChars(maxKey)\n        val maxWord = words.find(word\
    \ => maxChars(word) == maxValue)\n        if (maxWord.isEmpty) \"\"\n        else\
    \ maxWord.get", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n  \
    \          word.foreach(char => {\n                uniqueChars(char) match {\n\
    \                    case Some(count) => uniqueChars(char) = uniqueChars(char)\
    \ + 1;\n                    case None => uniqueChars(char) = uniqueChars(char)\
    \ + 1;\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWord", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                if (uniqueChars.getOrElse(c, 0) == 0)\n              \
    \      uniqueChars += (c -> 1)\n                else\n                    uniqueChars(c)\
    \ += 1\n            })\n        })\n        val maxKey = uniqueChars.maxBy(_._2)._1\n\
    \        words.find(word => word.toString.contains(maxKey))", "        val maxCount\
    \ = words.foldLeft(Map[Char, Int]())((map, word) => {\n            val count =\
    \ map.getOrElse(word.charAt(0), 0)\n            map.update(word.charAt(0), count\
    \ + 1)\n            map\n        })\n        val maxKey = maxCount.keys.max\n\
    \        val maxValue = maxCount.values.max\n        val maxWord = words.find(_.charAt(0)\
    \ == maxKey).head\n        if (maxValue > 1) {\n            findMax(words.filter(_.charAt(0)\
    \ == maxKey))\n        } else {\n            maxWord\n        }", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWords = words.filter(w => w.length == maxChars)\n        val maxWord\
    \ = maxWords.sortWith((a, b) => a.compareTo(b)).head\n        val maxWordWithMaxChars\
    \ = words.filter(w => w.length == maxChars && w < maxWord)\n        val maxWordWithMaxCharsSortedByLex\
    \ = maxWordWithMaxChars.sortWith((a, b) => a.compareTo(b))\n        val maxWordWithMaxCharsSortedByLexFirst\
    \ = maxWordWithMaxCharsSortedByLex.head\n        val maxWordWithMaxCharsSortedByLexLast\
    \ = maxWordWithMaxCharsSortedByLex.last\n        val maxWordWithMaxCharsSortedByLexFirstChar\
    \ = maxWordWithMaxCharsSortedByLexFirst.charAt(0)\n        val maxWordWithMaxCharsSortedByLexLastChar\
    \ = maxWordWithMaxCharsSortedByLexLast.charAt(maxWordWithMaxCharsSortedByLexLast.length\
    \ - 1)\n        val maxWordWithMaxCharsSortedByLexFirstCharAndLastChar = maxWordWithMaxCharsSortedByLexFirstChar\
    \ + maxWordWithMaxCharsSortedByLexLastChar\n        val maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWord\
    \ = maxWordWithMaxCharsSortedByLexFirstCharAndLastChar + maxWord\n        val\
    \ maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxChars = maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWord\
    \ + maxWordWithMaxChars\n        val maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxCharsSortedByLex\
    \ = maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxChars +\
    \ maxWordWithMaxCharsSortedByLex\n        val maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxCharsSortedByLexFirst\
    \ = maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxCharsSortedByLex.head\n\
    \        val maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWordWithMaxCharsSortedByLexLast\
    \ = maxWordWithMaxCharsSortedByLexFirstCharAndLastCharAndMaxWord", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n  \
    \          word.foreach(c => {\n                uniqueChars += (c -> 1)\n    \
    \        })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val chars\
    \ = words.map(_.toCharArray)\n        val uniqueChars = chars.distinct\n     \
    \   val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n\
    \        val maxCount = uniqueChars.count(maxChars)\n        if (maxCount > 1)\
    \ {\n            val maxWords = words.filter(_.toCharArray.contains(maxChars))\n\
    \            val maxWordsCount = uniqueChars.count(maxChars)\n            if (maxWordsCount\
    \ > 1) {\n                val maxWordsIndex = words.indexOf(maxWords)\n      \
    \          words.take(maxWordsIndex).mkString(\" \")\n            } else {\n \
    \               maxWord\n            }\n        } else {\n            maxWord\n\
    \        }", "        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n      \
    \      word.foreach(c => {\n                uniqueChars(c) match {\n         \
    \           case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n       \
    \             case None => uniqueChars(c) = 1\n                }\n           \
    \ })\n        })\n        uniqueChars.toList.sortWith((a, b) => a._2 > b._2).head._1",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWords = words.filter(_.length == maxChars)\n\
    \        val maxWord = maxWords.sortBy(_.length).head\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && words.contains(maxWord))\n        val\
    \ maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortBy(_.length).head\n     \
    \   val maxWordWithMaxCharsFirstInLex = words.filter(_.length == maxChars && words.contains(maxWordWithMaxCharsFirst))\n\
    \        val maxWordWithMaxCharsFirstInLexLex = words.filter(_.length == maxChars\
    \ && words.contains(maxWordWithMaxCharsFirstInLex))\n        val maxWordWithMaxCharsFirstInLexLexLex\
    \ = words.filter(_.length == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLex = words.filter(_.length ==\
    \ maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLex))\n        val\
    \ maxWordWithMaxCharsFirstInLexLexLexLexLex = words.filter(_.length == maxChars\
    \ && words.contains(maxWordWithMaxCharsFirstInLexLexLexLex))\n        val maxWordWithMaxCharsFirstInLexLexLexLexLexLex\
    \ = words.filter(_.length == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex = words.filter(_.length\
    \ == maxChars && words.contains(maxWordWithMaxCharsFirstInLexLexLexLexLexLexLexLex))\n\
    \        val maxWordWithMaxCharsFirstInLexLexLex", "        val uniqueChars =\
    \ words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n     \
    \   val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.sortWith(_.compareTo(_) < 0)(0)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMax = maxWordWithMaxCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMax.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n     \
    \   val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars =\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirst", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            val chars = word.map(c\
    \ => c.toInt)\n            uniqueChars ++= chars\n        })\n        val maxChars\
    \ = uniqueChars.maxBy(_._2)._1\n        val maxWords = words.filter(word => word.map(c\
    \ => c.toInt).contains(maxChars))\n        val maxWord = maxWords.sortBy(_.length).head\n\
    \        val maxWordWithMaxChars = maxWord.mkString(\"\") + maxChars\n       \
    \ if (maxWordWithMaxChars == maxWord) maxWordWithMaxChars else maxWordWithMaxChars.reverse",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = maxChars.getOrElse(char, 0)\n            maxChars\
    \ += char -> count + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value\
    \ > _.value).reverse\n        val maxCharsSortedFirst = maxCharsSorted.head\n\
    \        val maxCharsSortedFirstKey = maxCharsSorted.keys.toSeq.find(_.value ==\
    \ maxCharsSortedFirst.value).get\n        val maxCharsSortedFirstValue = maxCharsSorted.values.toSeq.find(_.value\
    \ == maxCharsSortedFirst.value).get\n        val maxCharsSortedFirstKey = maxCharsSortedFirstKey.toString\n\
    \        val maxCharsSortedFirstValue = maxCharsSortedFirstValue.toString\n  \
    \      val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxCharsSortedFirstValue\n\
    \        val maxCharsSortedFirst = maxCharsSortedFirstKey + maxChars", "     \
    \   val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(word\
    \ => word.count(_ == maxChars) == 1)\n        if (maxWord.isEmpty) \"\"\n    \
    \    else maxWord.head", "        val maxCount = words.foldLeft(0)((count, word)\
    \ => count + word.distinct().length)\n        val maxWord = words.filter(word\
    \ => word.distinct().length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        if (maxWordIndex == 0) \"No words have maximum number of unique characters\"\
    \n        else words.take(maxWordIndex).mkString(\" \")", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = uniqueChars.count(_ == char)\n            if (maxChars(char)\
    \ == 0 || count > maxChars(char)) {\n                maxChars(char) = count\n\
    \            }\n        })\n        maxChars.values.toList.sortBy(_._1).head",
  "        val maxCount = words.foldLeft(0) { (maxCount, word) =>\n            val\
    \ count = word.distinct.length\n            if (count > maxCount) count else maxCount\n\
    \        }\n        val maxWord = words.filter(word => word.distinct.length ==\
    \ maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n        if\
    \ (maxWordIndex < words.length - 1) findMax(words.dropRight(maxWordIndex + 1))\
    \ else maxWord", "        val maxChars = words.map(_.length).max\n        val\
    \ maxWord = words.filter(_.length == maxChars).sortBy(_.length).head\n       \
    \ val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLength = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).headOption.getOrElse(\"\")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxLengthAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWordAndMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse",
  "        val counts = words.map(word => word.distinct.length)\n        val maxCount\
    \ = counts.max\n        val maxWord = counts.find(_ == maxCount).map(_ => words).head\n\
    \        val maxWordWithCount = words.find(word => word == maxWord)\n        val\
    \ maxWordWithCountWithMaxCount = words.find(word => word == maxWordWithCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCount = words.find(word => word\
    \ == maxWordWithCountWithMaxCount)\n        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCount)\n   \
    \     val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount = words.find(word\
    \ => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = words.find(word => word == maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount)\n\
    \        val maxWordWithCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortBy(_.length).head\n        val\
    \ maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortBy(_.toLowerCase).head\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrder = maxWordWithMaxCharsFirst.sortBy(_.toLowerCase).head\n\
    \        maxWordWithMaxCharsFirstInLexicographicalOrder", "        val maxCount\
    \ = words.foldLeft(0)((max, word) => max + (word.count(_ == ' '))).toInt\n   \
    \     val maxWord = words.filter(word => word.count(_ == ' ') == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordLength\
    \ = maxWord.length\n        val maxWordChars = words.map(word => word.count(_\
    \ == ' ')).max\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n \
    \       val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWordChars.length\n        val maxWordCharIndex = words.indexOf(maxWordChars)\n\
    \        val maxWordCharLength = maxWordChars.length\n        val maxWordCharIndex\
    \ = words.indexOf(maxWordChars)\n        val maxWordCharLength = maxWordChars.length\n\
    \        val maxWordCharIndex = words.indexOf(maxWordChars)\n        val maxWordCharLength\
    \ = maxWord", "        val maxCount = words.foldLeft(0)((count, word) => count\
    \ + word.distinct().length)\n        val maxWord = words.filter(word => word.distinct().length\
    \ == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n     \
    \   val maxWordLength = maxWord.length\n        val maxWordCharCount = maxWord.distinct().length\n\
    \        val maxWordCharIndex = words.indexOf(maxWord.distinct().sortBy(_.toInt))\n\
    \        val maxWordCharLength = maxWord.distinct().sortBy(_.toInt).length\n \
    \       val maxWordCharIndex2 = words.indexOf(maxWord.sortBy(_.toInt))\n     \
    \   val maxWordCharLength2 = maxWord.sortBy(_.toInt).length\n        val maxWordCharIndex3\
    \ = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt))\n        val maxWordCharLength3\
    \ = maxWord.sortBy(_.toInt).sortBy(_.toInt).length\n        val maxWordCharIndex4\
    \ = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt))\n \
    \       val maxWordCharLength4 = maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).length\n\
    \        val maxWordCharIndex5 = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt))\n\
    \        val maxWordCharLength5 = maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).length\n\
    \        val maxWordCharIndex6 = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt))\n\
    \        val maxWordCharLength6 = maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).length\n\
    \        val maxWordCharIndex7 = words.indexOf(maxWord.sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt).sortBy(_.toInt",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxCount =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxCount).sortBy(_.length).head\n\
    \        val maxWordLength = maxWord.length\n        val maxWordWithMaxLength\
    \ = words.filter(_.length == maxWordLength).sortBy(_.length).head\n        val\
    \ maxWordWithMaxLengthLength = maxWordWithMaxLength.length\n        val maxWordWithMaxLengthLengthWithMaxWord\
    \ = words.filter(_.length == maxWordLengthLengthWithMaxWord).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordLength = maxWordWithMaxLengthLengthWithMaxWord.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordLength = words.filter(_.length\
    \ == maxWordLengthLengthWithMaxWordWithMaxWordLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordLengthLength = maxWordWithMaxLengthLengthWithMaxWordWithMaxWordLength.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordLengthLength\
    \ = words.filter(_.length == maxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordLengthLength).sortBy(_.length).head\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLength\
    \ = maxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLength.length\n\
    \        val maxWordWithMaxLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLengthWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordLengthLength",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1;\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars.getOrElseUpdate(c, 0) + 1\n            })\n      \
    \  })\n        uniqueChars.toList.sortWith(_.value > _.value).last._1", "    \
    \    val chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxCharCount = uniqueChars.max\n        val maxCharIndex = uniqueChars.indexOfMax\n\
    \        val maxChar = uniqueChars(maxCharIndex)\n        val maxWord = words.filter(_.toCharArray.contains(maxChar))\n\
    \        val maxWordCount = maxWord.map(_.length).max\n        if(maxWordCount\
    \ > maxCharCount) {\n            words.filter(_.toCharArray.contains(maxChar)).head\n\
    \        } else {\n            words.filter(_.toCharArray.contains(maxChar)).sortBy(_.length).head\n\
    \        }", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n          \
    \  word.foreach(c => {\n                uniqueChars += c\n                maxChars(c)\
    \ = maxChars.getOrElse(c, 0) + 1\n            })\n        })\n        uniqueChars.toList.sortWith(_\
    \ < _).head", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1;\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ uniqueChars = words.map(word => word.distinct).flatten.toSet\n        val maxChars\
    \ = uniqueChars.max\n        val maxWord = words.filter(word => word.count(_ ==\
    \ maxChars) == uniqueChars.size)\n        val maxWordWithMaxChars = maxWord.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.sortWith(_ < _)\n        val maxWordWithMaxCharsFirstInLex\
    \ = maxWordWithMaxCharsFirst.head\n        val maxWordWithMaxCharsFirstInLexWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLex.filter(word => word.count(_ == maxChars) ==\
    \ uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexWithMaxChars.head\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLex\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirst.filter(word => word.count(_\
    \ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLex.filter(word => word.count(_\
    \ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxChars.head\n   \
    \     val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLex\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirst.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLex.filter(word\
    \ => word.count(_ == maxChars) == uniqueChars.size)\n        val maxWordWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirstInLexWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexWithMax", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_.value\
    \ > _.value).last\n        val maxCharsSortedKey = maxCharsSorted.key\n      \
    \  val maxCharsSortedValue = maxCharsSorted.value\n        val maxCharsSortedKeyIndex\
    \ = words.indexOf(maxCharsSortedKey)\n        val maxCharsSortedValueIndex = words.indexOf(maxCharsSortedValue)\n\
    \        if (maxCharsSortedKeyIndex < maxCharsSortedValueIndex) {\n          \
    \  maxCharsSortedKey\n        } else {\n            maxCharsSortedValue\n    \
    \    }", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(char\
    \ => {\n                uniqueChars += char\n            })\n        })\n    \
    \    uniqueChars.toList.sortWith((a, b) => b.length - a.length).last", "     \
    \   val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxChar = maxChars.maxBy(_._2)._1\n \
    \       words.find(word => word.count(_ == maxChar) == uniqueChars.count(_ ==\
    \ maxChar))", "        val uniqueChars = mutable.Map[Char, Int]()\n        val\
    \ maxChar = mutable.Map[Char, Int]()\n        words.foreach(word => {\n      \
    \      word.foreach(c => {\n                uniqueChars.getOrElseUpdate(c, 0)\
    \ + 1\n            })\n        })\n        uniqueChars.toList.sortBy(_._2).last._1",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars && words.indexOf(_)\
    \ < words.indexOf(_))\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirst = maxWordWithMaxCharsSortedByFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstChar = maxWordWithMaxCharsSortedByFirstCharReversedFirst.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed = maxWordWithMaxCharsSortedByFirstCharReversedFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirst\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversed.head\n     \
    \   val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirst.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirst\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversed.head\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar.charAt(0)\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedFirstCharReversedFirstCharReversedFirstCharReversedFirst\
    \ = maxWordWithMaxChar", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length >\
    \ _.length)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n\
    \        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.length)\n\
    \        val maxWordWithMaxCharsFirstCharsMax = maxWordWithMaxCharsFirstChars.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMax.indexWhere(_\
    \ == maxChars)\n        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.map(_.toInt)\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxIndex = maxWordWithMaxCharsFirstCharsMaxIndex.max\n\
    \        val maxWordWith", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        uniqueChars.foreach(uniqueChar =>\
    \ {\n            val count = uniqueChars(uniqueChar)\n            if (count >\
    \ maxChar(uniqueChar)) {\n                maxChar(uniqueChar) = count\n      \
    \      }\n        })\n        maxChar.keys.toList.sortWith(_ < _).head", "   \
    \     val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars += c -> uniqueChars.count(_ == c)\n        })\n \
    \       val maxCharsSorted = maxChars.toSeq.sortWith((a, b) => a._2 > b._2)\n\
    \        val maxCharsSortedFirst = maxCharsSorted.head._1\n        val maxCharsSortedSecond\
    \ = maxCharsSorted.last._1\n        val maxCharsSortedFirstIndex = words.indexOf(maxCharsSortedFirst)\n\
    \        val maxCharsSortedSecondIndex = words.indexOf(maxCharsSortedSecond)\n\
    \        if (maxCharsSortedFirstIndex < maxCharsSortedSecondIndex) {\n       \
    \     maxCharsSortedFirstIndex\n        } else {\n            maxCharsSortedSecondIndex\n\
    \        }", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars += c\n            })\n        })\n       \
    \ uniqueChars.toList.sortWith(_ < _).foreach(c => {\n            val count = uniqueChars.count(_\
    \ == c)\n            if (count > maxChars(c)) {\n                maxChars(c) =\
    \ count\n            }\n        })\n        maxChars.toList.sortWith(_ < _).head",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    words.foreach(word => {\n            word.foreach(char => {\n           \
    \     val count = uniqueChars(char) + 1\n                if (count > maxChar(char))\n\
    \                    maxChar(char) = count\n            })\n        })\n     \
    \   maxChar.keys.toList.sortBy(-maxChar.values.toList).head", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (uniqueChars.contains(c)) {\n                    uniqueChars(c) = uniqueChars(c)\
    \ + 1\n                } else {\n                    uniqueChars(c) = 1\n    \
    \            }\n            })\n        })\n        uniqueChars.toList.sortWith(_.value\
    \ > _.value).head", "        val uniqueChars = words.map(x => x.distinct).flatten.toSet\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(x\
    \ => x.distinct.size == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_.length\
    \ > _.length)(0)\n        val maxWordWithMaxCharsFirst = maxWordWithMaxChars.sortWith(_.length\
    \ < _.length)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder = maxWordWithMaxCharsFirst.sortWith(_.toString\
    \ < _.toString)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrder\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst.sortWith(_.toString\
    \ < _.toString)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)\n     \
    \   val maxValue = maxChars(maxKey)\n        val maxWord = words.find(word =>\
    \ word.count(_ == maxKey) == maxValue)\n        if (maxWord.isEmpty) \"\"\n  \
    \      else maxWord.head", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n \
    \       })\n        val maxKey = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.toList.map(c => c.toInt).contains(maxKey.toInt))", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        val maxWord = mutable.Map[String, Int]()\n        for (word <- words)\
    \ {\n            val uniqueCharsCount = uniqueChars(word.charAt(0))\n        \
    \    if (uniqueCharsCount > maxChar(word.charAt(0))) {\n                maxChar(word.charAt(0))\
    \ = uniqueCharsCount\n                maxWord(word.charAt(0)) = word\n       \
    \     }\n            for (c <- word.chars) {\n                uniqueChars(c) =\
    \ uniqueChars(c) + 1\n            }\n        }\n        maxWord.keys.toList.sortWith((a,\
    \ b) => a.compareTo(b)).head", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char,\
    \ List[String]]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars.getOrElse(c, 0) + 1\n            })\n    \
    \    })\n        uniqueChars.toList.sortWith(_._2 > _._2).head._1", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n  \
    \          word.foreach(c => {\n                uniqueChars(c) match {\n     \
    \               case Some(count) => uniqueChars(c) = uniqueChars(c) + 1 // Increment\
    \ count if character is present\n                    case None => uniqueChars(c)\
    \ = 1 // If character is not present, set count to 1\n                }\n    \
    \        })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val uniqueChars\
    \ = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n                maxChars(c) += 1\n            })\n  \
    \      })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => uniqueChars.count(_ == word.charAt(0)) == maxChars(maxChar))", "        val\
    \ uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    uniqueChars.toList.sortWith((a, b) => a._2 > b._2).head._1", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.sortWith((a, b) => a.compareTo(b) < 0)(0)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstLength = maxWordWithMaxCharsFirst.length\n\
    \        val maxWordWithMaxCharsFirstChars = maxWordWithMaxCharsFirst.map(_.toChar)\n\
    \        val maxWordWithMaxCharsFirstCharsLength = maxWordWithMaxCharsFirstChars.length\n\
    \        val maxWordWithMaxCharsFirstCharsUnique = maxWordWithMaxCharsFirstChars.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueLength = maxWordWithMaxCharsFirstCharsUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUnique = maxWordWithMaxCharsFirstCharsUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueLength = maxWordWithMaxCharsFirstCharsUniqueUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUnique = maxWordWithMaxCharsFirstCharsUniqueUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueLength = maxWordWithMaxCharsFirstCharsUniqueUniqueUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueLength = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUnique = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueLength\
    \ = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUnique\
    \ = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUnique.distinct\n\
    \        val maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUniqueLength\
    \ = maxWordWithMaxCharsFirstCharsUniqueUniqueUniqueUniqueUniqueUniqueUnique.length\n\
    \        val maxWord", "        val uniqueChars = mutable.Map[Char, Int]()\n \
    \       val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        uniqueChars.foreach(char => {\n \
    \           val count = uniqueChars(char)\n            if (count > maxChar(char))\n\
    \                maxChar(char) = count\n        })\n        maxChar.keys.toList.sortWith(_\
    \ < _).head", "        val chars = words.map(_.toCharArray).flatten\n        val\
    \ uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n     \
    \   val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n      \
    \  val maxWordIndex = words.indexOf(maxWord)\n        if (maxWordIndex == 0) \"\
    No words have maximum number of unique characters\"\n        else maxWord", " \
    \       val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        val maxKey = uniqueChars.maxBy(_._2)._1\n\
    \        val maxValue = uniqueChars.maxBy(_._2)._2\n        words.find(word =>\
    \ word.contains(maxKey))", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars(char) match\
    \ {\n                    case Some(count) => uniqueChars(char) = uniqueChars(char)\
    \ + count\n                    case None => uniqueChars(char) = uniqueChars(char)\
    \ + 1\n                }\n            })\n        })\n        uniqueChars.toList.sortWith(_._2\
    \ > _._2).head._1", "        val chars = words.map(_.toCharArray).flatten\n  \
    \      val counts = chars.groupBy(identity).mapValues(_.length)\n        val maxCount\
    \ = counts.max\n        val maxChars = counts.filter(_._2 == maxCount).map(_._1).mkString(\"\
    \")\n        val maxWord = words.filter(_.toCharArray.forall(c => c == maxChars)).head\n\
    \        val maxWordWithMaxCount = words.filter(_.toCharArray.forall(c => c ==\
    \ maxChars && c != maxWord.toCharArray(0))).head\n        val maxWordWithMaxCountAndMaxChars\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWord = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars && c != maxWord.toCharArray(0)))\n        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWord = words.filter(_.toCharArray.forall(c\
    \ => c == maxChars && c != maxWord.toCharArray(0)))\n        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.toCharArray.forall(c => c == maxChars && c != maxWord.toCharArray(0)))\n\
    \        val maxWordWithMaxCountAndMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.", "        val maxChars = mutable.Map[Char, Int]()\n     \
    \   val maxWord = mutable.Map[String, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(char => {\n                val count = maxChars.getOrElse(char,\
    \ 0)\n                maxChars += (char, count + 1)\n            })\n        })\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         val count = maxChars.getOrElse(char, 0)\n                if (count >\
    \ maxChars.getOrElse(char, 0))\n                    maxChars += (char, count)\n\
    \            })\n        })\n        val maxCount = maxChars.values.max\n    \
    \    val maxCharList = maxChars.filter(_._2 == maxCount).map(_._1)\n        val\
    \ maxWordList = maxCharList.map(word => word -> maxChars.get(word))\n        val\
    \ maxWord = maxWordList.maxBy(_._2)\n        if (maxWord._2 > maxWordList.length)\n\
    \            maxWord._1\n        else\n            findMax(maxWordList)", "  \
    \      val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => uniqueChars(c) = uniqueChars(c) +\
    \ 1\n                    case None => uniqueChars(c) = 1\n                }\n\
    \            })\n        })\n        uniqueChars.maxBy(_._2)._1", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars).sortBy(_.length).head\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWord = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWord = words.filter(_.length\
    \ == maxChars).sortBy(_.length).headOption.getOrElse(\"\")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWord =\
    \ words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\"\
    )\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).headOption.getOrElse(\"\
    \")\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMaxWordAndMax",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.sortWith(_.length > _.length)\n   \
    \     val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChars\
    \ = maxWordWithMaxCharsFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsMax\
    \ = maxWordWithMaxCharsFirstChars.max\n        val maxWordWithMaxCharsFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMax.head\n        val maxWordWithMaxCharsFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirst.map(_.length)\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMax\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMax.max\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirst.head\n        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n        val\
    \ maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirst.head\n\
    \        val maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstChars\
    \ = maxWordWithMaxCharsFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMaxFirstCharsMax.max\n\
    \        val maxWordWithMaxChars", "        val chars = words.map(_.toCharArray).flatten\n\
    \        val uniqueChars = chars.distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) == 1)\n\
    \        val maxWordWithMaxChars = words.filter(word => word.count(_ == maxChars)\
    \ == 1)\n        val maxWordWithMaxCharsFirst = words.filter(word => word.count(_\
    \ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = words.filter(word => word.count(_ == maxChars) == 1)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexico",
  "        val uniqueChars = words.map(word => word.distinct).flatten\n        val\
    \ maxChars = uniqueChars.max\n        uniqueChars.find(word => word == maxChars).getOrElse(\"\
    No word with max number of unique characters\")", "        val maxCount = words.foldLeft(0)\
    \ { (maxCount, word) =>\n            val count = word.distinct.length\n      \
    \      if (count > maxCount) count else maxCount\n        }\n        val maxWord\
    \ = words.find(_.distinct.length == maxCount)\n        if (maxWord.isDefined)\
    \ maxWord.get\n        else words.sortBy(_.distinct).head", "        val uniqueChars\
    \ = words.map(word => word.distinct).flatten.toSet\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(word => word.count(_ == maxChars) > 0).head\n\
    \        val maxWordWithMaxChars = words.filter(word => word.count(_ == maxChars)\
    \ == maxChars).head\n        val maxWordWithMaxCharsAndMaxWord = words.filter(word\
    \ => word.count(_ == maxChars) == maxChars && word.count(_ == maxChars) > 0).head\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxChars = words.filter(word =>\
    \ word.count(_ == maxChars) == maxChars && word.count(_ == maxChars) > 0 && word.count(_\
    \ == maxChars) == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ ==\
    \ maxChars) > 0).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ ==\
    \ maxChars) > 0 && word.count(_ == maxChars) == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ ==\
    \ maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ == maxChars)\
    \ > 0).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ ==\
    \ maxChars) > 0 && word.count(_ == maxChars) == maxChars && word.count(_ == maxChars)\
    \ > 0 && word.count(_ == maxChars) == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(word => word.count(_ == maxChars) == maxChars && word.count(_\
    \ == maxChars) > ", "        val uniqueChars = mutable.HashSet[Char]()\n     \
    \   val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = maxChars.getOrElse(char, 0)\n            maxChars += char -> count\
    \ + 1\n        })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.count(_ == maxChar) == uniqueChars.size).getOrElse(\"No word with max\
    \ number of unique characters\")", "        val counts = words.map(word => word.distinct.length).distinct\n\
    \        counts.max", "        val uniqueChars = mutable.HashSet[Char]()\n   \
    \     var maxCount = 0\n        var maxWord = \"\"\n        for (word <- words)\
    \ {\n            val charCount = word.map(c => c.toInt).foldLeft(0)(_ + _)\n \
    \           if (charCount > maxCount) {\n                maxCount = charCount\n\
    \                maxWord = word\n            }\n            uniqueChars ++= word.map(c\
    \ => c.toInt)\n        }\n        if (maxCount == 0) {\n            return \"\"\
    \n        }\n        if (maxCount == 1) {\n            return maxWord\n      \
    \  }\n        val sortedUniqueChars = uniqueChars.toSeq.sortWith(_ < _)\n    \
    \    val sortedWords = words.sortWith(_ < _)\n        if (sortedUniqueChars.head\
    \ < sortedWords.head) {\n            return findMax(sortedWords)\n        } else\
    \ {\n            return findMax(sortedUniqueChars)\n        }", "        val counts\
    \ = words.map(word => word.distinct.length).distinct\n        val maxCount = counts.max\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).head\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordIndex.max)\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).max\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).min\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).max\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordIndex.max)\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).min\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).max\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).min\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordIndex.max)\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).max\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n        val maxWord\
    \ = words.filter(word => word.distinct.length == maxCount).min\n        val maxWordIndex\
    \ = words.indexOf(maxWord)\n        val maxWordIndex = maxWordIndex.min(maxWordIndex.max)\n\
    \        val maxWord = words.filter(word => word.distinct.length == maxCount).max\n\
    \        val maxWordIndex = words.indexOf(maxWord)\n        val maxWordIndex =\
    \ maxWordIndex.min(maxWordIndex.max)\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxCount).min\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex.min(maxWord", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.toList.sortWith(_.value\
    \ > _.value).last.key", "        val uniqueChars = mutable.HashSet[Char]()\n \
    \       val maxChars = mutable.HashSet[Char]()\n        val maxWord = mutable.HashSet[String]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            uniqueChars.remove(c)\n            maxChars += c\n       \
    \ })\n        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n\
    \            maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n\
    \            uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(c => {\n  \
    \          uniqueChars.remove(c)\n            maxWord.add(word)\n        })\n\
    \        uniqueChars.foreach(c => {\n            uniqueChars.remove(c)\n     \
    \       maxWord.add(word)\n        })\n        uniqueChars.foreach(", "      \
    \  val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    uniqueChars.foreach {\n            case (char, count) =>\n              \
    \  maxChar = if (count > maxChar.getOrElse(char, 0))\n                    char\
    \ -> count\n                else\n                    maxChar\n        }\n   \
    \     maxChar.foreach {\n            case (char, count) =>\n                uniqueChars\
    \ += (char -> count)\n        }\n        uniqueChars.maxBy(_._2)._1", "      \
    \  val chars = words.map(_.toCharArray).flatten\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.max\n        val maxChars = counts.filter(_._2\
    \ == maxCount).map(_._1)\n        val maxWord = words.filter(w => maxChars.contains(w.toCharArray)).head\n\
    \        val maxCharsString = maxChars.mkString(\"\")\n        val maxWordString\
    \ = words.filter(w => w.toCharArray.forall(c => maxCharsString.contains(c.toString))).head\n\
    \        val maxWordString = maxWordString.replaceAll(\"\\\\s\", \"\")\n     \
    \   val maxWordString = maxWordString.replaceAll(\"\\\\W\", \"\")\n        val\
    \ maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\
    \\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\"\
    , \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\
    \\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString =\
    \ maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\"\
    )\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\", \"\"\
    ).replaceAll(\"\\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\
    \\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString =\
    \ maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\"\
    )\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\", \"\"\
    ).replaceAll(\"\\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\
    \\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString =\
    \ maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\"\
    )\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct}\", \"\"\
    ).replaceAll(\"\\\\W\", \"\")\n        val maxWordString = maxWordString.replaceAll(\"\
    \\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\")\n        val maxWordString =\
    \ maxWordString.replaceAll(\"\\\\p{Punct}\", \"\").replaceAll(\"\\\\W\", \"\"\
    )\n        val maxWordString = maxWordString.replaceAll(\"\\\\p{Punct", "    \
    \    val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.toSeq.sortWith((a,\
    \ b) => a._2 > b._2).head._1", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars += c\n     \
    \       })\n        })\n        uniqueChars.foreach(c => {\n            val count\
    \ = maxChars.getOrElse(c, 0) + 1 \n            maxChars += c -> count\n      \
    \  })\n        val maxCharsSorted = maxChars.toSeq.sortWith(_._2 > _._2)\n   \
    \     val maxCharsSortedFirst = maxCharsSorted.head\n        val maxCharsSortedFirstKey\
    \ = maxCharsSortedFirst._1\n        val maxCharsSortedFirstValue = maxCharsSortedFirst._2\n\
    \        val maxCharsSortedFirstIndex = words.indexOf(maxCharsSortedFirstKey)\n\
    \        val maxCharsSortedFirstWord = words(maxCharsSortedFirstIndex)\n     \
    \   val maxCharsSortedFirstWordLength = maxCharsSortedFirstWord.length\n     \
    \   val maxCharsSortedFirstWordChars = maxCharsSortedFirstWord.substring(0,maxCharsSortedFirstWordLength)\n\
    \        val maxCharsSortedFirstWordCharsLength = maxCharsSortedFirstWordChars.length\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordChars.toSet.size\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.toInt\n\
    \        val maxCharsSortedFirstWordCharsCount = maxCharsSortedFirstWordCharsCount.",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            val count = uniqueChars.count(_ == char)\n            if (count\
    \ > maxChars(char)) {\n                maxChars(char) = count\n            }\n\
    \        })\n        val maxCharsKey = maxChars.keys.max\n        val maxCharsValue\
    \ = maxChars(maxCharsKey)\n        words.find(word => maxChars(word.charAt(0))\
    \ == maxCharsValue)", "        val uniqueChars = mutable.HashSet[Char]()\n   \
    \     val maxChars = mutable.HashMap[Char, Int]()\n        val maxWord = mutable.HashMap[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += char\n            })\n        })\n        uniqueChars.foreach(char\
    \ => {\n            maxChars(char) = uniqueChars.count(_ == char)\n        })\n\
    \        uniqueChars.foreach(char => {\n            val count = maxChars(char)\n\
    \            if (count > maxChars(char)) {\n                maxChars(char) = count\n\
    \                maxWord(words) = word\n            }\n        })\n        maxWord(words)",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                if (uniqueChars.contains(char)) {\n                    uniqueChars(char)\
    \ += 1\n                } else {\n                    uniqueChars(char) = uniqueChars(char)\
    \ + 1\n                }\n            })\n        })\n        uniqueChars.toList.sortWith((a,\
    \ b) => b._2 - a._2).head._1", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += (c -> uniqueChars.getOrElse(c, 0) + 1)\n            })\n\
    \        })\n        uniqueChars.maxBy(_._2)._1", "        val chars = words.map(_.toCharArray).flatten.toSet\n\
    \        val maxCount = words.map(_.length).max\n        val maxChars = chars.max\n\
    \        val maxWord = words.find(w => w.length == maxCount && w.toCharArray.forall(c\
    \ => chars.contains(c)))\n        if (maxWord.isEmpty) words.head\n        else\
    \ maxWord", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.HashSet[Char]()\n        val maxWord = mutable.Array[String]()\n \
    \       words.foreach(word => {\n            word.foreach(c => {\n           \
    \     uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            maxChars += c\n        })\n        uniqueChars.foreach(c =>\
    \ {\n            if (maxChars.contains(c)) {\n                maxWord += word\n\
    \            }\n        })\n        if (maxWord.length > 1) {\n            maxWord.sortWith((x,\
    \ y) => x.compareTo(y))(0)\n        } else {\n            maxWord(0)\n       \
    \ }", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars += c\n            })\n        })\n       \
    \ uniqueChars.foreach(c => {\n            val count = maxChars.getOrElse(c, 0)\
    \ + 1\n            maxChars += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)\n\
    \        val maxValue = maxChars(maxKey)\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxKey) == maxValue).head\n        val maxWordIndex = words.indexOf(",
  "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += c\n            })\n        })\n        uniqueChars.foreach(c\
    \ => {\n            val count = maxChars.getOrElse(c, 0) + 1\n            maxChars\
    \ += c -> count\n        })\n        val maxKey = maxChars.maxBy(_._2)._1\n  \
    \      val maxValue = maxChars.maxBy(_._2)._2\n        words.find(word => word.contains(maxKey)).getOrElse(\"\
    \")", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += (c ->\
    \ 1)\n            })\n        })\n        val maxKey = uniqueChars.maxBy(_._2)._1\n\
    \        words.find(word => word.contains(maxKey))", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars.getOrElseUpdate(c, 0) + 1\n            })\n        })\n   \
    \     uniqueChars.toList.sortWith((a, b) => b._2 - a._2).head._1", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars).head\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).head\n        val maxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxChars = words.filter(_.length\
    \ == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length ==\
    \ maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).head\n        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxChars\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).head\n\
    \        val maxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWordWithMaxCharsAndMaxWord\
    \ = words.filter(_.length == maxChars).sortBy(_.length).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChars).filter(_.length == maxChars).filter(_.length == maxChars).filter(_.length\
    \ == maxChar", "        val uniqueChars = words.foldLeft(Set.empty[Char])((uniqueChars,\
    \ word) => uniqueChars ++ word.distinct)\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.find(word => word.count(_ == maxChars) == uniqueChars.size)\n\
    \        if (maxWord.isEmpty) \"\"\n        else maxWord.head", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char, Int]()\n\
    \        val maxWord = mutable.Map[Char, String]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += (char\
    \ -> 1)\n            })\n        })\n        uniqueChars.foreach {\n         \
    \   case (char, count) =>\n                maxChars += (char -> count)\n     \
    \   }\n        maxChars.foreach {\n            case (char, count) =>\n       \
    \         if (count > maxChars(char)) {\n                    maxChars(char) =\
    \ count\n                    maxWord(char) = word\n                }\n       \
    \ }\n        maxWord(maxChars.keys.head)", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1;\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char, 1) // Increment the count of unique chars\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = uniqueChars(char) // Get the count of unique chars\n         \
    \   if (count > maxChars(char)) {\n                maxChars(char) = count // Update\
    \ the max count of unique chars\n            }\n        })\n        val maxChar\
    \ = maxChars.maxBy(_._2) // Get the max count of unique chars\n        val maxWord\
    \ = words.find(word => word.count(_ == maxChar) == maxChars(maxChar))\n      \
    \  if (maxWord.isEmpty) \"\" else maxWord.head", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) += 1\n            })\n        })\n        val maxKey\
    \ = uniqueChars.maxBy(_._2)._1\n        words.find(word => word.contains(maxKey))",
  "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars =\
    \ chars.distinct\n        val maxCount = uniqueChars.count(_ == chars.max)\n \
    \       if (maxCount > 1) {\n            val sortedWords = words.sortWith(_.length\
    \ < _.length)\n            val firstWord = sortedWords.head\n            val firstChars\
    \ = firstWord.toCharArray\n            val firstUniqueChars = firstChars.distinct\n\
    \            if (firstUniqueChars.count(_ == firstChars.max) > 1) {\n        \
    \        firstWord\n            } else {\n                findMax(sortedWords.tail)\n\
    \            }\n        } else {\n            uniqueChars.head\n        }", " \
    \       val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars && words.indexOf(_)\
    \ < words.indexOf(_))\n        val maxWordWithMaxCharsSortedByFirstChar = maxWordWithMaxChars.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversed = maxWordWithMaxCharsSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstChar = maxWordWithMaxCharsSortedByFirstCharReversed.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstChar.reverse\n  \
    \      val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversed.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar.reverse\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar\
    \ = maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversed.sortBy(_.charAt(0))\n\
    \        val maxWordWithMaxCharsSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstCharReversedSortedByFirstChar",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    words.foreach(word => {\n            word.foreach(char => {\n           \
    \     val count = uniqueChars(char)\n                if (count > maxChar(char))\
    \ {\n                    maxChar(char) = count\n                }\n          \
    \  })\n        })\n        val maxChars = maxChar.filter(_._2 > 1).map(_._1)\n\
    \        if (maxChars.isEmpty) \"\"\n        else maxChars.head", "        val\
    \ chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxCount = uniqueChars.count(_ == chars.max)\n        val maxChar\
    \ = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.contains(maxChar))\n\
    \        if (maxCount == 1) maxWord.head\n        else if (maxCount == 2) maxWord.head\n\
    \        else maxWord.sortBy(_.length).head", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars(char)\
    \ += 1\n            })\n        })\n        words.foreach(word => {\n        \
    \    word.foreach(char => {\n                val count = uniqueChars(char)\n \
    \               if (count > maxChar(char)) {\n                    maxChar(char)\
    \ = count\n                }\n            })\n        })\n        val maxCount\
    \ = maxChar.values.max\n        val maxChars = maxChar.filter(_._2 == maxCount).map(_._1)\n\
    \        val maxWord = words.find(word => maxChars.contains(word))\n        if\
    \ (maxWord.isEmpty) {\n            \"\"\n        } else {\n            maxWord.get\n\
    \        }", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars(char)\
    \ match {\n                    case Some(count) => uniqueChars(char) = uniqueChars(char)\
    \ + 1;\n                    case None => uniqueChars(char) = uniqueChars(char)\
    \ + 1;\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) += 1\n            })\n        })\n        uniqueChars.toSeq.sortWith(_._2\
    \ > _._2).head._1", "        val counts = words.map(word => word.distinct.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinct.length == maxCount).head\n        val maxWordCount = counts.filter(word\
    \ => word == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinct.length == maxWordIndex).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = max", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        var maxCount = 0\n        var maxWord = \"\"\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n            uniqueChars.toList.sortWith(_ < _).foreach(c => {\n\
    \                if (uniqueChars.count(_ == c) > maxCount) {\n               \
    \     maxCount = uniqueChars.count(_ == c)\n                    maxWord = word\n\
    \                }\n            })\n        })\n        maxWord", "        val\
    \ uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        val maxWord = mutable.Map[String, Int]()\n        for (word\
    \ <- words) {\n            val uniqueCharsCount = word.distinct().length\n   \
    \         val maxCharsCount = uniqueCharsCount.max\n            if (maxCharsCount\
    \ > maxChars(maxCharsCount)) {\n                maxChars(maxCharsCount) = uniqueCharsCount\n\
    \                maxWord(word) = maxCharsCount\n            }\n        }\n   \
    \     maxWord.keys.toList.sortBy(_._1).head", "        val uniqueChars = mutable.HashSet[Char]()\n\
    \        val maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars += c\n  \
    \          })\n        })\n        uniqueChars.foreach(c => {\n            val\
    \ count = maxChars.getOrElse(c, 0) + 1\n            maxChars += c -> count\n \
    \       })\n        val maxCharsSorted = maxChars.toSeq.sortWith((a, b) => b._2\
    \ > a._2)\n        val maxCharsSorted = maxCharsSorted.head._1\n        words.find(word\
    \ => word.toString.contains(maxCharsSorted))", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars.getOrElse(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.maxBy(_._2)._1", " \
    \       val uniqueChars = mutable.Map[Char, Int]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    words.foreach(word => {\n            word.foreach(char => {\n           \
    \     val count = uniqueChars(char)\n                if (count > maxChars(char))\
    \ {\n                    maxChars(char) = count\n                }\n         \
    \   })\n        })\n        val maxCharsKey = maxChars.keys.toList.sortBy(_._1).head\n\
    \        val maxCharsValue = maxChars.values.toList.sortBy(_._1).head\n      \
    \  val maxCharsKeyString = maxCharsKey.mkString(\"\")\n        val maxCharsValueString\
    \ = maxCharsValue.mkString(\"\")\n        if (maxCharsValueString.length > maxCharsKeyString.length)\
    \ {\n            maxCharsKeyString\n        } else {\n            maxCharsValueString\n\
    \        }", "        val uniqueChars = words.map(_.length).distinct\n       \
    \ val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = maxWord.sortWith(_ < _)\n  \
    \      val maxWordWithMaxCharsFirst = maxWordWithMaxChars.head\n        val maxWordWithMaxCharsFirstChar\
    \ = maxWordWithMaxCharsFirst.charAt(0)\n        val maxWordWithMaxCharsFirstCharCount\
    \ = maxWordWithMaxCharsFirst.count(_ == maxWordWithMaxCharsFirstChar)\n      \
    \  val maxWordWithMaxCharsFirstCharCountInWords = maxWordWithMaxCharsFirstCharCount.toInt\n\
    \        val maxWordWithMaxCharsFirstCharCountInWordsLessThanMaxChars = maxWordWithMaxCharsFirstCharCountInWords\
    \ < maxChars\n        if (maxWordWithMaxCharsFirstCharCountInWordsLessThanMaxChars)\
    \ {\n            maxWordWithMaxCharsFirstCharCountInWordsLessThanMaxChars\n  \
    \      } else {\n            maxWordWithMaxCharsFirstCharCountInWords\n      \
    \  }", "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars\
    \ = chars.distinct\n        val maxChars = uniqueChars.max\n        val maxWords\
    \ = words.filter(w => w.toCharArray.distinct.length == maxChars)\n        val\
    \ maxWord = maxWords.head\n        val maxWordLength = maxWord.length\n      \
    \  val maxWordChars = maxWord.map(_.toChar).distinct.length\n        val maxWordCharsIndex\
    \ = maxWord.zipWithIndex.maxBy(_._2)._1\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ + 1\n        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n  \
    \      val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + maxWordLength\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ % maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n\
    \        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex % maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ + maxWordLength\n        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n\
    \        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex + maxWordLength\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ % maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n\
    \        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val maxWordCharsIndex\
    \ = maxWordCharsIndex % maxWord.length\n        val maxWordCharsIndex = maxWordCharsIndex\
    \ + maxWordLength\n        val maxWordCharsIndex = maxWordCharsIndex % maxWord.length\n\
    \        val maxWordCharsIndex = maxWordCharsIndex + maxWordLength\n        val\
    \ maxWordCharsIndex = maxWordCharsIndex % ", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars(char)\
    \ match {\n                    case Some(count) => uniqueChars(char) = uniqueChars(char)\
    \ + count\n                    case None => uniqueChars(char) = uniqueChars(char)\
    \ + 1\n                }\n            })\n        })\n        uniqueChars.toSeq.sortBy(_._2).last._1",
  "        val chars = words.map(_.toCharArray).flatten.toSet\n        val uniqueChars\
    \ = chars.toList\n        val maxChars = uniqueChars.max\n        val maxWord\
    \ = words.filter(w => w.toCharArray.distinct.size == maxChars)\n        val maxWordString\
    \ = maxWord.mkString(\" \")\n        val maxWordLength = maxWordString.length\n\
    \        val maxWordChars = maxWordString.toCharArray\n        val maxWordCharsLength\
    \ = maxWordChars.length\n        val maxWordCharsCount = maxWordChars.distinct.length\n\
    \        if (maxWordCharsLength > maxWordLength) {\n            val maxWordCharsIndex\
    \ = maxWordChars.indexOf(maxWordCharsCount)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndex + maxWordCharsLength\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsLength)\n            val\
    \ maxWordCharsIndexString = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length\
    \ - 1)\n            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWordCharsIndexString.substring(0,\
    \ maxWordCharsIndexString.length - 1)\n            val maxWordCharsIndexString\
    \ = maxWordCharsIndexString.substring(0, maxWordCharsIndexString.length - 1)\n\
    \            val maxWordCharsIndexString = maxWord", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars += (c -> 1)\n            })\n        })\n        words.foreach(word\
    \ => {\n            word.foreach(c => {\n                uniqueChars(c) match\
    \ {\n                    case Some(count) => maxChar(count) match {\n        \
    \                case Some(max) => if (count > max) count else max\n         \
    \               case None => count\n                    }\n                  \
    \  case None => maxChar(uniqueChars(c))\n                }\n            })\n \
    \       })\n        val maxCount = maxChar.values.max\n        val maxChars =\
    \ maxChar.filter(_._2 == maxCount).map(_._1)\n        val maxWord = words.filter(w\
    \ => maxChars.contains(w))\n        val maxWordWithMaxCount = maxWord.filter(w\
    \ => w.count(_ == maxCount) == maxCount)\n        val maxWordWithMaxCountWithFirstChar\
    \ = maxWordWithMaxCount.map(w => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstChar.map(w => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstChar.map(w => w.take(1))\n      \
    \  val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstChar.map(w\
    \ => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar.map(w\
    \ => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar.map(w\
    \ => w.take(1))\n        val maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar\
    \ = maxWordWithMaxCountWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstCharWithFirstChar.map(w\
    \ => w.take", "        val uniqueChars = mutable.HashSet[Char]()\n        val\
    \ maxChars = mutable.HashMap[Char, Int]()\n        words.foreach(word => {\n \
    \           word.foreach(c => {\n                uniqueChars += c\n          \
    \      maxChars += c -> (maxChars.getOrElse(c, 0) + 1)\n            })\n     \
    \   })\n        val maxCharsCount = maxChars.values.max\n        val maxCharsKey\
    \ = maxChars.keys.max\n        val maxCharsValue = maxChars.values.max\n     \
    \   val maxCharsKeyValue = maxChars.keys.max -> maxChars.values.max\n        val\
    \ maxCharsKeyValueKey = maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\n\
    \        val maxCharsKeyValueKeyValue = maxChars.keys.max -> maxChars.values.max\
    \ -> maxChars.keys.max -> maxChars.values.max\n        val maxCharsKeyValueKeyValueKey\
    \ = maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max\
    \ -> maxChars.keys.max\n        val maxCharsKeyValueKeyValueKeyValue = maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\
    \ -> maxChars.values.max\n        val maxCharsKeyValueKeyValueKeyValueKey = maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max\n        val maxCharsKeyValueKeyValueKeyValueKeyValue\
    \ = maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max\
    \ -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max\n\
    \        val maxCharsKeyValueKeyValueKeyValueKeyValueKey = maxChars.keys.max ->\
    \ maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\n\
    \        val maxCharsKeyValueKeyValueKeyValueKeyValueKeyValue = maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.values.max -> maxChars.keys.max\
    \ -> maxChars.values.max -> maxChars.keys.max -> maxChars.", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_) == words.lastIndexOf(_))\n\
    \        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndexInLex = words.indexOf(maxWordWithMaxChars.max,\
    \ maxWordWithMaxCharsIndex + 1)\n        val maxWordWithMaxCharsIndexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLex + 1)\n\
    \        val maxWordWithMaxCharsIndexInLexInLexInLex = words.indexOf(maxWordWithMaxChars.max,\
    \ maxWordWithMaxCharsIndexInLexInLex + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLex = words.indexOf(maxWordWithMaxChars.max,\
    \ maxWordWithMaxCharsIndexInLexInLexInLexInLex + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.indexOf(maxWordWithMaxChars.max, maxWordWithMaxCharsIndexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ + 1)\n        val maxWordWithMaxCharsIndexInLexInLexInLexInLex", "        val\
    \ uniqueChars = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n\
    \        val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.sortWith(_.compareTo(_) < 0)(0)\n        val maxWordWithMaxCharsFirst\
    \ = maxWordWithMaxChars.sortWith(_.compareTo(_) < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirst.sortWith(_.compareTo(_) < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrder.sortWith(_.compareTo(_) < 0)(0)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder\
    \ = maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrderInLexicographicalOrder.sortWith(_.compareTo(_)\
    \ < 0)(0)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderInLexicographicalOrderInLexico",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = words.filter(_.length == maxChars && words.indexOf(_)\
    \ == words.lastIndexOf(_))\n        val maxWordWithMaxCharsIndex = words.indexOf(maxWordWithMaxChars.max)\n\
    \        val maxWordWithMaxCharsIndexInLexOrder = words.indexOf(maxWordWithMaxCharsIndex).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrder = words.indexOf(maxWordWithMaxCharsIndexInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrder = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder).max\n\
    \        val maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLexOrder\
    \ = words.indexOf(maxWordWithMaxCharsIndexInLexOrderInLexOrderInLexOrderInLexOrderInLexOrderInLex",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars.getOrElseUpdate(c, 0) + 1\n            })\n      \
    \  })\n        uniqueChars.toList.sortWith((a, b) => b._2 - a._2).head._1", " \
    \       val uniqueChars = mutable.HashSet[Char]()\n        val maxChars = mutable.HashMap[Char,\
    \ Int]()\n        val maxWord = mutable.Array[String]()\n        for (word <-\
    \ words) {\n            val chars = word.distinct\n            uniqueChars ++=\
    \ chars\n            for (c <- chars) {\n                val count = uniqueChars.count(_\
    \ == c)\n                if (count > maxChars(c)) {\n                    maxChars(c)\
    \ = count\n                    maxWord(0) = word\n                }\n        \
    \    }\n        }\n        if (maxChars.size == 1) {\n            return maxWord(0)\n\
    \        }\n        val maxCharsMap = maxChars.toMap\n        val maxWords = words.filter(word\
    \ => maxCharsMap(word.distinct).isDefined).sortBy(word => maxCharsMap(word.distinct).get)\n\
    \        if (maxWords.size == 1) {\n            return maxWords(0)\n        }\n\
    \        val maxWordsMap = maxWords.toMap\n        val maxWordsMapKeys = maxWordsMap.keys\n\
    \        val maxWordsMapValues = maxWordsMap.values.toList\n        val maxWordsMapValuesWithMaxCount\
    \ = maxWordsMapValues.filter(_.toList.size == maxCharsMap.values.toList.size)\n\
    \        val maxWordsMapValuesWithMaxCountWithMaxCount = maxWordsMapValuesWithMaxCount.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCount\
    \ = maxWordsMapValuesWithMaxCountWithMaxCount.filter(_.toList.size == maxCharsMap.values.toList.size)\n\
    \        val maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCount.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCount.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount\
    \ = maxWordsMapValuesWithMaxCountWithMaxCountWithMaxCountWithMaxCountWithMaxCount.filter(_.toList.size\
    \ == maxCharsMap.values.toList.size)\n        val maxWordsMapValue", "       \
    \ val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                uniqueChars(c) += 1\n      \
    \      })\n        })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n    \
    \    words.find(word => word.count(_ == maxChar) == uniqueChars(maxChar))", " \
    \       val uniqueChars = words.map(_.length).distinct\n        val maxChars =\
    \ uniqueChars.max\n        val maxWord = words.filter(_.length == maxChars)\n\
    \        val maxWordWithMaxChars = maxWord.head\n        val maxWordWithMaxCharsIndex\
    \ = words.indexOf(maxWordWithMaxChars)\n        val maxWordWithMaxCharsIndex =\
    \ maxWordWithMaxCharsIndex + 1\n        val maxWordWithMaxCharsString = words.apply(maxWordWithMaxCharsIndex)\n\
    \        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 1)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 2)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 3)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 4)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 5)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 6)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 7)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 8)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 9)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 10)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 11)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 12)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 13)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 14)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 15)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 16)\n        val maxWordWithMaxCharsString = maxWordWithMaxCharsString.substring(0,\
    \ maxChars - 17)\n        val maxWordWithMaxCharsString = maxWordWithMax", " \
    \       val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars += (char -> 1)\n            })\n        })\n    \
    \    words.foreach(word => {\n            word.foreach(char => {\n           \
    \     val count = uniqueChars(char).asInstanceOf[Int]\n                if (count\
    \ > maxChar(char).asInstanceOf[Int]) {\n                    maxChar(char) = count\n\
    \                }\n            })\n        })\n        val maxChars = maxChar.toSeq.sortBy(_._2).reverse\n\
    \        val maxChar = maxChars.head\n        val maxCharCount = maxChars(maxChar)\n\
    \        val maxWord = words.find(word => maxCharCount(word) > 0)\n        if\
    \ (maxWord == null) {\n            \"\"\n        } else {\n            maxWord\n\
    \        }", "        val chars = words.map(_.toCharArray).flatten\n        val\
    \ uniqueChars = chars.distinct\n        val maxCount = uniqueChars.count(_ ==\
    \ chars.max)\n        if(maxCount > 1){\n            uniqueChars.min\n       \
    \ } else {\n            uniqueChars.head\n        }", "        val uniqueChars\
    \ = words.foldLeft(Map[Char, Int]())((map, word) => {\n            val chars =\
    \ word.map(c => c.toChar)\n            val count = chars.foldLeft(0)((count, c)\
    \ => count + map.getOrElse(c, 0))\n            map + (chars(0) -> (count + 1))\n\
    \        })\n        val maxChars = uniqueChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.count(_ == maxChars) == uniqueChars(maxChars))", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) match {\n                    case Some(count)\
    \ => uniqueChars(c) = uniqueChars(c) + 1;\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars(c) match {\n                    case Some(count) =>\
    \ uniqueChars(c) = uniqueChars(c) + 1 // Increment count by 1\n              \
    \      case None => uniqueChars(c) = 1 // Set count to 1\n                }\n\
    \            })\n        })\n        uniqueChars.toList.sortWith((a, b) => a._2\
    \ > b._2).head._1 // Return first element with max count", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = maxWord.sortWith(_ < _)\n        val maxWordWithMaxCharsWithFirstChar = maxWordWithMaxChars.takeWhile(_\
    \ != maxWordWithMaxChars.last)\n        val maxWordWithMaxCharsWithFirstChar =\
    \ maxWordWithMaxCharsWithFirstChar.sortWith(_ < _)\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.head\n        val maxWordWithMaxCharsWithFirstChar\
    \ = maxWordWithMaxCharsWithFirstChar.mkString\n        maxWordWithMaxCharsWithFirstChar",
  "        val chars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               chars += c\n                maxChars(c) = maxChars(c).max(maxChars(c)\
    \ + 1)\n            })\n        })\n        val maxCharsCount = maxChars.values.max\n\
    \        val maxCharsKeys = maxChars.keys.max\n        val maxCharsValues = maxChars.values.max\n\
    \        val maxCharsKeysValues = maxCharsKeys.zip(maxCharsValues).max\n     \
    \   val maxCharsKeysValuesKeys = maxCharsKeysValues.keys.max\n        val maxCharsKeysValuesValuesKeys\
    \ = maxCharsKeysValuesValues.keys.max\n        val maxCharsKeysValuesValuesKeysValues\
    \ = maxCharsKeysValuesValuesKeys.zip(maxCharsKeysValuesValuesKeys).max\n     \
    \   val maxCharsKeysValuesValuesKeysValuesValues = maxCharsKeysValuesValuesKeysValues.zip(maxCharsKeysValuesValuesKeysValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValues = maxCharsKeysValuesValuesKeysValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValues = maxCharsKeysValuesValuesKeysValuesValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValues = maxCharsKeysValuesValuesKeysValuesValuesValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValuesValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValues\
    \ = maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValues\
    \ = maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValues.zip(maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValues).max\n\
    \        val maxCharsKeysValuesValuesKeysValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues\
    \ = ", "        val chars = words.map(_.toCharArray).flatten\n        val uniqueChars\
    \ = chars.distinct\n        val maxCount = uniqueChars.count(_ == chars.max)\n\
    \        val maxWord = words.filter(word => uniqueChars.count(_ == word.charAt(0))\
    \ == maxCount)\n        val maxWordString = maxWord.mkString(\" \")\n        val\
    \ firstWord = words.filter(word => uniqueChars.count(_ == word.charAt(0)) == 1)\n\
    \        val firstWordString = firstWord.mkString(\" \")\n        if (maxWordString.length\
    \ < firstWordString.length) maxWordString else firstWordString", "        val\
    \ chars = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.toCharArray.contains(maxChars)).head\n\
    \        val maxWordCount = words.count(_.toCharArray.contains(maxChars))\n  \
    \      if (maxWordCount == 1) maxWord\n        else findMax(words.filter(_.toCharArray.contains(maxChars)).sortBy(_.toCharArray.indexOf(_)))",
  "        val uniqueChars = words.map(_.length).distinct\n        val maxCount =\
    \ uniqueChars.max\n        val maxWord = words.filter(w => w.length == maxCount).sortBy(_.length).head\n\
    \        uniqueChars.contains(maxCount) ? maxWord : findMax(words.filter(w =>\
    \ w.length != maxCount))", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        words.foreach(word =>\
    \ {\n            word.foreach(c => {\n                uniqueChars(c) match {\n\
    \                    case Some(count) => uniqueChars(c) = uniqueChars(c) + 1;\n\
    \                    case None => uniqueChars(c) = 1\n                }\n    \
    \        })\n            uniqueChars.toList.sortWith(_._2 > _._2).headOption.foreach(c\
    \ => {\n                maxChar(c) = uniqueChars(c)\n            })\n        })\n\
    \        maxChar.keys.toList.sortWith(_._2 > _._2).headOption.foreach(c => {\n\
    \            uniqueChars(c)\n        })", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        val maxChar = mutable.Map[Char, Int]()\n        val maxWord\
    \ = mutable.Map[String, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) match {\n                    case Some(count)\
    \ => uniqueChars(c) = uniqueChars(c) + 1\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n        })\n        uniqueChars.toList.sortBy(_._2).reverse.headOption.map(_.key).foreach(c\
    \ => {\n            uniqueChars(c) match {\n                case Some(count) =>\
    \ maxChar(c) = count\n                case None => maxChar(c) = 1\n          \
    \  }\n        })\n        uniqueChars.toList.sortBy(_._1).reverse.headOption.map(_.key).foreach(c\
    \ => {\n            uniqueChars(c) match {\n                case Some(count) =>\
    \ maxWord(words) = count\n                case None => maxWord(words) = 1\n  \
    \          }\n        })\n        maxWord(words).foreach(w => println(w))\n  \
    \      maxChar(maxChar.toList.sortBy(_._2).reverse.headOption.map(_.key).headOption)",
  "        val maxCount = words.foldLeft(0)((count, word) => count + word.count(\"\
    a\"))\n        val maxWord = words.filter(word => word.count(\"a\") == maxCount).head\n\
    \        val maxWordCount = maxWord.count(\"a\")\n        val maxWordWithMaxCount\
    \ = words.filter(word => word.count(\"a\") == maxWordCount).head\n        val\
    \ maxWordWithMaxCountWithMaxWord = words.filter(word => word.count(\"a\") == maxWordWithMaxCount).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWord = words.filter(word =>\
    \ word.count(\"a\") == maxWordWithMaxCountWithMaxWord).head\n        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWord =\
    \ words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord).head\n\
    \        val maxWordWithMaxCountWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWordWithMaxWord\
    \ = words.filter(word => word.count(\"a\") == max", "        val uniqueChars =\
    \ mutable.HashSet[Char]()\n        val maxChars = mutable.HashSet[Char]()\n  \
    \      val maxWord = mutable.HashSet[String]()\n        words.foreach(word =>\
    \ {\n            word.foreach(char => {\n                uniqueChars += char\n\
    \            })\n        })\n        uniqueChars.foreach(char => {\n         \
    \   val count = uniqueChars.count(_ == char)\n            if (count > maxChars.count(_\
    \ == char)) {\n                maxChars += char\n                maxWord += word\n\
    \            }\n        })\n        if (maxChars.size == 1) {\n            maxWord.head\n\
    \        } else {\n            maxWord.sortWith(_.length > _.length).head\n  \
    \      }", "        val maxCount = words.foldLeft(Map[Char,Int]()){\n        \
    \    case (acc, word) => acc + (word -> (acc(word) + 1))\n        }\n        val\
    \ maxKey = maxCount.keys.max\n        val maxValue = maxCount.values.max\n   \
    \     val maxWord = words.filter(word => word == maxKey).head\n        if(maxValue\
    \ == 1) maxWord\n        else maxWord.takeWhile(word => word != maxKey).mkString(\"\
    \")", "        val uniqueChars = mutable.HashSet[Char]()\n        val maxChars\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars += c\n                maxChars(c) = maxChars.getOrElse(c,\
    \ 0) + 1\n            })\n        })\n        uniqueChars.maxBy(_._2)._1", " \
    \       val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars(char) match {\n                    case Some(count)\
    \ => uniqueChars(char) <- uniqueChars(char) + count\n                    case\
    \ None => uniqueChars(char) <- 1\n                }\n            })\n        })\n\
    \        uniqueChars.toList.sortBy(_._2).last._1", "        val uniqueChars =\
    \ words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n     \
    \   val maxWord = words.filter(_.length == maxChars)\n        val maxWordWithMaxChars\
    \ = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirst = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase)\
    \ < words.indexOf(_.toLowerCase))\n        val maxWordWithMaxCharsFirstInLex =\
    \ words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLex = words.filter(_.length == maxChars\
    \ && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n        val\
    \ maxWordWithMaxCharsFirstInLexInLexInLex = words.filter(_.length == maxChars\
    \ && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n        val\
    \ maxWordWithMaxCharsFirstInLexInLexInLexInLex = words.filter(_.length == maxChars\
    \ && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n        val\
    \ maxWordWithMaxCharsFirstInLexInLexInLexInLexInLex = words.filter(_.length ==\
    \ maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n \
    \       val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLex = words.filter(_.length\
    \ == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxCharsFirstInLexInLexInLexInLexInLexInLexInLexInLexInLexInLex\
    \ = words.filter(_.length == maxChars && words.indexOf(_.toUpperCase) < words.indexOf(_.toLowerCase))\n\
    \        val maxWordWithMaxChars", "        val maxCount = words.foldLeft(0)((maxCount,\
    \ word) => if (maxCount > word.length) maxCount else word.length)\n        val\
    \ maxWord = words.maxBy(word => word.count(_ == maxCount))\n        val maxWordCount\
    \ = maxWord.count(_ == maxCount)\n        if (maxWordCount > 1) maxWord else words.minBy(word\
    \ => word.count(_ == maxCount))", "        val uniqueChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(c => {\n \
    \               uniqueChars += (c -> uniqueChars(c) + 1)\n            })\n   \
    \     })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.contains(maxChar))", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(char => {\n       \
    \         uniqueChars += (char -> (uniqueChars(char) + 1))\n            })\n \
    \       })\n        val maxChar = uniqueChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.count(_ == maxChar) == uniqueChars(maxChar))", "        val uniqueChars\
    \ = words.map(_.length).distinct\n        val maxChars = uniqueChars.max\n   \
    \     val maxWords = words.filter(w => w.length == maxChars)\n        val maxWord\
    \ = maxWords.sortWith(_ < _).head\n        val maxWordWithMaxChars = words.filter(w\
    \ => w.length == maxChars && w < maxWord).sortWith(_ < _).head\n        val maxWordWithMaxCharsAndMaxWord\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord\n        val maxWordWithMaxCharsAndMaxWordAndMaxWords = words.filter(w\
    \ => w.length == maxChars && w < maxWord).sortWith(_ < _).head + maxWord + maxWords\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWords = words.filter(w\
    \ => w.length == maxChars && w < maxWord).sortWith(_ < _).head + maxWord + maxWords\
    \ + maxWords\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord + maxWords + maxWords + maxWords\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord + maxWords + maxWords + maxWords + maxWords\n        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord + maxWords + maxWords + maxWords + maxWords + maxWords\n        val\
    \ maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => w.length == maxChars && w < maxWord).sortWith(_ < _).head\
    \ + maxWord + maxWords + maxWords + maxWords + maxWords + maxWords + maxWords\n\
    \        val maxWordWithMaxCharsAndMaxWordAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWordsAndMaxWords\
    \ = words.filter(w => ", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      if (uniqueChars.getOrElse(c, 0) == 0) {\n                    uniqueChars\
    \ += (c -> 1)\n                } else {\n                    uniqueChars(c) +=\
    \ 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val maxCount = words.foldLeft(Map[Char, Int]()){\n            case (acc,\
    \ word) =>\n                val charCount = word.map(c => c to 1)\n          \
    \      val maxCharCount = acc.maxBy(_._2)(charCount)\n                (maxCharCount._1\
    \ -> maxCharCount._2 + 1)\n        }._1\n        val maxWord = words.filter(w\
    \ => w.count(_ == maxCount) == 1)\n        val maxWordWithMaxCount = words.filter(w\
    \ => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) == w.count(_ == maxCount))\n\
    \        val maxWordWithMaxCountWithMaxCharCount = words.filter(w => w.count(_\
    \ == maxCount) == 1 && w.count(_ == maxCount) == w.count(_ == maxCount) && w.count(_\
    \ == maxCount) == w.count(_ == maxCount))\n        val maxWordWithMaxCountWithMaxCharCountWithMaxCharCount\
    \ = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount) &&\
    \ w.count(_ == maxCount) == w.count(_ == maxCount))\n        val maxWordWithMaxCountWithMaxCharCountWithMaxCharCountWithMaxCharCount\
    \ = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount) &&\
    \ w.count(_ == maxCount) == w.count(_ == maxCount) && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount))\n        val maxWordWithMaxCountWithMaxCharCountWithMaxCharCountWithMaxCharCountWithMaxCharCount\
    \ = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount) &&\
    \ w.count(_ == maxCount) == w.count(_ == maxCount) && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount))\n\
    \        val maxWordWithMaxCountWithMaxCharCountWithMaxCharCountWithMaxCharCountWithMaxCharCountWithMaxCharCount\
    \ = words.filter(w => w.count(_ == maxCount) == 1 && w.count(_ == maxCount) ==\
    \ w.count(_ == maxCount) && w.count(_ == maxCount) == w.count(_ == maxCount) &&\
    \ w.count(_ == maxCount) == w.", "        val counts = words.map(word => word.distinctChars.length).distinct\n\
    \        val maxCount = counts.max\n        val maxWord = words.filter(word =>\
    \ word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.distinctChars.length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        val maxWordIndex = maxWordIndex + 1\n        val maxWord = words.filter(word\
    \ => word.", "        val uniqueChars = mutable.Map[Char, Int]()\n        words.foreach(word\
    \ => {\n            word.foreach(char => {\n                uniqueChars(char)\
    \ match {\n                    case Some(count) => uniqueChars(char) = uniqueChars(char)\
    \ + count\n                    case None => uniqueChars(char) = uniqueChars(char)\
    \ + 1\n                }\n            })\n        })\n        uniqueChars.maxBy(_._2)._1",
  "        val uniqueChars = words.map(word => word.distinct).map(_.size).max\n  \
    \      val maxWord = words.filter(word => word.distinct.size == uniqueChars).sortBy(_.length).head\n\
    \        uniqueChars match {\n            case 0 => maxWord\n            case\
    \ _ => maxWord.substring(0, maxWord.length - 1)\n        }", "        val chars\
    \ = words.map(_.toCharArray).flatten\n        val uniqueChars = chars.distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(w\
    \ => w.toCharArray.size == maxChars)\n        val maxWordWithMaxChars = words.filter(w\
    \ => w.toCharArray.size == maxChars && w < maxWord)\n        val maxWordWithMaxCharsFirst\
    \ = words.filter(w => w.toCharArray.size == maxChars && w > maxWord)\n       \
    \ val maxWordWithMaxCharsFirstInLexicographicalOrder = words.filter(w => w.toCharArray.size\
    \ == maxChars && w >= maxWord)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxChars)\n\
    \        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst =\
    \ words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxCharsFirst\
    \ && w > maxWordWithMaxChars)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxCharsFirst\
    \ && w > maxWordWithMaxCharsFirstInLexicographicalOrder)\n        val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxChars\
    \ = words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxCharsFirst\
    \ && w > maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxChars)\n       \
    \ val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst\
    \ = words.filter(w => w.toCharArray.size == maxChars && w >= maxWord && w < maxWordWithMaxCharsFirst\
    \ && w > maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirst)\n  \
    \      val maxWordWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrderWithMaxCharsFirstInLexicographicalOrder\
    \ = ", "        val uniqueChars = mutable.Map[Char, Int]()\n        val maxChar\
    \ = mutable.Map[Char, Int]()\n        words.foreach(word => {\n            word.foreach(c\
    \ => {\n                uniqueChars(c) match {\n                    case Some(count)\
    \ => uniqueChars(c) = uniqueChars(c) + 1\n                    case None => uniqueChars(c)\
    \ = 1\n                }\n            })\n            uniqueChars.foreach {\n\
    \                case (k, v) => maxChar(k) = if (v > maxChar(k)) v else maxChar(k)\n\
    \            }\n        })\n        maxChar.foreach {\n            case (k, v)\
    \ => if (v == uniqueChars(k)) k else \"\"\n        }", "        val maxCount =\
    \ words.foldLeft(0)((count, word) => count + word.countUniqueChar)\n        val\
    \ maxWord = words.find(word => word.countUniqueChar == maxCount)\n        if (maxWord.isEmpty)\
    \ \"\"\n        else maxWord.head", "        val uniqueChars = words.map(_.length).distinct\n\
    \        val maxChars = uniqueChars.max\n        val maxWord = words.filter(_.length\
    \ == maxChars)\n        val maxWordWithMaxChars = words.filter(_.length == maxChars\
    \ && words.indexOf(_) < words.indexOf(_))\n        val maxWordWithMaxCharsSortedByFirstChar\
    \ = maxWordWithMaxChars.sortBy(_.charAt(0))\n        val maxWordWithMaxCharsSortedByFirstCharFirst\
    \ = maxWordWithMaxCharsSortedByFirstChar.head\n        val maxWordWithMaxCharsSortedByFirstCharFirstString\
    \ = maxWordWithMaxCharsSortedByFirstCharFirst.mkString(\"\")\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxCharsSortedByFirstCharFirstString.length\n        val maxWordWithMaxCharsSortedByFirstCharFirstStringLength\
    \ = maxWordWithMaxChars", "        val uniqueChars = mutable.Map[Char, Int]()\n\
    \        val maxChar = mutable.Map[Char, Int]()\n        val maxWord = mutable.Map[String,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                uniqueChars(char) match {\n                    case Some(count)\
    \ => uniqueChars(char) += count\n                    case None => uniqueChars(char)\
    \ = uniqueChars(char) + 1\n                }\n            })\n        })\n   \
    \     uniqueChars.toSeq.sortBy(_._2).lastOption.foreach(maxChar(_))\n        maxWord(maxChar(uniqueChars.toSeq.sortBy(_._1).head))",
  "        val chars = mutable.HashSet[Char]()\n        val maxChars = mutable.Map[Char,\
    \ Int]()\n        words.foreach(word => {\n            word.foreach(char => {\n\
    \                chars += char\n            })\n        })\n        chars.foreach(char\
    \ => {\n            val count = chars.count(_ == char)\n            if (count\
    \ > maxChars(char)) {\n                maxChars(char) = count\n            }\n\
    \        })\n        val maxChar = maxChars.maxBy(_._2)._1\n        words.find(word\
    \ => word.count(_ == maxChar) == maxChars(maxChar))", "        val uniqueChars\
    \ = mutable.Map[Char, Int]()\n        val maxChar = mutable.Map[Char, Int]()\n\
    \        words.foreach(word => {\n            word.foreach(c => {\n          \
    \      uniqueChars(c) match {\n                    case Some(count) => uniqueChars(c)\
    \ = uniqueChars(c) + 1;\n                    case None => uniqueChars(c) = 1\n\
    \                }\n            })\n        })\n        uniqueChars.toList.sortWith(_.value\
    \ < _.value).head", "        val uniqueChars = mutable.HashSet[Char]()\n     \
    \   val maxChars = mutable.Map[Char, Int]()\n        words.foreach(word => {\n\
    \            word.foreach(c => {\n                if (uniqueChars.contains(c))\
    \ {\n                    uniqueChars(c) += 1\n                } else {\n     \
    \               uniqueChars(c) = 1\n                }\n            })\n      \
    \  })\n        uniqueChars.toList.sortWith(_._2 > _._2).head", "        val maxCount\
    \ = words.foldLeft(0)((maxCount, word) => maxCount + (word.count(_ == 'a')))\n\
    \        val maxWord = words.maxBy(word => word.count(_ == 'a'))\n        if (maxCount\
    \ == words.count(_ == 'a')) maxWord\n        else words.find(word => word.count(_\
    \ == 'a') == maxCount).head", "        val maxCount = words.foldLeft(0)((count,\
    \ word) => count + word.distinct().length)\n        val maxWord = words.filter(word\
    \ => word.distinct().length == maxCount).head\n        val maxWordIndex = words.indexOf(maxWord)\n\
    \        words.take(maxWordIndex).mkString(\" \")"]
stop_tokens:
- "\n    }\n"
