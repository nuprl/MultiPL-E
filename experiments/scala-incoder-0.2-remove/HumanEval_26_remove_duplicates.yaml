name: HumanEval_26_remove_duplicates
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a list of integers, remove all elements that occur more than once.\n\
  \    // Keep order of elements left the same as in the input.\n    def removeDuplicates(numbers\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n\
  \    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
  \ 4l.toLong, 5l.toLong))));\n    }\n\n}\n"
completions: ["        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen\
    \ += n)\n        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val result = new mutable.HashSet[Long]()\n\
    \        numbers.foreach(x => if (!result.contains(x)) result += x)\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val result = numbers.toSet.toList\n        result.sortWith(_ < _)\n     \
    \   result", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers -= n\n            }\
    \ else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val result = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(number => {\n            if (result.contains(number))\
    \ {\n                result -= number\n            } else {\n                result\
    \ += number\n            }\n        })\n        return result.toList", "     \
    \   val result = numbers.groupBy(x => x).filter(_._2 > 1).map(_._1)\n        result.sortBy(x\
    \ => x)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val result = numbers.foldLeft(List[Long]())((acc,\
    \ x) => {\n            if (acc.contains(x)) acc else acc :+ x\n        })\n  \
    \      result", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val result = numbers.foldLeft(List[Long]())((acc, x) => {\n           \
    \ if (acc.contains(x)) acc else acc :+ x\n        })\n        result", "     \
    \   val result = numbers.foldLeft(List[Long]())((acc, x) => {\n            if\
    \ (acc.contains(x)) acc else acc :+ x\n        })\n        result", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filter(x => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers else seen += n)\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.contains(x)).sortWith(_ < _).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen.add(n)\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(numbers.indexOf(n))\n            }\n     \
    \       else {\n                seen += n\n            }\n        }\n        numbers",
  "        val result = mutable.ArrayBuffer.empty[Long]\n        numbers.foreach {\
    \ number =>\n            if (result.contains(number)) {\n                result\
    \ -= number\n            } else {\n                result += number\n        \
    \    }\n        }\n        result.toList", "        val counts = numbers.groupBy(x\
    \ => x).mapValues(_.size)\n        val result = counts.filter(_._2 > 1).map(_._1)\n\
    \        result", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x)).sortWith(_ < _)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(n)\n\
    \            else seen += n\n        }\n        numbers", "        val result\
    \ = mutable.ListBuffer.empty[Long]\n        numbers.foreach(number => if (!result.contains(number))\
    \ result += number)\n        result.toList", "        val result = numbers.foldLeft(List[Long]())((res,\
    \ num) => {\n            if (res.contains(num)) res\n            else res + num\n\
    \        })\n        result", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val toRemove = counts.filter(_._2 > 1)\n        numbers.filterNot(x =>\
    \ toRemove.contains(x))", "        val seen = mutable.HashSet[Long]()\n      \
    \  numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ result = numbers.foldLeft(List[Long]())((acc, x) => if (acc.contains(x)) acc\
    \ else acc :+ x)\n        result.reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val uniques = mutable.HashSet[Long]()\n        numbers.foreach(x => uniques\
    \ += x)\n        uniques.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            }\n            else {\n \
    \               seen += number\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(n)\n     \
    \       } else {\n                seen += n\n            }\n        }\n      \
    \  numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen += n\n        }\n        numbers", "        val seen =\
    \ mutable.Set[Long]()\n        numbers.filter(x => !seen.add(x)).sortWith(_ <\
    \ _)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach {\
    \ n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers -= number\n            } else {\n                seen\
    \ += number\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => if (seen.contains(n)) numbers else seen.add(n))\n        numbers", "    \
    \    val counts = numbers.groupBy(x => x).mapValues(_.size)\n        val result\
    \ = counts.filter(_._2 > 1).map(_._1)\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n   \
    \         if (seen.contains(n)) {\n                numbers.remove(n)\n       \
    \     }\n            else {\n                seen += n\n            }\n      \
    \  }\n        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filter(n => !seen.contains(n) && seen.add(n))", "        val counts\
    \ = numbers.groupBy(x => x).mapValues(_.size)\n        val result = counts.filter(_._2\
    \ > 1).map(_._1)\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.add(x)).sortWith(_ < _)", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(numbers.indexOf(n))\n            }\n     \
    \       else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x))",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n    \
    \        if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers -= n\n           \
    \ } else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.contains(x)).sortBy(x\
    \ => x).reverse", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        numbers.foreach(n => counts(n) = counts.getOrElse(n,0)+1)\n  \
    \      val result = numbers.filter(_ < (counts.keySet.toSet.size))\n        result.sortBy(-_)",
  "        val result = numbers.foldLeft(List[Long]())((acc, x) => {\n           \
    \ if (acc.contains(x)) acc else acc :+ x\n        })\n        result", "     \
    \   val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n     \
    \       if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.filter(x => !seen.add(x))", "        val result = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach(n => {\n            if (result.contains(n)) return\n\
    \            result += n\n        })\n        result.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.filter(n => !seen.contains(n) &&\
    \ seen.add(n))", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen += n\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers -= n\n            } else {\n                seen\
    \ += n\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            } else {\n              \
    \  seen += number\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x))", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers else seen.add(n))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            } else {\n         \
    \       seen += n\n            }\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(numbers.indexOf(n))\n            }\n     \
    \       else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(numbers.indexOf(n)))\n        numbers", "        val result =\
    \ numbers.groupBy(x => x).filter(_._2 > 1).map(_._1)\n        result.sortWith(_\
    \ < _)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers -= n\n            } else {\n                seen += n\n    \
    \        }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers -= number\n            } else {\n                seen\
    \ += number\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(n => seen(n) = false)", "        val counts = numbers.groupBy(x\
    \ => x).mapValues(_.size)\n        val toRemove = counts.map(_._2).filter(_ >\
    \ 1)\n        numbers.filterNot(x => toRemove.contains(x))", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        numbers.foreach(n => counts(n) +=\
    \ 1)\n        val result = numbers.filter(_ < (counts.values.max))\n        result.sortWith(_\
    \ < _)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n        numbers",
  "        val result = numbers.groupBy(x => x).mapValues(_.size)\n        val result2\
    \ = result.filter(_._2 > 1).map(_._1)\n        result2.toList", "        val counts\
    \ = numbers.groupBy(x => x).mapValues(_.size)\n        val uniques = counts.filter(_._2\
    \ > 1)\n        uniques.map(_._1)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ result = mutable.ListBuffer[Long]()\n        numbers.foreach(number => if (result.contains(number))\
    \ else result += number)\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n  \
    \      numbers.foreach { n =>\n            if (seen.contains(n)) {\n         \
    \       numbers.remove(numbers.indexOf(n))\n            }\n            else {\n\
    \                seen += n\n            }\n        }\n        numbers", "    \
    \    val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) numbers.remove(number)\n            else\
    \ seen.add(number)\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x)).sortBy(x => x).reverse", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers -= n\n          \
    \  } else {\n                seen += n\n            }\n        }\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val result =\
    \ numbers.foldLeft(List[Long]())((res, num) => {\n            if (res.contains(num))\
    \ res\n            else res + num\n        })\n        result", "        val uniques\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n           \
    \ if (uniques.contains(number)) {\n                uniques.remove(number)\n  \
    \          } else {\n                uniques.add(number)\n            }\n    \
    \    }\n        uniques.toList", "        val uniques = mutable.HashSet[Long]()\n\
    \        numbers.foreach(x => uniques += x)\n        uniques.toList", "      \
    \  val result = mutable.ListBuffer[Long]()\n        numbers.foreach(number =>\
    \ if (!result.contains(number)) result += number)\n        result.toList", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val result = new mutable.ListBuffer[Long]()\n        numbers.foreach(number\
    \ => if (!result.contains(number)) { result += number })\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(numbers.indexOf(n))\n        else seen.add(n))\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(n)\n     \
    \       } else {\n                seen += n\n            }\n        }\n      \
    \  numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers.remove(number)\n            } else {\n              \
    \  seen += number\n            }\n        }\n        numbers", "        val counts\
    \ = numbers.groupBy(x => x).mapValues(_.size)\n        val uniques = counts.filter(_._2\
    \ > 1).map(_._1)\n        uniques.sortBy(x => x)", "        val uniques = mutable.HashSet[Long]()\n\
    \        numbers.foreach(number => uniques += number)\n        uniques.toList",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(n)\n      \
    \      }\n            else {\n                seen += n\n            }\n     \
    \   }\n        numbers", "        val seen = mutable.HashSet[Long]()\n       \
    \ numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen += n)\n\
    \        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val toRemove = counts.map(_._2).filter(_ > 1)\n        numbers.filterNot(x\
    \ => toRemove.contains(x))", "        val seen = mutable.HashSet[Long]()\n   \
    \     numbers.foreach { number =>\n            if (seen.contains(number)) {\n\
    \                numbers -= number\n            } else {\n                seen\
    \ += number\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers -= n\n            } else {\n                seen += n\n    \
    \        }\n        }\n        numbers", "        val seen = mutable.Set[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            }\n            else {\n             \
    \   seen += n\n            }\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen += n)\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.filter(x => !seen.contains(x)).sortBy(x => x).reverse", "   \
    \     val seen = mutable.HashSet[Long]()\n        numbers.foreach { number =>\n\
    \            if (seen.contains(number)) {\n                numbers.remove(number)\n\
    \            }\n            else {\n                seen += number\n         \
    \   }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val counts = numbers.groupBy(x => x).mapValues(_.size)\n        val result\
    \ = counts.filter(_._2 > 1).map(_._1)\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers -= n\n            } else {\n                seen += n\n    \
    \        }\n        }\n        numbers", "        val seen = mutable.Set[Long]()\n\
    \        numbers.filter(x => !seen.add(x))", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(numbers.indexOf(n)))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => if (seen.contains(n)) numbers else seen += n)\n        numbers", "      \
    \  val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n      \
    \      if (seen.contains(n)) numbers.remove(n)\n            else seen += n\n \
    \       }\n        numbers", "        val seen = mutable.HashSet[Long]()\n   \
    \     numbers.foreach { n =>\n            if (seen.contains(n)) {\n          \
    \      numbers -= n\n            } else {\n                seen += n\n       \
    \     }\n        }\n        numbers", "        val result = numbers.toSet.toList\n\
    \        result.sortWith(_ < _)\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val result = numbers.groupBy(x => x).mapValues(_.size)\n        val result2\
    \ = result.filter(_._2 > 1)\n        result2.map(_._1)", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(n)\n     \
    \       } else {\n                seen += n\n            }\n        }\n      \
    \  numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.filter(x\
    \ => !seen.add(x))", "        val result = new mutable.HashSet[Long]()\n     \
    \   numbers.foreach(x => if (!result.contains(x)) result += x)\n        result.toList",
  "        val uniques = mutable.HashSet[Long]()\n        numbers.foreach(n => uniques\
    \ += n)\n        uniques.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ counts = numbers.groupBy(x => x).mapValues(_.size)\n        val toRemove = counts.filter(_._2\
    \ > 1).keys\n        numbers.filterNot(x => toRemove.contains(x))", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) {\n                numbers\
    \ -= number\n            }\n            else {\n                seen += number\n\
    \            }\n        }\n        numbers", "        val counts = mutable.HashMap[Long,\
    \ Int]()\n        numbers.foreach(n => counts(n) += 1)\n        val result = numbers.filter(n\
    \ => counts(n) == 1)\n        counts -- result", "        val result = numbers.foldLeft(List[Long]())((acc,\
    \ x) => {\n            if (acc.contains(x)) {\n                acc\n         \
    \   } else {\n                acc :+ x\n            }\n        })\n        result",
  "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n        val result\
    \ = counts.filter(_._2 > 1).map(_._1)\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen += n\n        }\n        numbers", "        val seen =\
    \ mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x)).sortBy(x\
    \ => x).reverse", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(n)\n            } else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.filter(x => !seen.add(x))",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val result = new mutable.ListBuffer[Long]()\n\
    \        numbers.foreach { number =>\n            if (result.contains(number))\
    \ return\n            result.add(number)\n        }\n        result.toList", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(n)\n     \
    \       }\n            else {\n                seen += n\n            }\n    \
    \    }\n        numbers", "        val seen = mutable.HashSet[Long]()\n      \
    \  numbers.foreach { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(numbers.indexOf(n))\n        else seen += n)\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => if (seen.contains(n)) numbers.remove(seen) else seen += n)\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val result = numbers.foldLeft(List[Long]())((acc,\
    \ x) => acc ++ x :: acc.filter(_ != x))\n        result.sortWith((x, y) => x <\
    \ y)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach {\
    \ n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen += n\n        }\n        numbers", "        val result\
    \ = numbers.foldLeft(List[Long]())((acc, x) => {\n            if (acc.contains(x))\
    \ {\n                acc\n            } else {\n                acc :+ x\n   \
    \         }\n        })\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n\
    \        numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { number =>\n            if (seen.contains(number)) numbers.remove(number)\n\
    \            else seen.add(number)\n        }\n        numbers", "        val\
    \ seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n           \
    \ if (seen.contains(n)) {\n                numbers.remove(numbers.indexOf(n))\n\
    \            }\n            else {\n                seen += n\n            }\n\
    \        }\n        numbers", "        val uniques = mutable.HashSet[Long]()\n\
    \        numbers.foreach { number =>\n            if (uniques.contains(number))\
    \ numbers.remove(number)\n            else uniques += number\n        }\n    \
    \    uniques.toList", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) {\n                numbers -= n\n\
    \            } else {\n                seen += n\n            }\n        }\n \
    \       numbers", "        val result = numbers.foldLeft(List[Long]())((acc, x)\
    \ => {\n            if (acc.contains(x)) {\n                acc -- x\n       \
    \     } else {\n                acc ++ x\n            }\n        })\n        result",
  "        val uniques = mutable.HashSet[Long]()\n        numbers.foreach(x => uniques\
    \ += x)\n        uniques.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach(n => if (seen.contains(n))\
    \ numbers.remove(n) else seen.add(n))\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val counts = numbers.groupBy(x => x).mapValues(_.size)\n        val result\
    \ = counts.filter(_._2 > 1).map(_._1)\n        result", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(n)\n            } else {\n                seen += n\n\
    \            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach { n =>\n            if (seen.contains(n)) {\n       \
    \         numbers.remove(numbers.indexOf(n))\n            }\n            else\
    \ {\n                seen += n\n            }\n        }\n        numbers", " \
    \       val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n \
    \           if (seen.contains(n)) {\n                numbers.remove(n)\n     \
    \       }\n            else {\n                seen += n\n            }\n    \
    \    }\n        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = counts.filter(_._2 > 1).map(_._1)\n        result", "  \
    \      val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers.remove(n)\n      \
    \      } else {\n                seen += n\n            }\n        }\n       \
    \ numbers", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach\
    \ { n =>\n            if (seen.contains(n)) numbers.remove(numbers.indexOf(n))\n\
    \            else seen.add(n)\n        }\n        numbers", "        val seen\
    \ = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n            if (seen.contains(n))\
    \ {\n                numbers.remove(n)\n            } else {\n               \
    \ seen += n\n            }\n        }\n        numbers", "        val seen = mutable.HashSet[Long]()\n\
    \        numbers.foreach(n => if (seen(n)) numbers.remove(n) else seen(n) = true)\n\
    \        numbers", "        val counts = numbers.groupBy(x => x).mapValues(_.size)\n\
    \        val result = numbers.filter(x => counts(x) > 1)\n        result.sortWith((x,\
    \ y) => x < y)", "        val seen = mutable.HashSet[Long]()\n        numbers.foreach(n\
    \ => if (seen.contains(n)) numbers.remove(n) else seen.add(n))\n        numbers",
  "        val seen = mutable.HashSet[Long]()\n        numbers.foreach { n =>\n  \
    \          if (seen.contains(n)) {\n                numbers -= n\n           \
    \ }\n            else {\n                seen += n\n            }\n        }\n\
    \        numbers"]
stop_tokens:
- "\n    }\n"
