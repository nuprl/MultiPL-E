name: HumanEval_134_check_if_last_char_is_a_letter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that returns True if the last character\n    // of a given\
  \ string is an alphabetical character and is not\n    // a part of a word, and False\
  \ otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n\
  \    // Examples:\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
  apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) ==\
  \ (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  \")) == (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
  \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
  apple pi e \")) == (false));\n    }\n\n}\n"
completions: ["        val lastChar = txt.last\n        val isLetter = lastChar >=\
    \ 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \").lastOption\
    \ match {\n            case None => false\n            case Some(word) => !word.contains(lastChar)\n\
    \        }\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLastCharALetter = lastChar >= 'a' && lastChar <= 'z'\n        val\
    \ isLastCharNotALetter = lastChar != 'a' && lastChar != 'z'\n        isLastCharALetter\
    \ && !isLastCharNotALetter", "        val lastChar = txt.last\n        val isALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isALetter", "        val lastChar = txt.last\n        val isLetter =\
    \ lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "       \
    \ val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "        val\
    \ lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isLetter\
    \ && !isNotWord", "        val lastChar = txt.last\n        val isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.splitAt(txt.length-1)\n\
    \            .forall(_.toString.toLowerCase != \"word\")\n        isLetter &&\
    \ !isNotWord", "        val lastChar = txt.last\n        val isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(!isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_.contains(lastChar))\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(x => x != ' ')\n   \
    \     isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "       \
    \ val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        var lastChar = txt.last\n        var\
    \ isLastCharALetter = true\n        while (lastChar != ' ') {\n            if\
    \ (lastChar.isLetter) {\n                isLastCharALetter = false\n         \
    \   }\n            lastChar = txt.last\n        }\n        return isLastCharALetter",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption match {\n      \
    \      case Some(word) => !word.contains(lastChar)\n            case None => false\n\
    \        }\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").lastOption match {\n            case None => false\n    \
    \        case Some(word) => !word.contains(lastChar)\n        }\n        isLetter\
    \ && !isNotWord", "        val lastChar = txt.last\n        val isLastCharAlpha\
    \ = lastChar != ' ' && lastChar.isLetter\n        val isLastCharNotWord = lastChar\
    \ != ' ' && !isLastCharAlpha\n        isLastCharNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "        val\
    \ lastChar = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar\
    \ <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ != lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isALetter = lastChar.toString.isLetter\n        val isNotALetter = lastChar.toString.isNotLetter\n\
    \        val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isALetter\
    \ && !isNotALetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(x => x != ' ')\n   \
    \     isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar\
    \ != 'a' && lastChar != 'z'\n        isLastCharALetter && !isLastCharNotALetter",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n\
    \        val isLastCharNotWord = lastChar != ' ' && lastChar != '-' && lastChar\
    \ != '_'\n        isLastCharAlpha && !isLastCharNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption match {\n      \
    \      case Some(word) => !word.contains(lastChar)\n            case None => false\n\
    \        }\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split().lastOption.exists(_.toString.contains(lastChar))\n\
    \        isLetter && !isNotWord", "        var lastChar = txt.last\n        var\
    \ isLastCharALetter = true\n        var isLastCharNotALetter = false\n       \
    \ for(i <- 0 until txt.length){\n            if(txt(i) == lastChar){\n       \
    \         isLastCharALetter = false\n            }\n        }\n        return\
    \ isLastCharALetter", "        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toString.isLetter\n        val isLastCharNotALetter = lastChar.toString.isNotLetter\n\
    \        val isLastCharNotALetterOrWord = lastChar.toString.isNotLetter || lastChar.toString.contains(\"\
    \ \")\n        val isLastCharNotALetterOrWordOrNotLetter = lastChar.toString.isNotLetter\
    \ || lastChar.toString.contains(\" \") || lastChar.toString.isLetter\n       \
    \ val isLastCharNotALetterOrWordOrNotLetterOrNotWord = lastChar.toString.isNotLetter\
    \ || lastChar.toString.contains(\" \") || lastChar.toString.isLetter || lastChar.toString.isNotWord\n\
    \        val isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetter = lastChar.toString.isNotLetter\
    \ || lastChar.toString.contains(\" \") || lastChar.toString.isLetter || lastChar.toString.isNotWord\
    \ || lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetterOrNotWord\
    \ = lastChar.toString.isNotLetter || lastChar.toString.contains(\" \") || lastChar.toString.isLetter\
    \ || lastChar.toString.isNotWord || lastChar.toString.isNotLetter || lastChar.toString.isNotWord\n\
    \        val isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetterOrNotWordOrNotLetter\
    \ = lastChar.toString.isNotLetter || lastChar.toString.contains(\" \") || lastChar.toString.isLetter\
    \ || lastChar.toString.isNotWord || lastChar.toString.isNotLetter || lastChar.toString.isNotWord\
    \ || lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetterOrNotWordOrNotLetterOrNotWord\
    \ = lastChar.toString.isNotLetter || lastChar.toString.contains(\" \") || lastChar.toString.isLetter\
    \ || lastChar.toString.isNotWord || lastChar.toString.isNotLetter || lastChar.toString.isNotWord\
    \ || lastChar.toString.isNotLetter || lastChar.toString.isNotWord\n        val\
    \ isLastCharNotALetterOrWordOrNotLetterOrNotWordOrNotLetterOrNotWordOrNotLetterOrNotWordOrNotLetter\
    \ = lastChar", "        val lastChar = txt.last\n        val isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_\
    \ == lastChar)\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").last.contains(lastChar)\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_.toString.contains(lastChar))\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption match {\n            case None => false\n            case Some(word)\
    \ => !word.contains(lastChar)\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => true\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "        val\
    \ lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isNotWord = txt.split(\" \").lastOption.exists(lastChar => lastChar\
    \ != lastChar)\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").lastOption.exists(_.contains(lastChar))\n        isLetter\
    \ && !isNotWord", "        val lastChar = txt.last\n        val isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.splitAt(txt.length-1)(0)\
    \ != txt\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLastCharALetter = lastChar.matches(\"[a-zA-Z]\") && !lastChar.contains(\"\
    \ \")\n        isLastCharALetter", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        val isLastCharNotALetterInWord = txt.split(",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter", "        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar\
    \ != 'a' && lastChar != 'z'\n        return isLastCharALetter && !isLastCharNotALetter",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(lastChar\
    \ => lastChar != lastChar)\n        isLetter && !isNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.dropRight(1).forall(!_.isLetter)\n        isLetter &&\
    \ !isNotWord", "        val lastChar = txt.last\n        val isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLastCharALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A'\
    \ && lastChar <= 'Z')\n        !isLastCharALetter", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.dropRight(1).forall(c => c.toLowerCase == lastChar)\n        isLetter\
    \ && !isNotWord", "        val lastChar = txt.last\n        val isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar\
    \ <= 'Z')\n        !isALetter", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isALetter", "        val lastChar = txt.last\n        val isLetter =\
    \ lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "       \
    \ val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ != lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        var lastChar = txt.last\n        var\
    \ isLastCharALetter = true\n        while (lastChar != ' ') {\n            if\
    \ (lastChar.matches(\"[a-zA-Z]\")) {\n                isLastCharALetter = false\n\
    \            }\n            lastChar = txt.last\n        }\n        return isLastCharALetter",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter", "        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toString.toLowerCase == lastChar\n        val isLastCharNotALetter\
    \ = txt.dropRight(1).forall(_.toString.toLowerCase != lastChar)\n        isLastCharALetter\
    \ && !isLastCharNotALetter", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "        val\
    \ lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isNotWord = txt.split(\" \").last.contains(lastChar)\n        isLetter\
    \ && !isNotWord", "        val lastChar = txt.last\n        val isLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLastCharALetter = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter\
    \ = lastChar != 'a' && lastChar != 'z'\n        isLastCharALetter && !isLastCharNotALetter",
  "        val lastChar = txt.last\n        val isALetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotALetter = lastChar != 'a' && lastChar != 'z'\n    \
    \    isALetter && !isNotALetter", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        isLetter && !isNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").lastOption.exists(lastChar => lastChar !=\
    \ lastChar)\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        isLetter && !isNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord", "       \
    \ var lastChar = txt.last\n        var isLastCharALetter = true\n        while(lastChar\
    \ != ' ' && lastChar != '\\n' && lastChar != '\\r' && lastChar != '\\t') {\n \
    \           lastChar = txt.last\n            if(!Character.isLetter(lastChar))\
    \ {\n                isLastCharALetter = false\n            }\n        }\n   \
    \     return isLastCharALetter", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).last.contains(lastChar)\n        isLetter && !isNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord", "       \
    \ val lastChar = txt.last\n        val isLastCharALetter = (lastChar >= 'a' &&\
    \ lastChar <= 'z') ||\n                                (lastChar >= 'A' && lastChar\
    \ <= 'Z')\n        !isLastCharALetter", "        val lastChar = txt.last\n   \
    \     val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").lastOption.exists(lastChar => lastChar != lastChar)\n   \
    \     isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLastCharALetter\
    \ = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n\
    \        !isLastCharALetter", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "       \
    \ val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_.equals(lastChar))\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ != lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(lastChar\
    \ => lastChar != lastChar)\n        isLetter && !isNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").lastOption.exists(_ != lastChar)\n     \
    \   isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLastCharALetter = (lastChar >= 'a'\
    \ && lastChar <= 'z') ||\n            (lastChar >= 'A' && lastChar <= 'Z')\n \
    \       !isLastCharALetter", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "        val\
    \ lastChar = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar\
    \ <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter",
  "        val lastChar = txt.last\n        val isLastCharALetter = lastChar >= 'a'\
    \ && lastChar <= 'z'\n        val isLastCharNotALetter = lastChar != 'a' && lastChar\
    \ != 'z'\n        isLastCharALetter && !isLastCharNotALetter", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption match {\n            case None => false\n            case Some(word)\
    \ => !word.contains(lastChar)\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.splitAt(txt.length-1)\n            .map(_.toLower)\n\
    \            .exists(_ != \"word\")\n        isLetter && !isNotWord", "      \
    \  val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   var lastChar = txt.last\n        var isLastCharALetter = true\n        while(lastChar\
    \ != ' ') {\n            if(lastChar.isLetter) {\n                isLastCharALetter\
    \ = false\n            }\n            lastChar = txt.last\n        }\n       \
    \ return isLastCharALetter", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_.equals(lastChar))\n        isLetter && !isNotWord", "  \
    \      val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "       \
    \ val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isALetter = (lastChar >= 'a' && lastChar <= 'z') || (lastChar >= 'A' && lastChar\
    \ <= 'Z')\n        !isALetter", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ == lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption match {\n      \
    \      case Some(word) => !word.contains(lastChar)\n            case None => false\n\
    \        }\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ != lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLastCharALetter = lastChar >= 'a' && lastChar <= 'z'\n        val isLastCharNotALetter\
    \ = lastChar != 'a' && lastChar != 'z'\n        isLastCharALetter && !isLastCharNotALetter",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "        val\
    \ lastChar = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar\
    \ <= 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter",
  "        val lastChar = txt.last\n        val isALetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption match {\n      \
    \      case Some(word) => !word.contains(lastChar)\n            case None => false\n\
    \        }\n        isALetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(!isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(!isLetter)\n        isLetter && !isNotWord", "       \
    \ val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n      \
    \  isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption match {\n            case Some(word) => !word.contains(lastChar)\n\
    \            case None => false\n        }\n        isLetter && !isNotWord", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption match {\n      \
    \      case None => false\n            case Some(word) => !word.contains(lastChar)\n\
    \        }\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").lastOption.exists(_ != lastChar)\n        isLetter && !isNotWord", "   \
    \     val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(_.isLetter)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isALetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(c\
    \ => c >= 'a' && c <= 'z')\n        isALetter && !isNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n     \
    \   isLetter && !isNotWord", "        val lastChar = txt.last\n        val isLetter\
    \ = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "        val\
    \ lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.splitAt(txt.length-1)(0)\
    \ != txt\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption match {\n      \
    \      case None => false\n            case Some(word) => !word.contains(lastChar)\n\
    \        }\n        isLetter && !isNotWord", "        var lastChar = txt.last\n\
    \        var isLastCharALetter = true\n        var isLastCharNotALetter = false\n\
    \        while(lastChar != \" \") {\n            if(lastChar.isLetter) {\n   \
    \             isLastCharALetter = true\n            } else {\n               \
    \ isLastCharNotALetter = true\n            }\n            lastChar = txt.last\n\
    \        }\n        return isLastCharALetter && !isLastCharNotALetter", "    \
    \    val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(_ != lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.dropRight(1).forall(c\
    \ => c != ' ')\n        isLetter && !isNotWord", "        val lastChar = txt.last\n\
    \        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord\
    \ = txt.split(\" \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord",
  "        val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").lastOption.exists(lastChar\
    \ => lastChar != lastChar)\n        isLetter && !isNotWord", "        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter", " \
    \       val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n \
    \       isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").last.contains(lastChar)\n        isLetter && !isNotWord", "        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").lastOption.exists(_.toString.contains(lastChar))\n\
    \        isLetter && !isNotWord", "        var lastChar = txt.last\n        var\
    \ isLastCharALetter = true\n        var isLastCharNotALetter = false\n       \
    \ while(lastChar != \" \") {\n            if(lastChar.matches(\"[a-zA-Z]\")) {\n\
    \                isLastCharALetter = true\n            } else {\n            \
    \    isLastCharNotALetter = true\n            }\n            lastChar = txt.last\n\
    \        }\n        return isLastCharALetter && !isLastCharNotALetter", "    \
    \    val lastChar = txt.last\n        val isLetter = lastChar >= 'a' && lastChar\
    \ <= 'z'\n        val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n\
    \        isLetter && !isNotWord", "        val lastChar = txt.last\n        val\
    \ isLetter = lastChar >= 'a' && lastChar <= 'z'\n        val isNotWord = txt.split(\"\
    \ \").map(_.last).contains(lastChar)\n        isLetter && !isNotWord", "     \
    \   val lastChar = txt.last\n        val isLastCharALetter = (lastChar >= 'A'\
    \ && lastChar <= 'Z') || (lastChar >= 'a' && lastChar <= 'z')\n        !isLastCharALetter"]
stop_tokens:
- "\n    }\n"
