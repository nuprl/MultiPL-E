name: HumanEval_97_multiply
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Complete the function that takes two integers and returns \n    // the product\
  \ of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n\
  \    def multiply(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(multiply((148l),\
  \ (412l)) == (16l));\n    assert(multiply((19l), (28l)) == (72l));\n    assert(multiply((2020l),\
  \ (1851l)) == (0l));\n    assert(multiply((14l), (-15l)) == (20l));\n    assert(multiply((76l),\
  \ (67l)) == (42l));\n    assert(multiply((17l), (27l)) == (49l));\n    assert(multiply((0l),\
  \ (1l)) == (0l));\n    assert(multiply((0l), (0l)) == (0l));\n    }\n\n}\n"
completions: ["        val unitDigits = a / 10\n        val remainder = a % 10\n \
    \       val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val\
    \ product = remainder * remainder2\n        product * unitDigits * unitDigits2",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * product", "      \
    \  val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product * unitDigits * unitDigits2", "        val unitDigits\
    \ = a.toString.toList.map(_.toInt)\n        val unitDigits2 = b.toString.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.zip(unitDigits2).map { case (digit1, digit2)\
    \ => digit1 * digit2 }\n        val unitDigits = unitDigits.toList\n        val\
    \ unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = remainder * remainder2\n        product + unitDigits *\
    \ unitDigits2", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * product", "        val unitDigits = a / 10\n        val remainder = a % 10\n\
    \        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val\
    \ product = remainder * remainder2\n        product + unitDigits * unitDigits2",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * unitDigits", "   \
    \     val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        val unitDigits\
    \ = a / 10\n        val unitDigits = b % 10\n        unitDigits * unitDigits",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val product\
    \ = remainder * b\n        product + unitDigits", "        val unitDigits = a\
    \ / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n   \
    \     val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product * unitDigits * unitDigits2", "        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        unitDigits_10.foldLeft(0)(_\
    \ * _)", "        val unitDigits = a / 10\n        val remainder = a % 10\n  \
    \      val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val\
    \ product = remainder * remainder2\n        product + unitDigits * unitDigits2",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * unitDigits", "   \
    \     val unitDigits = a.toString.toArray.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toArray.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val product = unitDigits_2.sum\n        product", "        val unitDigits =\
    \ a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n \
    \       val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product + unitDigits * unitDigits2", "        val unitDigits = a / Math.pow(10,\
    \ a.toInt)\n        val unitDigits2 = b / Math.pow(10, b.toInt)\n        val unitDigits\
    \ = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n        val\
    \ unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.toInt\n\
    \        val unitDigits = unitDigits.toInt\n        val unitDigits2 = unitDigits2.to",
  "        // Write your code here\n        val unitDigits = a.toString.split(\"\\\
    \\D\").map(_.toInt)\n        val unitDigits2 = b.toString.split(\"\\\\D\").map(_.toInt)\n\
    \        val unitDigits = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toLong)\n        unitDigits.reduce((x,\
    \ y) => x * y)", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = remainder * remainder2\n        product * unitDigits * unitDigits2",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2 * unitDigits", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product + unitDigits * unitDigits2", "        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val product = unitDigits\
    \ * unitDigits2\n        return product", "        val unitDigits = a / 10\n \
    \       val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ + unitDigits * unitDigits2", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = remainder * remainder2\n        product + unitDigits *\
    \ unitDigits2", "        val unitDigits = a.toString.toList.map(_.toInt)\n   \
    \     val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val product =\
    \ unitDigits.zip(unitDigits_1).map { case (a, b) => a * b}\n        product.sum",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder * remainder2", "        val unitDigits\
    \ = a / 10\n        val unitDigits2 = b / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        unitDigits",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * product", "      \
    \  val unitDigits = a / 10\n        val unitDigits2 = b / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   unitDigits", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * product", "        // Write your code here\n        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val unitDigits = unitDigits * unitDigits2\n   \
    \     val remainder = remainder * remainder2\n        val unitDigits = unitDigits\
    \ + remainder\n        unitDigits", "        val unitDigits = a / 10\n       \
    \ val remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = unitDigits * unitDigits2\n        product *\
    \ remainder + remainder2 * unitDigits", "        val unitDigits = a / Math.pow(10,\
    \ a.toInt)\n        val remainder = a % Math.pow(10, a.toInt)\n        val unitDigits2\
    \ = b / Math.pow(10, b.toInt)\n        val remainder2 = b % Math.pow(10, b.toInt)\n\
    \        unitDigits * unitDigits * unitDigits + remainder * remainder * remainder2\
    \ + unitDigits2 * unitDigits2 * unitDigits2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  product * remainder + remainder2 * product", "        val unitDigits = a /\
    \ 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n     \
    \   val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val unitDigits = unitDigits * unitDigits2\n   \
    \     val remainder = remainder * remainder2\n        unitDigits + remainder",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        val product2 = remainder * remainder2\n        product\
    \ + product2", "        val unitDigits = a / 10\n        val remainder = a % 10\n\
    \        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val\
    \ product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * unitDigits2", "        val unitDigits = a / 10\n        val remainder = a\
    \ % 10\n        val product = remainder * b\n        product + unitDigits", " \
    \       // Write your code here\n        val product = a.toString.toLong * b.toString.toLong\n\
    \        product", "        val unitDigits = a / 10\n        val remainder = a\
    \ % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n  \
    \      val product = remainder * remainder2\n        product * unitDigits * unitDigits2",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        val unitDigits\
    \ = a.toString.toArray.map(_.toInt)\n        val unitDigits2 = b.toString.toArray.map(_.toInt)\n\
    \        val unitDigits = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 1 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n\
    \        val unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val\
    \ unitDigits = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits\
    \ = unitDigits.map(x => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x\
    \ => if (x == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x\
    \ == 0) 0 else x)\n        val unitDigits = unitDigits.map(x => if (x == 0) 0\
    \ else ", "        val unitDigits = a / 10\n        val remainder = a % 10\n \
    \       val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val\
    \ product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * unitDigits", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = unitDigits * unitDigits2\n        val product2 = remainder\
    \ * remainder2\n        product + product2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ + unitDigits * unitDigits2", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val product = remainder * b\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + remainder\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + remainder\n       \
    \ val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + remainder\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + remainder\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + remainder\n        val unitDigits = unitDigits * 10\n       \
    \ val unitDigits = unitDigits + remainder\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + remainder\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + remainder\n       \
    \ val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + remainder\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + remainder\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + remainder\n        val unitDigits = unitDigits * 10\n       \
    \ val unitDigits = unitDigits + remainder\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + remainder\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + remainder\n       \
    \ val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + remainder\n\
    \        val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits\
    \ + remainder\n        val unitDigits = unitDigits * 10\n        val unitDigits\
    \ = unitDigits + remainder\n        val unitDigits = unitDigits * 10\n       \
    \ val unitDigits = unitDigits + remainder\n        val unitDigits = unitDigits\
    \ * 10\n        val unitDigits = unitDigits + remainder\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits + remainder\n       \
    \ val unitDigits = unitDigits * 10\n        val unitDigits = unitDigits + remainder\n\
    \        val unit", "        val unitDigits = a / 10\n        val remainder =\
    \ a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = remainder * remainder2\n        product + unitDigits *\
    \ unitDigits2", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * unitDigits", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * unitDigits", "        val unitDigits = a / Math.pow(10, a.toInt)\n       \
    \ val remainder = a % Math.pow(10, a.toInt)\n        val unitDigits2 = b / Math.pow(10,\
    \ b.toInt)\n        val remainder2 = b % Math.pow(10, b.toInt)\n        val product\
    \ = unitDigits * unitDigits2\n        val product2 = remainder * remainder2\n\
    \        product + product2", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val unitDigits = unitDigits * unitDigits2\n        val remainder = remainder\
    \ * remainder2\n        unitDigits + remainder", "        val unitDigits = a /\
    \ 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n     \
    \   val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2 * product", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        val product2 = remainder * remainder2\n        product + product2", " \
    \       val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product + remainder * remainder2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ * unitDigits * unitDigits2", "        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        unitDigits.reduce((x,\
    \ y) => x * y)", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = unitDigits * unitDigits2\n        val product2 = remainder\
    \ * remainder2\n        product + product2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val unitDigit3 = remainder2 / 10\n        val remainder3\
    \ = remainder2 % 10\n        val unitDigit4 = remainder3 / 10\n        val remainder4\
    \ = remainder3 % 10\n        val unitDigit5 = remainder4 / 10\n        val remainder5\
    \ = remainder4 % 10\n        val unitDigit6 = remainder5 / 10\n        val remainder6\
    \ = remainder5 % 10\n        val unitDigit7 = remainder6 / 10\n        val remainder7\
    \ = remainder6 % 10\n        val unitDigit8 = remainder7 / 10\n        val remainder8\
    \ = remainder7 % 10\n        val unitDigit9 = remainder8 / 10\n        val remainder9\
    \ = remainder8 % 10\n        val unitDigit10 = remainder9 / 10\n        val remainder10\
    \ = remainder9 % 10\n        val unitDigit11 = remainder10 / 10\n        val remainder11\
    \ = remainder10 % 10\n        val unitDigit12 = remainder11 / 10\n        val\
    \ remainder12 = remainder11 % 10\n        val unitDigit13 = remainder12 / 10\n\
    \        val remainder13 = remainder12 % 10\n        val unitDigit14 = remainder13\
    \ / 10\n        val remainder14 = remainder13 % 10\n        val unitDigit15 =\
    \ remainder14 / 10\n        val remainder15 = remainder14 % 10\n        val unitDigit16\
    \ = remainder15 / 10\n        val remainder16 = remainder15 % 10\n        val\
    \ unitDigit17 = remainder16 / 10\n        val remainder17 = remainder16 % 10\n\
    \        val unitDigit18 = remainder17 / 10\n        val remainder18 = remainder17\
    \ % 10\n        val unitDigit19 = remainder18 / 10\n        val remainder19 =\
    \ remainder18 % 10\n        val unitDigit20 = remainder19 / 10\n        val remainder20\
    \ = remainder19 % 10\n        val unitDigit21 = remainder20 / 10\n        val\
    \ remainder21 = remainder20 % 10\n        val unitDigit22 = remainder21 / 10\n\
    \        val remainder22 = remainder21 % 10\n        val unitDigit23 = remainder22\
    \ / 10\n        val remainder23 = ", "        val unitDigits = a / 10\n      \
    \  val remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = remainder * remainder2\n        product + unitDigits\
    \ * unitDigits2", "        val unitDigits = a / 10\n        val remainder = a\
    \ % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n  \
    \      val product = remainder * remainder2\n        product + unitDigits * unitDigits2",
  "        val unitDigits = a / 10\n        val unitDigits2 = b / 10\n        val\
    \ unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits %\
    \ 10\n        unitDigits", "        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits.zip(unitDigits_1).map {\n            case (digit1, digit2) => digit1\
    \ * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_3).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        unitDigits_4.foldLeft(0) {\n\
    \            case (acc, digit) => acc * digit\n        }", "        val unitDigits\
    \ = a / 10\n        val unitDigits2 = b / 10\n        val unitDigits = unitDigits\
    \ + unitDigits2\n        val unitDigits = unitDigits % 10\n        unitDigits\
    \ * b", "        val unitDigits = a.toString.toList.map(_.toInt)\n        val\
    \ unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2).map(x\
    \ => x._1 * x._2)\n        unitDigits.reduce((x, y) => x * y)", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2 * product", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        val product2 = remainder * remainder2\n        product + product2", " \
    \       val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * unitDigits", "   \
    \     val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * product", "      \
    \  val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits2 =\
    \ b.toString.toList.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2).map(x\
    \ => x._1 * x._2)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n \
    \       val unitDigits = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n \
    \       val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2).map(x\
    \ => x._1 * x._2)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n \
    \       val unitDigits = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n \
    \       val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2).map(x\
    \ => x._1 * x._2)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n \
    \       val unitDigits = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n \
    \       val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2).map(x\
    \ => x._1 * x._2)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n \
    \       val unitDigits = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n \
    \       val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder * remainder2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ * unitDigits * unitDigits2", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = unitDigits * unitDigits2\n        product * remainder +\
    \ remainder2 * product", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = unitDigits * unitDigits2\n        val product2 = remainder\
    \ * remainder2\n        product + product2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  val product2 = remainder * remainder2\n        product + product2", "     \
    \   val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product * unitDigits * unitDigits2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ + unitDigits * unitDigits2", "        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * 10\n        val unitDigits = unitDigits / 10\n        val unitDigit",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * unitDigits", "   \
    \     val unitDigits = a.toString.toInt\n        val unitDigits = b.toString.toInt\n\
    \        val product = unitDigits * unitDigits\n        return product", "   \
    \     val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        unitDigits_4.sum", " \
    \       val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * unitDigits", "   \
    \     val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * product", "      \
    \  val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product + remainder * remainder2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product + unitDigits * unitDigits2", "        val unitDigits = a / 10\n\
    \        val unitDigits2 = b / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        ", "        val unitDigits = a / 10\n  \
    \      val remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = remainder * remainder2\n        product + unitDigits\
    \ * unitDigits2", "        // Write your code here\n        val product = a.toString.toLong\
    \ * b.toString.toLong\n        product", "        val unitDigits = a.toString.toInt\n\
    \        val unitDigits2 = b.toString.toInt\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unitDigits2\n        val unitDigits = unitDigits\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n     \
    \   val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits / 10\n     \
    \   val unitDigits = unitDigits * unit", "        val unitDigits = a / 10\n  \
    \      val unitDigits2 = b / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        unitDigits", "        val unitDigits\
    \ = a / 10\n        val unitDigits2 = b / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        unitDigits",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * product", "      \
    \  val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product + unitDigits * unitDigits2", "        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits2 = b.toString.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.zip(unitDigits2).map { case (digit1, digit2) => digit1 * digit2\
    \ }\n        val unitDigits = unitDigits.toList\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(_.toString.toInt)\n\
    \        val unitDigits = unitDigits.map(_.toString.toInt)\n        val unitDigits\
    \ = unitDigits.map(_.toString.toInt)\n        val unitDigits = unitDigits.map(",
  "        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map\
    \ { case (digit1, digit2) => digit1 * digit2 }\n        val product = unitDigits_2.foldLeft(1L)\
    \ { (product, digit) => product * digit }\n        product", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2 * unitDigits", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ + unitDigits * unitDigits2", "        val unitDigits = a.toString.toInt\n  \
    \      val unitDigits_2 = b.toString.toInt\n        val unitDigits_3 = unitDigits\
    \ * unitDigits_2\n        val unitDigits_4 = unitDigits * unitDigits_3\n     \
    \   val unitDigits_5 = unitDigits * unitDigits_4\n        val unitDigits_6 = unitDigits\
    \ * unitDigits_5\n        val unitDigits_7 = unitDigits * unitDigits_6\n     \
    \   val unitDigits_8 = unitDigits * unitDigits_7\n        val unitDigits_9 = unitDigits\
    \ * unitDigits_8\n        val unitDigits_10 = unitDigits * unitDigits_9\n    \
    \    val unitDigits_11 = unitDigits * unitDigits_10\n        val unitDigits_12\
    \ = unitDigits * unitDigits_11\n        val unitDigits_13 = unitDigits * unitDigits_12\n\
    \        val unitDigits_14 = unitDigits * unitDigits_13\n        val unitDigits_15\
    \ = unitDigits * unitDigits_14\n        val unitDigits_16 = unitDigits * unitDigits_15\n\
    \        val unitDigits_17 = unitDigits * unitDigits_16\n        val unitDigits_18\
    \ = unitDigits * unitDigits_17\n        val unitDigits_19 = unitDigits * unitDigits_18\n\
    \        val unitDigits_20 = unitDigits * unitDigits_19\n        val unitDigits_21\
    \ = unitDigits * unitDigits_20\n        val unitDigits_22 = unitDigits * unitDigits_21\n\
    \        val unitDigits_23 = unitDigits * unitDigits_22\n        val unitDigits_24\
    \ = unitDigits * unitDigits_23\n        val unitDigits_25 = unitDigits * unitDigits_24\n\
    \        val unitDigits_26 = unitDigits * unitDigits_25\n        val unitDigits_27\
    \ = unitDigits * unitDigits_26\n        val unitDigits_28 = unitDigits * unitDigits_27\n\
    \        val unitDigits_29 = unitDigits * unitDigits_28\n        val unitDigits_30\
    \ = unitDigits * unitDigits_29\n        val unitDigits_31 = unitDigits * unitDigits_30\n\
    \        val unitDigits_32 = unitDigits * unitDigits_31\n        val unitDigits_33\
    \ = unitDigits * unitDigits_32\n        val unit", "        val unitDigits = a\
    \ / 10\n        val remainder = a % 10\n        val product = remainder * b\n\
    \        product * unitDigits", "        val unitDigits = a / 10\n        val\
    \ remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = unitDigits * unitDigits2\n        val product2\
    \ = remainder * remainder2\n        product + product2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product + unitDigits * unitDigits2", "        val unitDigits = a / Math.pow(10,\
    \ a.toInt)\n        val remainder = a % Math.pow(10, a.toInt)\n        val unitDigits2\
    \ = b / Math.pow(10, b.toInt)\n        val remainder2 = b % Math.pow(10, b.toInt)\n\
    \        unitDigits * unitDigits2 * remainder * remainder2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product * unitDigits * unitDigits2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ * unitDigits * unitDigits2", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = unitDigits * unitDigits2\n        product * remainder *\
    \ remainder2", "        val unitDigits = a / 10\n        val remainder = a % 10\n\
    \        val product = remainder * b\n        val unitDigits = unitDigits * 10\n\
    \        unitDigits + product", "        val unitDigits = a / 10\n        val\
    \ remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = unitDigits * unitDigits2\n        product *\
    \ remainder + remainder2 * product", "        val unitDigits = a / 10\n      \
    \  val remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = unitDigits * unitDigits2\n        product *\
    \ remainder + remainder2 * unitDigits", "        // Write your code here\n   \
    \     var sum = 0\n        var product = 1\n        while(a > 0){\n          \
    \  sum += a%10\n            a /= 10\n        }\n        while(b > 0){\n      \
    \      product *= b%10\n            b /= 10\n        }\n        sum * product",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product * unitDigits * unitDigits2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val product = remainder *\
    \ b\n        product * unitDigits", "        val unitDigits = a / 10\n       \
    \ val unitDigits2 = b / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        unitDigits", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  val product2 = remainder * remainder2\n        product + product2", "     \
    \   val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_3 = unitDigits_2.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_5 = unitDigits_4.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_6 = unitDigits_5.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_7 = unitDigits_6.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_8 = unitDigits_7.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_9 = unitDigits_8.zip(unitDigits_1).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_10 = unitDigits_9.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_11 = unitDigits_10.zip(unitDigits_1).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_12 =\
    \ unitDigits_11.zip(unitDigits_1).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_13 = unitDigits_12.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_14 = unitDigits_13.zip(unitDigits_1).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_15 =\
    \ unitDigits_14.zip(unitDigits_1).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_16 = unitDigits_15.zip(unitDigits_1).map\
    \ {\n            case (digit1, digit2) => digit1 * digit", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        val product2 = remainder * remainder2\n        product + product2", " \
    \       val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map\
    \ { case (a, b) => a * b}\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map\
    \ { case (a, b) => a * b}\n        unitDigits_3.sum", "        val unitDigits\
    \ = a.toString.toList.map(_.toInt)\n        val unitDigits_1 = b.toString.toList.map(_.toInt)\n\
    \        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map(x => x._1 * x._2)\n\
    \        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map(x => x._1 * x._2)\n\
    \        val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map(x => x._1 * x._2)\n\
    \        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map(x => x._1 * x._2)\n\
    \        val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map(x => x._1 * x._2)\n\
    \        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map(x => x._1 * x._2)\n\
    \        val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map(x => x._1 * x._2)\n\
    \        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map(x => x._1 * x._2)\n\
    \        val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map(x => x._1 * x._2)\n\
    \        val unitDigits_11 = unitDigits_10.zip(unitDigits_11).map(x => x._1 *\
    \ x._2)\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_12).map(x =>\
    \ x._1 * x._2)\n        val unitDigits_13 = unitDigits_12.zip(unitDigits_13).map(x\
    \ => x._1 * x._2)\n        val unitDigits_14 = unitDigits_13.zip(unitDigits_14).map(x\
    \ => x._1 * x._2)\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_15).map(x\
    \ => x._1 * x._2)\n        val unitDigits_16 = unitDigits_15.zip(unitDigits_16).map(x\
    \ => x._1 * x._2)\n        val unitDigits_17 = unitDigits_16.zip(unitDigits_17).map(x\
    \ => x._1 * x._2)\n        val unitDigits_18 = unitDigits_17.zip(unitDigits_18).map(x\
    \ => x._1 * x._2)\n        val unitDigits_19 = unitDigits_18.zip(unitDigits_19).map(x\
    \ => x._1 * x._2)\n        val unitDigits_20", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  val product2 = remainder * remainder2\n        product + product2", "     \
    \   val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val remainder = remainder * remainder2\n        unitDigits + remainder",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val product\
    \ = remainder * b\n        product + unitDigits", "        val unitDigits = a\
    \ / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n   \
    \     val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2 * product", "        val unitDigits\
    \ = a.toString.toArray.map(_.toInt)\n        val unitDigits_1 = b.toString.toArray.map(_.toInt)\n\
    \        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map{case (a,b) => a*b}\n\
    \        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map{case (a,b) => a*b}\n\
    \        val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map{case (a,b) => a*b}\n\
    \        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map{case (a,b) => a*b}\n\
    \        val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map{case (a,b) => a*b}\n\
    \        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map{case (a,b) => a*b}\n\
    \        val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map{case (a,b) => a*b}\n\
    \        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map{case (a,b) => a*b}\n\
    \        val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map{case (a,b) =>\
    \ a*b}\n        unitDigits_10.sum", "        val unitDigits = a / 10\n       \
    \ val remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = unitDigits * unitDigits2\n        product +\
    \ remainder * remainder2", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = unitDigits * unitDigits2\n        val product2 = remainder\
    \ * remainder2\n        product + product2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  product * remainder + remainder2 * product", "        val unitDigits = a /\
    \ 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n     \
    \   val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        val product2 = remainder * remainder2\n        product + product2", " \
    \       val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map\
    \ { case (a,b) => a*b }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map\
    \ { case (a,b) => a*b }\n        unitDigits_3.foldLeft(0)(_+_)", "        val\
    \ unitDigits = a / 10\n        val unitDigits2 = b / 10\n        val unitDigits\
    \ = unitDigits * unitDigits2\n        val unitDigits = unitDigits % 10\n     \
    \   unitDigits", "        val unitDigits = a / 10\n        val unitDigits2 = b\
    \ / 10\n        val unitDigits = unitDigits * unitDigits2\n        val unitDigits\
    \ = unitDigits % 10\n        unitDigits", "        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map { case (a,b) => a*b }\n        val unitDigits_3\
    \ = unitDigits_2.zip(unitDigits_3).map { case (a,b) => a*b }\n        unitDigits_3.sum",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * unitDigits", "   \
    \     val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map{case\
    \ (a,b) => a*b}\n        unitDigits_2.sum", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  val product2 = remainder * remainder2\n        product + product2", "     \
    \   val unitDigits = a.toString.toArray.map(_.toInt)\n        val unitDigits2\
    \ = b.toString.toArray.map(_.toInt)\n        val unitDigits = unitDigits.zip(unitDigits2).map(x\
    \ => x._1 * x._2)\n        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).product)\n\
    \        val unitDigits = unitDigits.map(x => x.toString.toArray.map(_.toInt).sum)\n\
    \        ", "        val unitDigits = a / 10\n        val remainder = a % 10\n\
    \        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val\
    \ product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * product", "        val unitDigits = a / 10\n        val remainder = a % 10\n\
    \        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val\
    \ product = remainder * remainder2\n        product + unitDigits * unitDigits2",
  "        val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map\
    \ { case (a,b) => a*b }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map\
    \ { case (a,b) => a*b }\n        val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map\
    \ { case (a,b) => a*b }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map\
    \ { case (a,b) => a*b }\n        val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map\
    \ { case (a,b) => a*b }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map\
    \ { case (a,b) => a*b }\n        val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map\
    \ { case (a,b) => a*b }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map\
    \ { case (a,b) => a*b }\n        val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map\
    \ { case (a,b) => a*b }\n        unitDigits_10.foldLeft(0)(_*(_+_))", "      \
    \  val unitDigits = a / 10\n        val remainder = a % 10\n        val product\
    \ = remainder * b\n        product + unitDigits", "        val unitDigits = a\
    \ / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n   \
    \     val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2 * product", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val remainder = (remainder * remainder2) % 10\n        unitDigits * remainder",
  "        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = b / 10\n        val unitDigits = b % 10\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val unitDigits\
    \ = unitDigits * unitDigits\n        val unitDigits = unitDigits * unitDigits\n\
    \        val unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits\
    \ * unitDigits\n        val unitDigits = unitDigits * unitDigits\n        val\
    \ unitDigits = unitDigits * unitDigits\n        val unitDigits = unitDigits *\
    \ unitDigits\n        val unitDigits = unitDigits ", "        val unitDigits =\
    \ a.toString.toList.map(_.toInt)\n        val unitDigits_1 = b.toString.toList.map(_.toInt)\n\
    \        val unitDigits_2 = unitDigits.zip(unitDigits_1).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ unitDigits_3.foldLeft(0)(_ * _)", "        val unitDigits = a / 10\n       \
    \ val remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = unitDigits * unitDigits2\n        product *\
    \ remainder + remainder2 * product", "        val unitDigits = a / 10\n      \
    \  val remainder = a % 10\n        val product = remainder * b\n        product\
    \ + unitDigits", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * product", "        val unitDigits = a / 10\n        val remainder = a % 10\n\
    \        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n        val\
    \ product = unitDigits * unitDigits2\n        product + remainder * remainder2",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val product\
    \ = remainder * b\n        product + unitDigits", "        val unitDigits = a\
    \ / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n   \
    \     val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product * unitDigits * unitDigits2", "        val unitDigits = a.toString.toList.map(_.toInt)\n\
    \        val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits.zip(unitDigits_1).map {\n            case (digit1, digit2) => digit1\
    \ * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_3).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        unitDigits_4.sum", "        val\
    \ unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2 * product", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        val product2 = remainder * remainder2\n        product + product2", " \
    \       val unitDigits = a.toString.toArray.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toArray.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map{case\
    \ (a,b) => a*b}\n        val unitDigits_3 = unitDigits.zip(unitDigits_2).map{case\
    \ (a,b) => a*b}\n        val unitDigits_4 = unitDigits.zip(unitDigits_3).map{case\
    \ (a,b) => a*b}\n        unitDigits_4.sum", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  product * remainder + product*remainder2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  product * remainder + remainder2 * product", "        val unitDigits = a /\
    \ 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n     \
    \   val remainder2 = b % 10\n        val product = remainder * remainder2\n  \
    \      product + unitDigits * unitDigits2", "        // Write your code here\n\
    \        var sum = 0\n        var product = 1\n        for(i <- 0 until a){\n\
    \            sum += i\n        }\n        for(j <- 0 until b){\n            product\
    \ *= j\n        }\n        sum * product", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  product * remainder + product*remainder2", "        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a / 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a / 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a / 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a / 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a / 10\n        val unitDigits = a % 10\n        val unitDigits = a / 10",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * product", "      \
    \  val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * product", "      \
    \  val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1 =\
    \ b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits_1.zip(unitDigits_2).map(x\
    \ => x._1 * x._2)\n        unitDigits_2.foldLeft(0)(_ + _)", "        val unitDigits\
    \ = a.toString.toList.map(_.toInt)\n        val unitDigits2 = b.toString.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2 =\
    \ unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n\
    \        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)\n        val unitDigits2\
    \ = unitDigits2.filter(_ > 0)\n        val unitDigits = unitDigits.filter(_ <\
    \ 10)\n        val unitDigits2 = unitDigits2.filter(_ < 10)\n        val unitDigits\
    \ = unitDigits.filter(_ > 0)\n        val unitDigits2 = unitDigits2.filter(_ >\
    \ 0)\n        val unitDigits = unitDigits.filter(_ < 10)\n        val unitDigits2\
    \ = unitDigits2.filter(_ < 10)\n        val unitDigits = unitDigits.filter(_ >\
    \ 0)\n        val unitDigits2 = unitDigits2.filter(_ > 0)\n        val unitDigits\
    \ = unitDigits.filter(_ < 10)\n        val unitDigits2 = unitDigits2.filter(_\
    \ < 10)\n        val unitDigits = unitDigits.filter(_ > 0)", "        val unitDigits\
    \ = a / 10\n        val unitDigits2 = b / 10\n        val unitDigits = unitDigits\
    \ * unitDigits2\n        val unitDigits = unitDigits % 10\n        unitDigits",
  "        val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2", "        val unitDigits\
    \ = a / 10\n        val unitDigits2 = b / 10\n        val product = unitDigits\
    \ * unitDigits2\n        product", "        val unitDigits = a / 10\n        val\
    \ remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = remainder * remainder2\n        product + unitDigits\
    \ * unitDigits2", "        val unitDigits = a / 10\n        val remainder = a\
    \ % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n  \
    \      val product = unitDigits * unitDigits2\n        product * remainder + remainder2\
    \ * unitDigits", "        val unitDigits = a / 10\n        val remainder = a %\
    \ 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n    \
    \    val product = unitDigits * unitDigits2\n        val product2 = remainder\
    \ * remainder2\n        product + product2", "        val unitDigits = a / Math.pow(10,\
    \ a.toInt)\n        val remainder = a % Math.pow(10, a.toInt)\n        val unitDigits2\
    \ = b / Math.pow(10, b.toInt)\n        val remainder2 = b % Math.pow(10, b.toInt)\n\
    \        val product = unitDigits * unitDigits2\n        val product2 = remainder\
    \ * remainder2\n        product + product2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ + unitDigits * unitDigits2", "        val unitDigits = a / 10\n        val remainder\
    \ = a % 10\n        val unitDigits2 = b / 10\n        val remainder2 = b % 10\n\
    \        val product = unitDigits * unitDigits2\n        val product2 = remainder\
    \ * remainder2\n        product + product2", "        val unitDigits = a / 10\n\
    \        val unitDigits = b % 10\n        val product = unitDigits * unitDigits\n\
    \        product", "        val unitDigits = a / Math.pow(10, a.toInt)\n     \
    \   val remainder = a % Math.pow(10, a.toInt)\n        val unitDigits2 = b / Math.pow(10,\
    \ b.toInt)\n        val remainder2 = b % Math.pow(10, b.toInt)\n        unitDigits\
    \ * unitDigits2 * remainder * remainder2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n      \
    \  product * remainder * remainder2", "        val unitDigits = a / 10\n     \
    \   val remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = unitDigits * unitDigits2\n        val product2\
    \ = remainder * remainder2\n        product + product2", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2", "        val unitDigits = a / 10\n\
    \        val remainder = a % 10\n        val unitDigits2 = b / 10\n        val\
    \ remainder2 = b % 10\n        val product = remainder * remainder2\n        product\
    \ + unitDigits * unitDigits2", "        val unitDigits = a / 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a % 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a % 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a % 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a % 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a % 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a % 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a % 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a % 10\n        val unitDigits\
    \ = a % 10\n        val unitDigits = a % 10\n        val unitDigits = a % 10\n\
    \        val unitDigits = a % 10\n        val unitDigits = a % 10\n        val\
    \ unitDigits = a % 10\n        val unitDigits = a % 10", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        product * remainder + remainder2 * product", "        val unitDigits\
    \ = a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n\
    \        val remainder2 = b % 10\n        val product = unitDigits * unitDigits2\n\
    \        val product2 = remainder * remainder2\n        product + product2", " \
    \       val unitDigits = a.toString.toList.map(_.toInt)\n        val unitDigits_1\
    \ = b.toString.toList.map(_.toInt)\n        val unitDigits_2 = unitDigits.zip(unitDigits_1).map\
    \ { case (a,b) => a*b }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_2).map\
    \ { case (a,b) => a*b }\n        unitDigits_3.sum", "        val unitDigits =\
    \ a / 10\n        val remainder = a % 10\n        val unitDigits2 = b / 10\n \
    \       val remainder2 = b % 10\n        val product = remainder * remainder2\n\
    \        product + unitDigits * unitDigits2", "        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.toString.toInt\n\
    \        val unitDigits = b.toString.toInt\n        val unitDigits = a.", "  \
    \      val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = unitDigits\
    \ * unitDigits2\n        product * remainder + remainder2 * product", "      \
    \  val unitDigits = a / 10\n        val remainder = a % 10\n        val unitDigits2\
    \ = b / 10\n        val remainder2 = b % 10\n        val product = remainder *\
    \ remainder2\n        product + unitDigits * unitDigits2", "        // Write your\
    \ code here\n        val unitDigits = a.toString.toList.map(_.toInt)\n       \
    \ val unitDigits_1 = b.toString.toList.map(_.toInt)\n        val unitDigits_2\
    \ = unitDigits_1.zip(unitDigits_2).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_3 = unitDigits_2.zip(unitDigits_3).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_4 = unitDigits_3.zip(unitDigits_4).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_5 = unitDigits_4.zip(unitDigits_5).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_6 = unitDigits_5.zip(unitDigits_6).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_7 = unitDigits_6.zip(unitDigits_7).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_8 = unitDigits_7.zip(unitDigits_8).map {\n            case (digit1,\
    \ digit2) => digit1 * digit2\n        }\n        val unitDigits_9 = unitDigits_8.zip(unitDigits_9).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_10 = unitDigits_9.zip(unitDigits_10).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_11 =\
    \ unitDigits_10.zip(unitDigits_11).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_12 = unitDigits_11.zip(unitDigits_12).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_13 = unitDigits_12.zip(unitDigits_13).map {\n            case\
    \ (digit1, digit2) => digit1 * digit2\n        }\n        val unitDigits_14 =\
    \ unitDigits_13.zip(unitDigits_14).map {\n            case (digit1, digit2) =>\
    \ digit1 * digit2\n        }\n        val unitDigits_15 = unitDigits_14.zip(unitDigits_15).map\
    \ {\n            case (digit1, digit2) => digit1 * digit2\n        }\n       \
    \ val unitDigits_16 = unitDigits_15.", "        val unitDigits = a / 10\n    \
    \    val remainder = a % 10\n        val unitDigits2 = b / 10\n        val remainder2\
    \ = b % 10\n        val product = unitDigits * unitDigits2\n        product *\
    \ remainder + remainder2 * product", "        val unitDigits = a / 10\n      \
    \  val unitDigits2 = b / 10\n        val unitDigits = unitDigits * unitDigits2\n\
    \        val unitDigits = unitDigits % 10\n        unitDigits", "        val unitDigits\
    \ = a.toString.toList.map(_.toInt)\n        val unitDigits2 = b.toString.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.zip(unitDigits2).map(x => x._1 * x._2)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.toList.map(_.toInt)\n        val unitDigits = unitDigits.toList.map(_.toInt)\n\
    \        val unitDigits = unitDigits.toList.map(_.toInt)\n        val unitDigits\
    \ = unitDigits.to", "        val unitDigits = a.toString.toInt\n        val unitDigits2\
    \ = b.toString.toInt\n        val unitDigits = unitDigits / 10\n        val unitDigits2\
    \ = unitDigits2 / 10\n        val unitDigits = unitDigits % 10\n        val unitDigits2\
    \ = unitDigits2 % 10\n        unitDigits * unitDigits2"]
stop_tokens:
- "\n    }\n"
