name: HumanEval_35_max_element
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return maximum element in the list.\n    def maxElement(l : List[Long])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
completions: ["        val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n\
    \        l.indexOf(max)", "        val maxElem = l.foldLeft(0L)((max, elem) =>\
    \ if (max > elem) max else elem)\n        maxElem", "        val max = l.foldLeft(0L)\
    \ { (max, x) => if (x > max) x else max }\n        max", "        val maxElem\
    \ = l.foldLeft(0L){ (max, elem) => if (max > elem) max else elem }\n        maxElem",
  "        val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n       \
    \ l.indexOf(max)", "        l.foldLeft(0L) {\n            (maxSoFar, element)\
    \ => if (element > maxSoFar) element else maxSoFar\n        }", "        val maxElem\
    \ = l.head\n        val maxElemIndex = l.indexWhere(x => x == maxElem)\n     \
    \   val maxElemIndex = maxElemIndex + 1\n        val maxElems = l.slice(maxElemIndex,\
    \ l.length)\n        val maxElemsSum = maxElems.sum\n        if (maxElemsSum >\
    \ maxElem)\n            maxElemsSum\n        else\n            maxElem", '        l.foldLeft(Long.MinValue)(
    (max, x) => if (max < x) max else x)', "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        max ", '        l.foldLeft(0L)( (max,
    cur) => if (max < cur) max else cur)', "        val m = l.foldLeft(0L)((max, x)\
    \ => if (x > max) x else max)\n        m", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        l.indexOf(max)", "        val max =\
    \ l.foldLeft(0L)( (max, x) => if (x > max) x else max )\n        max ", "    \
    \    val maxElem = l.head\n        val maxIndex = l.indexOfMax(maxElem)\n    \
    \    l.updated(maxIndex, maxElem)", "        val m = l.foldLeft(0L)((max, x) =>\
    \ if (x > max) x else max)\n        m", '        l.foldLeft(0L)((max, x) => if
    (max < x) max else x)', '        l.foldLeft(0L)( (max: Long, elem: Long) => if
    (elem > max) elem else max )', '        l.foldLeft(0L)( (max, element) => if (element
    > max) element else max )', '        l.foldLeft(Long.MinValue)( (max, element)
    => if (element > max) element else max )', "        val m = l.foldLeft(0L)((a,\
    \ b) => if (a > b) a else b)\n        m", '        l.foldLeft(0L){ (max, e) =>
    if (max < e) e else max }', '        l.foldLeft(0L)( (max, element) => if (element
    > max) element else max )', '        l.foldLeft(0L){ (max, elem) => if (max <
    elem) elem else max }', "        val maxElem = l.head\n        val maxIndex =\
    \ l.indexOfMax\n        l.zipWithIndex.foreach { case (elem, index) =>\n     \
    \       if (elem > maxElem) {\n                maxElem = elem\n              \
    \  maxIndex = index\n            }\n        }\n        maxElem", "        val\
    \ maxElem = l.head\n        val maxIndex = l.indexOfMax\n        l.tail.foreach(elem\
    \ => {\n            if (elem > maxElem)\n                maxElem = elem\n    \
    \    })\n        maxElem", '        l.foldLeft(0L)( (max, elem) => if (max < elem)
    elem else max )', "        val max = l.foldLeft(0L)((max, x) => if (x > max) x\
    \ else max)\n        l.indexOf(max)", "        val max = scala.math.max(l)\n \
    \       l.indexOf(max)", "        val max = l.foldLeft(0L)((max, x) => if (x >\
    \ max) x else max)\n        l.max", "        val max = l.foldLeft(0L)((max, x)\
    \ => if (x > max) x else max)\n        l.indexOf(max)", "        val maxElem =\
    \ l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n        maxElem",
  '        l.foldLeft(0L)( (max, cur) => if (max < cur) max else cur )', "       \
    \ val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        l.indexOf(max)",
  "        val m = l.foldLeft(0L)(_ + _)\n        l.max", '        l.foldLeft(0L){
    (max, elem) => if (elem > max) elem else max }', '        l.foldLeft(Long.MinValue)(_
    > _) ? _ : l.max', '        l.foldLeft(0L)( (max, x) => if (max < x) max else
    x )', "        val maxElem = l.foldLeft(0L){ (max, elem) => if (elem > max) elem\
    \ else max }\n        maxElem", "        val max = l.foldLeft(0L)((max, x) =>\
    \ if (x > max) x else max)\n        l.indexOf(max)", "        val maxElem = l.foldLeft(0L)(_\
    \ + _)\n        l.max", "        val max = l.foldLeft(0L)((max, x) => if (x >\
    \ max) x else max)\n        l.indexOf(max)", '        l.foldLeft(0L) { (max, e)
    => if (max < e) e else max }', '        l.foldLeft(0L)((max, element) => if (element
    > max) element else max)', "        val maxElem = l.foldLeft(0L) {\n         \
    \   (maxElem, elem) => if (elem > maxElem) elem else maxElem\n        }\n    \
    \    maxElem", "        val maxElem = l.foldLeft(0L)( (max, elem) => if (max >\
    \ elem) max else elem )\n        return maxElem", '        l.foldLeft(0L)( (max,
    x) => if (max < x) max else x)', "        val maxElem = l.foldLeft(0L){ (max,\
    \ elem) => if (max < elem) elem else max }\n        maxElem", "        val max\
    \ = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        l.max", '        l.foldLeft(0L){
    (max, x) => if (max < x) max else x }', "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (max < elem) elem else max)\n        maxElem", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n        maxElem",
  '        l.foldLeft(0L)( (max,cur) => if (max > cur) max else cur)', "        val\
    \ maxElem = l.head\n        val maxIndex = l.indexOfMax(maxElem)\n        l.updated(maxIndex,\
    \ maxElem)", "        val max = l.foldLeft(0L) { (max, x) => if (x > max) x else\
    \ max }\n        max", "        val maxElem = l.foldLeft(0L)((max, elem) => if\
    \ (elem > max) elem else max)\n        maxElem", '        l.foldLeft(0L)( (max:
    Long, elem: Long) => if (elem > max) elem else max )', '        l.foldLeft(0L)(
    (max: Long, x: Long) => if (x > max) x else max )', "        val maxElem = l.head\n\
    \        val maxElemIndex = l.indexWhere(elem => elem > maxElem)\n        val\
    \ maxElemIndex = maxElemIndex + 1\n        val maxElems = l.slice(maxElemIndex,\
    \ l.length)\n        val maxElemsCount = maxElems.length\n        if (maxElemsCount\
    \ == 0)\n            maxElem\n        else\n            maxElement(maxElems)",
  "        val maxElem = l.foldLeft(0L)(_ + _)\n        l.indexOf(maxElem)", '        l.foldLeft(0L)(
    (max: Long, elem: Long) => if (max < elem) elem else max )', '        l.foldLeft(0L)(
    (max,x) => if (max < x) max else x)', "        val m = l.foldLeft(0L)((max, x)\
    \ => if (max < x) max else x)\n        m", '        l.foldLeft(0L)((max, element)
    => if (element > max) element else max)', "        val maxElem = l.head\n    \
    \    val maxIndex = 0\n        for (i <- 0 until l.length) {\n            if (l(i)\
    \ > maxElem) {\n                maxElem = l(i)\n                maxIndex = i\n\
    \            }\n        }\n        maxElem", "        val maxElem = l.foldLeft(0L)(_\
    \ + _)\n        l.max", "        val maxElem = l.foldLeft(0L) { (max, elem) =>\
    \ if (max > elem) max else elem }\n        maxElem", "        val maxElem = l.foldLeft(0L)((maxElem,\
    \ elem) => if (elem > maxElem) elem else maxElem)\n        maxElem", "       \
    \ val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        l.indexOf(max)",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max) elem else max)\n\
    \        return maxElem", "        val maxElem = l.foldLeft(0L)( (max, elem) =>\
    \ if (elem > max) elem else max )\n        maxElem", "        val maxElem = l.head\n\
    \        val maxElemIndex = l.indexOfMax(maxElem)\n        val maxElems = l.slice(maxElemIndex\
    \ + 1)\n        maxElems.max", "        val maxElem = l.head\n        val maxIndex\
    \ = l.indexOfMax(maxElem)\n        l.updated(maxIndex, l.last)", "        val\
    \ max = scala.math.max(l)\n        l.indexOf(max)", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        l.indexOf(max)", "        l.foldLeft(0L)\
    \ {\n            (max, x) => if (max < x) max else x\n        }", "        val\
    \ maxElem = l.foldLeft(0L)( (maxElem, e) => if (e > maxElem) e else maxElem)\n\
    \        maxElem", "        val m = l.foldLeft(0L){ (max, x) => if (x > max) x\
    \ else max }\n        m", "        val maxElem = l.foldLeft(0L){ (max, elem) =>\
    \ if (elem > max) elem else max }\n        maxElem", '        l.foldLeft(0L)(
    (acc, x) => if (acc > x) acc else x )', '        l.foldLeft(0L)((max, element)
    => if (element > max) element else max)', '        l.foldLeft(0L)((max, x) =>
    if (max < x) max else x)', "        val max = l.foldLeft(0L)(_ > _) ? _ : _\n\
    \        l.foldLeft(max)(_ > _) ? _ : _", "        val maxElem = l.foldLeft(0L)((maxElem,\
    \ elem) => if (elem > maxElem) elem else maxElem)\n        maxElem", "       \
    \ val max = scala.math.max(l)\n        l.find(_ == max).getOrElse(max)", "   \
    \     val max = l.foldLeft(0L){ (max, x) => if (x > max) x else max }\n      \
    \  max ", "        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        maxElem", '        l.foldLeft(0L)( (max: Long, elem:
    Long) => if (elem > max) elem else max )', "        val m = l.foldLeft(0L)((a,\
    \ b) => if (a > b) a else b)\n        m", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (elem > max) elem else max)\n        maxElem", '        l.foldLeft(0L)(
    (acc, x) => if (acc > x) acc else x)', '        l.foldLeft(0L){ (max, e) => if
    (e > max) e else max }', '        l.foldLeft(Long.MinValue)(_ + _)', "       \
    \ val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        max ",
  "        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n        l.tail.foreach(elem\
    \ => {\n            if (elem > maxElem)\n                maxElem = elem\n    \
    \    })\n        maxElem", "        val maxElem = l.foldLeft(0L){ (max, elem)\
    \ => if (max < elem) elem else max }\n        return maxElem", "        val max\
    \ = l.foldLeft(0L)((max, current) => if (current > max) current else max)\n  \
    \      l.indexOf(max)", "        val max = l.foldLeft(0L)(_ + _)\n        l.max",
  "        val max = l.foldLeft(0L)(_ + _)\n        l.find(_ == max).getOrElse(max)",
  "        val m = l.foldLeft(0L){ (max, x) => if (x > max) x else max }\n       \
    \ m", "        val maxElem = l.foldLeft(0L)((maxElem, currentElem) => if (currentElem\
    \ > maxElem) currentElem else maxElem)\n        maxElem", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => if (elem > max) elem else max)\n        maxElem",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        maxElem", "        val max = l.foldLeft(0L){ (max, x) => if (x > max)\
    \ x else max }\n        max ", "        val maxElem = l.foldLeft(0L){\n      \
    \      (maxElem, elem) => if (elem > maxElem) elem else maxElem\n        }\n \
    \       maxElem", "        val max = l.foldLeft(0L)(_ + _)\n        l.find(_ ==\
    \ max).getOrElse(max)", "        val m = l.foldLeft(0L)((max, x) => if (x > max)\
    \ x else max)\n        m", '        l.foldLeft(0L)(_ + _)', '        l.foldLeft(0L)(
    (max: Long, elem: Long) => if (elem > max) elem else max )', "        l.foldLeft(0L){\n\
    \            case(max, element) => if (element > max) element else max\n     \
    \   }", "        val max = l.foldLeft(0L)((max, current) => if (current > max)\
    \ current else max)\n        l.indexOf(max)", "        val m = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        m", '        l.foldLeft(0L){ (max, elem)
    => if (max < elem) elem else max }', "        val maxElem = l.foldLeft(0L)( (max,\
    \ elem) => if (max > elem) max else elem )\n        return maxElem", "       \
    \ val maxElem = l.head\n        val maxElemIndex = l.indexOf(0)\n        for(i\
    \ <- 1 to l.length){\n            if(l(i) > maxElem){\n                maxElem\
    \ = l(i)\n                maxElemIndex = i\n            }\n        }\n       \
    \ maxElem", '        l.foldLeft(0L)( (max, cur) => if (max > cur) max else cur
    )', "        val m = l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max)\
    \ elem else max )\n        m", '        l.foldLeft(0L)((max, x) => if (max < x)
    max else x)', "        val max = l.foldLeft(0L)((max, x) => if (x > max) x else\
    \ max)\n        max ", '        l.foldLeft(0L)( (max, x) => if (max < x) max else
    x)', "        val max = l.foldLeft(0L){ (max, elem) => if (elem > max) elem else\
    \ max }\n        max ", "        val max = scala.math.max(l)\n        l.find(_\
    \ == max).getOrElse(max)", "        val maxElem = l.foldLeft(0L) {\n         \
    \   (maxElem, elem) => if (elem > maxElem) elem else maxElem\n        }\n    \
    \    maxElem", "        val maxElem = l.foldLeft(0L)(_ + _)\n        l.max", " \
    \       val m = l.foldLeft(0L) {\n            (max: Long, elem: Long) => if (elem\
    \ > max) elem else max\n        }\n        m", "        val maxElem = l.foldLeft(0L)((maxElem,\
    \ elem) => if (elem > maxElem) elem else maxElem)\n        maxElem", "       \
    \ val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        l.last",
  '        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem > max) elem else max
    )', "        val max = l.foldLeft(0L) { (max, e) => if (e > max) e else max }\n\
    \        max ", "        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n\
    \        l.tail.foreach(x => if (x > maxElem) maxElem = x)\n        maxElem",
  "        val maxElem = l.head\n        val maxElemIndex = l.indexOf(0)\n       \
    \ for(i <- 1 to l.length){\n            if(l(i) > maxElem){\n                maxElem\
    \ = l(i)\n                maxElemIndex = i\n            }\n        }\n       \
    \ maxElem", '        l.foldLeft(0L)( (max: Long, x: Long) => if (x > max) x else
    max )', "        val maxElem = l.head\n        val maxElemIndex = l.indexWhere(x\
    \ => x == maxElem)\n        val maxElemIndex = maxElemIndex + 1\n        l.take(maxElemIndex).max",
  "        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n        l.tail.foreach(elem\
    \ => {\n            if (elem > maxElem)\n                maxElem = elem\n    \
    \    })\n        maxElem", "        val max = l.foldLeft(0L)((max, x) => if (x\
    \ > max) x else max)\n        l.max", "        val maxElem = l.head\n        val\
    \ maxIndex = l.indexOfMax\n        l.updated(maxIndex, maxElem)\n        maxElem",
  "        val max = l.foldLeft(0L){ (max, x) => if (x > max) x else max }\n     \
    \   l.indexOf(max)", '        l.foldLeft(0L)( (max, x) => if (max < x) max else
    x)', "        val max = l.foldLeft(0L)(_ + _)\n        l.max", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n        maxElem",
  "        val maxElem = l.foldLeft(0L)((max, elem) => math.max(max, elem))\n    \
    \    maxElem", '        l.foldLeft(0L)( (max: Long, x: Long) => if (x > max) x
    else max )', "        val max = scala.math.max(l)\n        l.indexOf(max)", " \
    \       val maxElem = l.foldLeft(0L){ (max, elem) => if (elem > max) elem else\
    \ max }\n        maxElem", '        l.foldLeft(0L)( (max, elem) => if (elem >
    max) elem else max )', '        l.foldLeft(0L)((max, element) => if (element >
    max) element else max)', '        l.foldLeft(0L)( (max: Long, elem: Long) => if
    (elem > max) elem else max )', "        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem", "        val m = l.foldLeft(0L)((max,\
    \ elem) => if (elem > max) elem else max)\n        m", "        val maxElem =\
    \ l.foldLeft(0L)(_ + _)\n        l.max", "        val maxElem = l.foldLeft(0L)\
    \ {\n            (maxElem, elem) => if (elem > maxElem) elem else maxElem\n  \
    \      }\n        maxElem", "        val m = l.foldLeft(0L)( (max,x) => if (x\
    \ > max) x else max )\n        m", "        val max = l.foldLeft(0L) { (max, e)\
    \ => if (e > max) e else max }\n        max", "        val max = l.foldLeft(0L){\
    \ (max, x) => if (x > max) x else max }\n        max ", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        l.last", "        val m = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        m", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        l.indexOf(max)", '        l.foldLeft(0L)(_
    + _)', "        val max = l.foldLeft(0L){ (max, e) => if (e > max) e else max\
    \ }\n        max ", '        l.foldLeft(0L)(_ + _)', "        val maxElem = l.foldLeft(0L)((maxElem,\
    \ elem) => if (elem > maxElem) elem else maxElem)\n        maxElem", "       \
    \ val max = l.foldLeft(0L)( (max, x) => if (x > max) x else max )\n        max ",
  '        l.foldLeft(0L){ (max, x) => if (max < x) max else x }', "        val max\
    \ = scala.math.max(l)\n        l.indexOf(max)", '        l.foldLeft(0L)( (max:
    Long, elem: Long) => if (elem > max) elem else max )', "        val maxElem =\
    \ l.foldLeft(0L) { (max, elem) =>\n            if (max < elem) elem else max\n\
    \        }\n        maxElem", "        val maxElem = l.foldLeft(0L){ (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem", "        val maxElem =\
    \ l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n        maxElem",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max) elem else max)\n\
    \        maxElem", "        val max = l.foldLeft(0L)((max, elem) => if (max <\
    \ elem) max else elem)\n        max ", "        val maxElem = l.head\n       \
    \ val maxIndex = 0\n        for (i <- 0 until l.length) {\n            if (l(i)\
    \ > maxElem) {\n                maxElem = l(i)\n                maxIndex = i\n\
    \            }\n        }\n        maxElem", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        l.last", "        val maxElem = l.head\n\
    \        val maxElemIndex = l.indexWhere(x => x == maxElem)\n        val maxElemIndex\
    \ = l.indexOf(maxElem)\n        val maxElemIndex = l.lastIndexWhere(x => x ==\
    \ maxElem)\n        val maxElemIndex = l.lastIndexOf(maxElem)\n        val maxElemIndex\
    \ = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n      \
    \  val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxElem)\n        val maxElemIndex = l.indexOf(maxElem)\n\
    \        val maxElemIndex = l.indexOf(maxEle", "        val maxElem = l.head\n\
    \        val maxIndex = l.indexOfMax\n        l.tail.foreach(x => {\n        \
    \    if (x > maxElem)\n                maxElem = x\n        })\n        maxElem",
  "        val maxElem = l.head\n        val maxElemIndex = l.indexOf(0)\n       \
    \ val maxElemIndexList = l.toList\n        val maxElemIndexListSize = maxElemIndexList.length\n\
    \        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndexListSize - 1\n        val maxElemIndexListSize = maxElemIndexListSize\
    \ - 1\n        val maxElemIndexListSize = maxElemIndexListSize - 1\n        val\
    \ maxElemIndexListSize = maxElemIndexListSize - 1\n        val maxElemIndexListSize\
    \ = maxElemIndex", '        l.foldLeft(0L)( (max: Long, elem: Long) => if (elem
    > max) elem else max )', "        val max = l.foldLeft(0L)((max, x) => if (x >\
    \ max) x else max)\n        l.max", '        l.foldLeft(0L)( (max: Long, x: Long)
    => if (x > max) x else max )', '        l.foldLeft(0L)( (max: Long, x: Long) =>
    if (x > max) x else max )', "        val maxElem = l.foldLeft(0L)((max, elem)\
    \ => if (max > elem) max else elem)\n        maxElem", "        val max = l.foldLeft(0L)(\
    \ (max, x) => if (x > max) x else max )\n        max ", "        val maxElem =\
    \ l.foldLeft(0L)(_ + _)\n        l.max", '        l.foldLeft(0L)( (max, element)
    => if (element > max) element else max )', "        val maxElem = l.head\n   \
    \     val maxElemIndex = l.indexOf(0)\n        val maxElemIndex2 = l.indexOf(maxElem)\n\
    \        val maxElemIndex3 = l.indexOf(maxElem)\n        val maxElemIndex4 = l.indexOf(maxElem)\n\
    \        val maxElemIndex5 = l.indexOf(maxElem)\n        val maxElemIndex6 = l.indexOf(maxElem)\n\
    \        val maxElemIndex7 = l.indexOf(maxElem)\n        val maxElemIndex8 = l.indexOf(maxElem)\n\
    \        val maxElemIndex9 = l.indexOf(maxElem)\n        val maxElemIndex10 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex11 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex12 = l.indexOf(maxElem)\n        val maxElemIndex13 = l.indexOf(maxElem)\n\
    \        val maxElemIndex14 = l.indexOf(maxElem)\n        val maxElemIndex15 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex16 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex17 = l.indexOf(maxElem)\n        val maxElemIndex18 = l.indexOf(maxElem)\n\
    \        val maxElemIndex19 = l.indexOf(maxElem)\n        val maxElemIndex20 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex21 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex22 = l.indexOf(maxElem)\n        val maxElemIndex23 = l.indexOf(maxElem)\n\
    \        val maxElemIndex24 = l.indexOf(maxElem)\n        val maxElemIndex25 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex26 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex27 = l.indexOf(maxElem)\n        val maxElemIndex28 = l.indexOf(maxElem)\n\
    \        val maxElemIndex29 = l.indexOf(maxElem)\n        val maxElemIndex30 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex31 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex32 = l.indexOf(maxElem)\n        val maxElemIndex33 = l.indexOf(maxElem)\n\
    \        val maxElemIndex34 = l.indexOf(maxElem)\n        val maxElemIndex35 =\
    \ l.indexOf(maxElem)\n        val maxElemIndex36 = l.indexOf(maxElem)\n      \
    \  val maxElemIndex37 = l.indexOf(maxElem)\n        val maxElemIndex38 = l.indexOf(maxElem)\n\
    \        val maxElemIndex39 = l.indexOf(maxElem)\n        val maxElemIndex40 =\
    \ l.indexOf(maxElem)", '        l.foldLeft(0L)( (max: Long, elem: Long) => if
    (elem > max) elem else max )', '        l.foldLeft(0L)((max, elem) => if (max
    < elem) elem else max)', "        val max = l.foldLeft(0L)(_ > _) ? _ : _\n  \
    \      l.foldLeft(max)(_ > _) ? _ : _", '        l.foldLeft(0L)((max, elem) =>
    math.max(max, elem))', "        val max = l.foldLeft(0L)((max, x) => if (x > max)\
    \ x else max)\n        l.indexOf(max)", '        l.foldLeft(0L) { (max, x) =>
    if (x > max) x else max }', '        l.foldLeft(0L)( (max, elem) => if (max >
    elem) max else elem )', "        l.foldLeft(0L){\n            case (max, x) =>\
    \ if (max < x) max else x\n        }", "        l.foldLeft(0L){\n            case\
    \ (acc, x) => if (acc > x) acc else x\n        }", '        l.foldLeft(0L)( (max,
    x) => if (max < x) max else x)', "        val max = scala.math.max(l)\n      \
    \  l.find(_ == max).getOrElse(max)", "        val m = l.foldLeft(0L){ (max, x)\
    \ => if (max < x) max else x }\n        m", '        l.foldLeft(0L)((max, elem)
    => if (max < elem) elem else max)', '        l.foldLeft(0L)( (max, elem) => if
    (elem > max) elem else max )', "        val maxElem = l.foldLeft(0L)( (maxElem,\
    \ elem) => if (elem > maxElem) elem else maxElem)\n        maxElem", "       \
    \ val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        max ",
  "        val max = l.foldLeft(0L)((max, current) => math.max(max, current))\n  \
    \      math.max(max, l.last)"]
stop_tokens:
- "\n    }\n"
