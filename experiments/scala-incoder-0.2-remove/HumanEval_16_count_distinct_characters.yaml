name: HumanEval_16_count_distinct_characters
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n    def countDistinctCharacters(string : String) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ["        val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.count(_ == string.length)", "        val chars = string.chars.toList\n\
    \        val distinctChars = chars.distinct.length\n        distinctChars", " \
    \       val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n   \
    \     chars.size", "        val chars = string.map(_.toLower)\n        val counts\
    \ = mutable.HashMap[Char, Int]()\n        chars.foreach(c => counts.getOrElse(c,\
    \ 0) + 1)\n        counts.values.sum", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.chars\n        val distinctChars = chars.distinct.length\n\
    \        distinctChars", "        val chars = string.map(c => c.toLowerCase +\
    \ c.toUpperCase).toSet\n        chars.size * (chars.size + 1)", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val charSet = mutable.Set[Char]()\n        string.foreach(c\
    \ => charSet += c)\n        charSet.size", "        val chars = string.map(_.toLower)\n\
    \        val charCount = mutable.HashMap[Char, Int]()\n        chars.foreach(c\
    \ => charCount(c) += 1)\n        charCount.values.sum", "        val chars = string.map(c\
    \ => c.toUpperCase).distinct\n        chars.count(_ == string.head).toLong", " \
    \       val chars = string.chars\n        val distinctChars = mutable.Set[Char]()\n\
    \        for (c <- chars) {\n            distinctChars += c\n        }\n     \
    \   distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(c => c.toLowerCase + c.toUpperCase\
    \ + c.toUpperCase)\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        counts.max", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size * (chars.size - 1) / 2", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.toSet.size // number of distinct characters", "        val chars\
    \ = string.map(c => c.toLowerCase + c.toUpperCase).distinct\n        chars.count(_\
    \ == string.length)", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ - 1) / 2", "        val chars = string.map(_.toLower)\n        val charSet =\
    \ chars.distinct\n        charSet.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val charSet = mutable.HashSet[Char]()\n        for (c <- string.toCharArray)\
    \ {\n            charSet += c\n        }\n        charSet.size", "        val\
    \ chars = string.map(_.toLower).toSet\n        chars.toList.distinct.length",
  "        val chars = string.map(_.toUpperCase).distinct.length\n        chars",
  "        val charSet = mutable.Set[Char]()\n        string.foreach(c => charSet.add(c))\n\
    \        charSet.size + 1", "        val chars = string.map(_.toLower)\n     \
    \   val distinctChars = chars.distinct\n        distinctChars.size", "       \
    \ val chars = string.chars\n        val distinctChars = chars.distinct.length\n\
    \        distinctChars", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.chars.toSet\n        val distinctChars = chars.toSeq.distinct.length\n\
    \        distinctChars", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val charSet\
    \ = mutable.HashSet[Char]()\n        for(c <- string.toCharArray) {\n        \
    \    if(!charSet.contains(c)) {\n                charSet += c\n            }\n\
    \        }\n        charSet.size", "        val chars = string.map(c => c.toLowerCase\
    \ + c.toUpperCase)\n        val distinctChars = chars.distinct\n        distinctChars.size",
  "        val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(c => c.toLowerCase\
    \ + c.toUpperCase).distinct\n        chars.count(_ == string) + 1", "        val\
    \ chars = string.map(_.toLower).toSet\n        chars.toSeq.length", "        val\
    \ chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.length", "        val chars = string.map(_.toLower)\n \
    \       val distinctChars = chars.distinct\n        distinctChars.size", "   \
    \     val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.chars\n        val distinctChars = chars.distinct.length\n\
    \        distinctChars", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toUpperCase).distinct\n        chars.count(_ == string.head.toUpperCase)",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(c => c.toLowerCase\
    \ + c.toUpperCase + c.toUpperCase).toSet\n        chars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.toList.distinct.length", "    \
    \    val charSet = mutable.HashSet[Char]()\n        for(i <- string.toCharArray)\
    \ {\n            charSet += i\n        }\n        charSet.size", "        val\
    \ chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n       \
    \ chars.size * (chars.size + 1)", "        val chars = string.map(_.toUpperCase).distinct.length\n\
    \        chars", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.chars.toList\n        val distinctChars = chars.distinct\n\
    \        val distinctCharCount = distinctChars.size\n        distinctCharCount",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toUpperCase)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.max",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val charSet = mutable.Set[Char]()\n   \
    \     for (c <- string.toCharArray) {\n            charSet += c\n        }\n \
    \       charSet.size", "        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val charSet = mutable.HashSet[Char]()\n        string.foreach(c\
    \ => charSet.add(c))\n        charSet.size + 1", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val charSet = mutable.Set[Char]()\n   \
    \     for (c <- string) {\n            charSet += c\n        }\n        charSet.size",
  "        val chars = string.chars.toList\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val counts = mutable.HashMap.empty[Char,\
    \ Int]\n        chars.foreach(c => counts(c) += 1)\n        counts.values.sum",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.length", "        val chars = string.map(c => c.toLowerCase\
    \ + c.toUpperCase)\n        val distinctChars = chars.distinct\n        distinctChars.count(c\
    \ => chars.count(_ == c) == 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val charSet = mutable.Set[Char]()\n        string.foreach(c => charSet.add(c))\n\
    \        charSet.size", "        val charSet = mutable.Set[Char]()\n        for(c\
    \ <- string.toCharArray) {\n            if(!charSet.contains(c)) {\n         \
    \       charSet += c\n            }\n        }\n        charSet.size", "     \
    \   val chars = string.map(c => c.toUpperCase).distinct.length\n        chars",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val charSet = mutable.Set[Char]()\n        for(c <- string.toCharArray) {\n\
    \            charSet += c\n        }\n        charSet.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.toSeq.length", " \
    \       val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n       \
    \ chars.size * (chars.size - 1) / 2", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        counts.foldLeft(0)((acc, x) => acc + x._2)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toSeq.length", "        val chars = string.map(c => c.toUpperCase).distinct\n\
    \        chars.count(_ == string.head.toUpperCase)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.chars\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.foldLeft(0)((count,\
    \ char) => count + chars.count(_ == char))", "        val chars = string.map(c\
    \ => c.toLowerCase + c.toUpperCase).distinct\n        chars.toList.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val charSet = mutable.HashSet[Char]()\n\
    \        string.foreach(c => charSet.add(c))\n        charSet.size", "       \
    \ val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val charSet = mutable.Set[Char]()\n        for(i <- 0 until string.length){\n\
    \            val c = string.charAt(i)\n            if(!charSet.contains(c)){\n\
    \                charSet.add(c)\n            }\n        }\n        charSet.size",
  "        val chars = string.map(c => c.toLowerCase + c.toUpperCase)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(c => c.toUpperCase).distinct\n        chars.count(_ == string.length)",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.chars\n  \
    \      val distinctChars = chars.distinct.length\n        distinctChars", "  \
    \      val chars = string.map(c => c.toUpperCase).distinct\n        chars.toSet.size\
    \ // number of distinct characters", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val charSet = mutable.HashSet[Char]()\n\
    \        for(c <- string.toCharArray) {\n            if(!charSet.contains(c))\
    \ {\n                charSet += c\n            }\n        }\n        charSet.size",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toUpperCase).distinct\n\
    \        chars.foldLeft(0)(_ + _.length)", "        val charSet = mutable.Set[Char]()\n\
    \        for(i <- 0 to string.length-1){\n            charSet += string.charAt(i)\n\
    \        }\n        charSet.size + 1", "        val chars = string.map(_.toLower)\n\
    \        val charSet = mutable.Set[Char]()\n        chars.foreach(charSet.add)\n\
    \        charSet.size ", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.toSeq.length", " \
    \       val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val charSet = mutable.Set[Char]()\n        string.foreach(c => charSet.add(c))\n\
    \        charSet.size", "        val chars = string.map(c => c.toLowerCase + c.toUpperCase).toSet\n\
    \        chars.size * (chars.size - 1) / 2", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(c => c.toUpperCase).distinct\n        chars.count(_\
    \ == string.head).toLong", "        val chars = string.map(c => c.toLowerCase\
    \ + c.toUpperCase + c.toUpperCase).distinct\n        chars.toList.size", "   \
    \     val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val charSet = chars.distinct\n\
    \        charSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)", "   \
    \     val chars = string.map(_.toLower)\n        val charsSet = chars.toSet\n\
    \        charsSet.size", "        val chars = string.map(_.toLower).toSet\n  \
    \      chars.toList.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.map(c => c.toLowerCase\
    \ + c.toUpperCase).toSet\n        chars.size * (chars.size - 1) / 2", "      \
    \  val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val charSet = mutable.Set[Char]()\n\
    \        for(c <- string.toCharArray) {\n            charSet += c\n        }\n\
    \        charSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toUpperCase)\n        val charsSet = chars.toSet\n        charsSet.size\
    \ // number of distinct characters", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.foldLeft(0)((acc, c)\
    \ => acc + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(c => c.toLowerCase + c.toUpperCase).distinct\n    \
    \    chars.count(_ == string.length)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.length", " \
    \       val chars = string.chars\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size"]
stop_tokens:
- "\n    }\n"
