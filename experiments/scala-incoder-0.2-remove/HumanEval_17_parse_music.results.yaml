language: scala
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_array = Array.ofDim[Long](notes_length)\n        notes.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n        val notes_length = notes_array.length\n        val notes_array\
    \ = Array.ofDim[Long](notes_length)\n        notes_array.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n        val notes_length = notes_array.length\n        val notes_array\
    \ = Array.ofDim[Long](notes_length)\n        notes_array.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n        val notes_length = notes_array.length\n        val notes_array\
    \ = Array.ofDim[Long](notes_length)\n        notes_array.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n        val notes_length = notes_array.length\n        val notes_array\
    \ = Array.ofDim[Long](notes_length)\n        notes_array.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n        val notes_length = notes_array.length\n        val notes_array\
    \ = Array.ofDim[Long](notes_length)\n        notes_array.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n        val notes_length = notes_array.length\n        val notes_array\
    \ = Array.ofDim[Long](notes_length)\n        notes_array.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n        val notes_length = notes_array.length\n        val notes_array\
    \ = Array.ofDim[Long](notes_length)\n        notes_array.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n        val notes_length = notes_array.length\n        val notes_array\
    \ = Array.ofDim[Long](notes_length)\n        notes_array.zipWithIndex.foreach\
    \ { case (note, index) =>\n            notes_array(index) = note.toLong\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_owk9shw.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_owk9shw.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = Array.ofDim[\e[35mLong\e\
    [0m](notes_length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_owk9shw.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_owk9shw.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = Array.ofDim[\e[35mLong\e\
    [0m](notes_length)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_owk9shw.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => {\n            val music_note\
    \ = music_string.split(\"o|\")\n            val music_note_length = music_note.length\n\
    \            val music_note_beats = music_note.map(music_note => {\n         \
    \       val music_note_length = music_note.length\n                val music_note_beats\
    \ = music_note.split(\".|\")\n                val music_note_beats_length = music_note_beats.length\n\
    \                val music_note_beats_length = music_note_beats_length.toInt\n\
    \                val music_note_beats_length = music_note_beats_length / 4\n \
    \               val music_note_beats_length = music_note_beats_length.toLong\n\
    \                music_note_beats_length\n            })\n            val music_note_beats_length\
    \ = music_note_beats.reduce((a, b) => a + b)\n            music_note_beats_length\n\
    \        })\n        val music_beats_length = music_beats.reduce((a, b) => a +\
    \ b)\n        music_beats_length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpecqh_r4a.scala:21:20 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mmusic_note_beats_length\e\
    [0m = music_note_beats_length.toInt\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_note_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpecqh_r4a.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mmusic_note_beats_length\e\
    [0m = music_note_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmusic_note_beats_length is already defined as \e[33mvalue\e[0m \e[35mmusic_note_beats_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpecqh_r4a.scala:23:20 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mmusic_note_beats_length\e[0m\
    \ = music_note_beats_length.toLong\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_note_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpecqh_r4a.scala:30:8 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        music_beats_length\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (music_beats_length\
    \ : Int)\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.size\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o\").length\n            music_string_beats * music_string_length\n\
    \        }).toList\n        val music_list_beats_length = music_list_beats.size\n\
    \        val music_list_beats_length = music_list_beats_length / music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length + music_list_beats_length\n        music_list_beats\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcmqaxcl2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / music_list_length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcmqaxcl2.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcmqaxcl2.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcmqaxcl2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length + music_list_beats_length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ ov"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val note_to_beats = note.split(\"\\\\\
    .|\")\n                val note_to_beats_length = note_to_beats.length\n     \
    \           val note_to_beats_beats = note_to_beats.map(note_to_beat => {\n  \
    \                  note_to_beat.split(\"o\").map(note_to_beat => {\n         \
    \               note_to_beat.toLong\n                    })\n                })\n\
    \                note_to_beats_beats.map(note_to_beats_beats => {\n          \
    \          note_to_beats_beats.sum\n                })\n            }).flatten\n\
    \            notes_beats.map(notes_beats => {\n                notes_beats.sum\n\
    \            })\n        }).flatten\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzdq3eij3.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                notes_beats.sum\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value sum\
    \ is not a member of Long\n\e[31m\e[31m-- Error: /tmp/tmpzdq3eij3.scala:29:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \     })\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m         \
    \     No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          \
    \    where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpzdq3eij3.scala:30:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m       \
    \ }).flatten\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m         \
    \ No ClassTag available for Array[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \   where:    B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660029126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(x => x.toInt)\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_last_beat = notes_beats.last\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat.length\n   \
    \     val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n  \
    \      val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n \
    \       val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length / 4\n\
    \        val notes_beats_last_beat_length = notes_beats_last_beat_length * 4\n\
    \        val notes_beats_last_beat_length = note\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5mcgizfa.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_beat_length\e\
    [0m = notes_beats_last_beat_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_beats_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_last_beat_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5mcgizfa.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_beat_length\e\
    [0m = notes_beats_last_beat_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_beats_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_last_beat_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5mcgizfa.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_beat_length\e\
    [0m = notes_beats_last_beat_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_beats_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_last_beat_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5mcgizfa.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_beat_length\e\
    [0m = notes_beats_last_beat_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_beats_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_b"
  stdout: ''
  timestamp: 1660029126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val beats_length\
    \ = notes_length / 4\n            val beats_length_2 = notes_length / 2\n    \
    \        val beats_length_1 = notes_length\n            val beats_length_3 = notes_length\
    \ * 3\n            val beats_length_4 = notes_length * 4\n            val beats_length_5\
    \ = notes_length * 5\n            val beats_length_6 = notes_length * 6\n    \
    \        val beats_length_7 = notes_length * 7\n            val beats_length_8\
    \ = notes_length * 8\n            val beats_length_9 = notes_length * 9\n    \
    \        val beats_length_10 = notes_length * 10\n            val beats_length_11\
    \ = notes_length * 11\n            val beats_length_12 = notes_length * 12\n \
    \           val beats_length_13 = notes_length * 13\n            val beats_length_14\
    \ = notes_length * 14\n            val beats_length_15 = notes_length * 15\n \
    \           val beats_length_16 = notes_length * 16\n            val beats_length_17\
    \ = notes_length * 17\n            val beats_length_18 = notes_length * 18\n \
    \           val beats_length_19 = notes_length * 19\n            val beats_length_20\
    \ = notes_length * 20\n            val beats_length_21 = notes_length * 21\n \
    \           val beats_length_22 = notes_length * 22\n            val beats_length_23\
    \ = notes_length * 23\n            val beats_length_24 = notes_length * 24\n \
    \           val beats_length_25 = notes_length * 25\n            val beats_length_26\
    \ = notes_length * 26\n            val beats_length_27 = notes_length * 27\n \
    \           val beats_length_28 = notes_length * 28\n            val beats_length_29\
    \ = notes_length * 29\n            val beats_length_30 = notes_length * 30\n \
    \           val beats_length_31 = notes_length * 31\n            val beats_length_32\
    \ = notes_length * 32\n            val beats_length_33 = notes_length * 33\n \
    \           val beats_length_34 = notes_length * 34\n            val beats_length_35\
    \ = notes_length * 35\n            val beats_length_36 = notes_length * 36\n \
    \           val beats_length_37 = notes_length * 37\n            \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7e53v5al.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp7e53v5al.scala:64:0 ----------------------------\e[0m\e[0m\n\e[31m64\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029119
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    val note = music_string.split(\"\
    .\").map(music_string => {\n                        val note = music_string.split(\"\
    -\").map(music_string => {\n                            val note = music_string.split(\"\
    /\").map(music_string => {\n                                val note = music_string.split(\"\
    \\\\\").map(music_string => {\n                                    val note =\
    \ music_string.split(\"#\").map(music_string => {\n                          \
    \              music_string.split(\"b\").map(music_string => {\n             \
    \                               music_string.split(\"#\").map(music_string =>\
    \ {\n                                                music_string.split(\"b\"\
    ).map(music_string => {\n                                                    music_string.split(\"\
    #\").map(music_string => {\n                                                 \
    \       music_string.split(\"b\").map(music_string => {\n                    \
    \                                        music_string.split(\"#\").map(music_string\
    \ => {\n                                                                music_string.split(\"\
    b\").map(music_string => {\n                                                 \
    \                   music_string.split(\"#\").map(music_string => {\n        \
    \                                                                music_string.split(\"\
    b\").map(music_string => {\n                                                 \
    \                           music_string.split(\"#\").map(music_string => {\n\
    \                                                                            \
    \    music_string.split(\"b\").map(music_string => {\n                       \
    \                                                             music_string.split(\"\
    #\").map(music_string => {\n                                                 \
    \                                       music_string.split(\"b\").map(music_string\
    \ => {\n                                                                     \
    \                       music_string.split(\"#\").map(music_string => {\n    \
    \                                                                            \
    \                music_string.split(\"b\").map(music_string => {\n           \
    \                                                                            \
    \             music_string.split(\"#\").map(music_string => {\n              \
    \                                                                            \
    \              music_string.split(\"b\").map(music_string => {\n             \
    \                                                                            \
    \                   music_string.split(\"#\").map(music_string => {\n        \
    \                                                                            \
    \                            music_string.split(\"b\").map(music_string => {\n\
    \                                                                            \
    \                                        music_string.split(\"#\").map(music_string\
    \ => {\n                                                                     \
    \                                                   music_string.split(\"b\").map(music_string\
    \ => {\n                                                                     \
    \                                                       music_string.split(\"\
    #\").map(music_string => {\n                                                 \
    \                                                                            \
    \   music_string.split(\"b\").map(music_string => {\n                        \
    \                                                                            \
    \                                music_string.split(\"#\").map(music_string =>\
    \ {\n                                                                        \
    \                                                                music_string.split(\"\
    b\").map(music_string => {\n                                                 \
    \                                                                            \
    \               music_string.split(\"#\").map(music_string => {\n            \
    \                                                                            \
    \                                                        music_string.split(\"\
    b\").map(music_string => {\n                                                 \
    \                                                                            \
    \                       music_string.split(\"#\").map(musi\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsti8ujtv.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsti8ujtv.scala:49:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpsti8ujtv.scala:58:0 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsti8ujtv.scala:47:176\
    \ -----------------------\e[0m\e[0m\n\e[31m47 |\e[0m                         \
    \                                                                            \
    \                                               music_string.split(\e[31m\"#\"\
    \e[0m).map(musi\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                            \
    \                                                             ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                         Not found:\
    \ musi\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpsti8ujtv.scala:55:5 ------------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     No ClassTag available for Array[B]\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \    where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmpsti8ujtv.scala:57:1\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m57 |\e[0m}\n\e[31m\e\
    [31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m No ClassTag available for Array[Array[B]]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m where:    B is a type variable\n6 errors found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o|\")\n            val music_string_beats_length = music_string_beats.length\n\
    \            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    \\\\.|\")\n                val music_string_beats_beats_beats_length = music_string_beats_beats_beats.length\n\
    \                val music_string_beats_beats_beats_beats = music_string_beats_beats_beats.map(music_string_beats_beats_beat\
    \ => {\n                    val music_string_beats_beats_beats_beats_length =\
    \ music_string_beats_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beat.split(\"o|\")\n                    val\
    \ music_string_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats.length\n\
    \                    val music_string_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats.map(music_string_beats_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beat.length\n                       \
    \ val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beat.split(\"\
    \\\\.|\")\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats.length\n                \
    \        val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beats_beat\
    \ => {\n                            val music_string_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beat.length\n           \
    \                 val musi\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:34:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxm3j12e.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_length\e[0m = music_string_beats_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxm3j12e.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\"\\\\.|\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Not found: music_string_beats_beat\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoxm3j12e.scala:42:1 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_inv = music_list_size_long.inv\n        val music_list_size_long_inv_int\
    \ = music_list_size_long_inv.asInstanceOf[Int]\n        val music_list_size_long_inv_long\
    \ = music_list_size_long_inv_int.asInstanceOf[Long]\n        val music_list_size_long_inv_long_inv\
    \ = music_list_size_long_inv_long.inv\n        val music_list_size_long_inv_long_inv_int\
    \ = music_list_size_long_inv_long_inv.asInstanceOf[Int]\n        val music_list_size_long_inv_long_inv_long\
    \ = music_list_size_long_inv_long_inv_int.asInstanceOf[Long]\n        val music_list_size_long_inv_long_inv_long_inv\
    \ = music_list_size_long_inv_long_inv_long.inv\n        val music_list_size_long_inv_long_inv_long_inv_int\
    \ = music_list_size_long_inv_long_inv_long_inv.asInstanceOf[Int]\n        val\
    \ music_list_size_long_inv_long_inv_long_inv_long = music_list_size_long_inv_long_inv_long_inv_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv = music_list_size_long_inv_long_inv_long_inv_long.inv\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv_int = music_list_size_long_inv_long_inv_long_inv_long_inv.asInstanceOf[Int]\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv_long = music_list_size_long_inv_long_inv_long_inv_long_inv_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv_long_inv = music_list_size_long_inv_long_inv_long_inv_long_inv_long.inv\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv_long_inv_int\
    \ = music_list_size_long_inv_long_inv_long\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzxt6kusy.scala:16:60 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv\e\
    [0m = music_list_size_long.inv\n\e[31m\e[31m   |\e[0m                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                        value inv is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzxt6kusy.scala:30:5 ---------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val beats = notes.map(note => {\n                val notes\
    \ = note.split(\"\\\\.|\")\n                notes.map(note => {\n            \
    \        val notes = note.split(\"o\")\n                    notes.map(note =>\
    \ {\n                        note.split(\"|\").map(note => {\n               \
    \             note.map(note => {\n                                note.toLong\n\
    \                            })\n                        })\n                \
    \    })\n                })\n            }).flatten.flatten.flatten\n        \
    \    beats.map(beat => {\n                beat / 4\n            })\n        }).flatten.flatten.flatten\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgjwflf87.scala:28:21 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                beat / \e[31m4\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue / is not a member of IndexedSeq[Long],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- Error: /tmp/tmpgjwflf87.scala:29:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            })\n\e[31m\e[31m   |\e[0m              ^\e\
    [0m\n\e[31m   |\e[0m              No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m              where:    B is a type variable\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpgjwflf87.scala:30:10 -----------------------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        }).flatten.flatten.flatten\n\e[31m\e[31m   |\e[0m\
    \          ^\e[0m\n\e[31m   |\e[0m          No ClassTag available for Array[B]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m          where:    B is a type variable\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length)\n\
    \            val beats_as_int = beats.toInt\n            val note_as_int = note.toInt\n\
    \            val beats_as_long = beats_as_int * 60\n            val note_as_long\
    \ = note_as_int * 60\n            val note_as_long_with_beats = note_as_long +\
    \ beats_as_long\n            note_as_long_with_beats\n        }).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_ivh_bwj.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m, music_string.length)\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36mbeats_as_int\e[0m = beats.toInt\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnote_as_int\e[0m = note.toInt\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mbeats_as_long\e[0m = beats_as_int * \e[31m60\e[0m\n\e[31m18 |\e[0m \
    \           \e[33mval\e[0m \e[36mnote_as_long\e[0m = note_as_int * \e[31m60\e\
    [0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnote_as_long_with_beats\e\
    [0m = note_as_long + beats_as_long\n\e[31m20 |\e[0m            note_as_long_with_beats\n\
    \e[31m21 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m       \
    \ Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n    \
    \    val notes_array = notes.map(x => x.toInt)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x/4)\n        val\
    \ notes_array = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x\
    \ => x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n        val notes_array = notes_array.map(x => x*4)\n        val notes_array\
    \ = notes_array.map(x => x*4)\n        val notes_array = notes_array.map(x =>\
    \ x*4)\n\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8nj_dakd.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.filter(\e\
    [36mx\e[0m => x != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8nj_dakd.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => x/\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8nj_dakd.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => x*\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8nj_dakd.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => x*\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8nj_dakd.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o|\")\n            val music_string_beats_length = music_string_beats.length\n\
    \            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    \\\\.|\")\n                val music_string_beats_beats_beats_length = music_string_beats_beats_beats.length\n\
    \                val music_string_beats_beats_beats_beats = music_string_beats_beats_beats.map(music_string_beats_beats_beat\
    \ => {\n                    val music_string_beats_beats_beats_beats_length =\
    \ music_string_beats_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beat.split(\"o|\")\n                    val\
    \ music_string_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats.length\n\
    \                    val music_string_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats.map(music_string_beats_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beat.length\n                       \
    \ val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beat.split(\"\
    \\\\.|\")\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats.length\n                \
    \        val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beats_beat\
    \ => {\n                            val music_string_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beat.length\n           \
    \                 val musi\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:34:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxm3j12e.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_length\e[0m = music_string_beats_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxm3j12e.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\"\\\\.|\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Not found: music_string_beats_beat\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoxm3j12e.scala:42:1 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => music_string.split(\"\
    o|\\\\.\\\\|\").length)\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4vj9whx.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_sum\e[0m\
    \ = music_list_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt4vj9whx.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4vj9whx.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_sum\e[0m\
    \ = music_list_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt4vj9whx.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4vj9whx.scala:21:12 -----------------"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_who\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4n1le7z.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_4n1le7z.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    val beats = music_string.split(\"\
    .\").map(music_string => {\n                        val beat = music_string.split(\"\
    /\").map(music_string => {\n                            val beats = music_string.split(\"\
    -\").map(music_string => {\n                                val beats = music_string.split(\"\
    /\").map(music_string => {\n                                    val beats = music_string.split(\"\
    -\").map(music_string => {\n                                        val beats\
    \ = music_string.split(\"/\").map(music_string => {\n                        \
    \                    val beats = music_string.split(\"-\").map(music_string =>\
    \ {\n                                                val beats = music_string.split(\"\
    /\").map(music_string => {\n                                                 \
    \   val beats = music_string.split(\"-\").map(music_string => {\n            \
    \                                            val beats = music_string.split(\"\
    /\").map(music_string => {\n                                                 \
    \           val beats = music_string.split(\"-\").map(music_string => {\n    \
    \                                                            val beats = music_string.split(\"\
    /\").map(music_string => {\n                                                 \
    \                   val beats = music_string.split(\"-\").map(music_string =>\
    \ {\n                                                                        val\
    \ beats = music_string.split(\"/\").map(music_string => {\n                  \
    \                                                          val beats = music_string.split(\"\
    -\").map(music_string => {\n                                                 \
    \                               val beats = music_string.split(\"/\").map(music_string\
    \ => {\n                                                                     \
    \               val beats = music_string.split(\"-\").map(music_string => {\n\
    \                                                                            \
    \            val beats = music_string.split(\"/\").map(music_string => {\n   \
    \                                                                            \
    \             val beats = music_string.split(\"-\").map(music_string => {\n  \
    \                                                                            \
    \                  val beats = music_string.split(\"/\").map(music_string => {\n\
    \                                                                            \
    \                        val beats = music_string.split(\"-\").map(music_string\
    \ => {\n                                                                     \
    \                                   val beats = music_string.split(\"/\").map(music_string\
    \ => {\n                                                                     \
    \                                       val beats = music_string.split(\"-\").map(music_string\
    \ => {\n                                                                     \
    \                                           val beats = music_string.split(\"\
    /\").map(music_string => {\n                                                 \
    \                                                                   val beats\
    \ = music_string.split(\"-\").map(music_string => {\n                        \
    \                                                                            \
    \                    val beats = music_string.split(\"/\").map(music_string =>\
    \ {\n                                                                        \
    \                                                    val beats = music_string.split(\"\
    -\").map(music_string => {\n                                                 \
    \                                                                            \
    \                   val beats = music_string.split(\"/\").map(music_string =>\
    \ {\n                                                                \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp35khg2p.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpp35khg2p.scala:54:0 ----------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(n => n.length.toLong).sum\n            val notes_last_beats = notes_beats\
    \ - notes_length\n            notes_last_beats\n        }).toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpql9x1s8j.scala:21)\n\tat Problem.main(tmpql9x1s8j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val music_notes = music_string.split(\"\
    o|\")\n            val music_notes_length = music_notes.length\n            val\
    \ music_notes_beats = music_notes.map(music_note => {\n                val music_note_length\
    \ = music_note.length\n                val music_note_beats = music_note_length\
    \ / 4\n                music_note_beats\n            }).sum\n            music_notes_beats\n\
    \        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqo6nkrag.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mmusic_notes\e[0m\
    \ = music_string.split(\e[31m\"o|\"\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e\
    [0m \e[36mmusic_notes_length\e[0m = music_notes.length\n\e[31m15 |\e[0m      \
    \      \e[33mval\e[0m \e[36mmusic_notes_beats\e[0m = music_notes.map(\e[36mmusic_note\e\
    [0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mmusic_note_length\e\
    [0m = music_note.length\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mmusic_note_beats\e\
    [0m = music_note_length / \e[31m4\e[0m\n\e[31m18 |\e[0m                music_note_beats\n\
    \e[31m19 |\e[0m            }).sum\n\e[31m20 |\e[0m            music_notes_beats\n\
    \e[31m21 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length)\n\
    \            val beats_as_ints = beats.toInt\n            val beats_as_ints_plus_one\
    \ = beats_as_int + 1\n            val beats_as_ints_plus_two = beats_as_int +\
    \ 2\n            val beats_as_ints_plus_three = beats_as_int + 3\n           \
    \ val beats_as_ints_plus_four = beats_as_int + 4\n            val beats_as_ints_plus_five\
    \ = beats_as_int + 5\n            val beats_as_ints_plus_six = beats_as_int +\
    \ 6\n            val beats_as_ints_plus_seven = beats_as_int + 7\n           \
    \ val beats_as_ints_plus_eight = beats_as_int + 8\n            val beats_as_ints_plus_nine\
    \ = beats_as_int + 9\n            val beats_as_ints_plus_ten = beats_as_int +\
    \ 10\n            val beats_as_ints_plus_eleven = beats_as_int + 11\n        \
    \    val beats_as_ints_plus_twelve = beats_as_int + 12\n            val beats_as_ints_plus_thirteen\
    \ = beats_as_int + 13\n            val beats_as_ints_plus_fourteen = beats_as_int\
    \ + 14\n            val beats_as_ints_plus_fifteen = beats_as_int + 15\n     \
    \       val beats_as_ints_plus_sixteen = beats_as_int + 16\n            val beats_as_ints_plus_seventeen\
    \ = beats_as_int + 17\n            val beats_as_ints_plus_eighteen = beats_as_int\
    \ + 18\n            val beats_as_ints_plus_nineteen = beats_as_int + 19\n    \
    \        val beats_as_ints_plus_twenty = beats_as_int + 20\n            val beats_as_ints_plus_twenty_one\
    \ = beats_as_int + 21\n            val beats_as_ints_plus_twenty_two = beats_as_int\
    \ + 22\n            val beats_as_ints_plus_twenty_three = beats_as_int + 23\n\
    \            val beats_as_ints_plus_twenty_four = beats_as_int + 24\n        \
    \    val beats_as_ints_plus_twenty_five = beats_as_int + 25\n            val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp798ndbsx.scala:41:15 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp798ndbsx.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp798ndbsx.scala:52:0 ----------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp798ndbsx.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats_as_ints_plus_one\e\
    [0m = beats_as_int + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                   Not found: beats_as_int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp798ndbsx.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mbeats_as_ints_plus_two\e\
    [0m = beats_as_int + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                   Not found: beats_as_int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp798ndbsx.scala:18:43 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mbeats_as_ints_plus_three\e\
    [0m = beats_as_int + \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                       Not found: beats_as_int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation availa"
  stdout: ''
  timestamp: 1660029121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o|\")\n            val music_string_beats_length = music_string_beats.length\n\
    \            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beat_length = music_string_beat.length\n\
    \                val music_string_beat_beats = music_string_beat.split(\"\\\\\
    .|\")\n                val music_string_beat_beats_length = music_string_beat_beats.length\n\
    \                val music_string_beat_beats_beats = music_string_beat_beats.map(music_string_beat_beat\
    \ => {\n                    val music_string_beat_beat_length = music_string_beat_beat.length\n\
    \                    val music_string_beat_beat_beats = music_string_beat_beat.split(\"\
    o|\")\n                    val music_string_beat_beat_beats_length = music_string_beat_beat_beats.length\n\
    \                    val music_string_beat_beat_beats_beats = music_string_beat_beat_beats.map(music_string_beat_beat_beat\
    \ => {\n                        val music_string_beat_beat_beat_length = music_string_beat_beat_beat.length\n\
    \                        val music_string_beat_beat_beat_beats = music_string_beat_beat_beat.split(\"\
    \\\\.|\")\n                        val music_string_beat_beat_beat_beats_length\
    \ = music_string_beat_beat_beat_beats.length\n                        val music_string_beat_beat_beat_beats_beats\
    \ = music_string_beat_beat_beat_beats.map(music_string_beat_beat_beat_beat =>\
    \ {\n                            val music_string_beat_beat_beat_beat_length =\
    \ music_string_beat_beat_beat_beat.length\n                            val music_string_beat_beat_beat_beat_beats\
    \ = music_string_beat_beat_beat_beat.split(\"o|\")\n                         \
    \   val music_string_beat_beat_beat_beats_length = music_string_beat_beat_beat_beats_length\n\
    \                            val music_string_beat_beat_beat_beats_beats = music_string_beat_beat_beat_beats_beats.map(music_string_beat_be\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcu7chvx.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcu7chvx.scala:36:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m36 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmprcu7chvx.scala:45:0 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprcu7chvx.scala:44:1\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val beats = notes.map(note => {\n                val note =\
    \ note.trim\n                val beats = note.split(\"\\\\.|\").map(note => {\n\
    \                    val note = note.trim\n                    val beats = note.split(\"\
    o\").map(note => {\n                        val note = note.trim\n           \
    \             val beats = note.split(\"|\").map(note => {\n                  \
    \          val note = note.trim\n                            val beats = note.split(\"\
    |\").map(note => {\n                                val note = note.trim\n   \
    \                             val beats = note.split(\"|\").map(note => {\n  \
    \                                  val note = note.trim\n                    \
    \                val beats = note.split(\"|\").map(note => {\n               \
    \                         val note = note.trim\n                             \
    \           val beats = note.split(\"|\").map(note => {\n                    \
    \                        val note = note.trim\n                              \
    \              val beats = note.split(\"|\").map(note => {\n                 \
    \                               val note = note.trim\n                       \
    \                         val beats = note.split(\"|\").map(note => {\n      \
    \                                              val note = note.trim\n        \
    \                                            val beats = note.split(\"|\").map(note\
    \ => {\n                                                        val note = note.trim\n\
    \                                                        val beats = note.split(\"\
    |\").map(note => {\n                                                         \
    \   val note = note.trim\n                                                   \
    \         val beats = note.split(\"|\").map(note => {\n                      \
    \                                          val note = note.trim\n            \
    \                                                    val beats = note.split(\"\
    |\").map(note => {\n                                                         \
    \           val note = note.trim\n                                           \
    \                         val beats = note.split(\"|\").map(note => {\n      \
    \                                                                  val note =\
    \ note.trim\n                                                                \
    \        val beats = note.split(\"|\").map(note => {\n                       \
    \                                                     val note = note.trim\n \
    \                                                                           val\
    \ beats = note.split(\"|\").map(note => {\n                                  \
    \                                              val note = note.trim\n        \
    \                                                                        val beats\
    \ = note.split(\"|\").map(note => {\n                                        \
    \                                            val note = note.trim\n          \
    \                                                                          val\
    \ beats = note.split(\"|\").map(note => {\n                                  \
    \                                                      val note = note.trim\n\
    \                                                                            \
    \            val beats = note.split(\"|\").map(note => {\n                   \
    \                                                                         val\
    \ note = note.trim\n                                                         \
    \                                   val beats = note.split(\"|\").map(note =>\
    \ {\n                                                                        \
    \                        val note = note.trim\n                              \
    \                                                                  val beats =\
    \ note.split(\"|\").map(note => {\n                                          \
    \                                                                          val\
    \ note = note.trim\n                                                         \
    \                                                           val beats = note.split(\"\
    |\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpupchnkg8.scala:58:139 ----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m                                                    \
    \                                                                \e[33mval\e[0m\
    \ \e[36mbeats\e[0m = note.split(\"|\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                        unclosed string literal\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpupchnkg8.scala:60:34 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpupchnkg8.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => note.length.toLong).sum\n            notes_beats.toLong\
    \ * notes_length\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_xox_yny.scala:20)\n\tat Problem.main(tmp_xox_yny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_length = music_list_size / 4\n        val music_list_remainder\
    \ = music_list_size % 4\n        val music_list_quarter = music_list_size / 4\n\
    \        val music_list_quarter_length = music_list_quarter / 4\n        val music_list_quarter_quarter\
    \ = music_list_quarter % 4\n        val music_list_half = music_list_length -\
    \ music_list_remainder\n        val music_list_half_length = music_list_half /\
    \ 4\n        val music_list_half_quarter = music_list_half % 4\n        val music_list_whole\
    \ = music_list_length - music_list_remainder - music_list_quarter - music_list_quarter_quarter\
    \ - music_list_half_length - music_list_half_quarter\n        val music_list_whole_length\
    \ = music_list_whole / 4\n        val music_list_whole_quarter = music_list_whole\
    \ % 4\n        val music_list_whole_half = music_list_whole_length - music_list_whole_quarter\n\
    \        val music_list_whole_half_length = music_list_whole_half / 4\n      \
    \  val music_list_whole_half_quarter = music_list_whole_half % 4\n        val\
    \ music_list_whole_whole = music_list_whole_length - music_list_whole_quarter\
    \ - music_list_whole_half_length - music_list_whole_half_quarter\n        val\
    \ music_list_whole_whole_length = music_list_whole_whole / 4\n        val music_list_whole_whole_quarter\
    \ = music_list_whole_whole % 4\n        val music_list_whole_whole_half = music_list_whole_whole_length\
    \ - music_list_whole_whole_quarter\n        val music_list_whole_whole_half_length\
    \ = music_list_whole_whole_half / 4\n        val music_list_whole_whole_half_quarter\
    \ = music_list_whole_whole_half % 4\n        val music_list_whole_whole_whole\
    \ = music_list_whole_whole_length - music_list_whole_whole_quarter - music_list_whole_whole_half_length\
    \ - music_list_whole_whole_half_quarter - music_list_whole_whole_whole\n     \
    \   val music_list_whole_whole_whole_length = music_list_whole_whole_whole / 4\n\
    \        val music_list_whole_who\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6cctn5ij.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6cctn5ij.scala:34:183\
    \ --------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_whole_whole_whole\e[0m = music_list_whole_whole_length - music_list_whole_whole_quarter\
    \ - music_list_whole_whole_half_length - music_list_whole_whole_half_quarter -\
    \ music_list_whole_whole_whole\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0m                 Recursive \e[33mvalue\e[0m \e\
    [35mmusic_list_whole_whole_whole\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6cctn5ij.scala:37:5 ---------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_length\
    \ = notes_beats.sum\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqteul22b.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqteul22b.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqteul22b.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqteul22b.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqteul22b.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_beats = music_string.split(\"o\")\n            val music_string_beats_length\
    \ = music_string_beats.length\n            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    .\").map(music_string_beats_beat => {\n                    val music_string_beats_beats_beats_length\
    \ = music_string_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats\
    \ = music_string_beats_beats_beat.split(\"|\").map(music_string_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beat.length\n                        val music_string_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beat.length\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beat.length\n                       \
    \ val music_string_beats_beats_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beat.length\n                 \
    \       val music_string_beats_beats_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beat.length\n     \
    \                   val music_string_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beat.length\n     \
    \                   val music_string_beats_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:33:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1p4gptt7.scala:18:54\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_length\e[0m = music_string_beats_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1p4gptt7.scala:19:53\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\".\"\e[0m).map(\e[36mmusic_string_beats_beat\e[0m => {\n\e[31m\e[31m   |\e\
    [0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1p4gptt7.scala:41:1\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val music_note = music_string.substring(0,\
    \ 1)\n            val music_length = music_string.substring(music_note.length,\
    \ music_string.length)\n            val music_beats = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_beats.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n            val music_length = music_length.substring(0,\
    \ 1)\n            val music_length = music_length.substring(music_length.length,\
    \ music_length.length)\n\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmwz46ax8.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpmwz46ax8.scala:56:0 ----------------------------\e[0m\e[0m\n\e[31m56\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmwz46ax8.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mmusic_length\e[0m =\
    \ music_length.substring(music_beats.length, music_length.length)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_length is already defined as \e[33mvalue\e[0m \e[35mmusic_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmwz46ax8.scala:17:16 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m            \e[33mval\e[0m \e[36mmusic_length\e[0m = music_length.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_length is already defined as \e[33mvalue\e[0m \e[35mmusic_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmwz46ax8.scala:18:16 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m            \e[33mval\e[0m \e[36mmusic_length\e[0m = music_length.substring(music_length.length,\
    \ music_length.length)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_length is already defined as \e[33mvalue\e[0m \e[35mmusic_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1660029133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => music_string.split(\"\
    o|\\\\.|\").length)\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_sum\e[0m\
    \ = music_list_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_sum\e[0m\
    \ = music_list_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:21:12 -----------------"
  stdout: ''
  timestamp: 1660029138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => music_string.split(\"o|\")(0).length).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ixwmsxn.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m)(\e[31m0\e[0m).length).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beats = music_string.substring(0, 1)\n           \
    \     val rest = music_string.substring(1)\n                beats.toLong * rest.length\n\
    \            }).sum\n            note -> beats\n        }).map(music_string =>\
    \ {\n            music_string._1 -> music_string._2\n        }).toList.sortBy(music_string\
    \ => {\n            music_string._1\n        }).reverse.map(music_string => {\n\
    \            music_string._1\n        }).map(music_string => {\n            music_string._2\n\
    \        }).reverse.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfkqcziy.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            music_string._2\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value _2 is not a\
    \ member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_beats = music_list.map(music_string => music_string.split(\"\
    o|\\\\.|\"))\n        val music_list_beats_size = music_list_beats.size\n    \
    \    val music_list_beats_size = music_list_beats_size.toInt\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size.toInt\n\
    \        val music_list_beats_size = music_list_beats_size.toInt\n        val\
    \ music_list_beats_size = music_list_beats_size.toInt\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size.toInt\n\
    \        val music_list_beats_size = music_list_beats_size.toInt\n        val\
    \ music_list_beats_size = music_list_beats_size.toInt\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size.toInt\n\
    \        val music_list_beats_size = music_list_beats_size.toInt\n        val\
    \ music_list_beats_size = music_list_beats_size.toInt\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size.toInt\n\
    \        val music_list_beats_size = music_list_beats_size.toInt\n        val\
    \ music_list_beats_size = music_list_beats_size.toInt\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size.toInt\n\
    \        val music_list_beats_size = music_list_beats_size.toInt\n        val\
    \ music_list_beats_size = music_list_beats_size.toInt\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size.toInt\n\
    \        val music_list_beats_size = music_list_beats_size.toInt\n        val\
    \ music_list_beats_size = music_list_beats_size.toInt\n        val music_list_beats_size\
    \ = music_list_beats_size.toInt\n        val music_list_beats_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvft2hyoc.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvft2hyoc.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_size\e[0m = music_list_beats_size.toInt\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmusic_list_beats_size is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_list_beats_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvft2hyoc.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_size\e\
    [0m = music_list_beats_size.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_size is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvft2hyoc.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_size\e\
    [0m = music_list_beats_size.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_size is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvft2hyoc.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_size\e\
    [0m = music_list_beats_size.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_size is already defined as \e[33mvalue\e\
    [0m \e["
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o|\")\n            val music_string_beats_length = music_string_beats.length\n\
    \            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    \\\\.|\")\n                val music_string_beats_beats_beats_length = music_string_beats_beats_beats.length\n\
    \                val music_string_beats_beats_beats_beats = music_string_beats_beats_beats.map(music_string_beats_beats_beat\
    \ => {\n                    val music_string_beats_beats_beats_beats_length =\
    \ music_string_beats_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beat.split(\"o|\")\n                    val\
    \ music_string_beats_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats.length\n\
    \                    val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beat.length\n                 \
    \       val music_string_beats_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beats_beat.split(\"\
    \\\\.|\")\n                        val music_string_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats.length\n          \
    \              val music_string_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beats_beats_beats_beats_beat\
    \ => {\n                            val musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe5fx5ct1.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe5fx5ct1.scala:33:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpe5fx5ct1.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe5fx5ct1.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_length\e[0m = music_string_beats_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe5fx5ct1.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\"\\\\.|\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Not found: music_string_beats_beat\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe5fx5ct1.scala:41:1 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => music_string.split(\"\
    o\"))\n        val music_list_beats_length = music_list_beats.length\n       \
    \ val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length\
    \ = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length * 4\n   \
    \     val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length * 4\n   \
    \     val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length * 4\n   \
    \     val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length * 4\n   \
    \     val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length * 4\n   \
    \     val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length * 4\n   \
    \     val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length * 4\n        val music_list_beats_length = music_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsxzqstgq.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsxzqstgq.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsxzqstgq.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsxzqstgq.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group "
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j6_eir4.scala:13:4 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp7j6_eir4.scala:12:1966\
    \ ---------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m =>"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beats = music_string.substring(0, 1)\n           \
    \     beats.toLong\n            })\n            note.toLong :: beats\n       \
    \ }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz4fvgl57.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            note.toLong :: beats\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \    value :: is not a member of Array[Long]\n\e[31m\e[31m-- Error: /tmp/tmpz4fvgl57.scala:19:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ }).flatten.toList\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m  \
    \        No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m       \
    \   where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => note.length.toLong)\n            val notes_beats_sum = notes_beats.sum\n\
    \            val notes_beats_count = notes_beats.length\n            val notes_beats_count_sum\
    \ = notes_beats_count.sum\n            val notes_beats_count_count_sum = notes_beats_count_sum.toLong\n\
    \            val notes_beats_count_count_count_sum = notes_beats_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_sum = notes_beats_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_sum = notes_beats_count_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_count_sum = notes_beats_count_count_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_count_count_sum = notes_beats_count_count_count_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_sum.toLong\n       \
    \     val notes_beats_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_sum.toLong\n \
    \           val notes_beats_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \            val notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\
    \ = notes_beats_count_count_count_count_count_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbq3b4_qf.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpbq3b4_qf.scala:43:0 ----------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbq3b4_qf.scala:18:58 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats_count_sum\e\
    [0m = notes_beats_count.sum\n\e[31m\e[31m   |\e[0m                           \
    \             ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                    value sum is not a member of Int\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpbq3b4_qf.scala:29:112 -----------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: notes_beats_count_count_count_count_count_count_count_count_count_count_count_count_sum\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbq3b4_qf.scala:32:118\
    \ -----------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnotes_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_sum\e\
    [0m = notes_beats_count_count_count_count_count_\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n    \
    \    val beats_count = notes_count / 4\n        val notes_array = notes.map(_.toInt)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val notes_array = notes_array.take(notes_count)\n\
    \        val notes_array = notes_array.reverse\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpuq70aaew.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpuq70aaew.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq70aaew.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.take(notes_count)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq70aaew.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuq70aaew.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.take(notes_count)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded "
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.map(_.length).sum\n            val\
    \ notes_beats = notes.map(_.length / 4).sum\n            notes_beats * notes_length\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgm4qw_fn.scala:17:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o|\"\e[0m)\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e[0m = notes.map(_.length).sum\n\
    \e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats\e[0m = notes.map(_.length\
    \ / \e[31m4\e[0m).sum\n\e[31m16 |\e[0m            notes_beats * notes_length\n\
    \e[31m17 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m       \
    \ Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => music_string.split(\"\
    o|\\\\.|\").length)\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_length = music_list_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_sum\e[0m\
    \ = music_list_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_sum\e[0m\
    \ = music_list_beats.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdyj44k0.scala:21:12 -----------------"
  stdout: ''
  timestamp: 1660029138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    val beats = music_string.split(\"\
    .\").map(music_string => {\n                        val beat = music_string.split(\"\
    |\").map(music_string => {\n                            val beats = music_string.split(\"\
    |\").map(music_string => {\n                                val beat = music_string.split(\"\
    |\").map(music_string => {\n                                    val beats = music_string.split(\"\
    |\").map(music_string => {\n                                        val beat =\
    \ music_string.split(\"|\").map(music_string => {\n                          \
    \                  val beats = music_string.split(\"|\").map(music_string => {\n\
    \                                                val beat = music_string.split(\"\
    |\").map(music_string => {\n                                                 \
    \   val beats = music_string.split(\"|\").map(music_string => {\n            \
    \                                            val beat = music_string.split(\"\
    |\").map(music_string => {\n                                                 \
    \           val beats = music_string.split(\"|\").map(music_string => {\n    \
    \                                                            val beat = music_string.split(\"\
    |\").map(music_string => {\n                                                 \
    \                   val beats = music_string.split(\"|\").map(music_string =>\
    \ {\n                                                                        val\
    \ beat = music_string.split(\"|\").map(music_string => {\n                   \
    \                                                         val beats = music_string.split(\"\
    |\").map(music_string => {\n                                                 \
    \                               val beat = music_string.split(\"|\").map(music_string\
    \ => {\n                                                                     \
    \               val beats = music_string.split(\"|\").map(music_string => {\n\
    \                                                                            \
    \            val beat = music_string.split(\"|\").map(music_string => {\n    \
    \                                                                            \
    \            val beats = music_string.split(\"|\").map(music_string => {\n   \
    \                                                                            \
    \                 val beat = music_string.split(\"|\").map(music_string => {\n\
    \                                                                            \
    \                        val beats = music_string.split(\"|\").map(music_string\
    \ => {\n                                                                     \
    \                                   val beat = music_string.split(\"|\").map(music_string\
    \ => {\n                                                                     \
    \                                       val beats = music_string.split(\"|\").map(music_string\
    \ => {\n                                                                     \
    \                                           val beat = music_string.split(\"|\"\
    ).map(music_string => {\n                                                    \
    \                                                                val beats = music_string.split(\"\
    |\").map(music_string => {\n                                                 \
    \                                                                       val beat\
    \ = music_string.split(\"|\").map(music_string => {\n                        \
    \                                                                            \
    \                        val beats = music_string.split(\"|\").map(music_string\
    \ => {\n                                                                     \
    \                                                                           val\
    \ beat = music_string.split(\"|\").map(music_string => {\n                   \
    \                                             \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfvjoyitx.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfvjoyitx.scala:54:0 ----------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_notes = music_list.map(music_string => music_string.split(\"\
    o\"))\n        val music_notes_length = music_notes.length\n        val music_notes_length\
    \ = music_notes_length / 4\n        val music_notes_length = music_notes_length.toInt\n\
    \        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3ye59hd5.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3ye59hd5.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_length\e[0m = music_notes_length / \e[31m4\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m \e[35mmusic_notes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3ye59hd5.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m = music_notes_length.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3ye59hd5.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3ye59hd5.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote t"
  stdout: ''
  timestamp: 1660029138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_inv = music_list_size_long.inv\n        val music_list_size_long_inv_inv\
    \ = music_list_size_long_inv.inv\n        val music_list_size_long_inv_inv_inv\
    \ = music_list_size_long_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val\
    \ music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n       \
    \ val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n   \
    \     val music_list_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph04jajva.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph04jajva.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e[0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph04jajva.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph04jajva.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length).trim\n\
    \            val beats_array = beats.split(\"o\").map(beat => beat.toLong)\n \
    \           val beats_array_2 = beats.split(\"o|\").map(beat => beat.toLong)\n\
    \            val beats_array_3 = beats.split(\".|\").map(beat => beat.toLong)\n\
    \            val beats_array_4 = beats.split(\"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpowejg3sp.scala:18:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mbeats_array_4\e[0m =\
    \ beats.split(\"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                            unclosed string literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpowejg3sp.scala:20:34 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  ')'\
    \ expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpowejg3sp.scala:29:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpowejg3sp.scala:20:13\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \       too many arguments for \e[33mconstructor\e[0m \e[35mmain\e[0m in \e[33mclass\e\
    [0m \e[35mmain\e[0m: (): main\n\e[31m\e[31m-- Error: /tmp/tmpowejg3sp.scala:26:5\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\
    \e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m     where:    B is a type variable\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o\").length\n            music_string_beats * music_string_length\n\
    \        }).toList\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length / 2\n        val music_list_beats_length = music_list_beats_length\
    \ * 2\n        val music_list_beats_length = music_list_beats_length / 1\n   \
    \     val music_list_beats_length = music_list_beats_length * 1\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length / 2\n   \
    \     val music_list_beats_length = music_list_beats_length * 2\n        val music_list_beats_length\
    \ = music_list_beats_length / 1\n        val music_list_beats_length = music_list_beats_length\
    \ * 1\n        val music_list_beats_length = music_list_beats_length / 4\n   \
    \     val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length / 2\n        val music_list_beats_length = music_list_beats_length\
    \ * 2\n        val music_list_beats_length = music_list_beats_length / 1\n   \
    \     val music_list_beats_length = music_list_beats_length * 1\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length / 2\n   \
    \     val music_list_beats_length = music_list_beats_length * 2\n        val music_list_beats_length\
    \ = music_list_beats_length / 1\n        val music_list_beats_length = music_list_beats_length\
    \ * 1\n        val music_list_beats_length = musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ku75dv8.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ku75dv8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ku75dv8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ku75dv8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group "
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beats = music_string.substring(0, 1)\n           \
    \     val rest = music_string.substring(1)\n                beats.toLong * rest.length\n\
    \            }).sum\n            note -> beats\n        }).map(music_string =>\
    \ {\n            music_string._1 -> music_string._2\n        }).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp41e0_lu8.scala:22:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15\
    \ |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m17 |\e[0m                beats.toLong\
    \ * rest.length\n\e[31m18 |\e[0m            }).sum\n\e[31m19 |\e[0m          \
    \  note -> beats\n\e[31m20 |\e[0m        }).map(\e[36mmusic_string\e[0m => {\n\
    \e[31m21 |\e[0m            music_string._1 -> music_string._2\n\e[31m22 |\e[0m\
    \        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    List[\e[1m\e[31m(\e[0m\e[1m\e[31mString\e[0m\e[1m\e[31m,\e[0m\e\
    [1m\e[31m \e[0mLong\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    val beats = music_string.split(\"\
    .\").map(music_string => {\n                        music_string.toLong\n    \
    \                })\n                    beats.sum\n                })\n     \
    \           note.sum\n            })\n            notes.sum\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp93064j9x.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[Long]\n\e\
    [31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[Long]\n\e[31m13 |\e[0m   \
    \         \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m14 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e\
    [31m15 |\e[0m                    \e[33mval\e[0m \e[36mbeats\e[0m = music_string.split(\e\
    [31m\".\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m16 |\e[0m            \
    \            music_string.toLong\n\e[31m17 |\e[0m                    })\n\e[31m18\
    \ |\e[0m                    beats.sum\n\e[31m19 |\e[0m                })\n\e[31m20\
    \ |\e[0m                note.sum\n\e[31m21 |\e[0m            })\n\e[31m22 |\e\
    [0m            notes.sum\n\e[31m23 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_array = notes.map(_.toInt).toArray\n        val notes_length =\
    \ notes_array.length\n        val notes_length = notes_array.length\n        val\
    \ notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array.length\n\
    \        val notes_length = notes_array.length\n        val notes_length = notes_array\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk4zuox3e.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk4zuox3e.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk4zuox3e.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk4zuox3e.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_length is already defined as \e[33mvalue\e[0m \e[35mnotes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk4zuox3e.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_length\e[0m = notes_array.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnot"
  stdout: ''
  timestamp: 1660029141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_int = music_list_size_long.asInstanceOf[Int]\n        val\
    \ music_list_size_long_long_int = music_list_size_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_int = music_list_size_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuxjh9i8z.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuxjh9i8z.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpuxjh9i8z.scala:20:59 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_int.asInstanceOf[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 64\n        val musi\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1wa_w9ez.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1wa_w9ez.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole\
    \ / \e[31m16\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_half is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_half\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1wa_w9ez.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_quarter\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m32\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_quarter is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_quarter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wa_w9ez.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_whole\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m64\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1660029147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_who\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4n1le7z.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_4n1le7z.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.map(_.length).sum\n            val\
    \ notes_beats = notes.map(_.length.toLong).sum\n            val notes_beats_length\
    \ = notes_beats / notes_length\n            notes_beats_length\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.parseMusic$$anonfun$1(tmp6xk84lk_.scala:16)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp6xk84lk_.scala:18)\n\
    \tat Problem$.main(tmp6xk84lk_.scala:21)\n\tat Problem.main(tmp6xk84lk_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1)\n                beat.toLong * 4\n \
    \           }).reduceLeft(_ + _)\n            beats.toLong * note.toLong\n   \
    \     }).reduceLeft(_ + _)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg38q4oow.scala:20:21\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15\
    \ |\e[0m                \e[33mval\e[0m \e[36mbeat\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m17 |\e[0m                beat.toLong\
    \ * \e[31m4\e[0m\n\e[31m18 |\e[0m            }).reduceLeft(_ + _)\n\e[31m19 |\e\
    [0m            beats.toLong * note.toLong\n\e[31m20 |\e[0m        }).reduceLeft(_\
    \ + _)\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:   \
    \ Long\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.map(_.length).sum\n            val\
    \ notes_beats = notes.map(_.length.toLong).sum\n            notes_beats % 4\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9200pbg.scala:20)\n\tat Problem.main(tmph9200pbg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_int = music_list_size_long.asInstanceOf[Int]\n        val\
    \ music_list_size_long_long_int = music_list_size_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_int = music_list_size_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuxjh9i8z.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuxjh9i8z.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpuxjh9i8z.scala:20:59 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_int.asInstanceOf[\e[35mLong\e[0m]\n\
    \e[31m\e[31m   |\e[0m                              "
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_quarter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpou0wlf2o.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpou0wlf2o.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole_whole\
    \ / \e[31m32\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole_half is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole_half\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpou0wlf2o.scala:34:5 ---------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => music_string.split(\"\
    o|\\\\.|\").length).sum\n        val music_notes = music_list.map(music_string\
    \ => music_string.split(\"o|\\\\.|\").length).reduce((a, b) => a + b)\n      \
    \  val music_notes_total = music_notes / music_beats\n        val music_notes_remainder\
    \ = music_notes % music_beats\n        val music_notes_remainder_list = music_notes_remainder.toList.map(music_notes_remainder\
    \ => music_notes_remainder + music_beats)\n        val music_notes_remainder_list_length\
    \ = music_notes_remainder_list.length\n        val music_notes_remainder_list_sum\
    \ = music_notes_remainder_list.sum\n        val music_notes_remainder_list_average\
    \ = music_notes_remainder_list_sum / music_notes_list_length\n        val music_notes_remainder_list_average_length\
    \ = music_notes_remainder_list_average.length\n        val music_notes_remainder_list_average_sum\
    \ = music_notes_remainder_list_average.sum\n        val music_notes_remainder_list_average_average\
    \ = music_notes_remainder_list_average_sum / music_notes_list_length\n       \
    \ val music_notes_remainder_list_average_average_length = music_notes_remainder_list_average_average.length\n\
    \        val music_notes_remainder_list_average_average_sum = music_notes_remainder_list_average_average.sum\n\
    \        val music_notes_remainder_list_average_average_average = music_notes_remainder_list_average_average_sum\
    \ / music_notes_list_length\n        val music_notes_remainder_list_average_average_average_length\
    \ = music_notes_remainder_list_average_average_average.length\n        val music_notes_remainder_list_average_average_average_sum\
    \ = music_notes_remainder_list_average_average_average.sum\n        val music_notes_remainder_list_average_average_average_average\
    \ = music_notes_remainder_list_average_average_average_sum / music_notes_list_length\n\
    \        val music_notes_remainder_list_average_average_average_average_length\
    \ = music_notes_remainder_list_average_average_average_average.length\n      \
    \  val music_notes_remainder_list_average_average_average_average_sum = music_notes_remainder_list_average_average_average_average.sum\n\
    \        val music_note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzj0i9p6p.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzj0i9p6p.scala:18:63\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_notes_remainder_list\e[0m = music_notes_remainder.toList.map(\e[36mmusic_notes_remainder\e\
    [0m => music_notes_remainder + music_beats)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue toList is not a member of Int - did you mean music_notes_remainder.toInt?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzj0i9p6p.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_quarter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpou0wlf2o.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpou0wlf2o.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole_whole\
    \ / \e[31m32\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole_half is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole_half\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpou0wlf2o.scala:34:5 ---------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n      \
    \  val notes_beats_average = notes_beats_sum / notes_beats_length\n        val\
    \ notes_beats_average_length = notes_beats_average.length\n        val notes_beats_average_sum\
    \ = notes_beats_average.sum\n        val notes_beats_average_average = notes_beats_average_sum\
    \ / notes_beats_average_length\n        val notes_beats_average_average_length\
    \ = notes_beats_average_average.length\n        val notes_beats_average_average_sum\
    \ = notes_beats_average_average.sum\n        val notes_beats_average_average_average\
    \ = notes_beats_average_average_sum / notes_beats_average_average_length\n   \
    \     val notes_beats_average_average_average_length = notes_beats_average_average_average.length\n\
    \        val notes_beats_average_average_average_sum = notes_beats_average_average_average.sum\n\
    \        val notes_beats_average_average_average_average = notes_beats_average_average_average_sum\
    \ / notes_beats_average_average_average_length\n        val notes_beats_average_average_average_average_length\
    \ = notes_beats_average_average_average_average.length\n        val notes_beats_average_average_average_average_sum\
    \ = notes_beats_average_average_average_average.sum\n        val notes_beats_average_average_average_average_average\
    \ = notes_beats_average_average_average_average_sum / notes_beats_average_average_average_average_length\n\
    \        val notes_beats_average_average_average_average_average_length = notes_beats_average_average_average_average_average.length\n\
    \        val notes_beats_average_average_average_average_average_sum = notes_beats_average_average_average_average_average.sum\n\
    \        val notes_beats_average_average_average_average_average_average = notes_beats_average_average_average_average_average_sum\
    \ / notes_beats_average_average_average_average_average_length\n        val notes_beats_average_average_average_average_average_average_length\
    \ = notes_beats_average_average_average_average_average_average.length\n     \
    \   val notes_beats_average_average_average_average_average_average_sum = notes_beats_average_average_average_average_average_average.sum\n\
    \        val notes_beats_average_average_average_average_average_average_average\
    \ = notes_beats_average_average_average_average_average_average_sum / notes_beats_average_average_average_average_average_average_length\n\
    \        val note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_q5cc0sh.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_q5cc0sh.scala:18:61\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_average_length\e[0m = notes_beats_average.length\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_q5cc0sh.scala:19:58\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnotes_beats_average_sum\e[0m = notes_beats_average.sum\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value sum is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_q5cc0sh.scala:37:5 ---------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_inv = music_list_size_long.inv\n        val music_list_size_long_inv_inv\
    \ = music_list_size_long_inv.inv\n        val music_list_size_long_inv_inv_inv\
    \ = music_list_size_long_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val\
    \ music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n       \
    \ val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n   \
    \     val music_list_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph04jajva.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph04jajva.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e[0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph04jajva.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph04jajva.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length).trim\n\
    \            val beats_array = beats.toCharArray\n            val beats_array_length\
    \ = beats_array.length\n            val beats_array_length_long = beats_array_length.toLong\n\
    \            val beats_array_length_long_inv = beats_array_length_long.toInt\n\
    \            val beats_array_length_long_inv_mod = beats_array_length_long_inv\
    \ % 4\n            val beats_array_length_long_inv_mod_2 = beats_array_length_long_inv_mod\
    \ / 2\n            val beats_array_length_long_inv_mod_3 = beats_array_length_long_inv_mod_2\
    \ / 2\n            val beats_array_length_long_inv_mod_4 = beats_array_length_long_inv_mod_3\
    \ / 2\n            val beats_array_length_long_inv_mod_5 = beats_array_length_long_inv_mod_4\
    \ / 2\n            val beats_array_length_long_inv_mod_6 = beats_array_length_long_inv_mod_5\
    \ / 2\n            val beats_array_length_long_inv_mod_7 = beats_array_length_long_inv_mod_6\
    \ / 2\n            val beats_array_length_long_inv_mod_8 = beats_array_length_long_inv_mod_7\
    \ / 2\n            val beats_array_length_long_inv_mod_9 = beats_array_length_long_inv_mod_8\
    \ / 2\n            val beats_array_length_long_inv_mod_10 = beats_array_length_long_inv_mod_9\
    \ / 2\n            val beats_array_length_long_inv_mod_11 = beats_array_length_long_inv_mod_10\
    \ / 2\n            val beats_array_length_long_inv_mod_12 = beats_array_length_long_inv_mod_11\
    \ / 2\n            val beats_array_length_long_inv_mod_13 = beats_array_length_long_inv_mod_12\
    \ / 2\n            val beats_array_length_long_inv_mod_14 = beats_array_length_long_inv_mod_13\
    \ / 2\n            val beats_array_length_long_inv_mod_15 = beats_array_length_long_inv_mod_14\
    \ / 2\n            val beats_array_length_long_inv_mod_16 = beats_array_length_long_inv_mod_15\
    \ / 2\n            val beats_array_length_long_inv_mod_17 = beats_array_length_long_inv_mod_16\
    \ / 2\n            val beats_array_length_long_inv_mod_18 = beats_array_length_long_inv_mod_17\
    \ / 2\n            val beats_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvb7wg32h.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvb7wg32h.scala:39:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpvb7wg32h.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029146
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val beats = notes.map(note => {\n                val note =\
    \ note.trim\n                val notes = note.split(\"\\\\.|\")\n            \
    \    notes.map(note => {\n                    val note = note.trim\n         \
    \           val notes = note.split(\"o\")\n                    notes.map(note\
    \ => {\n                        val note = note.trim\n                       \
    \ val notes = note.split(\"|\")\n                        notes.map(note => {\n\
    \                            val note = note.trim\n                          \
    \  val notes = note.split(\"\\\\|\")\n                            notes.map(note\
    \ => {\n                                val note = note.trim\n               \
    \                 val notes = note.split(\"\\\\|\")\n                        \
    \        notes.map(note => {\n                                    val note = note.trim\n\
    \                                    val notes = note.split(\"\\\\|\")\n     \
    \                               notes.map(note => {\n                        \
    \                val note = note.trim\n                                      \
    \  val notes = note.split(\"\\\\|\")\n                                       \
    \ notes.map(note => {\n                                            val note =\
    \ note.trim\n                                            val notes = note.split(\"\
    \\\\|\")\n                                            notes.map(note => {\n  \
    \                                              val note = note.trim\n        \
    \                                        val notes = note.split(\"\\\\|\")\n \
    \                                               notes.map(note => {\n        \
    \                                            val note = note.trim\n          \
    \                                          val notes = note.split(\"\\\\|\")\n\
    \                                                    notes.map(note => {\n   \
    \                                                     val note = note.trim\n \
    \                                                       val notes = note.split(\"\
    \\\\|\")\n                                                        notes.map(note\
    \ => {\n                                                            val note =\
    \ note.trim\n                                                            val notes\
    \ = note.split(\"\\\\|\")\n                                                  \
    \          notes.map(note => {\n                                             \
    \                   val note = note.trim\n                                   \
    \                             val notes = note.split(\"\\\\|\")\n            \
    \                                                    notes.map(note => {\n   \
    \                                                                 val note = note.trim\n\
    \                                                                    val notes\
    \ = note.split(\"\\\\|\")\n                                                  \
    \                  notes.map(note => {\n                                     \
    \                                   val note = note.trim\n                   \
    \                                                     val notes = note.split(\"\
    \\\\|\")\n                                                                   \
    \     notes.map(note => {\n                                                  \
    \                          val note = note.trim\n                            \
    \                                                val notes = note.split(\"\\\\\
    |\")\n                                                                       \
    \     notes.map(note => {\n                                                  \
    \                              val note = note.trim\n                        \
    \                                                        val notes = note.split(\"\
    \\\\|\")\n                                                                   \
    \             notes.map(note => {\n                                          \
    \                                          val note = note.trim\n            \
    \                                                                        val notes\
    \ = note.split(\"\\\\|\")\n                                                  \
    \                                  note\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5179kza1.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp5179kza1.scala:79:0 ----------------------------\e[0m\e[0m\n\e[31m79\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmp5179kza1.scala:78:1 ------------------------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m where:    B is a type variable\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split('|').map(music_string\
    \ => {\n            val notes = music_string.split('o').map(music_string => {\n\
    \                val note = music_string.charAt(0).toInt\n                val\
    \ beats = music_string.charAt(1).toInt\n                note\n            })\n\
    \            notes.sum\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9mm69o7.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m'|'\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m            \e\
    [33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m'o'\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m14 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toInt\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mbeats\e\
    [0m = music_string.charAt(\e[31m1\e[0m).toInt\n\e[31m16 |\e[0m               \
    \ note\n\e[31m17 |\e[0m            })\n\e[31m18 |\e[0m            notes.sum\n\e\
    [31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_length\
    \ = notes_beats.sum\n        val notes_beats_length_minus_1 = notes_beats_length\
    \ - 1\n        val notes_beats_length_minus_2 = notes_beats_length - 2\n     \
    \   val notes_beats_length_minus_3 = notes_beats_length - 3\n        val notes_beats_length_minus_4\
    \ = notes_beats_length - 4\n        val notes_beats_length_minus_5 = notes_beats_length\
    \ - 5\n        val notes_beats_length_minus_6 = notes_beats_length - 6\n     \
    \   val notes_beats_length_minus_7 = notes_beats_length - 7\n        val notes_beats_length_minus_8\
    \ = notes_beats_length - 8\n        val notes_beats_length_minus_9 = notes_beats_length\
    \ - 9\n        val notes_beats_length_minus_10 = notes_beats_length - 10\n   \
    \     val notes_beats_length_minus_11 = notes_beats_length - 11\n        val notes_beats_length_minus_12\
    \ = notes_beats_length - 12\n        val notes_beats_length_minus_13 = notes_beats_length\
    \ - 13\n        val notes_beats_length_minus_14 = notes_beats_length - 14\n  \
    \      val notes_beats_length_minus_15 = notes_beats_length - 15\n        val\
    \ notes_beats_length_minus_16 = notes_beats_length - 16\n        val notes_beats_length_minus_17\
    \ = notes_beats_length - 17\n        val notes_beats_length_minus_18 = notes_beats_length\
    \ - 18\n        val notes_beats_length_minus_19 = notes_beats_length - 19\n  \
    \      val notes_beats_length_minus_20 = notes_beats_length - 20\n        val\
    \ notes_beats_length_minus_21 = notes_beats_length - 21\n        val notes_beats_length_minus_22\
    \ = notes_beats_length - 22\n        val notes_beats_length_minus_23 = notes_beats_length\
    \ - 23\n        val notes_beats_length_minus_24 = notes_beats_length - 24\n  \
    \      val notes_beats_length_minus_25 = notes_beats_length - 25\n        val\
    \ notes_beats_length_minus_26 = notes_beats_length - 26\n        val notes_beats_length_min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8k_7ephx.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8k_7ephx.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    val note = music_string.split(\"\
    .\").map(music_string => {\n                        val note = music_string.split(\"\
    -\").map(music_string => {\n                            val note = music_string.split(\"\
    /\").map(music_string => {\n                                val note = music_string.split(\"\
    b\").map(music_string => {\n                                    val note = music_string.split(\"\
    #\").map(music_string => {\n                                        val note =\
    \ music_string.split(\"b#\").map(music_string => {\n                         \
    \                   val note = music_string.split(\"#b\").map(music_string =>\
    \ {\n                                                val note = music_string.split(\"\
    b#b\").map(music_string => {\n                                               \
    \     val note = music_string.split(\"#b#\").map(music_string => {\n         \
    \                                               val note = music_string.split(\"\
    b#b#\").map(music_string => {\n                                              \
    \              val note = music_string.split(\"#b#b#\").map(music_string => {\n\
    \                                                                val note = music_string.split(\"\
    b#b#b\").map(music_string => {\n                                             \
    \                       val note = music_string.split(\"#b#b#\").map(music_string\
    \ => {\n                                                                     \
    \   val note = music_string.split(\"b#b#b#\").map(music_string => {\n        \
    \                                                                    val note\
    \ = music_string.split(\"#b#b#b\").map(music_string => {\n                   \
    \                                                             val note = music_string.split(\"\
    b#b#b#\").map(music_string => {\n                                            \
    \                                        val note = music_string.split(\"#b#b#b#\"\
    ).map(music_string => {\n                                                    \
    \                                    val note = music_string.split(\"b#b#b#b\"\
    ).map(music_string => {\n                                                    \
    \                                        val note = music_string.split(\"#b#b#b#\"\
    ).map(music_string => {\n                                                    \
    \                                            val note = music_string.split(\"\
    b#b#b#b\").map(music_string => {\n                                           \
    \                                                         val note = music_string.split(\"\
    #b#b#b#\").map(music_string => {\n                                           \
    \                                                             val note = music_string.split(\"\
    b#b#b#b\").map(music_string => {\n                                           \
    \                                                                 val note = music_string.split(\"\
    #b#b#b#\").map(music_string => {\n                                           \
    \                                                                     val note\
    \ = music_string.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv2b3s1fm.scala:38:142 ----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                                                    \
    \                                                            \e[33mval\e[0m \e\
    [36mnote\e[0m = music_string.split(\"\n\e[31m\e[31m   |\e[0m                 \
    \                                                                            \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                             unclosed string literal\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpv2b3s1fm.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpv2b3s1fm.scala:49:0 ----------------------------\e[0m\e[0m\n\e[31m49\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029148
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beats = music_string.substring(0, 1)\n           \
    \     val rest = music_string.substring(1)\n                beats.toLong * rest.length\n\
    \            }).sum\n            beats * note.length\n        }).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsk04l3kq.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m\
    \            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m\
    \ = music_string.substring(\e[31m1\e[0m).split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m17 |\e[0m                beats.toLong\
    \ * rest.length\n\e[31m18 |\e[0m            }).sum\n\e[31m19 |\e[0m          \
    \  beats * note.length\n\e[31m20 |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n    \
    \    val notes_array = notes.map(_.toInt).toArray\n        val notes_array = notes_array.map(x\
    \ => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 1) 1 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 2) 2 else x)\n        val notes_array = notes_array.map(x => if (x == 3) 3 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 4) 4 else x)\n \
    \       val notes_array = notes_array.map(x => if (x == 5) 5 else x)\n       \
    \ val notes_array = notes_array.map(x => if (x == 6) 6 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 7) 7 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 8) 8 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 9) 9 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 10) 10 else x)\n        val notes_array = notes_array.map(x => if (x == 11)\
    \ 11 else x)\n        val notes_array = notes_array.map(x => if (x == 12) 12 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 13) 13 else x)\n\
    \        val notes_array = notes_array.map(x => if (x == 14) 14 else x)\n    \
    \    val notes_array = notes_array.map(x => if (x == 15) 15 else x)\n        val\
    \ notes_array = notes_array.map(x => if (x == 16) 16 else x)\n        val notes_array\
    \ = notes_array.map(x => if (x == 17) 17 else x)\n        val notes_array = notes_array.map(x\
    \ => if (x == 18) 18 else x)\n        val notes_array = notes_array.map(x => if\
    \ (x == 19) 19 else x)\n        val notes_array = notes_array.map(x => if (x ==\
    \ 20) 20 else x)\n        val notes_array = notes_array.map(x => if (x == 21)\
    \ 21 else x)\n        val notes_array = notes_array.map(x => if (x == 22) 22 else\
    \ x)\n        val notes_array = notes_array.map(x => if (x == 23) 23 else x)\n\
    \        val notes_array = notes_array.map(x => if (x == 24) 24 else x)\n    \
    \    val notes_array = notes_array.map(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9yzbttax.scala:40:42 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9yzbttax.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_array\e[0m = notes_array.map(\e[36mx\e[0m => \e[33mif\e[0m (x ==\
    \ \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m x)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9yzbttax.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9yzbttax.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_array\e[0m = notes_array.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m2\e[0m) \e[31m2\e[0m \e[33melse\e[0m x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_array is already defined as \e[33mvalue\e[0m \e[35mnotes_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161"
  stdout: ''
  timestamp: 1660029154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length).trim\n\
    \            val beats_as_long = beats.toLong\n            val beats_as_int =\
    \ beats_as_long.toInt\n            val note_to_beats = Map(\n                \"\
    o\" -> 4,\n                \"o|\" -> 2,\n                \".|\" -> 1\n       \
    \     )\n            note_to_beats(note) match {\n                case Some(beats)\
    \ => beats_as_int\n                case None => 0\n            }\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwy3pevty.scala:24:21\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e\
    [0m None => \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^\e[0m\n\
    \e[31m   |\e[0m                     Found:    None.type\n\e[31m   |\e[0m     \
    \                Required: Int\n\e[31m   |\e[0m                     pattern type\
    \ is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029149
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    )(0)\n                val beats = music_string.split(\"|\")(1).split(\"\\\\.\"\
    )(0)\n                val beats_as_int = beats.toInt\n                beats_as_int\
    \ * 4\n            }).toList\n            val notes_as_int = notes.toList\n  \
    \          notes_as_int * 4\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp366xum_0.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            notes_as_int * \e[31m4\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member\
    \ of List[Int], but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp366xum_0.scala:21:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m          ^\e\
    [0m\n\e[31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size %\
    \ 4\n        val music_list_size_whole_half = music_list_size_whole / 2\n    \
    \    val music_list_size_whole_quarter = music_list_size_whole / 4\n        val\
    \ music_list_size_whole_whole = music_list_size_whole % 4\n        val music_list_size_whole_whole_half\
    \ = music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole % 4\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_whole_who\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoz09rpcu.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoz09rpcu.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_beats = music_string.split(\"o|\")\n            val music_string_beats_size\
    \ = music_string_beats.size\n            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_size = music_string_beats_beat.size\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    \\\\.\\\\|\")\n                val music_string_beats_beats_beats_size = music_string_beats_beats_beats.size\n\
    \                val music_string_beats_beats_beats_beats = music_string_beats_beats_beats.map(music_string_beats_beats_beat\
    \ => {\n                    val music_string_beats_beats_beats_beats_size = music_string_beats_beats_beats_beat.size\n\
    \                    val music_string_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beat.split(\"\
    o|\")\n                    val music_string_beats_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beats_beats.size\n                    val music_string_beats_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beats_beats_beats_beat.size\n             \
    \           val music_string_beats_beats_beats_beats_beats_beats_beats_beats =\
    \ music_string_beats_beats_beats_beats_beats_beats_beats_beat.split(\"\\\\.\\\\\
    |\")\n                        val music_string_beats_beats_beats_beats_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats.size\n      \
    \                  val music_string_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beats_beat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9jsevby1.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9jsevby1.scala:31:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m31 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp9jsevby1.scala:40:0 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jsevby1.scala:18:52\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_size\e[0m = music_string_beats_beat.size\n\e\
    [31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jsevby1.scala:19:53\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\"\\\\.\\\\|\"\e[0m)\n\e[31m\e[31m   |\e[0m                              \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                              Not found: music_string_beats_beat\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9jsevby1.scala:39:1 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.map(_.length).sum\n            val\
    \ beats = notes.map(_.length / notes_length).sum\n            beats\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdjvncgqk.scala:17:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o|\"\e[0m)\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e[0m = notes.map(_.length).sum\n\
    \e[31m15 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = notes.map(_.length\
    \ / notes_length).sum\n\e[31m16 |\e[0m            beats\n\e[31m17 |\e[0m     \
    \   }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e\
    [32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 64\n        val musi\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1wa_w9ez.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1wa_w9ez.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole\
    \ / \e[31m16\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_half is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_half\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1wa_w9ez.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_quarter\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m32\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_quarter is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_quarter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1wa_w9ez.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_whole_whole_whole_whole_whole\e\
    [0m = music_list_size_whole_whole_whole_whole / \e[31m64\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole is already defined\
    \ as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1660029147
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_quarter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpou0wlf2o.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpou0wlf2o.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole_whole\
    \ / \e[31m32\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole_half is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole_half\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpou0wlf2o.scala:34:5 ---------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val noteLength = note.length\n      \
    \          val noteBeats = noteLength / 4\n                noteBeats * noteLength\n\
    \            }).sum\n            notes_beats\n        }).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2teh4hse.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o|\"\e[0m)\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e[0m = notes.length\n\
    \e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats\e[0m = notes.map(\e\
    [36mnote\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnoteLength\e\
    [0m = note.length\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mnoteBeats\e\
    [0m = noteLength / \e[31m4\e[0m\n\e[31m18 |\e[0m                noteBeats * noteLength\n\
    \e[31m19 |\e[0m            }).sum\n\e[31m20 |\e[0m            notes_beats\n\e\
    [31m21 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n    \
    \    val notes_array = Array(notes_count)\n        notes.foreach(x => notes_array(notes_count\
    \ - 1 - notes_array.indexOf(x)) match {\n            case \".\" => notes_array(notes_count\
    \ - 1 - notes_array.indexOf(x)) -= 1\n            case \".|\" => notes_array(notes_count\
    \ - 1 - notes_array.indexOf(x)) -= 1\n            case _ => notes_array(notes_count\
    \ - 1 - notes_array.indexOf(x)) -= 1\n        })\n        notes_array\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbn7qnz6_.scala:15:77\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.foreach(\e[36mx\e\
    [0m => notes_array(notes_count - \e[31m1\e[0m - notes_array.indexOf(x)) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                                 \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \                         Found:    (x : String)\n\e[31m   |\e[0m            \
    \                                      Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpbn7qnz6_.scala:16:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m \e[31m\".\"\e[0m => notes_array(notes_count\
    \ - \e[31m1\e[0m - notes_array.indexOf(x)) -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                 ^^^\e[0m\n\e[31m   |\e[0m         Values of types String and\
    \ Int cannot be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbn7qnz6_.scala:16:74 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \            \e[33mcase\e[0m \e[31m\".\"\e[0m => notes_array(notes_count - \e\
    [31m1\e[0m - notes_array.indexOf(x)) -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (x\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpbn7qnz6_.scala:17:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \     \e[33mcase\e[0m \e[31m\".|\"\e[0m => notes_array(notes_count - \e[31m1\e\
    [0m - notes_array.indexOf(x)) -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \        ^^^^\e[0m\n\e[31m   |\e[0m         Values of types String and Int cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbn7qnz6_.scala:17:75\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m \e\
    [31m\".|\"\e[0m => notes_array"
  stdout: ''
  timestamp: 1660029154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val noteLength = note.length\n      \
    \          val noteBeats = note.split(\".\").map(note => {\n                 \
    \   val noteBeatLength = note.length\n                    val noteBeats = noteBeatLength\
    \ / noteBeatLength\n                    noteBeats\n                })\n      \
    \          noteBeats.sum\n            })\n            notes_beats.sum\n      \
    \  }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9p_sfzl4.scala:25:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o|\"\e[0m)\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e[0m = notes.length\n\
    \e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats\e[0m = notes.map(\e\
    [36mnote\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnoteLength\e\
    [0m = note.length\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mnoteBeats\e\
    [0m = note.split(\e[31m\".\"\e[0m).map(\e[36mnote\e[0m => {\n\e[31m18 |\e[0m \
    \                   \e[33mval\e[0m \e[36mnoteBeatLength\e[0m = note.length\n\e\
    [31m19 |\e[0m                    \e[33mval\e[0m \e[36mnoteBeats\e[0m = noteBeatLength\
    \ / noteBeatLength\n\e[31m20 |\e[0m                    noteBeats\n\e[31m21 |\e\
    [0m                })\n\e[31m22 |\e[0m                noteBeats.sum\n\e[31m23\
    \ |\e[0m            })\n\e[31m24 |\e[0m            notes_beats.sum\n\e[31m25 |\e\
    [0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => {\n            val music_beats\
    \ = music_string.split(\"o|\")\n            val music_beats_length = music_beats.length\n\
    \            val music_beats_count = music_beats_length / 4\n            val music_beats_last_beat\
    \ = music_beats_length - music_beats_count\n            music_beats_last_beat\n\
    \        })\n        val music_beats_sum = music_beats.reduce((a, b) => a + b)\n\
    \        val music_beats_average = music_beats_sum / music_length\n        val\
    \ music_beats_average_list = music_beats_average.toList\n        music_beats_average_list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfoc_pod2.scala:23:59 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_average_list\e\
    [0m = music_beats_average.toList\n\e[31m\e[31m   |\e[0m                      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toList\
    \ is not a member of Int - did you mean music_beats_average.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660029158
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val beats = notes.map(note => note.length.toLong)\n       \
    \     beats.sum\n        }).toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppxudvaoq.scala:19)\n\tat Problem.main(tmppxudvaoq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    val beats = music_string.split(\"\
    .\").map(music_string => {\n                        music_string.trim().toInt\n\
    \                    }).sum\n                    beats\n                }).sum\n\
    \                note\n            }).sum\n            notes\n        }).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptmtzaqe5.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e\
    [31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m14 |\e[0m            \
    \    \e[33mval\e[0m \e[36mnote\e[0m = music_string.split(\e[31m\"|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => {\n\e[31m15 |\e[0m                    \e[33mval\e[0m\
    \ \e[36mbeats\e[0m = music_string.split(\e[31m\".\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m16 |\e[0m                        music_string.trim().toInt\n\e\
    [31m17 |\e[0m                    }).sum\n\e[31m18 |\e[0m                    beats\n\
    \e[31m19 |\e[0m                }).sum\n\e[31m20 |\e[0m                note\n\e\
    [31m21 |\e[0m            }).sum\n\e[31m22 |\e[0m            notes\n\e[31m23 |\e\
    [0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_quarter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpou0wlf2o.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpou0wlf2o.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole_whole\
    \ / \e[31m32\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole_half is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole_half\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpou0wlf2o.scala:34:5 ---------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o\").length\n            music_string_beats * music_string_length\n\
    \        }).toList\n        val music_list_beats_length = music_list_beats.map(music_string\
    \ => {\n            val music_string_length = music_string.length\n          \
    \  val music_string_beats = music_string.split(\"o\").length\n            music_string_beats\
    \ * music_string_length\n        }).sum\n        val music_list_beats_length_length\
    \ = music_list_beats_length / music_list_length\n        val music_list_beats_length_length_length\
    \ = music_list_beats_length_length / music_list_length\n        val music_list_beats_length_length_length_length\
    \ = music_list_beats_length_length_length / music_list_length\n        val music_list_beats_length_length_length_length_length\
    \ = music_list_beats_length_length_length_length / music_list_length\n       \
    \ val music_list_beats_length_length_length_length_length_length = music_list_beats_length_length_length_length_length\
    \ / music_list_length\n        val music_list_beats_length_length_length_length_length_length_length\
    \ = music_list_beats_length_length_length_length_length_length / music_list_length\n\
    \        val music_list_beats_length_length_length_length_length_length_length_length\
    \ = music_list_beats_length_length_length_length_length_length_length / music_list_length\n\
    \        val music_list_beats_length_length_length_length_length_length_length_length_length\
    \ = music_list_beats_length_length_length_length_length_length_length_length /\
    \ music_list_length\n        val music_list_beats_length_length_length_length_length_length_length_length_length\
    \ = music_list_beats_length_length_length_length_length_length_length_length /\
    \ music_list_length\n        val music_list_beats_length_length_length_length_length_length_length_length_length\
    \ = music_list_beats_length_length_length_length_length_length_length_length /\
    \ music_list_length\n        val music_list_beats_length_length_length_length_length_length_length_length_length_length\
    \ = music_list_beats_length_length_length_length_length_length_length_length_length\
    \ / music_list_length\n        val music_list_beats_length_length_length_length_length_length_length_length_length_length_length\
    \ = music_list_beats_length_length_length_length_length_length_length_length_length_length\
    \ / music_list_length\n        \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu910oiql.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length_length_length_length_length_length_length_length_length\e\
    [0m = music_list_beats_length_length_length_length_length_length_length_length\
    \ / music_list_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length_length_length_length_length_length_length_length_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_beats_length_length_length_length_length_length_length_length_length\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpu910oiql.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length_length_length_length_length_length_length_length_length\e\
    [0m = music_list_beats_length_length_length_length_length_length_length_length\
    \ / music_list_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length_length_length_length_length_length_length_length_length\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_beats_length_length_length_length_length_length_length_length_length\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpu910oiql.scala:20:51 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmusic_string_length\e\
    [0m = music_string.length\n\e[31m\e[31m   |\e[0m                             \
    \         ^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_int = music_list_size_long.asInstanceOf[Int]\n        val\
    \ music_list_size_long_long_int = music_list_size_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_int = music_list_size_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpigtwgavm.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpigtwgavm.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpigtwgavm.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel d"
  stdout: ''
  timestamp: 1660029161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(x => x.toInt)\n        val notes_beats_length\
    \ = notes_beats.length\n        val notes_beats_last_length = notes_beats_length\
    \ / 4\n        val notes_beats_last_last_length = notes_beats_last_length / 2\n\
    \        val notes_beats_last_last_last_length = notes_beats_last_last_length\
    \ / 1\n        val notes_beats_last_last_last_last_length = notes_beats_last_last_last_length\
    \ / 0\n        val notes_beats_last_last_last_last_last_length = notes_beats_last_last_last_last_length\
    \ / 1\n        val notes_beats_last_last_last_last_last_last_length = notes_beats_last_last_last_last_last_length\
    \ / 2\n        val notes_beats_last_last_last_last_last_last_last_length = notes_beats_last_last_last_last_last_last_length\
    \ / 3\n        val notes_beats_last_last_last_last_last_last_last_length = notes_beats_last_last_last_last_last_last_last_length\
    \ / 4\n        val notes_beats_last_last_last_last_last_last_last_last_length\
    \ = notes_beats_last_last_last_last_last_last_last_last_length / 5\n        val\
    \ notes_beats_last_last_last_last_last_last_last_last_last_length = notes_beats_last_last_last_last_last_last_last_last_last_length\
    \ / 6\n        val notes_beats_last_last_last_last_last_last_last_last_last_length\
    \ = notes_beats_last_last_last_last_last_last_last_last_last_length / 7\n    \
    \    val notes_beats_last_last_last_last_last_last_last_last_last_last_length\
    \ = notes_beats_last_last_last_last_last_last_last_last_last_last_length / 8\n\
    \        val notes_beats_last_last_last_last_last_last_last_last_last_last_length\
    \ = notes_beats_last_last_last_last_last_last_last_last_last_last_length / 9\n\
    \        val notes_beats_last_last_last_last_last_last_last_last_last_last_last_length\
    \ = notes_beats_last_last_last_last_last_last_last_last_last_last_length / 10\n\
    \        val notes_beats_last_last_last_last_last_last_last_last_last_last_last_length\
    \ = notes_beats_last_last_last_last_last_last_last_last_last_last_last_length\
    \ / 11\n        val notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_length\
    \ = notes_beats_last_last_last_last_last_last_last_last_last_last_last_last_length\
    \ / 12\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp30a9xxla.scala:32:11 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp30a9xxla.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_last_last_last_last_last_last_length\e\
    [0m = notes_beats_last_last_last_last_last_last_last_length / \e[31m4\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_last_last_last_last_last_last_last_length is already\
    \ defined as \e[33mvalue\e[0m \e[35mnotes_beats_last_last_last_last_last_last_last_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp30a9xxla.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_last_last_last_last_last_last_last_last_length\e\
    [0m = notes_beats_last_last_last_last_last_last_last_last_last_length / \e[31m7\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_last_last_last_last_last_last_last_last_last_length\
    \ is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_last_last_last_last_last_last_last_last_last_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp30a9xxla.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_last_last_last_last_last_last_last_last_last_last_length\e\
    [0m = notes_beats_last_last_last_last_last_last_last_last_last_last_length / \e\
    [31m9\e[0m"
  stdout: ''
  timestamp: 1660029162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val rest = music_string.substring(1, 2)\n            val beats\
    \ = rest.split(\"o\").map(music_string => {\n                val beat = music_string.substring(0,\
    \ 1)\n                val rest = music_string.substring(1, 2)\n              \
    \  val rest2 = rest.split(\"o\").map(music_string => {\n                    val\
    \ beat = music_string.substring(0, 1)\n                    val rest = music_string.substring(1,\
    \ 2)\n                    val rest3 = rest.split(\"o\").map(music_string => {\n\
    \                        val beat = music_string.substring(0, 1)\n           \
    \             val rest = music_string.substring(1, 2)\n                      \
    \  val rest4 = rest.split(\"o\").map(music_string => {\n                     \
    \       val beat = music_string.substring(0, 1)\n                            val\
    \ rest = music_string.substring(1, 2)\n                            val rest5 =\
    \ rest.split(\"o\").map(music_string => {\n                                val\
    \ beat = music_string.substring(0, 1)\n                                val rest\
    \ = music_string.substring(1, 2)\n                                val rest6 =\
    \ rest.split(\"o\").map(music_string => {\n                                  \
    \  val beat = music_string.substring(0, 1)\n                                 \
    \   val rest = music_string.substring(1, 2)\n                                \
    \    val rest7 = rest.split(\"o\").map(music_string => {\n                   \
    \                     val beat = music_string.substring(0, 1)\n              \
    \                          val rest = music_string.substring(1, 2)\n         \
    \                               val rest8 = rest.split(\"o\").map(music_string\
    \ => {\n                                            val beat = music_string.substring(0,\
    \ 1)\n                                            val rest = music_string.substring(1,\
    \ 2)\n                                            val rest9 = rest.split(\"o\"\
    ).map(music_string => {\n                                                val beat\
    \ = music_string.substring(0, 1)\n                                           \
    \     val rest = music_string.substring(1, 2)\n                              \
    \                  val rest10 = rest.split(\"o\").map(music_string => {\n    \
    \                                                val beat = music_string.substring(0,\
    \ 1)\n                                                    val rest = music_string.substring(1,\
    \ 2)\n                                                    val rest11 = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \       val beat = music_string.substring(0, 1)\n                            \
    \                            val rest = music_string.substring(1, 2)\n       \
    \                                                 val rest12 = rest.split(\"o\"\
    ).map(music_string => {\n                                                    \
    \        val beat = music_string.substring(0, 1)\n                           \
    \                                 val rest = music_string.substring(1, 2)\n  \
    \                                                          val rest13 = rest.split(\"\
    o\").map(music_string => {\n                                                 \
    \               val beat = music_string.substring(0, 1)\n                    \
    \                                            val rest = music_string.substring(1,\
    \ 2)\n                                                                val rest14\
    \ = rest.split(\"o\").map(music_string => {\n                                \
    \                                    val beat = music_string.substring(0, 1)\n\
    \                                                                    val rest\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwh4rsug8.scala:56:78 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m                                                    \
    \                \e[33mval\e[0m \e[36mrest\e[0m = \n\e[31m\e[31m   |\e[0m    \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpwh4rsug8.scala:58:4 ----------------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwh4rsug8.scala:67:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_long = music_list_size.asInstanceOf[Int]\n      \
    \  val music_list_size_long2 = music_list_size_long * music_list_size_long\n \
    \       val music_list_size_long3 = music_list_size_long2 * music_list_size_long\n\
    \        val music_list_size_long4 = music_list_size_long3 * music_list_size_long\n\
    \        val music_list_size_long5 = music_list_size_long4 * music_list_size_long\n\
    \        val music_list_size_long6 = music_list_size_long5 * music_list_size_long\n\
    \        val music_list_size_long7 = music_list_size_long6 * music_list_size_long\n\
    \        val music_list_size_long8 = music_list_size_long7 * music_list_size_long\n\
    \        val music_list_size_long9 = music_list_size_long8 * music_list_size_long\n\
    \        val music_list_size_long10 = music_list_size_long9 * music_list_size_long\n\
    \        val music_list_size_long11 = music_list_size_long10 * music_list_size_long\n\
    \        val music_list_size_long12 = music_list_size_long11 * music_list_size_long\n\
    \        val music_list_size_long13 = music_list_size_long12 * music_list_size_long\n\
    \        val music_list_size_long14 = music_list_size_long13 * music_list_size_long\n\
    \        val music_list_size_long15 = music_list_size_long14 * music_list_size_long\n\
    \        val music_list_size_long16 = music_list_size_long15 * music_list_size_long\n\
    \        val music_list_size_long17 = music_list_size_long16 * music_list_size_long\n\
    \        val music_list_size_long18 = music_list_size_long17 * music_list_size_long\n\
    \        val music_list_size_long19 = music_list_size_long18 * music_list_size_long\n\
    \        val music_list_size_long20 = music_list_size_long19 * music_list_size_long\n\
    \        val music_list_size_long21 = music_list_size_long20 * music_list_size_long\n\
    \        val music_list_size_long22 = music_list_size_long21 * music_list_size_long\n\
    \        val music_list_size_long23 = music_list_size_long22 * music_list_size_long\n\
    \        val musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprrsju6wv.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprrsju6wv.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_inv = music_list_size_long.inv\n        val music_list_size_long_inv_inv\
    \ = music_list_size_long_inv.inv\n        val music_list_size_long_inv_inv_inv\
    \ = music_list_size_long_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val\
    \ music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n       \
    \ val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n   \
    \     val music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7f9jfqmr.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7f9jfqmr.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e[0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7f9jfqmr.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7f9jfqmr.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split('|').map(music_string\
    \ => {\n            val notes = music_string.split('o').map(music_string => {\n\
    \                val note = music_string.charAt(0).toInt\n                val\
    \ beats = music_string.charAt(1).toInt\n                note * beats\n       \
    \     }).toList\n            notes.sum\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg2qut1lu.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m'|'\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m            \e\
    [33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m'o'\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m14 |\e[0m                \e[33mval\e[0m \e[36mnote\e[0m = music_string.charAt(\e\
    [31m0\e[0m).toInt\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mbeats\e\
    [0m = music_string.charAt(\e[31m1\e[0m).toInt\n\e[31m16 |\e[0m               \
    \ note * beats\n\e[31m17 |\e[0m            }).toList\n\e[31m18 |\e[0m        \
    \    notes.sum\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m      \
    \  ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val note = note.trim\n              \
    \  val notes = note.split(\"\\\\.\\\\|\")\n                val notes_length =\
    \ notes.length\n                val notes_beats = notes.map(note => {\n      \
    \              val note = note.trim\n                    val notes = note.split(\"\
    o|\")\n                    val notes_length = notes.length\n                 \
    \   val notes_beats = notes.map(note => {\n                        val note =\
    \ note.trim\n                        val notes = note.split(\"\\\\.\\\\|\")\n\
    \                        val notes_length = notes.length\n                   \
    \     val notes_beats = notes.map(note => {\n                            val note\
    \ = note.trim\n                            val notes = note.split(\"o|\")\n  \
    \                          val notes_length = notes.length\n                 \
    \           val notes_beats = notes.map(note => {\n                          \
    \      val note = note.trim\n                                val notes = note.split(\"\
    \\\\.\\\\|\")\n                                val notes_length = notes.length\n\
    \                                val notes_beats = notes.map(note => {\n     \
    \                               val note = note.trim\n                       \
    \             val notes = note.split(\"o|\")\n                               \
    \     val notes_length = notes.length\n                                    val\
    \ notes_beats = notes.map(note => {\n                                        val\
    \ note = note.trim\n                                        val notes = note.split(\"\
    \\\\.\\\\|\")\n                                        val notes_length = notes.length\n\
    \                                        val notes_beats = notes.map(note => {\n\
    \                                            val note = note.trim\n          \
    \                                  val notes = note.split(\"o|\")\n          \
    \                                  val notes_length = notes.length\n         \
    \                                   val notes_beats = notes.map(note => {\n  \
    \                                              val note = note.trim\n        \
    \                                        val notes = note.split(\"\\\\.\\\\|\"\
    )\n                                                val notes_length = notes.length\n\
    \                                                val notes_beats = notes.map(note\
    \ => {\n                                                    val note = note.trim\n\
    \                                                    val notes = note.split(\"\
    o|\")\n                                                    val notes_length =\
    \ notes.length\n                                                    val notes_beats\
    \ = notes.map(note => {\n                                                    \
    \    val note = note.trim\n                                                  \
    \      val notes = note.split(\"\\\\.\\\\|\")\n                              \
    \                          val notes_length = notes.length\n                 \
    \                                       val notes_beats = notes.map(note => {\n\
    \                                                            val note = note.trim\n\
    \                                                            val notes = note.split(\"\
    o|\")\n                                                            val notes_length\
    \ = notes.length\n                                                           \
    \ val notes_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoakg5gd7.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoakg5gd7.scala:65:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpoakg5gd7.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val music_notes = music_string.split(\"\
    o|\")\n            val music_notes_length = music_notes.length\n            val\
    \ music_notes_beats = music_notes.map(music_note => {\n                val music_note_length\
    \ = music_note.length\n                val music_note_beats = music_note_length\
    \ / 4\n                music_note_beats\n            })\n            val music_notes_beats_sum\
    \ = music_notes_beats.sum\n            music_notes_beats_sum\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7l3vio8f.scala:22:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mmusic_notes\e[0m = music_string.split(\e[31m\"o|\"\e\
    [0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes.length\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mmusic_notes_beats\e\
    [0m = music_notes.map(\e[36mmusic_note\e[0m => {\n\e[31m16 |\e[0m            \
    \    \e[33mval\e[0m \e[36mmusic_note_length\e[0m = music_note.length\n\e[31m17\
    \ |\e[0m                \e[33mval\e[0m \e[36mmusic_note_beats\e[0m = music_note_length\
    \ / \e[31m4\e[0m\n\e[31m18 |\e[0m                music_note_beats\n\e[31m19 |\e\
    [0m            })\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmusic_notes_beats_sum\e\
    [0m = music_notes_beats.sum\n\e[31m21 |\e[0m            music_notes_beats_sum\n\
    \e[31m22 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m       \
    \ Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val note_length = note.length\n     \
    \           val note_beats = note_length / 4\n                note_beats\n   \
    \         }).sum\n            notes_beats\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5nk8jh0u.scala:21:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o|\"\e[0m)\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e[0m = notes.length\n\
    \e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats\e[0m = notes.map(\e\
    [36mnote\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote_length\e\
    [0m = note.length\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mnote_beats\e\
    [0m = note_length / \e[31m4\e[0m\n\e[31m18 |\e[0m                note_beats\n\e\
    [31m19 |\e[0m            }).sum\n\e[31m20 |\e[0m            notes_beats\n\e[31m21\
    \ |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m\
    \        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.length / 4\n        val music_notes = music_list.length\
    \ % 4\n        val music_notes_array = Array(music_notes)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length / 4)\n        val music_notes_array\
    \ = music_notes_array.map(x => music_list.length % 4)\n        val music_notes_array\
    \ = music_note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpussje5sb.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_array\e[0m =\
    \ music_notes_array.map(\e[36mx\e[0m => music_list.length / \e[31m4\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_array is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_notes_array\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpussje5sb.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_array\e[0m =\
    \ music_notes_array.map(\e[36mx\e[0m => music_list.length % \e[31m4\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_array is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_notes_array\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpussje5sb.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_array\e[0m =\
    \ music_notes_array.map(\e[36mx\e[0m => music_list.length / \e[31m4\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_array is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_notes_array\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpussje5sb.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_array\e[0m =\
    \ music_notes_array.map(\e[36mx\e[0m => music_list.length % \e[31m4\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_array is already defined as \e[33mvalue\e[0m \e\
    [35m"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_beats = music_string.split(\"o\")\n            val music_string_beats_size\
    \ = music_string_beats.size\n            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_size = music_string_beats_beat.size\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    .\").map(music_string_beats_beat => {\n                    val music_string_beats_beats_beats_size\
    \ = music_string_beats_beats_beat.size\n                    val music_string_beats_beats_beats_beats\
    \ = music_string_beats_beats_beat.split(\"|\").map(music_string_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beat.size\n                        val music_string_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beat.size\n                        val music_string_beats_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beats_beat.size\n                        val\
    \ music_string_beats_beats_beats_beats_beats_beats_size = music_string_beats_beats_beats_beats_beats_beat.size\n\
    \                        val music_string_beats_beats_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beats_beats_beats_beat.size\n             \
    \           val music_string_beats_beats_beats_beats_beats_beats_beats_size =\
    \ music_string_beats_beats_beats_beats_beats_beats_beats_beats_beat.size\n   \
    \                     val music_string_beats_beats_beats_beats_beats_beats_beats_beats_beatsize\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat.size\n\
    \                        val music_string_beats_beats_beats_beats_beats_beats_beats_beats_beats_beatsize\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat.size\n\
    \                        val music_string_beats_beats_beat\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmyfjr7kf.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmyfjr7kf.scala:32:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpmyfjr7kf.scala:41:0 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyfjr7kf.scala:18:52\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_size\e[0m = music_string_beats_beat.size\n\e\
    [31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyfjr7kf.scala:19:53\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\".\"\e[0m).map(\e[36mmusic_string_beats_beat\e[0m => {\n\e[31m\e[31m   |\e\
    [0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmyfjr7kf.scala:40:1\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => {\n            val music_note\
    \ = music_string.substring(0, 1)\n            val music_length = music_string.length\n\
    \            val music_beats = music_string.substring(music_length-1, music_length)\n\
    \            val music_beats_array = music_beats.split(\"o\")\n            val\
    \ music_beats_array_length = music_beats_array.length\n            val music_beats_array_last_beat\
    \ = music_beats_array_length-1\n            val music_beats_array_last_beat_array\
    \ = music_beats_array(music_beats_array_last_beat)\n            val music_beats_array_last_beat_array_length\
    \ = music_beats_array_last_beat_array.length\n            val music_beats_array_last_beat_array_last_beat\
    \ = music_beats_array_last_beat_array_length-1\n            val music_beats_array_last_beat_array_last_beat_array\
    \ = music_beats_array_last_beat_array(music_beats_array_last_beat_array_last_beat)\n\
    \            val music_beats_array_last_beat_array_last_beat_array_length = music_beats_array_last_beat_array_last_beat_array.length\n\
    \            val music_beats_array_last_beat_array_last_beat_array_last_beat =\
    \ music_beats_array_last_beat_array_last_beat_array_length-1\n            val\
    \ music_beats_array_last_beat_array_last_beat_array_last_beat_array = music_beats_array_last_beat_array_last_beat_array_last_beat(music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat)\n\
    \            val music_beats_array_last_beat_array_last_beat_array_last_beat_array_length\
    \ = music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat.length\n\
    \            val music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat\
    \ = music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat_array_last_beat(music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat_array_last_beat_array_last_beat)\n\
    \            val music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat_array_length\
    \ = music_beats_array_last_beat_array_last_beat_array_last_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgm8csqct.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpgm8csqct.scala:41:0 ----------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgm8csqct.scala:25:125 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mmusic_beats_array_last_beat_array_last_beat_array_length\e\
    [0m = music_beats_array_last_beat_array_last_beat_array.length\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm8csqct.scala:29:94 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mmusic_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat\e\
    [0m = music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat_array_last_beat(music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat_array_last_beat_array_last_beat)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: music_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat_array_last_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgm8csqct.scala:29:186\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m\
    \ \e[36mmusic_beats_array_last_beat_array_last_beat_array_last_beat_array_last_beat\e\
    [0m = music_beats_array_last_beat_array_l"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_long = music_list_size.asInstanceOf[Long]\n     \
    \   val music_list_size_long_in_bytes = music_list_size_long.asInstanceOf[Long]\n\
    \        val music_list_size_long_in_bytes_in_kb = music_list_size_long_in_bytes.asInstanceOf[Long]\
    \ / 1024\n        val music_list_size_long_in_bytes_in_mb = music_list_size_long_in_bytes_in_kb\
    \ / 1024\n        val music_list_size_long_in_bytes_in_gb = music_list_size_long_in_bytes_in_mb\
    \ / 1024\n        val music_list_size_long_in_bytes_in_tb = music_list_size_long_in_bytes_in_gb\
    \ / 1024\n        val music_list_size_long_in_bytes_in_pb = music_list_size_long_in_bytes_in_tb\
    \ / 1024\n        val music_list_size_long_in_bytes_in_eb = music_list_size_long_in_bytes_in_pb\
    \ / 1024\n        val music_list_size_long_in_bytes_in_zb = music_list_size_long_in_bytes_in_eb\
    \ / 1024\n        val music_list_size_long_in_bytes_in_bb_to_beat_conversion =\
    \ music_list_size_long_in_bytes_in_zb / 4\n        val music_list_size_long_in_bytes_in_beat_conversion\
    \ = music_list_size_long_in_bytes_in_bb_to_beat_conversion * 4\n        val music_list_size_long_in_bytes_in_beats\
    \ = music_list_size_long_in_bytes_in_beat_conversion\n        val music_list_size_long_in_bytes_in_beats_long\
    \ = music_list_size_long_in_bytes_in_beats.asInstanceOf[Long]\n        val music_list_size_long_in_bytes_in_beats_long_in_bytes\
    \ = music_list_size_long_in_bytes_in_beats_long.asInstanceOf[Long]\n        val\
    \ music_list_size_long_in_bytes_in_beats_long_in_bytes_in_kb = music_list_size_long_in_bytes_in_beats_long_in_bytes.asInstanceOf[Long]\
    \ / 1024\n        val music_list_size_long_in_bytes_in_beats_long_in_bytes_in_mb\
    \ = music_list_size_long_in_bytes_in_beats_long_in_bytes_in_kb.asInstanceOf[Long]\
    \ / 1024\n        val music_list_size_long_in_bytes_in_beats_long_in_bytes_in_gb\
    \ = music_list_size_long_in_bytes_in_beats_long_in_bytes_in_mb.asInstanceOf[Long]\
    \ / 1024\n        \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz0pcp_xj.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_int = music_list_size_long.asInstanceOf[Int]\n        val\
    \ music_list_size_long_long = music_list_size_long_int.asInstanceOf[Long]\n  \
    \      val music_list_size_long_long_int = music_list_size_long_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long = music_list_size_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_int = music_list_size_long_long_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long = music_list_size_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long = music_list_size_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long = music_list_size_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long.asInstanceOf[Int]\n\
    \        val music_list_size_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdl7t3uhp.scala:32:11 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpdl7t3uhp.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long.asInstanceOf[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_int is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_int\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdl7t3uhp.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long\e\
    [0m = music_list_size_long_long_long_long_long_long_int.asInstanceOf[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_long_long_long_long_long_long\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdl7t3uhp.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long.asInstanceOf[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_inv = music_list_size_long.inv\n        val music_list_size_long_inv_inv\
    \ = music_list_size_long_inv.inv\n        val music_list_size_long_inv_inv_inv\
    \ = music_list_size_long_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val\
    \ music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n   \
    \     val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_in\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_6wd5hu.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9_6wd5hu.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9_6wd5hu.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_in\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => {\n            val music_note\
    \ = music_string.split(\"o|\")\n            val music_note_length = music_note.length\n\
    \            val music_note_beats = music_note.map(music_note => {\n         \
    \       val music_note_beat = music_note.split(\"\\\\.|\")\n                val\
    \ music_note_beat_length = music_note_beat.length\n                val music_note_beat_beats\
    \ = music_note_beat.map(music_note_beat => {\n                    val music_note_beat_beat\
    \ = music_note_beat.map(music_note_beat => {\n                        val music_note_beat_beat_length\
    \ = music_note_beat_beat.length\n                        val music_note_beat_beat_beats\
    \ = music_note_beat_beat.map(music_note_beat_beat => {\n                     \
    \       val music_note_beat_beat_beat = music_note_beat_beat.map(music_note_beat_beat\
    \ => {\n                                val music_note_beat_beat_beat_length =\
    \ music_note_beat_beat_beat.length\n                                val music_note_beat_beat_beat_beats\
    \ = music_note_beat_beat_beat.map(music_note_beat_beat_beat => {\n           \
    \                         val music_note_beat_beat_beat_length = music_note_beat_beat_beat.length\n\
    \                                    val music_note_beat_beat_beat_beats = music_note_beat_beat_beat.map(music_note_beat_beat_beat\
    \ => {\n                                        val music_note_beat_beat_beat_length\
    \ = music_note_beat_beat_beat.length\n                                       \
    \ val music_note_beat_beat_beat_beats = music_note_beat_beat_beat.map(music_note_beat_beat_beat\
    \ => {\n                                            val music_note_beat_beat_beat_length\
    \ = music_note_beat_beat_beat.length\n                                       \
    \     val music_note_beat_beat_beat_beats = music_note_beat_beat_beat.map(music_note_beat_beat_beat\
    \ => {\n                                                val music_note_beat_beat_beat_length\
    \ = music_note_beat_beat_beat.length\n                                       \
    \         val music_note_beat_beat_beat_beats = music_note_beat_beat_beat.map(music_note_beat_beat_beat\
    \ => {\n                                                    val music_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa858iqp6.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa858iqp6.scala:37:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpa858iqp6.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa858iqp6.scala:22:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                     \
    \   \e[33mval\e[0m \e[36mmusic_note_beat_beat_length\e[0m = music_note_beat_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m\
    \ \e[35mmusic_note_beat_beat\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpa858iqp6.scala:23:57 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                        \e[33mval\e[0m \e[36mmusic_note_beat_beat_beats\e\
    [0m = music_note_beat_beat.map(\e[36mmusic_note_beat_beat\e[0m => {\n\e[31m\e\
    [31m   |\e[0m                                                         ^\e[0m\n\
    \e[31m   |\e[0m                         Recursive \e[33mvalue\e[0m \e[35mmusic_note_beat_beat\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa858iqp6.scala:45:1\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_inv = music_list_size_long.inv\n        val music_list_size_long_inv_int\
    \ = music_list_size_long_inv.asInstanceOf[Int]\n        val music_list_size_long_inv_long\
    \ = music_list_size_long_inv_int.asInstanceOf[Long]\n        val music_list_size_long_inv_long_inv\
    \ = music_list_size_long_inv_long.inv\n        val music_list_size_long_inv_long_inv_int\
    \ = music_list_size_long_inv_long_inv.asInstanceOf[Int]\n        val music_list_size_long_inv_long_inv_long\
    \ = music_list_size_long_inv_long_inv_int.asInstanceOf[Long]\n        val music_list_size_long_inv_long_inv_long_inv\
    \ = music_list_size_long_inv_long_inv_long.inv\n        val music_list_size_long_inv_long_inv_long_inv_int\
    \ = music_list_size_long_inv_long_inv_long_inv.asInstanceOf[Int]\n        val\
    \ music_list_size_long_inv_long_inv_long_inv_long = music_list_size_long_inv_long_inv_long_inv_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv = music_list_size_long_inv_long_inv_long_inv_long.inv\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv_int = music_list_size_long_inv_long_inv_long_inv_long_inv.asInstanceOf[Int]\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv_long = music_list_size_long_inv_long_inv_long_inv_long_inv_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv_long_inv = music_list_size_long_inv_long_inv_long_inv_long_inv_long.inv\n\
    \        val music_list_size_long_inv_long_inv_long_inv_long_inv_long_inv_int\
    \ = music_list_size_long_inv_long_inv_long\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzxt6kusy.scala:16:60 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv\e\
    [0m = music_list_size_long.inv\n\e[31m\e[31m   |\e[0m                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                        value inv is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzxt6kusy.scala:30:5 ---------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beats = music_string.substring(0, 1)\n           \
    \     val rest = music_string.substring(1)\n                beats.toLong * 4\n\
    \            }).reduce((a, b) => a + b)\n            beats.toLong\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp8a6vialx.scala:13)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.parseMusic(tmp8a6vialx.scala:20)\n\tat Problem$.main(tmp8a6vialx.scala:23)\n\
    \tat Problem.main(tmp8a6vialx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    val note = music_string.split(\"\
    .\").map(music_string => {\n                        val note = music_string.split(\"\
    -\").map(music_string => {\n                            val note = music_string.split(\"\
    /\").map(music_string => {\n                                val note = music_string.split(\"\
    b\").map(music_string => {\n                                    val note = music_string.split(\"\
    #\").map(music_string => {\n                                        val note =\
    \ music_string.split(\"b#\").map(music_string => {\n                         \
    \                   val note = music_string.split(\"#b\").map(music_string =>\
    \ {\n                                                val note = music_string.split(\"\
    b#b\").map(music_string => {\n                                               \
    \     val note = music_string.split(\"#b#\").map(music_string => {\n         \
    \                                               val note = music_string.split(\"\
    b#b#\").map(music_string => {\n                                              \
    \              val note = music_string.split(\"#b#b#\").map(music_string => {\n\
    \                                                                val note = music_string.split(\"\
    b#b#b\").map(music_string => {\n                                             \
    \                       val note = music_string.split(\"#b#b#\").map(music_string\
    \ => {\n                                                                     \
    \   val note = music_string.split(\"b#b#b\").map(music_string => {\n         \
    \                                                                   val note =\
    \ music_string.split(\"#b#b#\").map(music_string => {\n                      \
    \                                                          val note = music_string.split(\"\
    b#b#b\").map(music_string => {\n                                             \
    \                                       val note = music_string.split(\"#b#b#\"\
    ).map(music_string => {\n                                                    \
    \                                    val note = music_string.split(\"b#b#b\").map(music_string\
    \ => {\n                                                                     \
    \                       val note = music_string.split(\"#b#b#\").map(music_string\
    \ => {\n                                                                     \
    \                           val note = music_string.split(\"b#b#b\").map(music_string\
    \ => {\n                                                                     \
    \                               val note = music_string.split(\"#b#b#\").map(music_string\
    \ => {\n                                                                     \
    \                                   val note = music_string.split(\"b#b#b\").map(music_string\
    \ => {\n                                                                     \
    \                                       val note = music_string.split(\"#b#b#\"\
    ).map(music_string => {\n                                                    \
    \                                                            val note = music_string.split(\"\
    b#b#b\").map(music_string => {\n                                             \
    \                                                                       val note\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk4zeehqa.scala:39:126 --------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                                                    \
    \                                                                \e[33mval\e[0m\
    \ \e[36mnote\e[0m = \n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpk4zeehqa.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpk4zeehqa.scala:50:0 ----------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => {\n            val music_beats\
    \ = music_string.split(\"o|\")\n            val music_beats_length = music_beats.length\n\
    \            val music_beats_count = music_beats.map(music_string => {\n     \
    \           val music_beats_count = music_string.split(\"\\\\.|\")\n         \
    \       val music_beats_count_length = music_beats_count.length\n            \
    \    val music_beats_count_count = music_beats_count.map(music_string => {\n \
    \                   val music_beats_count_count = music_string.split(\"o|\")\n\
    \                    val music_beats_count_count_length = music_beats_count_count.length\n\
    \                    val music_beats_count_count_count = music_beats_count_count.map(music_string\
    \ => {\n                        val music_beats_count_count_count = music_string.split(\"\
    \\\\.|\")\n                        val music_beats_count_count_count_length =\
    \ music_beats_count_count_count.length\n                        val music_beats_count_count_count_count\
    \ = music_beats_count_count_count.map(music_string => {\n                    \
    \        val music_beats_count_count_count_length = music_beats_count_count_count.length\n\
    \                            val music_beats_count_count_count_count = music_beats_count_count_count.map(music_string\
    \ => {\n                                val music_beats_count_count_count_length\
    \ = music_beats_count_count_count.length\n                                val\
    \ music_beats_count_count_count_count = music_beats_count_count_count.map(music_string\
    \ => {\n                                    val music_beats_count_count_count_count_length\
    \ = music_beats_count_count_count_count.length\n                             \
    \       val music_beats_count_count_count_count_count = music_beats_count_count_count_count.map(music_string\
    \ => {\n                                        val music_beats_count_count_count_count_count_length\
    \ = music_beats_count_count_count_count_count.length\n                       \
    \                 val music_beats_count_count_count_count_count_count = music_beats_count_count_count_count_count.map(music_string\
    \ => {\n                                            val music_beats_count_count_count_count_count_length\
    \ = music_beats_count_count_count_count_count.length\n                       \
    \                     val music_beats_count_count_count_count_count_count = music_beats_count_count_count_count_count_count.map(music_string\
    \ => {\n                                                val music_beats_count_count_count_count_count_count_length\
    \ = music_beats_count_count_count_count_count_count_count.length\n           \
    \                                     val music_beats_count_count_count_count_count_count_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaqq78h_s.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaqq78h_s.scala:40:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m40 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpaqq78h_s.scala:49:0 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpaqq78h_s.scala:31:85\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                     \
    \               \e[33mval\e[0m \e[36mmusic_beats_count_count_count_count_length\e\
    [0m = music_beats_count_count_count_count.length\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mmusic_beats_count_count_count_count\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpaqq78h_s.scala:32:84\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                     \
    \               \e[33mval\e[0m \e[36mmusic_beats_count_count_count_count_count\e\
    [0m = music_beats_count_count_count_count.map(\e[36mmusic_string\e[0m => {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                          ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e\
    [0m \e[35mmusic_beats_count_count_count_count\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaqq78h_s.scala:48:1 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when co"
  stdout: ''
  timestamp: 1660029168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    music_string.split(\".\").map(music_string\
    \ => {\n                        music_string.split(\"-\").map(music_string =>\
    \ {\n                            music_string.split(\"/\").map(music_string =>\
    \ {\n                                music_string.split(\"\\\\\").map(music_string\
    \ => {\n                                    music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                        music_string.split(\"-\").map(music_string\
    \ => {\n                                            music_string.split(\"/\").map(music_string\
    \ => {\n                                                music_string.split(\"\\\
    \\\").map(music_string => {\n                                                \
    \    music_string.split(\"\\\\|\").map(music_string => {\n                   \
    \                                     music_string.split(\"-\").map(music_string\
    \ => {\n                                                            music_string.split(\"\
    /\").map(music_string => {\n                                                 \
    \               music_string.split(\"\\\\\").map(music_string => {\n         \
    \                                                           music_string.split(\"\
    \\\\|\").map(music_string => {\n                                             \
    \                           music_string.split(\"-\").map(music_string => {\n\
    \                                                                            music_string.split(\"\
    /\").map(music_string => {\n                                                 \
    \                               music_string.split(\"\\\\\").map(music_string\
    \ => {\n                                                                     \
    \               music_string.split(\"\\\\|\").map(music_string => {\n        \
    \                                                                            \
    \    music_string.split(\"-\").map(music_string => {\n                       \
    \                                                                     music_string.split(\"\
    /\").map(music_string => {\n                                                 \
    \                                               music_string.split(\"\\\\\").map(music_string\
    \ => {\n                                                                     \
    \                               music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                                   music_string.split(\"-\").map(music_string\
    \ => {\n                                                                     \
    \                                       music_string.split(\"/\").map(music_string\
    \ => {\n                                                                     \
    \                                           music_string.split(\"\\\\\").map(music_string\
    \ => {\n                                                                     \
    \                                               music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                                                   music_string.split(\"-\").map(music_string\
    \ => {\n                                                                     \
    \                                                       music_string.split(\"\
    /\").map(music_string => {\n                                                 \
    \                                                                            \
    \   music_string.split(\"\\\\\").map(music_string => {\n                     \
    \                                                                            \
    \                                   music_string.split(\"\\\\|\").map(music_string\
    \ => {\n                                                                     \
    \                                                                   music_string.split(\"\
    -\").map(music_string => {\n                                                 \
    \                                                                            \
    \               music_string.split(\"/\").map(music_string => {\n            \
    \                                                                            \
    \                                                        music_string.split(\"\
    \\\\\").map(music_string => {\n                                              \
    \                                                                            \
    \                          music_string.split(\"\\\\|\").map(music_string => {\n\
    \                                                                            \
    \                                                                            \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdbwq5jkb.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpdbwq5jkb.scala:59:0 ----------------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_beats = music_string.split(\"o|\")\n            val music_string_beats_size\
    \ = music_string_beats.size\n            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_size = music_string_beats_beat.size\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    \\\\.|\")\n                val music_string_beats_beats_beats_size = music_string_beats_beats_beats.size\n\
    \                val music_string_beats_beats_beats_beats = music_string_beats_beats_beats.map(music_string_beats_beats_beat\
    \ => {\n                    val music_string_beats_beats_beats_beats_size = music_string_beats_beats_beats_beat.size\n\
    \                    val music_string_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beat.split(\"\
    o|\")\n                    val music_string_beats_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beats_beats.size\n                    val music_string_beats_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beats_beats_beats_beat.size\n             \
    \           val music_string_beats_beats_beats_beats_beats_beats_beats_beats =\
    \ music_string_beats_beats_beats_beats_beats_beats_beats_beat.split(\"\\\\.|\"\
    )\n                        val music_string_beats_beats_beats_beats_beats_beats_beats_beats_size\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats.size\n      \
    \                  val music_string_beats_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats_beats_beat.split(\"\
    o|\")\n                        val music_string_beats_beats_beat\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvdxvx84e.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvdxvx84e.scala:32:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpvdxvx84e.scala:41:0 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdxvx84e.scala:18:52\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_size\e[0m = music_string_beats_beat.size\n\e\
    [31m\e[31m   |\e[0m                                                    ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvdxvx84e.scala:19:53\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\"\\\\.|\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Not found: music_string_beats_beat\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvdxvx84e.scala:40:1 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_notes = music_list.map(music_string => {\n            val note\
    \ = music_string.split(\"o|\")\n            val note_length = note.length\n  \
    \          val note_note = note.map(note_string => {\n                val note_value\
    \ = note_string.split(\"\\\\.|\")\n                val note_note_length = note_note.length\n\
    \                val note_note_value = note_note.map(note_note_string => {\n \
    \                   val note_note_value_string = note_note_string.trim\n     \
    \               note_note_value_string.toLong\n                })\n          \
    \      note_note_length.toLong\n            })\n            note_length.toLong\n\
    \        })\n        music_notes.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5zpdfmqd.scala:19:39 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mnote_note_length\e\
    [0m = note_note.length\n\e[31m\e[31m   |\e[0m                                \
    \       ^\e[0m\n\e[31m   |\e[0m                                    Recursive \e\
    [33mvalue\e[0m \e[35mnote_note\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp5zpdfmqd.scala:25:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            })\n\e[31m\e[31m   |\e[0m              ^\e\
    [0m\n\e[31m   |\e[0m              No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m              where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_length = music_list_size / 4\n        val music_list_remainder\
    \ = music_list_size % 4\n        val music_list_quarter = music_list_remainder\
    \ / 2\n        val music_list_half = music_list_remainder % 2\n        val music_list_whole\
    \ = music_list_length - music_list_quarter - music_list_half\n        val music_list_quarters\
    \ = music_list_whole.toLong * 4\n        val music_list_halfs = music_list_quarters.toLong\
    \ * 2\n        val music_list_quarters_remainder = music_list_quarters.toLong\
    \ % 4\n        val music_list_quarters_half = music_list_quarters_remainder /\
    \ 2\n        val music_list_quarters_whole = music_list_quarters_remainder % 2\n\
    \        val music_list_quarters_length = music_list_quarters_whole.toLong * 4\n\
    \        val music_list_halfs_length = music_list_quarters_length.toLong * 2\n\
    \        val music_list_quarters_halfs_length = music_list_quarters_halfs_length.toLong\
    \ * 2\n        val music_list_quarters_halfs_whole = music_list_quarters_halfs_length.toLong\
    \ % 2\n        val music_list_quarters_halfs_whole_length = music_list_quarters_halfs_whole.toLong\
    \ * 4\n        val music_list_halfs_whole_length = music_list_halfs_whole_length.toLong\
    \ * 2\n        val music_list_whole_length = music_list_whole_length.toLong *\
    \ 4\n        val music_list_length = music_list_whole_length + music_list_quarters_length\
    \ + music_list_halfs_length + music_list_quarters_halfs_length + music_list_quarters_halfs_whole_length\
    \ + music_list_halfs_whole_length\n        val music_list_quarters_length = music_list_quarters_whole_length\
    \ + music_list_halfs_whole_length\n        val music_list_halfs_length = music_list_quarters_halfs_whole_length\
    \ + music_list_quarters_halfs_whole_length\n        val music_list_quarters_halfs_length\
    \ = music_list_quarters_halfs_whole_length + music_list_halfs_whole_length\n \
    \       val music_list_quarters_halfs_whole_length = music_list_quarters_halfs_whole_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__ye6eyy.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_length\e[0m =\
    \ music_list_whole_length + music_list_quarters_length + music_list_halfs_length\
    \ + music_list_quarters_halfs_length + music_list_quarters_halfs_whole_length\
    \ + music_list_halfs_whole_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_length is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_list_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp__ye6eyy.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_quarters_length\e\
    [0m = music_list_quarters_whole_length + music_list_halfs_whole_length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_quarters_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_quarters_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__ye6eyy.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_halfs_length\e\
    [0m = music_list_quarters_halfs_whole_length + music_list_quarters_halfs_whole_length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_halfs_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_halfs_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tm"
  stdout: ''
  timestamp: 1660029174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => {\n            val music_beats\
    \ = music_string.split(\"o\").length\n            music_beats\n        }).toList\n\
    \        val music_beats_sum = music_beats.sum\n        val music_beats_length\
    \ = music_beats.length\n        val music_beats_length = music_beats_length /\
    \ 4\n        val music_beats_length = music_beats_length * 4\n        val music_beats_length\
    \ = music_beats_length + music_beats_length\n        val music_beats_length =\
    \ music_beats_length / 4\n        val music_beats_length = music_beats_length\
    \ * 4\n        val music_beats_length = music_beats_length + music_beats_length\n\
    \        val music_beats_length = music_beats_length / 4\n        val music_beats_length\
    \ = music_beats_length * 4\n        val music_beats_length = music_beats_length\
    \ + music_beats_length\n        val music_beats_length = music_beats_length /\
    \ 4\n        val music_beats_length = music_beats_length * 4\n        val music_beats_length\
    \ = music_beats_length + music_beats_length\n        val music_beats_length =\
    \ music_beats_length / 4\n        val music_beats_length = music_beats_length\
    \ * 4\n        val music_beats_length = music_beats_length + music_beats_length\n\
    \        val music_beats_length = music_beats_length / 4\n        val music_beats_length\
    \ = music_beats_length * 4\n        val music_beats_length = music_beats_length\
    \ + music_beats_length\n        val music_beats_length = music_beats_length /\
    \ 4\n        val music_beats_length = music_beats_length * 4\n        val music_beats_length\
    \ = music_beats_length + music_beats_length\n        val music_beats_length =\
    \ music_beats_length / 4\n        val music_beats_length = music_beats_length\
    \ * 4\n        val music_beats_length = music_beats_length + music_beats_length\n\
    \        val music_beats_length = music_beats_length / 4\n        val music_beats_length\
    \ = music_beats_length * 4\n        val musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0j5zqoyp.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j5zqoyp.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_beats_length\e[0m = music_beats_length / \e[31m4\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmusic_beats_length is already defined as \e[33mvalue\e[0m \e[35mmusic_beats_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0j5zqoyp.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_length\e[0m = music_beats_length\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0j5zqoyp.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_length\e[0m\
    \ = music_beats_length + music_beats_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0j5zqoyp.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_length\e[0m\
    \ = music_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_beats_length\e[0"
  stdout: ''
  timestamp: 1660029175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val note = note.trim\n              \
    \  val note = note.charAt(0)\n                val note = note.charAt(1)\n    \
    \            val note = note.charAt(2)\n                val note = note.charAt(3)\n\
    \                val note = note.charAt(4)\n                val note = note.charAt(5)\n\
    \                val note = note.charAt(6)\n                val note = note.charAt(7)\n\
    \                val note = note.charAt(8)\n                val note = note.charAt(9)\n\
    \                val note = note.charAt(10)\n                val note = note.charAt(11)\n\
    \                val note = note.charAt(12)\n                val note = note.charAt(13)\n\
    \                val note = note.charAt(14)\n                val note = note.charAt(15)\n\
    \                val note = note.charAt(16)\n                val note = note.charAt(17)\n\
    \                val note = note.charAt(18)\n                val note = note.charAt(19)\n\
    \                val note = note.charAt(20)\n                val note = note.charAt(21)\n\
    \                val note = note.charAt(22)\n                val note = note.charAt(23)\n\
    \                val note = note.charAt(24)\n                val note = note.charAt(25)\n\
    \                val note = note.charAt(26)\n                val note = note.charAt(27)\n\
    \                val note = note.charAt(28)\n                val note = note.charAt(29)\n\
    \                val note = note.charAt(30)\n                val note = note.charAt(31)\n\
    \                val note = note.charAt(32)\n                val note = note.charAt(33)\n\
    \                val note = note.charAt(34)\n                val note = note.charAt(35)\n\
    \                val note = note.charAt(36)\n                val note = note.charAt(37)\n\
    \                val note = note.charAt(38)\n                val note = note.charAt(39)\n\
    \                val note = note.charAt(40)\n                val note = note.charAt(41)\n\
    \                val note = note.charAt(42)\n                val note = note.charAt(43)\n\
    \                val note = note.charAt(44)\n                val note = note.charAt(45)\n\
    \                val note = note.charAt(46)\n                val note = note.charAt(47)\n\
    \                val note = note.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy7yx0jmg.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpy7yx0jmg.scala:67:4 ----------------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e\
    [35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')'\
    \ expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy7yx0jmg.scala:76:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n3 errors found\n"
  stdout: ''
  timestamp: 1660029171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_int = music_list_size_long.asInstanceOf[Int]\n        val\
    \ music_list_size_long_long_int = music_list_size_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_int = music_list_size_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[Long]\n\
    \        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpigtwgavm.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpigtwgavm.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpigtwgavm.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\e\
    [0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_int.asInstanceOf[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_int\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel d"
  stdout: ''
  timestamp: 1660029161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => {\n            val music_note\
    \ = music_string.split(\"o|\")\n            val music_note_length = music_note.length\n\
    \            val music_note_beats = music_note.map(music_string => {\n       \
    \         val music_note_note = music_string.split(\"\\\\.|\")\n             \
    \   val music_note_note_length = music_note_note.length\n                val music_note_note_beats\
    \ = music_note_note.map(music_string => {\n                    val music_note_note_note\
    \ = music_string.split(\"o|\")\n                    val music_note_note_note_length\
    \ = music_note_note_note.length\n                    val music_note_note_note_beats\
    \ = music_note_note_note.map(music_string => {\n                        val music_note_note_note_note\
    \ = music_string.split(\"\\\\.|\")\n                        val music_note_note_note_note_length\
    \ = music_note_note_note_note.length\n                        val music_note_note_note_note_beats\
    \ = music_note_note_note_note.map(music_string => {\n                        \
    \    val music_note_note_note_note_note = music_string.split(\"o|\")\n       \
    \                     val music_note_note_note_note_note_length = music_note_note_note_note_note.length\n\
    \                            val music_note_note_note_note_note_beats = music_note_note_note_note_note.map(music_string\
    \ => {\n                                val music_note_note_note_note_note_note\
    \ = music_string.split(\"\\\\.|\")\n                                val music_note_note_note_note_note_note_length\
    \ = music_note_note_note_note_note_note.length\n                             \
    \   val music_note_note_note_note_note_note_beats = music_note_note_note_note_note_note.map(music_string\
    \ => {\n                                    val music_note_note_note_note_note_note_note\
    \ = music_string.split(\"o|\")\n                                    val music_note_note_note_note_note_note_length\
    \ = music_note_note_note_note_note_note.length\n                             \
    \       val music_note_note_note_note_note_note_beats = music_note_note_note_note_note_note_note.map(music_string\
    \ => {\n                                        val music_note_note_note_note_note_note_note\
    \ = music_string.split(\"\\\\.|\")\n                                        val\
    \ music_note_note_note_note_note_note_length = music_note_note_note_note_note_note_note.length\n\
    \                                        val music_note_note_note_note_note_note_note_beats\
    \ = music_note_note_note_note_note_note_note_note.map(music_string => {\n    \
    \                                        val music_note_note_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoy8_n6b6.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoy8_n6b6.scala:41:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m41 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpoy8_n6b6.scala:50:0 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoy8_n6b6.scala:38:93\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                        \
    \                \e[33mval\e[0m \e[36mmusic_note_note_note_note_note_note_note_beats\e\
    [0m = music_note_note_note_note_note_note_note_note.map(\e[36mmusic_string\e[0m\
    \ => {\n\e[31m\e[31m   |\e[0m                                                \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: music_note_note_note_note_note_note_note_note\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoy8_n6b6.scala:49:1\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(x => x.split(\"o|\")(0).toLong)\n        val\
    \ notes_beats_length = notes_beats.length\n        val notes_beats_length = notes_beats_length\
    \ / 4\n        val notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length + notes_beats_length\n        val notes_beats_length =\
    \ notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ * 4\n        val notes_beats_length = notes_beats_length + notes_beats_length\n\
    \        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length * 4\n        val notes_beats_length = notes_beats_length\
    \ + notes_beats_length\n        val notes_beats_length = notes_beats_length /\
    \ 4\n        val notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length + notes_beats_length\n        val notes_beats_length =\
    \ notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ * 4\n        val notes_beats_length = notes_beats_length + notes_beats_length\n\
    \        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length * 4\n        val notes_beats_length = notes_beats_length\
    \ + notes_beats_length\n        val notes_beats_length = notes_beats_length /\
    \ 4\n        val notes_beats_length = notes_beats_length * 4\n        val notes_beats_length\
    \ = notes_beats_length + notes_beats_length\n        val notes_beats_length =\
    \ notes_beats_length / 4\n        val notes_beats_length = notes_beats_length\
    \ * 4\n        val notes_beats_length = notes_beats_length + notes_beats_length\n\
    \        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length * 4\n        val notes_beats_length = notes_beats_length\
    \ + notes_beats_length\n        val notes_beats_length = notes_beats_length /\
    \ 4\n        val note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_k7i2ha_.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_k7i2ha_.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_length\e[0m = notes_beats_length / \e[31m4\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_k7i2ha_.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m = notes_beats_length\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_k7i2ha_.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length + notes_beats_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_k7i2ha_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0"
  stdout: ''
  timestamp: 1660029177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length).trim\n\
    \            val beats_array = beats.split(\"o\").map(_.toInt)\n            val\
    \ beats_array = beats_array.map(_.toLong)\n            beats_array.sum\n     \
    \   }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0rk96lwz.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mbeats_array\e[0m = beats_array.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mbeats_array is already defined as \e[33mvalue\e[0m \e[35mbeats_array\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660029173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n    \
    \    val notes_beats = notes.map(x => x.split(\"o|\")(0).length)\n        val\
    \ notes_beats_count = notes_beats.sum\n        val notes_beats_count_2 = notes_beats_count\
    \ * 2\n        val notes_beats_count_3 = notes_beats_count * 3\n        val notes_beats_count_4\
    \ = notes_beats_count * 4\n        val notes_beats_count_5 = notes_beats_count\
    \ * 5\n        val notes_beats_count_6 = notes_beats_count * 6\n        val notes_beats_count_7\
    \ = notes_beats_count * 7\n        val notes_beats_count_8 = notes_beats_count\
    \ * 8\n        val notes_beats_count_9 = notes_beats_count * 9\n        val notes_beats_count_10\
    \ = notes_beats_count * 10\n        val notes_beats_count_11 = notes_beats_count\
    \ * 11\n        val notes_beats_count_12 = notes_beats_count * 12\n        val\
    \ notes_beats_count_13 = notes_beats_count * 13\n        val notes_beats_count_14\
    \ = notes_beats_count * 14\n        val notes_beats_count_15 = notes_beats_count\
    \ * 15\n        val notes_beats_count_16 = notes_beats_count * 16\n        val\
    \ notes_beats_count_17 = notes_beats_count * 17\n        val notes_beats_count_18\
    \ = notes_beats_count * 18\n        val notes_beats_count_19 = notes_beats_count\
    \ * 19\n        val notes_beats_count_20 = notes_beats_count * 20\n        val\
    \ notes_beats_count_21 = notes_beats_count * 21\n        val notes_beats_count_22\
    \ = notes_beats_count * 22\n        val notes_beats_count_23 = notes_beats_count\
    \ * 23\n        val notes_beats_count_24 = notes_beats_count * 24\n        val\
    \ notes_beats_count_25 = notes_beats_count * 25\n        val notes_beats_count_26\
    \ = notes_beats_count * 26\n        val notes_beats_count_27 = notes_beats_count\
    \ * 27\n        val notes_beats_count_28 = notes_beats_count * 28\n        val\
    \ notes_beats_count_29 = notes_beat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp39zt0d0t.scala:43:35 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_count_29\e[0m\
    \ = notes_beat\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: notes_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp39zt0d0t.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length)\n\
    \            val beats_as_int: Int = beats.toInt\n            val note_to_beats\
    \ = Map(\n                \"o\" -> 4,\n                \"o|\" -> 2,\n        \
    \        \".|\" -> 1\n            )\n            val beats_as_note = note_to_beats(note)\n\
    \            beats_as_int * beats_as_note\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7i5s0m8u.scala:23:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m, music_string.length)\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36mbeats_as_int\e[0m: \e[35mInt\e[0m = beats.toInt\n\e[31m16 |\e[0m         \
    \   \e[33mval\e[0m \e[36mnote_to_beats\e[0m = Map(\n\e[31m17 |\e[0m          \
    \      \e[31m\"o\"\e[0m -> \e[31m4\e[0m,\n\e[31m18 |\e[0m                \e[31m\"\
    o|\"\e[0m -> \e[31m2\e[0m,\n\e[31m19 |\e[0m                \e[31m\".|\"\e[0m ->\
    \ \e[31m1\e[0m\n\e[31m20 |\e[0m            )\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36mbeats_as_note\e[0m = note_to_beats(note)\n\e[31m22 |\e[0m          \
    \  beats_as_int * beats_as_note\n\e[31m23 |\e[0m        }).toList\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => {\n            val music_beats\
    \ = music_string.split(\"o|\")\n            val music_beats_length = music_beats.length\n\
    \            val music_beats_last_beat = music_beats(music_beats_length - 1)\n\
    \            val music_beats_last_beat_length = music_beats_last_beat.length\n\
    \            val music_beats_last_beat_length = music_beats_last_beat_length.toInt\n\
    \            val music_beats_last_beat_beats = music_beats_last_beat.toInt\n \
    \           music_beats_last_beat_beats\n        })\n        val music_beats_sum\
    \ = music_beats.sum\n        val music_beats_length = music_beats.length\n   \
    \     val music_beats_last_beat_length = music_beats_last_beat.length\n      \
    \  val music_beats_last_beat_length = music_beats_last_beat_length.toInt\n   \
    \     val music_beats_last_beat_beats = music_beats_last_beat.toInt\n        val\
    \ music_beats_last_beat_beats_length = music_beats_last_beat_beats.length\n  \
    \      val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \        val music_beats_last_beat_beats_length = music_beats_last_beat_beats_length.toInt\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08y9k2wv.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_last_beat_length\e\
    [0m = music_beats_last_beat_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_last_beat_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_beats_last_beat_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08y9k2wv.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_last_beat_beats_length\e\
    [0m = music_beats_last_beat_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_last_beat_beats_length is already defined as \e\
    [33mvalue\e[0m \e[35mmusic_beats_last_beat_beats_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08y9k2wv.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_beats_last_beat_beats_length\e[0m = music_beats_last_beat_beats_length.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_last_beat_beats_length is already defined as \e\
    [33mvalue\e[0m \e[35mmusic_beats_last_beat_beats_length\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp08y9k2wv.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_beats_last_beat_beats_length\e[0m = music_beats_last_beat_beats_length.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmu"
  stdout: ''
  timestamp: 1660029177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_notes = music_list.map(music_string => {\n            val note\
    \ = music_string.split(\"o|\")(0)\n            val beats = music_string.split(\"\
    o|\")(1).split(\"\\\\.|\")(0)\n            val beats_number = beats.toInt\n  \
    \          val notes_number = note.toInt\n            val notes_length = notes_number\
    \ * beats_number\n            notes_length\n        })\n        val music_length\
    \ = music_notes.sum\n        val music_notes_length = music_notes.map(music_note\
    \ => {\n            music_note\n        }).sum\n        val music_notes_length\
    \ = music_notes_length / music_length\n        val music_notes_length = music_notes_length.toLong\n\
    \        music_notes_length\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbvobkvbu.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_length\e[0m = music_notes.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mmusic_length is already defined as \e[33mvalue\e[0m \e[35mmusic_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbvobkvbu.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m = music_notes_length\
    \ / music_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbvobkvbu.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpbvobkvbu.scala:28:8 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        music_notes_length\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (music_notes_length\
    \ : Int)\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_inv = music_list_size_long.inv\n        val music_list_size_long_inv_inv\
    \ = music_list_size_long_inv.inv\n        val music_list_size_long_inv_inv_inv\
    \ = music_list_size_long_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val\
    \ music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n   \
    \     val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_in\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_6wd5hu.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9_6wd5hu.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9_6wd5hu.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_in\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_long = music_list_size.asInstanceOf[Long]\n     \
    \   val music_list_size_long_in_bytes = music_list_size_long.asInstanceOf[Long]\n\
    \        val music_list_size_long_in_bytes_in_bits = music_list_size_long_in_bytes.asInstanceOf[Long]\n\
    \        val music_list_size_long_in_bits = music_list_size_long_in_bytes_in_bits\
    \ / 8\n        val music_list_size_long_in_bits_long = music_list_size_long_in_bits\
    \ * 8\n        val music_list_size_long_in_bits_long_in_bytes = music_list_size_long_in_bits_long.asInstanceOf[Long]\n\
    \        val music_list_size_long_in_bits_long_in_bytes_in_bits = music_list_size_long_in_bits_long_in_bytes.asInstanceOf[Long]\n\
    \        val music_list_size_long_in_bits_long_in_bits = music_list_size_long_in_bits_long_in_bytes_in_bits\
    \ / 8\n        val music_list_size_long_in_bits_long_in_bits_long = music_list_size_long_in_bits_long_in_bits\
    \ * 8\n        val music_list_size_long_in_bits_long_in_bits_long_in_bytes = music_list_size_long_in_bits_long_in_bits_long.asInstanceOf[Long]\n\
    \        val music_list_size_long_in_bits_long_in_bits_long_in_bytes_in_bits =\
    \ music_list_size_long_in_bits_long_in_bits_long_in_bytes.asInstanceOf[Long]\n\
    \        val music_list_size_long_in_bits_long_in_bits_long_in_bits = music_list_size_long_in_bits_long_in_bits_long_in_bytes_in_bits\
    \ / 8\n        val music_list_size_long_in_bits_long_in_bits_long_in_bits_long\
    \ = music_list_size_long_in_bits_long_in_bits_long_in_bits * 8\n        val music_list_size_long_in_bits_long_in_bits_long_in_bits_long_in_bytes\
    \ = music_list_size_long_in_bits_long_in_bits_long_in_bits_long.asInstanceOf[Long]\n\
    \        val music_list_size_long_in_bits_long_in_bits_long_in_bits_long_in_bytes_in_bits\
    \ = music_list_size_long_in_bits_long_in_bits_long_in_bits_long\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpniye2457.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7j6_eir4.scala:13:4 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp7j6_eir4.scala:12:1966\
    \ ---------------------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e\
    [36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => music_string.split(\e[31m\"o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"\\\\.|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m =>"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_beats = music_string.split(\"o\")\n            val music_string_beats_length\
    \ = music_string_beats.length\n            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    .\").map(music_string_beats_beat => {\n                    val music_string_beats_beats_beats_length\
    \ = music_string_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats\
    \ = music_string_beats_beats_beat.split(\"|\").map(music_string_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beat.length\n                        val music_string_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beat.length\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beat.length\n                       \
    \ val music_string_beats_beats_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beat.length\n                 \
    \       val music_string_beats_beats_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beat.length\n     \
    \                   val music_string_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beat.length\n     \
    \                   val music_string_beats_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:33:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1p4gptt7.scala:18:54\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_length\e[0m = music_string_beats_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1p4gptt7.scala:19:53\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\".\"\e[0m).map(\e[36mmusic_string_beats_beat\e[0m => {\n\e[31m\e[31m   |\e\
    [0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1p4gptt7.scala:41:1\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => music_string.split(\"\
    o|\\\\.|\").length).sum\n        val music_beats_array = Array[Long](music_beats)\n\
    \        val music_beats_array_length = music_beats_array.length\n        val\
    \ music_beats_array_copy = music_beats_array.clone()\n        val music_beats_array_copy_reversed\
    \ = music_beats_array_copy.reverse\n        val music_beats_array_copy_reversed_length\
    \ = music_beats_array_copy_reversed.length\n        val music_beats_array_copy_reversed_length_2\
    \ = music_beats_array_copy_reversed_length * 2\n        val music_beats_array_copy_reversed_length_3\
    \ = music_beats_array_copy_reversed_length * 3\n        val music_beats_array_copy_reversed_length_4\
    \ = music_beats_array_copy_reversed_length * 4\n        val music_beats_array_copy_reversed_length_5\
    \ = music_beats_array_copy_reversed_length * 5\n        val music_beats_array_copy_reversed_length_6\
    \ = music_beats_array_copy_reversed_length * 6\n        val music_beats_array_copy_reversed_length_7\
    \ = music_beats_array_copy_reversed_length * 7\n        val music_beats_array_copy_reversed_length_8\
    \ = music_beats_array_copy_reversed_length * 8\n        val music_beats_array_copy_reversed_length_9\
    \ = music_beats_array_copy_reversed_length * 9\n        val music_beats_array_copy_reversed_length_10\
    \ = music_beats_array_copy_reversed_length * 10\n        val music_beats_array_copy_reversed_length_11\
    \ = music_beats_array_copy_reversed_length * 11\n        val music_beats_array_copy_reversed_length_12\
    \ = music_beats_array_copy_reversed_length * 12\n        val music_beats_array_copy_reversed_length_13\
    \ = music_beats_array_copy_reversed_length * 13\n        val music_beats_array_copy_reversed_length_14\
    \ = music_beats_array_copy_reversed_length * 14\n        val music_beats_array_copy_reversed_length_15\
    \ = music_beats_array_copy_reversed_length * 15\n        val music_beats_array_copy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprh9k56_c.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprh9k56_c.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beats = music_string.substring(0, 1)\n           \
    \     val rest = music_string.substring(1)\n                beats.toLong * 4\n\
    \            }).reduce((a, b) => a + b)\n            beats.toLong * 4\n      \
    \  }).reduce((a, b) => a + b)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp09h6b03p.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m).split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m15\
    \ |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mrest\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m17 |\e[0m                beats.toLong\
    \ * \e[31m4\e[0m\n\e[31m18 |\e[0m            }).reduce((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a + b)\n\e[31m19 |\e[0m            beats.toLong * \e[31m4\e[0m\n\e[31m20\
    \ |\e[0m        }).reduce((\e[36ma\e[0m, \e[36mb\e[0m) => a + b)\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o\").length\n            music_string_beats * music_string_length\n\
    \        }).toList\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkje6kt_1.scala:42:37 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m\
    \   |\e[0m                                     expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkje6kt_1.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_length\e[0m = music_list_beats_length / \e[31m4\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkje6kt_1.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkje6kt_1.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length + music_list_beats_length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkje6kt"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val beats = notes.map(note => {\n                val note =\
    \ note.trim\n                val noteLength = note.length\n                val\
    \ noteLength = noteLength.toInt\n                val noteLength = noteLength /\
    \ 4\n                noteLength\n            }).sum\n            beats\n     \
    \   }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6gi9_xle.scala:17:20 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mval\e[0m \e[36mnoteLength\e[0m\
    \ = noteLength.toInt\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoteLength is already defined as \e[33mvalue\e[0m \e[35mnoteLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp6gi9_xle.scala:20:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m     \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \        where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmp6gi9_xle.scala:22:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ }).toList\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where: \
    \   B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o\")\n            val music_string_beats_length = music_string_beats.length\n\
    \            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    .\").map(music_string_beats_beat => {\n                    val music_string_beats_beats_beats_length\
    \ = music_string_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats\
    \ = music_string_beats_beats_beat.split(\"|\").map(music_string_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beat.length\n                        val music_string_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beat.split(\"o\").map(music_string_beats_beats_beats_beat\
    \ => {\n                            val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beat.length\n                       \
    \     val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beat.split(\"\
    .\").map(music_string_beats_beats_beats_beats_beat => {\n                    \
    \            val music_string_beats_beats_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats_beat.length\n\
    \                                val music_string_beats_beats_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beats_beats_beat.split(\"|\").map(music_string_beats_beats_beats_beats_beats_beat\
    \ => {\n                                    val music_string_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beat.length\n           \
    \                         val music_string_beats_beats_beats_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7_hp65ya.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp7_hp65ya.scala:41:0 ----------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_hp65ya.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mmusic_string_beats_beats_length\e\
    [0m = music_string_beats_beat.length\n\e[31m\e[31m   |\e[0m                  \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                      Not found: music_string_beats_beat\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7_hp65ya.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\".\"\e[0m).map(\e[36mmusic_string_beats_beat\e[0m => {\n\e[31m\e[31m   |\e\
    [0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_hp65ya.scala:40:1\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o\").length\n            music_string_beats * music_string_length\n\
    \        }).sum\n        val music_list_beats_length = music_list_beats / music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length\
    \ = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length\
    \ / 2\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 1\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 2\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 1\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 2\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 1\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length / 2\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length / 1\n        val music_list_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuorseshi.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuorseshi.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_length\e[0m = music_list_beats_length.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuorseshi.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuorseshi.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuorseshi.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmus"
  stdout: ''
  timestamp: 1660029179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_length\
    \ = notes_beats.sum\n        val notes_beats_length = notes_beats_length / notes_length\n\
    \        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length\
    \ = notes_beats_length * 4\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length\
    \ * 2\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 2\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length\
    \ * 1\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 1\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length\
    \ * 4\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length\
    \ * 2\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 2\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length\
    \ * 1\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 1\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length\
    \ * 4\n        val notes_beats_length = notes_beats_length.toLong\n        val\
    \ notes_beats_length = notes_beats_length / 4\n        val notes_beats_length\
    \ = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjehshhwm.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length / notes_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjehshhwm.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjehshhwm.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjehshhwm.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjehshhwm.scala:20:12 ---------------------------\e"
  stdout: ''
  timestamp: 1660029180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_notes = music_list.map(music_string => music_string.split(\"\
    o\"))\n        val music_notes_length = music_notes.length\n        val music_notes_length\
    \ = music_notes_length / 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length / 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ / 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length / 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length / 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ / 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length / 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length / 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ / 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length / 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length / 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ / 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length / 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length / 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ / 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9o4b_6kf.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9o4b_6kf.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_notes_length\e[0m = music_notes_length / \e[31m4\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m \e[35mmusic_notes_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9o4b_6kf.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m = music_notes_length\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9o4b_6kf.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9o4b_6kf.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660029181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(n => n.length.toLong)\n        val notes_beats_sum\
    \ = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n   \
    \     val notes_beats_sum = notes_beats.sum\n        val notes_beats_length =\
    \ notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n        val\
    \ notes_beats_length = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n\
    \        val notes_beats_length = notes_beats.length\n        val notes_beats_sum\
    \ = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n   \
    \     val notes_beats_sum = notes_beats.sum\n        val notes_beats_length =\
    \ notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n        val\
    \ notes_beats_length = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n\
    \        val notes_beats_length = notes_beats.length\n        val notes_beats_sum\
    \ = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n   \
    \     val notes_beats_sum = notes_beats.sum\n        val notes_beats_length =\
    \ notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n        val\
    \ notes_beats_length = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n\
    \        val notes_beats_length = notes_beats.length\n        val notes_beats_sum\
    \ = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n   \
    \     val notes_beats_sum = notes_beats.sum\n        val notes_beats_length =\
    \ notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n        val\
    \ notes_beats_length = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n\
    \        val notes_beats_length = notes_beats.length\n        val notes_beats_sum\
    \ = notes_beats.sum\n        val notes_beats_length = notes_beats.length\n   \
    \     val notes_beats_sum = notes_beats.sum\n        val notes_beats_length =\
    \ notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n        val\
    \ notes_beats_length = notes_beats.length\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4netqioo.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum\e[0m = notes_beats.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_beats_sum is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4netqioo.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m = notes_beats.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4netqioo.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum\e[0m = notes_beats.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnotes_beats_sum is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4netqioo.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m = notes_beats.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m \e[35mnotes_beats_length\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4netqioo.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_sum\e[0m = notes_beats.sum\n\
    \e[31m\e[31m   |\e[0m      "
  stdout: ''
  timestamp: 1660029183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val notes = note.split(\"\\\\.|\")\n\
    \                val notes_length = notes.length\n                val notes_beats\
    \ = notes.map(note => {\n                    val notes = note.split(\"o\")\n \
    \                   val notes_length = notes.length\n                    val notes_beats\
    \ = notes.map(note => {\n                        val notes = note.split(\"|\"\
    )\n                        val notes_length = notes.length\n                 \
    \       val notes_beats = notes.map(note => {\n                            val\
    \ notes = note.split(\"-\")\n                            val notes_length = notes.length\n\
    \                            val notes_beats = notes.map(note => {\n         \
    \                       val notes = note.split(\"+\")\n                      \
    \          val notes_length = notes.length\n                                val\
    \ notes_beats = notes.map(note => {\n                                    val notes\
    \ = note.split(\"#\")\n                                    val notes_length =\
    \ notes.length\n                                    val notes_beats = notes.map(note\
    \ => {\n                                        val notes = note.split(\"%\")\n\
    \                                        val notes_length = notes.length\n   \
    \                                     val notes_beats = notes.map(note => {\n\
    \                                            val notes = note.split(\"&\")\n \
    \                                           val notes_length = notes.length\n\
    \                                            val notes_beats = notes.map(note\
    \ => {\n                                                val notes = note.split(\"\
    *\")\n                                                val notes_length = notes.length\n\
    \                                                val notes_beats = notes.map(note\
    \ => {\n                                                    val notes = note.split(\"\
    +\")\n                                                    val notes_length = notes.length\n\
    \                                                    val notes_beats = notes.map(note\
    \ => {\n                                                        val notes = note.split(\"\
    -\")\n                                                        val notes_length\
    \ = notes.length\n                                                        val\
    \ notes_beats = notes.map(note => {\n                                        \
    \                    val notes = note.split(\"+\")\n                         \
    \                                   val notes_length = notes.length\n        \
    \                                                    val notes_beats = notes.map(note\
    \ => {\n                                                                val notes\
    \ = note.split(\"#\")\n                                                      \
    \          val notes_length = notes.length\n                                 \
    \                               val notes_beats = notes.map(note => {\n      \
    \                                                              val notes = note.split(\"\
    %\")\n                                                                    val\
    \ notes_length = notes.length\n                                              \
    \                      val notes_beats = notes.map(note => {\n               \
    \                                                         val notes = note.split(\"\
    &\")\n                                                                       \
    \ val notes_length = notes.length\n                                          \
    \                              val notes_beats = notes.map(note => {\n       \
    \                                                                     val notes\
    \ = note.split(\"*\")\n                                                      \
    \                      val notes_length = note\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg_8_diw2.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpg_8_diw2.scala:73:0 ----------------------------\e[0m\e[0m\n\e[31m73\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660029180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_beats = music_list.map(music_string => music_string.split(\"\
    o|\\\\.|\"))\n        val music_beats_length = music_beats.map(music_string =>\
    \ music_string.length)\n        val music_beats_sum = music_beats_length.sum\n\
    \        val music_beats_sum = music_beats_sum.toLong\n        val music_beats_sum\
    \ = music_beats_sum / music_length\n        val music_beats_sum = music_beats_sum.toInt\n\
    \        val music_beats_sum = music_beats_sum * 4\n        val music_beats_sum\
    \ = music_beats_sum.toLong\n        val music_beats_sum = music_beats_sum / 4\n\
    \        val music_beats_sum = music_beats_sum.toInt\n        val music_beats_sum\
    \ = music_beats_sum * 2\n        val music_beats_sum = music_beats_sum.toLong\n\
    \        val music_beats_sum = music_beats_sum / 2\n        val music_beats_sum\
    \ = music_beats_sum.toInt\n        val music_beats_sum = music_beats_sum * 1\n\
    \        val music_beats_sum = music_beats_sum.toLong\n        val music_beats_sum\
    \ = music_beats_sum / 1\n        val music_beats_sum = music_beats_sum.toInt\n\
    \        val music_beats_sum = music_beats_sum * 4\n        val music_beats_sum\
    \ = music_beats_sum.toLong\n        val music_beats_sum = music_beats_sum / 4\n\
    \        val music_beats_sum = music_beats_sum.toInt\n        val music_beats_sum\
    \ = music_beats_sum * 2\n        val music_beats_sum = music_beats_sum.toLong\n\
    \        val music_beats_sum = music_beats_sum / 2\n        val music_beats_sum\
    \ = music_beats_sum.toInt\n        val music_beats_sum = music_beats_sum * 1\n\
    \        val music_beats_sum = music_beats_sum.toLong\n        val music_beats_sum\
    \ = music_beats_sum / 1\n        val music_beats_sum = music_beats_sum.toInt\n\
    \        val music_beats_sum = music_beats_sum * 4\n        val music_beats_sum\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
    )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpno39871a.scala:45:29 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_sum\e[0m = \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpno39871a.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_sum\e[0m = music_beats_sum.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmusic_beats_sum is already defined as \e[33mvalue\e[0m \e[35mmusic_beats_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpno39871a.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_sum\e[0m = music_beats_sum\
    \ / music_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_beats_sum is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpno39871a.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_sum\e[0m = music_beats_sum.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmusic_beats_sum is already defined as \e[33mvalue\e[0m \e[35mmusic_beats_sum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpno39871a.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_beats_sum\e[0m = music_beats_sum\
    \ * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029184
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.map(_.length).sum\n            val\
    \ notes_beats = notes.map(_.length.toLong).sum\n            notes_beats % 4\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9200pbg.scala:20)\n\tat Problem.main(tmph9200pbg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size %\
    \ 4\n        val music_list_size_whole_half = music_list_size_whole / 2\n    \
    \    val music_list_size_whole_quarter = music_list_size_whole / 4\n        val\
    \ music_list_size_whole_whole = music_list_size_whole % 4\n        val music_list_size_whole_whole_half\
    \ = music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole % 4\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole % 4\n        val music_list_size_whole_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_whole_who\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoz09rpcu.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoz09rpcu.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => music_string.split(\"o|\").map(music_string => music_string.split(\"\
    \\\\.|\").map(music_string => music_string.split(\"o\").length).sum).sum).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqmtohosb.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\
    o|\"\e[0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"\\\\.|\"\e\
    [0m).map(\e[36mmusic_string\e[0m => music_string.split(\e[31m\"o\"\e[0m).length).sum).sum).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_array = music_string.split(\"o\")\n            val music_string_array_size\
    \ = music_string_array.size\n            val music_string_array_beats = music_string_array.map(music_string_array\
    \ => {\n                val music_string_array_array_size = music_string_array_array.size\n\
    \                val music_string_array_array_beats = music_string_array_array.map(music_string_array_array\
    \ => {\n                    val music_string_array_array_array_size = music_string_array_array_array.size\n\
    \                    val music_string_array_array_array_beats = music_string_array_array_array.map(music_string_array_array_array\
    \ => {\n                        val music_string_array_array_array_array_size\
    \ = music_string_array_array_array_array.size\n                        val music_string_array_array_array_array_beats\
    \ = music_string_array_array_array_array.map(music_string_array_array_array_array\
    \ => {\n                            val music_string_array_array_array_array_array_size\
    \ = music_string_array_array_array_array_array.size\n                        \
    \    val music_string_array_array_array_array_array_beats = music_string_array_array_array_array_array.map(music_string_array_array_array_array_array\
    \ => {\n                                val music_string_array_array_array_array_array_array_array_size\
    \ = music_string_array_array_array_array_array_array.size\n                  \
    \              val music_string_array_array_array_array_array_array_beats = music_string_array_array_array_array_array_array.map(music_string_array_array_array_array_array_array_array\
    \ => {\n                                    val music_string_array_array_array_array_array_array_array_array_size\
    \ = music_string_array_array_array_array_array_array_array_array.size\n      \
    \                              val music_string_array_array_array_array_array_array_array_array_beats\
    \ = music_string_array_array_array_array_array_array_array_array_array.map(music_string_array_array_array_array_array_array_array_array_array_array\
    \ => {\n                                        val music_string_array_array_array_array_array_array_array_array_array_array_array_size\
    \ = music_string_array_array_array_array_array_array_array_array_array_array.size\n\
    \                                        val music_string_array_array_array_array_array_array_array_array_array_array_beats\
    \ = music_string_array_array_array_array_array_array_array_array_array_array_array.map(music_string_array_array_array_array_array_array_array_array_array_array_array_array_array\
    \ => {\n                                            val music_string_array_array_array_array_array_array_array_array_array_array_array_array_array_array_size\
    \ = music_string_array_array_array_array_array_array_array_array_array_array_array_array_array_array.size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3duskhfg.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp3duskhfg.scala:43:0 ----------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3duskhfg.scala:18:52 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mmusic_string_array_array_size\e\
    [0m = music_string_array_array.size\n\e[31m\e[31m   |\e[0m                   \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Not found: music_string_array_array\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3duskhfg.scala:19:53\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_array_array_beats\e[0m = music_string_array_array.map(\e\
    [36mmusic_string_array_array\e[0m => {\n\e[31m\e[31m   |\e[0m                \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                     Not found: music_string_array_array\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3duskhfg.scala:42:1\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660029184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_long = music_list_size.asInstanceOf[Int]\n      \
    \  val music_list_size_long2 = music_list_size_long * music_list_size_long\n \
    \       val music_list_size_long3 = music_list_size_long2 * music_list_size_long\n\
    \        val music_list_size_long4 = music_list_size_long3 * music_list_size_long\n\
    \        val music_list_size_long5 = music_list_size_long4 * music_list_size_long\n\
    \        val music_list_size_long6 = music_list_size_long5 * music_list_size_long\n\
    \        val music_list_size_long7 = music_list_size_long6 * music_list_size_long\n\
    \        val music_list_size_long8 = music_list_size_long7 * music_list_size_long\n\
    \        val music_list_size_long9 = music_list_size_long8 * music_list_size_long\n\
    \        val music_list_size_long10 = music_list_size_long9 * music_list_size_long\n\
    \        val music_list_size_long11 = music_list_size_long10 * music_list_size_long\n\
    \        val music_list_size_long12 = music_list_size_long11 * music_list_size_long\n\
    \        val music_list_size_long13 = music_list_size_long12 * music_list_size_long\n\
    \        val music_list_size_long14 = music_list_size_long13 * music_list_size_long\n\
    \        val music_list_size_long15 = music_list_size_long14 * music_list_size_long\n\
    \        val music_list_size_long16 = music_list_size_long15 * music_list_size_long\n\
    \        val music_list_size_long17 = music_list_size_long16 * music_list_size_long\n\
    \        val music_list_size_long18 = music_list_size_long17 * music_list_size_long\n\
    \        val music_list_size_long19 = music_list_size_long18 * music_list_size_long\n\
    \        val music_list_size_long20 = music_list_size_long19 * music_list_size_long\n\
    \        val music_list_size_long21 = music_list_size_long20 * music_list_size_long\n\
    \        val music_list_size_long22 = music_list_size_long21 * music_list_size_long\n\
    \        val music_list_size_long23 = music_list_size_long22 * music_list_size_long\n\
    \        val musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprrsju6wv.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprrsju6wv.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_length\
    \ = notes_beats.sum\n        val notes_beats_length_minus_1 = notes_beats_length\
    \ - 1\n        val notes_beats_length_minus_2 = notes_beats_length - 2\n     \
    \   val notes_beats_length_minus_3 = notes_beats_length - 3\n        val notes_beats_length_minus_4\
    \ = notes_beats_length - 4\n        val notes_beats_length_minus_5 = notes_beats_length\
    \ - 5\n        val notes_beats_length_minus_6 = notes_beats_length - 6\n     \
    \   val notes_beats_length_minus_7 = notes_beats_length - 7\n        val notes_beats_length_minus_8\
    \ = notes_beats_length - 8\n        val notes_beats_length_minus_9 = notes_beats_length\
    \ - 9\n        val notes_beats_length_minus_10 = notes_beats_length - 10\n   \
    \     val notes_beats_length_minus_11 = notes_beats_length - 11\n        val notes_beats_length_minus_12\
    \ = notes_beats_length - 12\n        val notes_beats_length_minus_13 = notes_beats_length\
    \ - 13\n        val notes_beats_length_minus_14 = notes_beats_length - 14\n  \
    \      val notes_beats_length_minus_15 = notes_beats_length - 15\n        val\
    \ notes_beats_length_minus_16 = notes_beats_length - 16\n        val notes_beats_length_minus_17\
    \ = notes_beats_length - 17\n        val notes_beats_length_minus_18 = notes_beats_length\
    \ - 18\n        val notes_beats_length_minus_19 = notes_beats_length - 19\n  \
    \      val notes_beats_length_minus_20 = notes_beats_length - 20\n        val\
    \ notes_beats_length_minus_21 = notes_beats_length - 21\n        val notes_beats_length_minus_22\
    \ = notes_beats_length - 22\n        val notes_beats_length_minus_23 = notes_beats_length\
    \ - 23\n        val notes_beats_length_minus_24 = notes_beats_length - 24\n  \
    \      val notes_beats_length_minus_25 = notes_beats_length - 25\n        val\
    \ notes_beats_length_minus_26 = notes_beats_length - 26\n        val notes_beats_length_min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8k_7ephx.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8k_7ephx.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029151
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.map(_.length).sum\n            val\
    \ notes_beats = notes.map(_.length / 4).sum\n            notes_beats * notes_length\n\
    \        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgm4qw_fn.scala:17:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o|\"\e[0m)\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e[0m = notes.map(_.length).sum\n\
    \e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats\e[0m = notes.map(_.length\
    \ / \e[31m4\e[0m).sum\n\e[31m16 |\e[0m            notes_beats * notes_length\n\
    \e[31m17 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m       \
    \ Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o|\")\n            val music_string_beats_length = music_string_beats.length\n\
    \            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    \\\\.|\")\n                val music_string_beats_beats_beats_length = music_string_beats_beats_beats.length\n\
    \                val music_string_beats_beats_beats_beats = music_string_beats_beats_beats.map(music_string_beats_beats_beat\
    \ => {\n                    val music_string_beats_beats_beats_beats_length =\
    \ music_string_beats_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beat.split(\"o|\")\n                    val\
    \ music_string_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats.length\n\
    \                    val music_string_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats.map(music_string_beats_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beat.length\n                       \
    \ val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beat.split(\"\
    \\\\.|\")\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats.length\n                \
    \        val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beats_beat\
    \ => {\n                            val music_string_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beat.length\n           \
    \                 val musi\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:34:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxm3j12e.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_length\e[0m = music_string_beats_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxm3j12e.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\"\\\\.|\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Not found: music_string_beats_beat\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoxm3j12e.scala:42:1 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o\").length\n            music_string_beats * music_string_length\n\
    \        }).toList\n        val music_list_beats_length = music_list_beats.length\n\
    \        val music_list_beats_length = music_list_beats_length / 4\n        val\
    \ music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length / 2\n        val music_list_beats_length = music_list_beats_length\
    \ * 2\n        val music_list_beats_length = music_list_beats_length / 1\n   \
    \     val music_list_beats_length = music_list_beats_length * 1\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length / 2\n   \
    \     val music_list_beats_length = music_list_beats_length * 2\n        val music_list_beats_length\
    \ = music_list_beats_length / 1\n        val music_list_beats_length = music_list_beats_length\
    \ * 1\n        val music_list_beats_length = music_list_beats_length / 4\n   \
    \     val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length\
    \ = music_list_beats_length / 2\n        val music_list_beats_length = music_list_beats_length\
    \ * 2\n        val music_list_beats_length = music_list_beats_length / 1\n   \
    \     val music_list_beats_length = music_list_beats_length * 1\n        val music_list_beats_length\
    \ = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length\
    \ * 4\n        val music_list_beats_length = music_list_beats_length / 2\n   \
    \     val music_list_beats_length = music_list_beats_length * 2\n        val music_list_beats_length\
    \ = music_list_beats_length / 1\n        val music_list_beats_length = music_list_beats_length\
    \ * 1\n        val music_list_beats_length = musi\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ku75dv8.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ku75dv8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ku75dv8.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0ku75dv8.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group "
  stdout: ''
  timestamp: 1660029139
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_notes = music_list.map(music_note => {\n            val music_note_length\
    \ = music_note.length\n            val music_note_char = music_note.charAt(0)\n\
    \            val music_note_octave = music_note.charAt(1)\n            val music_note_note\
    \ = music_note.charAt(2)\n            val music_note_beats = music_note.charAt(3)\n\
    \            val music_note_note = music_note.charAt(4)\n            val music_note_note\
    \ = music_note.charAt(5)\n            val music_note_note = music_note.charAt(6)\n\
    \            val music_note_note = music_note.charAt(7)\n            val music_note_note\
    \ = music_note.charAt(8)\n            val music_note_note = music_note.charAt(9)\n\
    \            val music_note_note = music_note.charAt(10)\n            val music_note_note\
    \ = music_note.charAt(11)\n            val music_note_note = music_note.charAt(12)\n\
    \            val music_note_note = music_note.charAt(13)\n            val music_note_note\
    \ = music_note.charAt(14)\n            val music_note_note = music_note.charAt(15)\n\
    \            val music_note_note = music_note.charAt(16)\n            val music_note_note\
    \ = music_note.charAt(17)\n            val music_note_note = music_note.charAt(18)\n\
    \            val music_note_note = music_note.charAt(19)\n            val music_note_note\
    \ = music_note.charAt(20)\n            val music_note_note = music_note.charAt(21)\n\
    \            val music_note_note = music_note.charAt(22)\n            val music_note_note\
    \ = music_note.charAt(23)\n            val music_note_note = music_note.charAt(24)\n\
    \            val music_note_note = music_note.charAt(25)\n            val music_note_note\
    \ = music_note.charAt(26)\n            val music_note_note = music_note.charAt(27)\n\
    \            val music_note_note = music_note.charAt(28)\n            val music_note_note\
    \ = music_note.charAt(29)\n            val music_note_note = music_note.charAt(30)\n\
    \            val music_note_note = music_note.charAt(31)\n            val music_note_note\
    \ = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqca2ko55.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpqca2ko55.scala:59:0 ----------------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqca2ko55.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_note\e[0m\
    \ = music_note.charAt(\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_note is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_note_note\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqca2ko55.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_note\e[0m\
    \ = music_note.charAt(\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_note is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_note_note\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqca2ko55.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_note\e[0m\
    \ = music_note.charAt(\e[31m6\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_note_note is already defined as \e[33mvalue\e[0m \e\
    [35mmusic_note_note\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqca2ko55.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mmusic_note_note\e"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(n => n.length.toLong)\n        val notes_beats_length\
    \ = notes_beats.sum\n        val notes_beats_length_min = notes_beats_length /\
    \ 4\n        val notes_beats_length_max = notes_beats_length / 2\n        val\
    \ notes_beats_length_mean = notes_beats_length / 4\n        val notes_beats_length_median\
    \ = notes_beats_length / 2\n        val notes_beats_length_mode = notes_beats_length\n\
    \        val notes_beats_length_median = notes_beats_length / 2\n        val notes_beats_length_median\
    \ = notes_beats_length / 2\n        val notes_beats_length_median = notes_beats_length\
    \ / 2\n        val notes_beats_length_median = notes_beats_length / 2\n      \
    \  val notes_beats_length_median = notes_beats_length / 2\n        val notes_beats_length_median\
    \ = notes_beats_length / 2\n        val notes_beats_length_median = notes_beats_length\
    \ / 2\n        val notes_beats_length_median = notes_beats_length / 2\n      \
    \  val notes_beats_length_median = notes_beats_length / 2\n        val notes_beats_length_median\
    \ = notes_beats_length / 2\n        val notes_beats_length_median = notes_beats_length\
    \ / 2\n        val notes_beats_length_median = notes_beats_length / 2\n      \
    \  val notes_beats_length_median = notes_beats_length / 2\n        val notes_beats_length_median\
    \ = notes_beats_length / 2\n        val notes_beats_length_median = notes_beats_length\
    \ / 2\n        val notes_beats_length_median = notes_beats_length / 2\n      \
    \  val notes_beats_length_median = notes_beats_length / 2\n        val notes_beats_length_median\
    \ = notes_beats_length / 2\n        val notes_beats_length_median = notes_beats_length\
    \ / 2\n        val notes_beats_length_median = notes_beats_length / 2\n      \
    \  val notes_beats_length_median = notes_beats_length / 2\n        val notes_beats_length_median\
    \ = notes_beats_length / 2\n        val notes_beats_length_median = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0lgvxc7e.scala:43:39 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length_median\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0lgvxc7e.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnotes_beats_length_median\e[0m = notes_beats_length / \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length_median is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_length_median\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0lgvxc7e.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length_median\e\
    [0m = notes_beats_length / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length_median is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_length_median\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0lgvxc7e.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length_median\e\
    [0m = notes_beats_length / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length_median is already defined as \e[33mvalue\e\
    [0m \e[35mnotes_beats_length_median\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0lgvxc7e.scala:24:12 --------------------"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val note = note.trim\n              \
    \  val noteLength = note.length\n                val noteLength = noteLength.toInt\n\
    \                val noteLength = noteLength / 4\n                val noteLength\
    \ = noteLength.toInt\n                noteLength\n            }).sum\n       \
    \     notes_beats\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppm99skqk.scala:18:20 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e[0m \e[36mnoteLength\e[0m\
    \ = noteLength.toInt\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoteLength is already defined as \e[33mvalue\e[0m \e[35mnoteLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmppm99skqk.scala:22:14\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     }).sum\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m     \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \        where:    B is a type variable\n\e[31m\e[31m-- Error: /tmp/tmppm99skqk.scala:24:10\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ }).toList\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m          where: \
    \   B is a type variable\n3 errors found\n"
  stdout: ''
  timestamp: 1660029188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val notes =\
    \ music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n   \
    \     val notes_beats = notes.map(n => n.length.toLong)\n        val notes_beats_length\
    \ = notes_beats.sum\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toLong\n\
    \        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length\
    \ = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnjz7sz3j.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnjz7sz3j.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnjz7sz3j.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnjz7sz3j.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnotes_beats_length\e[0m\
    \ = notes_beats_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnotes_beats_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mnotes_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnjz7sz3j.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |"
  stdout: ''
  timestamp: 1660029188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_who\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4n1le7z.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_4n1le7z.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_beats = music_string.split(\"o\")\n            val music_string_beats_length\
    \ = music_string_beats.length\n            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    .\").map(music_string_beats_beat => {\n                    val music_string_beats_beats_beats_length\
    \ = music_string_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats\
    \ = music_string_beats_beats_beat.split(\"|\").map(music_string_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beat.length\n                        val music_string_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beat.length\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beat.length\n                       \
    \ val music_string_beats_beats_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beat.length\n                 \
    \       val music_string_beats_beats_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beat.length\n     \
    \                   val music_string_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beat.length\n     \
    \                   val music_string_beats_beats_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beats_beats_beat.length\n\
    \                        val music_string_beat\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:33:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp1p4gptt7.scala:42:0 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1p4gptt7.scala:18:54\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_length\e[0m = music_string_beats_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1p4gptt7.scala:19:53\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\".\"\e[0m).map(\e[36mmusic_string_beats_beat\e[0m => {\n\e[31m\e[31m   |\e\
    [0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1p4gptt7.scala:41:1\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => note.length.toLong).sum\n            val notes_last_beat\
    \ = notes_beats - notes_length\n            notes_last_beat\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4suq_93m.scala:21)\n\tat Problem.main(tmp4suq_93m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660029189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beats = music_string.substring(0, 1)\n           \
    \     val rest = music_string.substring(1)\n                beats.toLong * rest.length\n\
    \            }).sum\n            note -> beats\n        }).groupBy(music_string\
    \ => {\n            music_string.substring(0, 1)\n        }).values.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr_x3k6kq.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            music_string.substring(\e[31m0\e[0m, \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value substring is not a member of (String, Long)\n1 error found\n"
  stdout: ''
  timestamp: 1660029188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"o\").map(music_string\
    \ => {\n                val beats = music_string.substring(0, 1)\n           \
    \     val note = music_string.substring(1)\n                val beats_int = beats.toInt\n\
    \                beats_int * note.length\n            }).sum\n            beats\
    \ * note.length\n        }).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3we4ai0q.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mbeats\e\
    [0m = music_string.substring(\e[31m1\e[0m).split(\e[31m\"o\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m16 |\e[0m                \e[33mval\e[0m \e[36mnote\e\
    [0m = music_string.substring(\e[31m1\e[0m)\n\e[31m17 |\e[0m                \e\
    [33mval\e[0m \e[36mbeats_int\e[0m = beats.toInt\n\e[31m18 |\e[0m             \
    \   beats_int * note.length\n\e[31m19 |\e[0m            }).sum\n\e[31m20 |\e[0m\
    \            beats * note.length\n\e[31m21 |\e[0m        }).sum\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660029189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_beats = music_list.map(music_string => music_string.split(\"\
    o|\\\\.\\\\|\")(1).length)\n        val music_list_beats_sum = music_list_beats.sum\n\
    \        val music_list_beats_average = music_list_beats_sum / music_list_size\n\
    \        val music_list_beats_average_list = music_list_beats.map(music_string\
    \ => music_string.split(\"o|\\\\.\\\\|\")(1).length)\n        val music_list_beats_average_list\
    \ = music_list_beats_average_list.sum / music_list_size\n        val music_list_beats_average_list\
    \ = music_list_beats_average_list.map(music_string => music_string.split(\"o|\\\
    \\.\\\\|\")(1).length)\n        val music_list_beats_average_list = music_list_beats_average_list.sum\
    \ / music_list_size\n        val music_list_beats_average_list = music_list_beats_average_list.map(music_string\
    \ => music_string.split(\"o|\\\\.\\\\|\")(1).length)\n        val music_list_beats_average_list\
    \ = music_list_beats_average_list.sum / music_list_size\n        val music_list_beats_average_list\
    \ = music_list_beats_average_list.map(music_string => music_string.split(\"o|\\\
    \\.\\\\|\")(1).length)\n        val music_list_beats_average_list = music_list_beats_average_list.sum\
    \ / music_list_size\n        val music_list_beats_average_list = music_list_beats_average_list.map(music_string\
    \ => music_string.split(\"o|\\\\.\\\\|\")(1).length)\n        val music_list_beats_average_list\
    \ = music_list_beats_average_list.sum / music_list_size\n        val music_list_beats_average_list\
    \ = music_list_beats_average_list.map(music_string => music_string.split(\"o|\\\
    \\.\\\\|\")(1).length)\n        val music_list_beats_average_list = music_list_beats_average_list.sum\
    \ / music_list_size\n        val music_list_beats_average_list = music_list_beats_average_list.map(music_string\
    \ => music_string.split(\"o|\\\\.\\\\|\")(1).length)\n        val music_list_beats_average_list\
    \ = music_list_beats_average_list.sum / music_list_size\n        val music_list_beats_average_list\
    \ = music_list_beats_average_list.map(music_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp52c4bzu3.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp52c4bzu3.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_average_list\e[0m = music_list_beats_average_list.sum\
    \ / music_list_size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_average_list is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_average_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp52c4bzu3.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_average_list\e\
    [0m = music_list_beats_average_list.map(\e[36mmusic_string\e[0m => music_string.split(\e\
    [31m\"o|\\\\.\\\\|\"\e[0m)(\e[31m1\e[0m).length)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_average_list is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_average_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp52c4bzu3.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_average_list\e\
    [0m = music_list_beats_average_list.sum / music_list_size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_average_list is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_average_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e["
  stdout: ''
  timestamp: 1660029190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_quarter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpou0wlf2o.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpou0wlf2o.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole_whole\
    \ / \e[31m32\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole_half is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole_half\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpou0wlf2o.scala:34:5 ---------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val beats = notes.map(note => {\n                val note =\
    \ note.trim\n                val notes = note.split(\"\\\\.|\")\n            \
    \    notes.map(note => {\n                    val note = note.trim\n         \
    \           val notes = note.split(\"o\")\n                    notes.map(note\
    \ => {\n                        val note = note.trim\n                       \
    \ val notes = note.split(\"|\")\n                        notes.map(note => {\n\
    \                            val note = note.trim\n                          \
    \  val notes = note.split(\"\\\\|\")\n                            notes.map(note\
    \ => {\n                                val note = note.trim\n               \
    \                 val notes = note.split(\"o\")\n                            \
    \    notes.map(note => {\n                                    val note = note.trim\n\
    \                                    val notes = note.split(\"|\")\n         \
    \                           notes.map(note => {\n                            \
    \            val note = note.trim\n                                        val\
    \ notes = note.split(\"\\\\|\")\n                                        notes.map(note\
    \ => {\n                                            val note = note.trim\n   \
    \                                         val notes = note.split(\"o\")\n    \
    \                                        notes.map(note => {\n               \
    \                                 val note = note.trim\n                     \
    \                           val notes = note.split(\"|\")\n                  \
    \                              notes.map(note => {\n                         \
    \                           val note = note.trim\n                           \
    \                         val notes = note.split(\"\\\\|\")\n                \
    \                                    notes.map(note => {\n                   \
    \                                     val note = note.trim\n                 \
    \                                       val notes = note.split(\"o\")\n      \
    \                                                  notes.map(note => {\n     \
    \                                                       val note = note.trim\n\
    \                                                            val notes = note.split(\"\
    |\")\n                                                            notes.map(note\
    \ => {\n                                                                val note\
    \ = note.trim\n                                                              \
    \  val notes = note.split(\"\\\\|\")\n                                       \
    \                         notes.map(note => {\n                              \
    \                                      val note = note.trim\n                \
    \                                                    val notes = note.split(\"\
    o\")\n                                                                    notes.map(note\
    \ => {\n                                                                     \
    \   val note = note.trim\n                                                   \
    \                     val notes = note.split(\"|\")\n                        \
    \                                                notes.map(note => {\n       \
    \                                                                     val note\
    \ = note.trim\n                                                              \
    \              val notes = note.split(\"\\\\|\")\n                           \
    \                                                 notes.map(note => {\n      \
    \                                                                          val\
    \ note = note.trim\n                                                         \
    \                       val notes = note.split(\"o\")\n                      \
    \                                                          notes.map(note => {\n\
    \                                                                            \
    \        val note = note.trim\n                                              \
    \                                      val notes = note.split(\"|\")\n       \
    \                                                                            \
    \ notes.map(note => {\n                                                      \
    \                                  val note = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzkor_hp_.scala:69:98 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m                                                    \
    \                                    \e[33mval\e[0m \e[36mnote\e[0m = \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzkor_hp_.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpzkor_hp_.scala:80:0 ----------------------------\e[0m\e[0m\n\e[31m80\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmpzkor_hp_.scala:79:1 ------------------------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m where:    B is a type variable\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660029189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o\").map(music_string => {\n                val note = music_string.split(\"|\"\
    ).map(music_string => {\n                    val beats = music_string.split(\"\
    .\").map(music_string => {\n                        music_string.toLong\n    \
    \                }).sum\n                    beats\n                }).sum\n \
    \               note\n            }).sum\n            notes\n        }).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpct5fpdz0.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e[32m]\e[0m\n\e[31m13 |\e[0m\
    \            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e[31m\"o\"\e\
    [0m).map(\e[36mmusic_string\e[0m => {\n\e[31m14 |\e[0m                \e[33mval\e\
    [0m \e[36mnote\e[0m = music_string.split(\e[31m\"|\"\e[0m).map(\e[36mmusic_string\e\
    [0m => {\n\e[31m15 |\e[0m                    \e[33mval\e[0m \e[36mbeats\e[0m =\
    \ music_string.split(\e[31m\".\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m16\
    \ |\e[0m                        music_string.toLong\n\e[31m17 |\e[0m         \
    \           }).sum\n\e[31m18 |\e[0m                    beats\n\e[31m19 |\e[0m\
    \                }).sum\n\e[31m20 |\e[0m                note\n\e[31m21 |\e[0m\
    \            }).sum\n\e[31m22 |\e[0m            notes\n\e[31m23 |\e[0m       \
    \ }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.size\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o\").length - 1\n            music_string_beats * music_string_length\n\
    \        })\n        val music_list_beats_sum = music_list_beats.sum\n       \
    \ val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum\
    \ = music_list_beats_sum / music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length / music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val musi\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9mndud5t.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9mndud5t.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_beats_sum\e[0m = music_list_beats_sum / music_list_length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_sum is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_list_beats_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9mndud5t.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length / music_list_length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9mndud5t.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * music_list_length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_beats_length is already defined as \e[33mvalue\e\
    [0m \e[35mmusic_list_beats_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9mndud5t.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_beats_length\e\
    [0m = music_list_beats_length * music_list_length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length).trim().toInt\n\
    \            beats * note.length\n        }).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_mqx53mg.scala:16:11\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m13 |\e[0m        \
    \    \e[33mval\e[0m \e[36mnote\e[0m = music_string.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mbeats\e[0m = music_string.substring(\e\
    [31m1\e[0m, music_string.length).trim().toInt\n\e[31m15 |\e[0m            beats\
    \ * note.length\n\e[31m16 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m     \
    \   ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660029189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_int = music_list_size.asInstanceOf[Int]\n       \
    \ val music_list_size_long = music_list_size_int.asInstanceOf[Long]\n        val\
    \ music_list_size_long_inv = music_list_size_long.inv\n        val music_list_size_long_inv_inv\
    \ = music_list_size_long_inv.inv\n        val music_list_size_long_inv_inv_inv\
    \ = music_list_size_long_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n        val\
    \ music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n   \
    \     val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \        val music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_in\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_6wd5hu.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9_6wd5hu.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv.inv\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is already defined as \e[33mvalue\e[0m \e[35mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9_6wd5hu.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\e\
    [0m = music_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_in\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_long_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ is"
  stdout: ''
  timestamp: 1660029166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n\
    \        val music_list_beats = music_list.map(music_string => {\n           \
    \ val music_string_length = music_string.length\n            val music_string_beats\
    \ = music_string.split(\"o|\")\n            val music_string_beats_length = music_string_beats.length\n\
    \            val music_string_beats_beats = music_string_beats.map(music_string_beat\
    \ => {\n                val music_string_beats_beats_length = music_string_beats_beat.length\n\
    \                val music_string_beats_beats_beats = music_string_beats_beat.split(\"\
    \\\\.|\")\n                val music_string_beats_beats_beats_length = music_string_beats_beats_beats.length\n\
    \                val music_string_beats_beats_beats_beats = music_string_beats_beats_beats.map(music_string_beats_beats_beat\
    \ => {\n                    val music_string_beats_beats_beats_beats_length =\
    \ music_string_beats_beats_beats_beat.length\n                    val music_string_beats_beats_beats_beats_beats\
    \ = music_string_beats_beats_beats_beat.split(\"o|\")\n                    val\
    \ music_string_beats_beats_beats_beats_length = music_string_beats_beats_beats_beats_beats.length\n\
    \                    val music_string_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats.map(music_string_beats_beats_beats_beat\
    \ => {\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beat.length\n                       \
    \ val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beat.split(\"\
    \\\\.|\")\n                        val music_string_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats.length\n                \
    \        val music_string_beats_beats_beats_beats_beats_beats = music_string_beats_beats_beats_beats_beats_beats.map(music_string_beats_beats_beats_beats_beats_beat\
    \ => {\n                            val music_string_beats_beats_beats_beats_beats_beats_length\
    \ = music_string_beats_beats_beats_beats_beats_beats_beat.length\n           \
    \                 val musi\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:34:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpoxm3j12e.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxm3j12e.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_length\e[0m = music_string_beats_beat.length\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Not found: music_string_beats_beat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxm3j12e.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mval\e\
    [0m \e[36mmusic_string_beats_beats_beats\e[0m = music_string_beats_beat.split(\e\
    [31m\"\\\\.|\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                          Not found: music_string_beats_beat\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoxm3j12e.scala:42:1 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_list_size_8 / 2\n        val music_list_size_10 = music_list_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_list_size_10 / 2\n        val\
    \ music_list_size_12 = music_list_list_size_11 / 2\n        val music_list_size_13\
    \ = music_list_list_size_12 / 2\n        val music_list_size_14 = music_list_list_size_13\
    \ / 2\n        val music_list_size_15 = music_list_list_size_14 / 2\n        val\
    \ music_list_size_16 = music_list_list_size_15 / 2\n        val music_list_size_17\
    \ = music_list_list_size_16 / 2\n        val music_list_size_18 = music_list_list_size_17\
    \ / 2\n        val music_list_size_19 = music_list_list_size_18 / 2\n        val\
    \ music_list_size_20 = music_list_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_list_size_20 / 2\n        val music_list_size_22 = music_list_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_list_size_22 / 2\n        val\
    \ music_list_size_24 = music_list_list_size_23 / 2\n        val music_list_size_25\
    \ = music_list_list_size_24 / 2\n        val music_list_size_26 = music_list_list_size_25\
    \ / 2\n        val music_list_size_27 = music_list_list_size_26 / 2\n        val\
    \ music_list_size_28 = music_list_list_size_27 / 2\n        val music_list_size_29\
    \ = music_list_list_size_28 / 2\n        val music_list_size_30 = music_list_list_size_29\
    \ / 2\n        val music_list_size_31 = music_list_list_size_30 / \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5h3e8a_b.scala:43:58 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_31\e[0m\
    \ = music_list_list_size_30 / \n\e[31m\e[31m   |\e[0m                        \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:20:32 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_8\e[0m =\
    \ music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_7\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_9\e[0m =\
    \ music_list_list_size_8 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                 Not found: music_list_list_size_8\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_10\e[0m\
    \ = music_list_list_size_9 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     Not found: music_list_list_size_9\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5h3e8a_b.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmusic_list_size_11\e[0m\
    \ = music_list_list_size_10 / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1, music_string.length)\n\
    \            val beats_as_ints = beats.split(\"o\").map(_.toInt)\n           \
    \ val beats_as_ints_without_last = beats_as_ints.dropRight(1)\n            val\
    \ beats_as_ints_without_last_without_last = beats_as_ints_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_without_last_without_last = beats_as_ints_without_last_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_without_last_without_last_without_last\
    \ = beats_as_ints_without_last_without_last_without_last.dropRight(1)\n      \
    \      val beats_as_ints_without_last_without_last_without_last_without_last_without_last\
    \ = beats_as_ints_without_last_without_last_without_last_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last\
    \ = beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last\
    \ = beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last\
    \ = beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last\
    \ = beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last\
    \ = beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last\
    \ = beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last.dropRight(1)\n\
    \            val beats_as_ints_without_last_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4tulizyk.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4tulizyk.scala:29:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp4tulizyk.scala:38:0 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4tulizyk.scala:26:175\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mbeats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last\e\
    [0m = beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: beats_as_ints_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last_without_last\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660029186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n\
    \        val music_notes = music_list.map(music_string => music_string.split(\"\
    o|\\\\.\"))\n        val music_notes_length = music_notes.length\n        val\
    \ music_notes_length = music_notes_length / music_length\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toLong\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length * 4\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpx9ukkpbm.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpx9ukkpbm.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length / music_length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx9ukkpbm.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx9ukkpbm.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length * \e[31m4\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_notes_length is already defined as \e[33mvalue\e[0m\
    \ \e[35mmusic_notes_length\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx9ukkpbm.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmusic_notes_length\e[0m\
    \ = music_notes_length.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   "
  stdout: ''
  timestamp: 1660029190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3\
    \ = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 /\
    \ 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6\
    \ = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 /\
    \ 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9\
    \ = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9\
    \ / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12\
    \ = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12\
    \ / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15\
    \ = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15\
    \ / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18\
    \ = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18\
    \ / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21\
    \ = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21\
    \ / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24\
    \ = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24\
    \ / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27\
    \ = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27\
    \ / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30\
    \ = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30\
    \ / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpko_zkfz9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpko_zkfz9.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmusic_list_size_8\e[0m = music_list_list_size_7 / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: music_list_list_size_7\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko_zkfz9.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660029124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        val music_list\
    \ = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n\
    \        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter\
    \ = music_list_size / 4\n        val music_list_size_whole = music_list_size\n\
    \        val music_list_size_whole_half = music_list_size_whole / 2\n        val\
    \ music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole\
    \ = music_list_size_whole / 8\n        val music_list_size_whole_whole_half =\
    \ music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter\
    \ = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole\
    \ = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole_quarter\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_whole\
    \ = music_list_size_whole_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_whole_half\
    \ = music_list_size_whole_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole_quarter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpou0wlf2o.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpou0wlf2o.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmusic_list_size_whole_whole_whole_whole_whole_half\e[0m = music_list_size_whole_whole_whole_whole_whole\
    \ / \e[31m32\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmusic_list_size_whole_whole_whole_whole_whole_half is already\
    \ defined as \e[33mvalue\e[0m \e[35mmusic_list_size_whole_whole_whole_whole_whole_half\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpou0wlf2o.scala:34:5 ---------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660029150
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\
    \\\\|\").map(music_string => {\n            val notes = music_string.split(\"\
    o|\")\n            val notes_length = notes.length\n            val notes_beats\
    \ = notes.map(note => {\n                val note_to_beat = note.split(\"\\\\\
    .|\")\n                val note_to_beat_length = note_to_beat.length\n       \
    \         note_to_beat.map(note_to_beat_string => {\n                    val note_to_beat_int\
    \ = note_to_beat_string.toInt\n                    note_to_beat_int * 4\n    \
    \            }).sum\n            }).sum\n            notes_beats * notes_length\n\
    \        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfn5xdi5.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        music_string.split(\e\
    [31m\"\\\\|\"\e[0m).map(\e[36mmusic_string\e[0m => {\n\e[31m\e[31m   |\e[0m  \
    \      ^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36mnotes\e[0m = music_string.split(\e\
    [31m\"o|\"\e[0m)\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mnotes_length\e\
    [0m = notes.length\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnotes_beats\e\
    [0m = notes.map(\e[36mnote\e[0m => {\n\e[31m16 |\e[0m                \e[33mval\e\
    [0m \e[36mnote_to_beat\e[0m = note.split(\e[31m\"\\\\.|\"\e[0m)\n\e[31m17 |\e\
    [0m                \e[33mval\e[0m \e[36mnote_to_beat_length\e[0m = note_to_beat.length\n\
    \e[31m18 |\e[0m                note_to_beat.map(\e[36mnote_to_beat_string\e[0m\
    \ => {\n\e[31m19 |\e[0m                    \e[33mval\e[0m \e[36mnote_to_beat_int\e\
    [0m = note_to_beat_string.toInt\n\e[31m20 |\e[0m                    note_to_beat_int\
    \ * \e[31m4\e[0m\n\e[31m21 |\e[0m                }).sum\n\e[31m22 |\e[0m     \
    \       }).sum\n\e[31m23 |\e[0m            notes_beats * notes_length\n\e[31m24\
    \ |\e[0m        }).sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660029190
