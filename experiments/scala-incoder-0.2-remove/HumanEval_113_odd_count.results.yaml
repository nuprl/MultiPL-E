language: scala
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdz2s09zq.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val numOdd = str.filter(_.isDigit).count(_\
    \ % 2 != 0)\n            odd += numOdd.toString\n            even += str.filter(_.isDigit).count(_\
    \ % 2 == 0).toString\n        }\n        odd.toList ++ even.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpirxzub_4.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpirxzub_4.scala:10:19 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => s.toIntList.foreach(i => if (i % 2 == 1) odds += 1))\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1v9bi6y9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1v9bi6y9.scala:10:27 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        lst.foreach(\e[36ms\e[0m => s.toIntList.foreach(\e\
    [36mi\e[0m => \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m1\e[0m) odds += \e[31m1\e\
    [0m))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value toIntList is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.forall(_.isDigit)) odds += x.toInt)\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlzovkbk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val digits = str.filter(_.isDigit)\n            for(d <- digits) {\n    \
    \            val odd = digits.length - digits.length % d\n                odds.add(odd)\n\
    \            }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj95unzf4.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.+=(numOdds)\n        })\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iig9l2f.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.add(numOdds)\n        })\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd5ghk4vk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.map(_.toInt)\n            val odd = digits.count(_ % 2\
    \ == 1)\n            odds.add(odd)\n        }\n        odds.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplfvkku4z.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(x => x != '0').count(x => x != '1')\n           \
    \ odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0mztdvzs.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odd(j) += 1\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odd(j) += 1\n                 \
    \   case _ => odd(j) += 1\n                })\n        }\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2nedyaqi.scala:18:8 ----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp2nedyaqi.scala:9:18 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        val evens = mutable.HashSet[Int]()\n        lst.foreach(s => {\n    \
    \        val digits = s.toInt\n            digits match {\n                case\
    \ 0 => evens += digits\n                case _ => odds += digits\n           \
    \ }\n        })\n        val oddsCount = odds.size\n        val evensCount = evens.size\n\
    \        val result = mutable.ArrayBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val s = lst(i)\n            val oddDigits = s.toInt\n\
    \            val evenDigits = oddDigits.filter(_ % 2 == 0)\n            val oddCount\
    \ = oddDigits.filter(_ % 2 == 1).size\n            val evenCount = evenDigits.size\n\
    \            val resultString = s\"The number of odd digits in the $i string of\
    \ the input is $oddCount\"\n            val evenString = s\"The number of even\
    \ digits in the $i string of the input is $evenCount\"\n            result +=\
    \ s\"$resultString $evenString\\n\"\n        }\n        result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1oa7wse5.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1oa7wse5.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1oa7wse5.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1oa7wse5.scala:24:39 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mevenDigits\e[0m = oddDigits.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             value\
    \ filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1oa7wse5.scala:25:37\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = oddDigits.filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).size\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value filter is not a member of Int\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds += 1 // count odd digits\n                }\n  \
    \          }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvxyxtwd_.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(c => c >= '0' && c <= '9')\n            odds\
    \ += numOddDigits\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2o_zuwzh.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '1')\n            odds.add(numOdds)\n     \
    \   }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36ur0nvr.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_.isDigit).length\n            odds += (oddDigits\
    \ % 2)\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpedhlodfb.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(c => c.isDigit)\n            odds += numOddDigits\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92p8bmr9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val count = str.count(c => c != '0')\n            odd += count\n        }\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5k_93ubb.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(c => c.isDigit)\n            odds += numOddDigits\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpixiucfze.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(c => c.isDigit)\n            odds.+=((numOdds %\
    \ 2) + 1)\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptnla5jof.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => odds += 0\n                case 1 => odds\
    \ += 0\n                case _ => odds += digits\n            }\n        })\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphegid897.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2 != 0\n            if (odd) odds.add(digits)\n        })\n \
    \       odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph7b2sngz.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            odds\
    \ += digits\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz9qjba8.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val odd = digits.length\
    \ filter (x => x % 2 != 0)\n            odds.add(odd.length)\n        }\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcx2j_mf.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqcx2j_mf.scala:13:36 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = digits.length\
    \ filter (\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \            value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiao8rljr.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val odd = s.filter(x => x != '0').count(x => x != '1')\n            odds.add(odd)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7pj8aedp.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0c3vup9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttjpoixg.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 1\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ else => odds += 0\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpq_sfq1io.scala:16:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpq_sfq1io.scala:18:12 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpq_sfq1io.scala:9:19 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 0\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ case _ => odds += 0\n                })\n        }\n        odds.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprapfexht.scala:18:8 ----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmprapfexht.scala:9:19 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttjpoixg.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiao8rljr.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '0')\n            odds += numOddDigits\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsyzdxs9g.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val odd = s.filter(c => c != '0').length\n            odds.add(odd)\n    \
    \    }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnyvqpcfk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 1 // odd digit\n              \
    \      case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // even digit\n                    case '0' | '1' => odds += 1 // odd digit\n\
    \                    case '0' => odds += 0 // even digit\n                   \
    \ case '1' => odds += 0 // even digit\n                    case '0' | '1' => odds\
    \ += 1 // odd digit\n                    case '0' => odds += 0 // even digit\n\
    \                    case '1' => odds += 0 // even digit\n                   \
    \ case '0' | '1' => odds += 1 // odd digit\n                    case '0' => odds\
    \ += 0 // even digit\n                    case '1' => odds += 0 // even digit\n\
    \                    case '0' | '1' => odds += 1 // odd digit\n              \
    \      case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // even digit\n                    case '0' | '1' => odds += 1 // odd digit\n\
    \                    case '0' => odds += 0 // even digit\n                   \
    \ case '1' => odds += 0 // even digit\n                    case '0' | '1' => odds\
    \ += 1 // odd digit\n                    case '0' => odds += 0 // even digit\n\
    \                    case '1' => odds += 0 // even digit\n                   \
    \ case '0' | '1' => odds += 1 // odd digit\n                    case '0' => odds\
    \ += 0 // even digit\n                    case '1' => odds += 0 // even digit\n\
    \                    case '0' | '1' => odds += 1 // odd digit\n              \
    \      case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // even digit\n                    case '0' | '1' => odds += 1 // odd digit\n\
    \                    case '0' => odds += 0 // even digit\n                   \
    \ case '1' => odds += 0 // even digit\n                    case '0' | '1' => odds\
    \ += 1 // odd digit\n                    case '0' => odds += 0 // even digit\n\
    \                    case '1' => odds += 0 // even digit\n                   \
    \ case '0' | '1' => odds += 1 // odd digit\n                    case '0' => odds\
    \ += 0 // even digit\n                    case '1' => odds += 0 // even digit\n\
    \                    case '0' | '1' => odds += 1 // odd digit\n              \
    \      case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // \n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4nt446ap.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp4nt446ap.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4nt446ap.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmp4nt446ap.scala:60:0 -----------------\e\
    [0m\e[0m\n\e[33m58 |\e[0m    }\n\e[33m59 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttjpoixg.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }\n                else if(str.charAt(j)\
    \ == '1'){\n                    odds += 1\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegbq3tkc.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val oddDigits = digits.filter(_.isOdd)\n\
    \            odds.add(oddDigits.length)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqeg_isk4.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqeg_isk4.scala:13:44 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddDigits\e[0m = digits.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value isOdd is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds += 1 \n                }\n            }\n      \
    \  }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp81h94fic.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length)\n            odds += lst(i).filter(x =>\
    \ x match {\n                case x if x.isDigit => true\n                case\
    \ _ => false\n            }).length\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpse4eafxh.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length)\n            odds += lst(i).count(x => x\
    \ % 2 != 0)\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvqhl97ai.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds += str.charAt(j)\n                }\n          \
    \  }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqaty819.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val odd = digits.length\
    \ filter (x => x % 2 != 0)\n            odds.add(odd.length)\n        }\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcx2j_mf.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqcx2j_mf.scala:13:36 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = digits.length\
    \ filter (\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \            value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOddDigits = str.count(_ == '1')\n            odds += numOddDigits\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcge7z654.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tnmwu7a.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) == '1') odds\
    \ += (str.length - (j + 1))\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkl6dnp3d.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.forall(_.isDigit)) odds += x.toInt)\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlzovkbk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiao8rljr.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.filter(_.isDigit).length\n            odds.add(numOddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1u0a8pst.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }else{\n                    odds\
    \ += (str.charAt(j).toInt - '0').abs()\n                }\n            }\n   \
    \     }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kvkqulp.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                val digit = digits % 10\n            \
    \    if(digit % 2 == 1) odds += digit\n            }\n        })\n        odds.toList.map(x\
    \ => x.toString).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16mcipa4.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdds = str.count(c => c.isDigit)\n            odds += numOdds\n  \
    \      }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppydzdkmq.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length)\n            if (lst(i).forall(_.isDigit))\n\
    \                odds += lst(i).count(_ == '1')\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmuf73bj6.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '0')\n            odds += numOddDigits\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbu73yv4d.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val odd = digits.length.toDouble\
    \ / 2\n            odds.add(odd)\n        }\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv6zmz58_.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ lst.size) {\n            val str = lst(i)\n            val numOdd = str.count(c\
    \ => c % 2 == 1)\n            if(numOdd > 0) {\n                odd += numOdd\n\
    \            } else {\n                even += numOdd\n            }\n       \
    \ }\n        odd.toList ++ even.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwae6att.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbwae6att.scala:10:19 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x != '0').count(x => x != '1')\n       \
    \     odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9kdlqci.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val oddDigits = digits.filter(_.isOdd)\n\
    \            odds.add(oddDigits.size)\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpifcej93d.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpifcej93d.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36moddDigits\e[0m = digits.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value isOdd is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '0')\n            odds.add(numOddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9_lhnx54.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case 'a' => odds\
    \ += 10\n                    case 'b' => odds += 11\n                    case\
    \ 'c' => odds += 12\n                    case 'd' => odds += 13\n            \
    \        case 'e' => odds += 14\n                    case 'f' => odds += 15\n\
    \                    case 'A' => odds += 10\n                    case 'B' => odds\
    \ += 11\n                    case 'C' => odds += 12\n                    case\
    \ 'D' => odds += 13\n                    case 'E' => odds += 14\n            \
    \        case 'F' => odds += 15\n                    case '0' | '1' | '2' | '3'\
    \ | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n                    case 'a'\
    \ | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' => odds +=\
    \ 1\n                    case 'b' | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' |\
    \ 'i' | 'o' | 'u' | 'i' => odds += 2\n                    case 'c' | 't' | 'e'\
    \ | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' => odds += 3\n       \
    \             case 'd' | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' |\
    \ 'u' | 'i' => odds += 4\n                    case 'e' | 't' | 'e' | 'o' | 'u'\
    \ | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' => odds += 5\n                   \
    \ case 'f' | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' =>\
    \ odds += 6\n                    case 'g' | 't' | 'e' | 'o' | 'u' | 'i' | 'o'\
    \ | 'u' | 'i' | 'o' | 'u' | 'i' => odds += 7\n                    case 'h' | 't'\
    \ | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' => odds += 8\n \
    \                   case 'i' | 't' | 'e' | 'o' | 'u' | 'i' | 'o' | 'u' | 'i' |\
    \ 'o' | 'u\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1c2bahko.scala:45:85 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                    \e[33mcase\e[0m \e[31m'i'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'i'\e\
    [0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \                                  ^\e[0m\n\e[31m   |\e[0msymbol literal 'u is\
    \ no longer supported,\n\e[31m   |\e[0muse a string literal \"u\" or an application\
    \ Symbol(\"u\") instead,\n\e[31m   |\e[0mor enclose in braces '{u} if you want\
    \ a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1c2bahko.scala:46:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=>' expected, but '}' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmp1c2bahko.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1c2bahko.scala:54:0 ----------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1c2bahko.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1c2bahko.scala:45:87 --------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                    \e[33mcase\e[0m \e[31m'i'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e[0m | \e[31m'i'\e\
    [0m | \e[31"
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpftmd333q.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(_ == '1')\n       \
    \ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3mstqklk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  for(j <- 0 until s.length) if(s(j) match {\n                case '1' => odds\
    \ += 1\n                case '0' => odds -= 1\n                case _ => ()\n\
    \            })\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpizy8x_x_.scala:17:8 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpizy8x_x_.scala:9:19 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m    \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpizy8x_x_.scala:15:26 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m                \e[33mcase\e[0m _ => ()\n\e[31m\e[31m   |\e[0m       \
    \                   ^^\e[0m\n\e[31m   |\e[0m                          Found: \
    \   Unit\n\e[31m   |\e[0m                          Required: Boolean\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 1 // count odd digits\n       \
    \             case '0' => odds += 0 // count even digits\n                   \
    \ case '1' => odds += 0 // count even digits\n                    case '2' | '3'\
    \ | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0 // count even digits\n    \
    \                case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'\
    \ | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w'\
    \ | 'x' | 'y' | 'z' => odds += 0 // count even digits\n                    case\
    \ 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M'\
    \ | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'\
    \ => odds += 0 // count even digits\n                    case '*' => odds += 0\
    \ // count even digits\n                    case '-' => odds += 0 // count even\
    \ digits\n                    case '/' => odds += 0 // count even digits\n   \
    \                 case '%' => odds += 0 // count even digits\n               \
    \     case '+' => odds += 0 // count even digits\n                    case '='\
    \ => odds += 0 // count even digits\n                    case '<' => odds += 0\
    \ // count even digits\n                    case '>' => odds += 0 // count even\
    \ digits\n                    case '!' => odds += 0 // count even digits\n   \
    \                 case '?' => odds += 0 // count even digits\n               \
    \     case '@' => odds += 0 // count even digits\n                    case '#'\
    \ => odds += 0 // count even digits\n                    case '$' => odds += 0\
    \ // count even digits\n                    case '%' => odds += 0 // count even\
    \ digits\n                    case '&' => odds += 0 // count even digits\n   \
    \                 case '|' => odds += 0 // count even digits\n               \
    \     case '~' => odds += 0 // count even digits\n                    case '*'\
    \ => odds += 0 // count even digits\n                    case '-' => odds += 0\
    \ // count even digits\n                    case '/' => odds += 0 // count even\
    \ digits\n                    case '%' => odds += 0 // count even digits\n   \
    \                 case '+' => odds += 0 // count even digits\n               \
    \     case '=' => odds += 0 // count even digits\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzosl4qxo.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpzosl4qxo.scala:52:0 ----------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzosl4qxo.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ [E129] Potential Issue Warning: /tmp/tmpzosl4qxo.scala:51:0 -----------------\e\
    [0m\e[0m\n\e[33m49 |\e[0m    }\n\e[33m50 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 1\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ case _ => odds += 1\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbub0ipyp.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpbub0ipyp.scala:9:19 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '0')\n            odd.append((numOddDigits.toDouble\
    \ / lst.size).toString)\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph6_ramxf.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) odds += digits(i)\n        })\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4wkthmo.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(x => if (x.forall(_.isDigit)) odds += x.toInt)\n        odds.toList.map(x\
    \ => s\"${x} odd digits in ${lst(x)}\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3en3gvvk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0c3vup9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '0')\n            odds.add(numOdds)\n     \
    \   }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qbbsqxq.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                if(digits % 2 == 1) {\n              \
    \      odds += digits\n                }\n            }\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9f6lrwim.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(_.isDigit).count(_ % 2 != 0)\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptvinpke0.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case 'a' => odds\
    \ += 10\n                    case 'b' => odds += 11\n                    case\
    \ 'c' => odds += 12\n                    case 'd' => odds += 13\n            \
    \        case 'e' => odds += 14\n                    case 'f' => odds += 15\n\
    \                    case 'A' => odds += 10\n                    case 'B' => odds\
    \ += 11\n                    case 'C' => odds += 12\n                    case\
    \ 'D' => odds += 13\n                    case 'E' => odds += 14\n            \
    \        case 'F' => odds += 15\n                    case '0' | '1' | '2' | '3'\
    \ | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n                    case 'a'\
    \ | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't'\
    \ | 'e' | 'o' | 'n' | 's' | 'd' => odds += 1\n                    case 'a' | 't'\
    \ | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e'\
    \ | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' => odds += 2\n \
    \                   case 'a' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' |\
    \ 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o'\
    \ | 'n' | 's' | 'd' => odds += 3\n                    case 'a' | 't' | 'e' | 'o'\
    \ | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n'\
    \ | 's' | 'd' | 't' | 'e' | 'o' | 'n' | 's' | 'd' => odds += 4\n             \
    \       case 'a' | 't' | 'e' | 'o' | 'n' | 's' | 'd' | 't' | 'e' | 'o' | 'n' |\
    \ 's' | 'd' | 't' | 'e' | 'o' | '\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfzok7tyh.scala:41:121 ----------------------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    \e[33mcase\e[0m \e[31m'a'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e[0m | \e[31m's'\e\
    [0m | \e[31m'd'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e[0m | \e[31m'n'\e\
    [0m | \e[31m's'\e[0m | \e[31m'd'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'o'\e\
    [0m | '\n\e[31m\e[31m   |\e[0m                                               \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzok7tyh.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfzok7tyh.scala:50:0 ----------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzok7tyh.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfzok7tyh.scala:42:4 ---------------------\e[0m\e\
    [0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m  \
    \  Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpfzok7tyh.scala:49:0 -----------------\e\
    [0m\e[0m\n\e[33m47 |\e[0m    }\n\e[33m48 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ e"
  stdout: ''
  timestamp: 1659979966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length)\n            if (lst(i).forall(_.isDigit))\n\
    \                odds += lst(i).filter(_.isDigit).length\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpulq3f5by.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt == 0) odds += 0 else {\n      \
    \      val digits = x.toString.toInt\n            val odd = digits % 2\n     \
    \       odds += odd\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8_m6r7f9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+=(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhg8xzwx.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '0')\n            odds += numOdds\n       \
    \ }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpneb4kswj.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odd += x.toString.toInt)\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4lmavwdr.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '1')\n            odds.add(numOdds)\n     \
    \   }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36ur0nvr.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.forall(_.isDigit)) odds += x.toInt)\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlzovkbk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length)\n            if (lst(i).forall(_.isDigit))\n\
    \                odds += lst(i).filter(_.isDigit).length\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpulq3f5by.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0c3vup9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds += (str.length - (j + 1))\n                }\n \
    \           }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5201xm1f.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odds += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odds += 1)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odds +=\
    \ 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odds += 1)\n   \
    \     lst.foreach(x => if (x.toString.toInt % 2 == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odds += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odds += 1)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odds +=\
    \ 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odds += 1)\n   \
    \     lst.foreach(x => if (x.toString.toInt % 2 == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odds += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odds += 1)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odds +=\
    \ 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odds += 1)\n   \
    \     lst.foreach(x => if (x.toString.toInt % 2 == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odds += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odds += 1)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odds +=\
    \ 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odds += 1)\n   \
    \     lst.foreach(x => if (x.toString.toInt % 2 == 0) odds += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odds += 1)\n        lst.foreach(x => \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8xavpq_y.scala:36:24 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        lst.foreach(\e[36mx\e[0m => \n\e[31m\e[31m  \
    \ |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                      \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8xavpq_y.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length) {\n            val str = lst(i)\n     \
    \       val numOdds = str.filter(_.isDigit).length\n            odds += numOdds\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeoq3fe4d.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(_ == '1')\n       \
    \ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3mstqklk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.matches(\"\\\\d+\")) odds += x.toInt)\n      \
    \  odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu72pbjuc.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(c => c.isDigit)\n            odds.add(numOdds)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqaev54hl.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => odds += 0\n                case _ => odds\
    \ += digits\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1406ua76.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(x => x % 2 != 0)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeju93ti.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val odd = digits.length\
    \ filter (_ % 2 == 1)\n            odds.add(odd.length)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1i25dhmt.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1i25dhmt.scala:13:36 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = digits.length\
    \ filter (_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '0')\n            odds.+=((numOdds % 2))\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg6tlk1ix.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val odd = digits.length\
    \ filter (x => x % 2 != 0)\n            odds.add(odd.length)\n        }\n    \
    \    odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqcx2j_mf.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpqcx2j_mf.scala:13:36 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = digits.length\
    \ filter (\e[36mx\e[0m => x % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \            value filter is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.add(numOdds)\n        })\n        odds.toList.map(i => s\"${i}\
    \ odd digits in ${lst(0)}\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmwygci6t.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                if(digits % 2 == 1) {\n              \
    \      odds.add(digits)\n                }\n            }\n        })\n      \
    \  odds.toList.map(x => x.toString).mkString(\",\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp127yrl7t.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val digits = str.map(_.toInt)\n            for(j <- 0 until digits.size)\
    \ {\n                val digit = digits(j)\n                if(digit % 2 == 1)\
    \ {\n                    odds += digit\n                }\n            }\n   \
    \     }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq84kwdnk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_ match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbsnlmdm6.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.+=(numOdds)\n        })\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1iig9l2f.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case 'a' => odds\
    \ += 10\n                    case 'b' => odds += 11\n                    case\
    \ 'c' => odds += 12\n                    case 'd' => odds += 13\n            \
    \        case 'e' => odds += 14\n                    case 'f' => odds += 15\n\
    \                    case 'A' => odds += 10\n                    case 'B' => odds\
    \ += 11\n                    case 'C' => odds += 12\n                    case\
    \ 'D' => odds += 13\n                    case 'E' => odds += 14\n            \
    \        case 'F' => odds += 15\n                    case '0' => odds += 0\n \
    \                   case '1' => odds += 1\n                    case '2' => odds\
    \ += 2\n                    case '3' => odds += 3\n                    case '4'\
    \ => odds += 4\n                    case '5' => odds += 5\n                  \
    \  case '6' => odds += 6\n                    case '7' => odds += 7\n        \
    \            case '8' => odds += 8\n                    case '9' => odds += 9\n\
    \                    case 'a' => odds += 10\n                    case 'b' => odds\
    \ += 11\n                    case 'c' => odds += 12\n                    case\
    \ 'd' => odds += 13\n                    case 'e' => odds += 14\n            \
    \        case 'f' => odds += 15\n                    case 'A' => odds += 10\n\
    \                    case 'B' => odds += 11\n                    case 'C' => odds\
    \ += 12\n                    case 'D' => odds += 13\n                    case\
    \ 'E' => odds += 14\n                    case 'F' => odds += 15\n            \
    \        case '0' => odds += 0\n                    case '1' => odds += 1\n  \
    \                  case '2' => odds += 2\n                    case '3' => odds\
    \ += 3\n                    case '4' => odds += 4\n                    case '5'\
    \ => odds += 5\n                    case '6' => odds += 6\n                  \
    \  case '7' => odds += 7\n                    case '8' => odds += 8\n        \
    \            case '9' => odds += 9\n                    case 'a' => odds += 10\n\
    \                    case 'b' => odds += 11\n                    case 'c' => odds\
    \ += 12\n                    case 'd' => odds += 13\n                    case\
    \ 'e' => \n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwbxzsmy4.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpwbxzsmy4.scala:81:0 ----------------------------\e[0m\e[0m\n\e[31m81\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwbxzsmy4.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwbxzsmy4.scala:72:29 --------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m                    \e[33mcase\e[0m \e[31m'e'\e[0m =>\
    \ \n\e[31m\e[31m   |\e[0m                             ^^\e[0m\n\e[31m   |\e[0m\
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \             Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpwbxzsmy4.scala:80:0 -----------------\e[0m\e[0m\n\e[33m78 |\e\
    [0m    }\n\e[33m79 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e[0m\n\e[33m   |\e[0mA\
    \ pure expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt.isOdd) odds += x.toString.toInt\
    \ else ())\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9gu1i4md.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9gu1i4md.scala:10:46 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x.toString.toInt.isOdd)\
    \ odds += x.toString.toInt \e[33melse\e[0m ())\n\e[31m\e[31m   |\e[0m        \
    \                     ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  value isOdd is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659979973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+= odd\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoak59ejn.scala:13:23 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            odds.+= odd\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoak59ejn.scala:9:19 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m    \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach { s =>\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpryy_escq.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val numOdd = str.count(c => c %\
    \ 2 == 1)\n            odd += numOdd\n            even += str.count(c => c % 2\
    \ == 0)\n        }\n        odd.toList ++ even.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvmupbbiu.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpvmupbbiu.scala:10:19 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'\
    \ | '9' => odds += str.charAt(j).toInt\n                    case _ => break\n\
    \                })\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpujiz2bup.scala:17:8 ----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpujiz2bup.scala:9:19 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                 Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpujiz2bup.scala:15:30 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m                    \e[33mcase\e[0m _ => break\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) odd += (str.charAt(j) match {\n            \
    \    case '1' => 1\n                case '0' => 0\n                case _ => -1\n\
    \            })\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw3ku1rrv.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdds = str.filter(_.isDigit).filter(_.isOdd).length\n            odds.add(numOdds)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxjg8xk58.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxjg8xk58.scala:12:57 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mnumOdds\e[0m = str.filter(_.isDigit).filter(_.isOdd).length\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value isOdd is not a\
    \ member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659979977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttjpoixg.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt == 0) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odd += 1)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 1) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 1) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n        lst.foreach(x\
    \ => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x => if (x.toString.toInt\
    \ % 2 == 0) odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 1)\
    \ odd += 0)\n        lst.foreach(x => if (x.toString.toInt % 2 == 0) odd += 0)\n\
    \        lst.foreach(x => if (x.toString.toInt % 2 == 1) odd += 0)\n        lst.foreach(x\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxarb0emu.scala:36:24 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        lst.foreach(\e[36mx\e[0m => \n\e[31m\e[31m  \
    \ |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                      \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxarb0emu.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => ()\n                case _ => {\n       \
    \             for (i <- 0 until digits) odds += digits(i)\n                }\n\
    \            }\n        })\n        lst.map(s => s\"${s.length} odd digits in\
    \ $s\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_lxpin_.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val odd = s.filter(x => x != '0').count(x => x != '1')\n            odds.+=\
    \ odd\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoo3tbcrf.scala:13:23 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            odds.+= odd\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpoo3tbcrf.scala:9:19 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m    \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odd(j) += 1\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odd(j) += 1\n                 \
    \   case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l'\
    \ | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y'\
    \ | 'z' => odd(j) += 1\n                    case 'A' | 'B' | 'C' | 'D' | 'E' |\
    \ 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'\
    \ | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odd(j) += 1\n           \
    \         case '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '-'\
    \ | '+' | '=' | '/' | ':' | ';' | '<' | '>' | '?' | '[' | ']' | '\\\\' | ':' |\
    \ ',' | '.' | '|' | '\\n' | '\\r' | '\\t' => {\n                        odd(j)\
    \ += 1\n                    }\n                    else => odd(j) += 1\n     \
    \           }\n            }\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbdeznyvr.scala:21:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    \e[33melse\e[0m => odd(j) += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpbdeznyvr.scala:23:12 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpbdeznyvr.scala:9:18 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.filter(_.isDigit).length\n            odds += numOddDigits\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2lli3jss.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd = digits % 2\n            odds.+=( odd )\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0s1uoxn_.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val oddDigits = digits.filter(d\
    \ => d % 2 != 0)\n            odds.add(oddDigits.size)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp32t76k96.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdds = str.count(_ == '1')\n            odds += numOdds\n        }\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgyt8f072.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(c => c.isDigit)\n            odds += numOdds\n \
    \       }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgn49xajp.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 1\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ else => odds += 0\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqn6icd7o.scala:16:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpqn6icd7o.scala:18:12 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpqn6icd7o.scala:9:19 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                 Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 0\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ else => odds += 0\n                })\n        }\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptouk1tk5.scala:16:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmptouk1tk5.scala:18:8 ----------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmptouk1tk5.scala:9:19 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                 Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val count = str.count(_ == '1')\n            odd.add(s\"$count odd digits\
    \ in $str\")\n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp82fi4dzi.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdz2s09zq.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            odds\
    \ += digits\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7drm185p.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val oddDigits = s.filter(_.isDigit).length\n\
    \            odds.add(oddDigits)\n        })\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm1rabz2l.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }\n                else if(str.charAt(j)\
    \ == '1'){\n                    odds += 1\n                }\n            }\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpegbq3tkc.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(x => x % 2 != 0)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeju93ti.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2 != 0\n            odds.+=(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd22yu1pf.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }\n                else{\n   \
    \                 odds += str.charAt(j) - '0'\n                }\n           \
    \ }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprkbvr70f.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds += str.charAt(j)\n                }\n          \
    \  }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbqaty819.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val digit = str.charAt(j)\n\
    \                if(digit == '1') {\n                    odds.add(1)\n       \
    \         }\n                else {\n                    odds.add(0)\n       \
    \         }\n            }\n        }\n        odds.toList.map(i => lst(i))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ee7jlrl.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.+=numOdds\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvwxxxzrq.scala:12:26 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            odds.+=numOdds\n\e[31m\e[31m   |\e[0m   \
    \                       ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvwxxxzrq.scala:9:19 -------------------------\e[0m\e[0m\n\e[31m9 |\e\
    [0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m    \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => x match {\n            case x if x.forall(_.isDigit)\
    \ => odds += x.toInt\n            case _ => ()\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5jpdy051.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8kmv5glv.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOddDigits = str.count(_ == '0')\n            odds += numOddDigits\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbu73yv4d.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds.+=(numOdds)\n        })\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvykxrlwf.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) odds += digits(i)\n        })\n        odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfbbit6on.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp77602mc8.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val digits = str.filter(_.isDigit)\n            for(d <- digits) {\n    \
    \            val odd = digits.length - str.count(_ == d)\n                odds.add(odd)\n\
    \            }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpazrws20_.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttjpoixg.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0c3vup9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length) {\n            val str = lst(i)\n     \
    \       val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5bxwfqt.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x != '0').count(x => x != '1')\n       \
    \     odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe9kdlqci.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(_ == '1')\n       \
    \ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3mstqklk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt == x) odds += 1 )\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp97f4wdt0.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp97f4wdt0.scala:10:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x.toString.toInt\
    \ == x) odds += \e[31m1\e[0m )\n\e[31m\e[31m   |\e[0m                        \
    \     ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types Int\
    \ and String cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length) {\n            val str = lst(i)\n     \
    \       val numOdds = str.count(c => c % 2 != 0)\n            odds.add(numOdds)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr6a7i422.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 0\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ else => odds += 0\n                }\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp27n4pvui.scala:16:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp27n4pvui.scala:18:12 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e\
    [31m   |\e[0m            ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp27n4pvui.scala:9:19 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                 Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(c => c.isDigit).filter(_ % 2 == 1).length\n    \
    \        odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuw7bark3.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuw7bark3.scala:12:52 ------------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            \e[33mval\e[0m \e[36mnumOdds\e[0m = str.count(\e\
    [36mc\e[0m => c.isDigit).filter(_ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value filter is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2 != 0\n            if (odd) odds.add(digits)\n        })\n \
    \       odds.toList.map(i => s\"${i} odd digits in ${lst(i)}\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7r9illmo.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val s = lst(i)\n         \
    \   for(j <- 0 until s.length){\n                if(s(j).isDigit){\n         \
    \           odds += s(j).asDigit.toInt\n                }\n            }\n   \
    \     }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdqj18oz2.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_ % 2 != 0).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptwk002dt.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val numOdds = str.count(c => c % 2 == 1)\n            odds.add(numOdds)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj38kod4d.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiao8rljr.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }else{\n                    odds\
    \ += 1\n                }\n            }\n        }\n        odds.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8y19vym_.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x != '0').filter(x => x != '1')\n      \
    \      odds.add(oddDigits.length)\n        }\n        odds.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprdlauvre.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  for(j <- 0 until s.length)\n                if(s(j) match {\n             \
    \       case '0' | '1' => odds += 0\n                    case '2' | '3' | '4'\
    \ | '5' | '6' | '7' | '8' | '9' => odds += 1\n                    case _ => odds\
    \ += 1\n                })\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp89r7iou2.scala:18:8 ----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp89r7iou2.scala:9:19 -------------------------\e[0m\e[0m\n\
    \e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(_.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ypga_xe.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.HashSet[Int]()\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            for(i\
    \ <- 0 until digits) {\n                odds += digits(i)\n            }\n   \
    \     })\n        val res = lst.map(s => s\"${s.toInt} ${odds.size}\")\n     \
    \   res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9piiexgw.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+=( odd )\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwrjns1p2.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case _ => odds\
    \ += 0\n                })\n            }\n        }\n        odds.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwt1p45s_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            }\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\
    \e[31m   |\e[0m            'then' expected, but '}' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpwt1p45s_.scala:9:19 -------------------------\e[0m\e\
    [0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 1 // odd digit\n              \
    \      case '0' => odds += 0 // even digit\n                    case '1' => odds\
    \ += 0 // even digit\n                    case '2' | '3' | '4' | '5' | '6' | '7'\
    \ | '8' | '9' => odds += 0 // even digit\n                    case 'a' | 'b' |\
    \ 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o'\
    \ | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' => odds +=\
    \ 0 // even digit\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F'\
    \ | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S'\
    \ | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += 0 // even digit\n     \
    \               case '*' => odds += 0 // even digit\n                    case\
    \ '/' => odds += 0 // even digit\n                    case '-' => odds += 0 //\
    \ even digit\n                    case '+' => odds += 0 // even digit\n      \
    \              case '(' | ')' => odds += 0 // even digit\n                   \
    \ case '{' | '}' => odds += 0 // even digit\n                    case '[' | ']'\
    \ => odds += 0 // even digit\n                    case '<' | '>' => odds += 0\
    \ // even digit\n                    case '=' | '>=' | '<='| '!='| '==' | '!='\
    \ => odds += 0 // even digit\n                    case '|' => odds += 0 // even\
    \ digit\n                    case '?' => odds += 0 // even digit\n           \
    \         case '!' => odds += 0 // even digit\n                    case '%' =>\
    \ odds += 0 // even digit\n                    case '&' => odds += 0 // even digit\n\
    \                    case '^' => odds += 0 // even digit\n                   \
    \ case '~' => odds += 0 // even digit\n                    case '*' => odds +=\
    \ 0 // even digit\n                    case '/' => odds += 0 // even digit\n \
    \                   case '+' => odds += 0 // even digit\n                    case\
    \ '-' => odds += 0 // even digit\n                    case '*' => odds += 0 //\
    \ even digit\n                    case '/' => odds += 0 // even digit\n      \
    \              case '+' => odds += 0 // even digit\n                    case '-'\
    \ => odds += \n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfomni9ps.scala:28:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    \e[33mcase\e[0m \e[31m'='\e[0m |\
    \ \e[31m'>=\e[0m' | \e[31m'<='|\e[0m \e[31m'!='|\e[0m \e[31m'==\e[0m' | \e[31m'!=\e\
    [0m' => odds += \e[31m0\e[0m \e[34m// even digit\e[0m\n\e[31m\e[31m   |\e[0m \
    \                              ^\e[0m\n\e[31m   |\e[0msymbol literal '>= is no\
    \ longer supported,\n\e[31m   |\e[0muse a string literal \">=\" or an application\
    \ Symbol(\">=\") instead,\n\e[31m   |\e[0mor enclose in braces '{>=} if you want\
    \ a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfomni9ps.scala:28:34\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                    \e\
    [33mcase\e[0m \e[31m'='\e[0m | \e[31m'>=\e[0m' | \e[31m'<='|\e[0m \e[31m'!='|\e\
    [0m \e[31m'==\e[0m' | \e[31m'!=\e[0m' => odds += \e[31m0\e[0m \e[34m// even digit\e\
    [0m\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e\
    [0m                                  '=>' expected, but ' found\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmpfomni9ps.scala:43:39 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                    \e[33mcase\e[0m \e[31m'-'\e[0m =>\
    \ odds += \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfomni9ps.scala:45:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpfomni9ps.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tm"
  stdout: ''
  timestamp: 1659979986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            digits\
    \ match {\n                case 0 => odds += 0\n                case _ => odds\
    \ += digits\n            }\n        })\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpluasa4dm.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                val c = str.charAt(j)\n \
    \               if(c == '1') {\n                    odds += 1 \n             \
    \   }\n            }\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp09aqv4wa.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     for(j <- 0 until str.length){\n                if(str.charAt(j) == '0'){\n\
    \                    odds += 0\n                }else{\n                    odds\
    \ += (str.charAt(j).toInt.toDouble % 2).toInt\n                }\n           \
    \ }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkyq01c0k.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg0c3vup9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) == '1') odd\
    \ += 1 \n        }\n        odd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaeky7miq.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuypp7wzw.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            for(i\
    \ <- 0 until digits) {\n                odds += digits(i) % 2 match {\n      \
    \              case 0 => 1\n                    case 1 => 0\n                \
    \    case _ => -1\n                }\n            }\n        })\n        lst.map(x\
    \ => x.toString + odds(x.toInt))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jrulje8.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(c => c.isDigit).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp25vm8zxv.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.count(_ == '0')\n            odds.add(numOdds)\n     \
    \   }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1qbbsqxq.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) == '1')\
    \ {\n                    odds += (str.length - j)\n                }\n       \
    \     }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2cxef7sg.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.length) odds += lst(i).count(_ == '1')\n      \
    \  odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpss6qmu0_.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 0\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' |\
    \ 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y'\
    \ | 'z' => odds += 2\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F'\
    \ | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S'\
    \ | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += 3\n                   \
    \ case '!' | '@' | '#' | '$' | '%' | '^' | '&' | '*' | '(' | ')' | '+' | '-' |\
    \ '/' | ':' | '<' | '>' | '?' | ';' | '{' | '|' | '\\\\' | '}' | ',' | '.' | '~'\
    \ | ':' | ';' | ':' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?'\
    \ | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.'\
    \ | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!'\
    \ | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.'\
    \ | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?'\
    \ | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.'\
    \ | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!'\
    \ | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.'\
    \ | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?'\
    \ | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.' | '!' | '.' | '?' | '.'\
    \ | '!' | '.' | '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxqcprloo.scala:18:968 ----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m | \e[31m'$'\e[0m | \e[31m'%'\e[0m | \e[31m'^'\e\
    [0m | \e[31m'&'\e[0m | \e[31m'*'\e[0m | \e[31m'('\e[0m | \e[31m')'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e\
    [0m | \e[31m'?'\e[0m | \e[31m';'\e[0m | \e[31m'{'\e[0m | \e[31m'|'\e[0m | \e[31m'\\\
    \\'\e[0m | \e[31m'}'\e[0m | \e[31m','\e[0m | \e[31m'.'\e[0m | \e[31m'~'\e[0m |\
    \ \e[31m':'\e[0m | \e[31m';'\e[0m | \e[31m':'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'!'\e[0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e\
    [0m | \e[31m'.'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e[0m | \e[31m'!'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'?'\e[0m | \e[31m'.'\e[0"
  stdout: ''
  timestamp: 1659979992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val numOdds = str.filter(x => x != '0').count(x => x % 2 != 0)\n       \
    \     odds.add(numOdds)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzr2e3ub3.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  for(j <- 0 until s.length)\n                if(s(j) match {\n             \
    \       case '0' | '1' => odds += 0\n                    case '2' | '3' | '4'\
    \ | '5' | '6' | '7' | '8' | '9' => odds += 1\n                    else => odds\
    \ += 0\n                })\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7hyay7ss.scala:16:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmp7hyay7ss.scala:18:8 ----------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp7hyay7ss.scala:9:19 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                 Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val digits = str.filter(_.isDigit)\n            for(d <- digits) {\n    \
    \            odds += d.toInt\n            }\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfhql5fj.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdz2s09zq.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => s.toInts.foreach(i => if (i % 2 == 1) odds += 1))\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fdf4dga.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8fdf4dga.scala:10:27 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        lst.foreach(\e[36ms\e[0m => s.toInts.foreach(\e[36mi\e\
    [0m => \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m1\e[0m) odds += \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                        value toInts is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659979992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttjpoixg.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            val digits = x.toInt\n            val\
    \ odd = digits % 2\n            odds.add(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqx3qobs6.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[Int]\n\
    \        val even = mutable.ListBuffer.empty[Int]\n        val evenOdd = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => {\n            val y = x.toInt\n            if (y %\
    \ 2 == 0) {\n                even += y\n            } else {\n               \
    \ odd += y\n            }\n        })\n        evenOdd += even.sum\n        evenOdd\
    \ += odd.sum\n        evenOdd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ponf1qj.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp1ponf1qj.scala:10:19 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1ponf1qj.scala:11:22 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mevenOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val s = lst(i)\n          \
    \  for(j <- 0 until s.length)\n                if(s(j) match {\n             \
    \       case '0' | '1' => odds += 0\n                    case '2' | '3' | '4'\
    \ | '5' | '6' | '7' | '8' | '9' => odds += 1\n                    else => odds\
    \ += 0\n                })\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvmadwt4h.scala:16:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33melse\e[0m => odds += \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m     \
    \               end of statement expected but 'else' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpvmadwt4h.scala:18:8 ----------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e\
    [0m        'then' expected, but unindent found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpvmadwt4h.scala:9:19 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e\
    [0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e[0m    \
    \               Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            odds\
    \ += digits\n        })\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuz9qjba8.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val s = lst(i)\n         \
    \   val oddDigits = s.filter(_ % 2 != 0).length\n            odds.add(oddDigits)\n\
    \        }\n        odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbcbjlk2e.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length) odds += lst(i).count(x => x % 2 != 0)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgeju93ti.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) == '1') odds\
    \ += (str.length-j-1)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9syehdx9.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+=( odd )\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwrjns1p2.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odd = mutable.ListBuffer.empty[String]\n\
    \        val even = mutable.ListBuffer.empty[String]\n        lst.foreach(x =>\
    \ {\n            val digits = x.toInt\n            if (digits % 2 == 0) {\n  \
    \              even += x\n            } else {\n                odd += x\n   \
    \         }\n        })\n        odd.toList ++ even.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfd66ymgt.scala:9:18 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                  Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpfd66ymgt.scala:10:19 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for(i <- 0 until lst.length){\n            val str = lst(i)\n       \
    \     val oddDigits = str.filter(x => x match {\n                case x if x.isDigit\
    \ => true\n                case _ => false\n            }).length\n          \
    \  odds.add(oddDigits)\n        }\n        odds.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qlwqt34.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+=(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhg8xzwx.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val numOdds = s.length - s.filter(_.isDigit).length\n\
    \            odds += numOdds\n        })\n        odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6qqsvoel.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(s => {\n            val digits = s.toInt\n            val\
    \ odd = digits % 2\n            odds.+=(odd)\n        })\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhg8xzwx.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        lst.foreach(x => if (x.toString.toInt%2 == 1) odds += x.toString.toInt)\n\
    \        odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpttjpoixg.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length)\n                if(str.charAt(j) match {\n\
    \                    case '0' | '1' => odds += 0\n                    case '2'\
    \ | '3' | '4' | '5' | '6' | '7' | '8' | '9' => odds += 1\n                   \
    \ case 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' |\
    \ 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y'\
    \ | 'z' => odds += 2\n                    case 'A' | 'B' | 'C' | 'D' | 'E' | 'F'\
    \ | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S'\
    \ | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' => odds += 3\n                   \
    \ case '!' | '@' | '#' | '%' | '^' | '&' | '*' | '+' | '?' | '/' | ':' | '|' |\
    \ '<' | '>' | '?' | '.' | '-' | '+' | '*' | '/' | '+' | '*' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+' | '+'\
    \ | '+' | '+\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdoj3on4t.scala:18:961 ----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                    \e[33mcase\e[0m \e[31m'!'\e[0m |\
    \ \e[31m'@'\e[0m | \e[31m'#'\e[0m | \e[31m'%'\e[0m | \e[31m'^'\e[0m | \e[31m'&'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'?'\e[0m | \e[31m'/'\e[0m | \e[31m':'\e\
    [0m | \e[31m'|'\e[0m | \e[31m'<'\e[0m | \e[31m'>'\e[0m | \e[31m'?'\e[0m | \e[31m'.'\e\
    [0m | \e[31m'-'\e[0m | \e[31m'+'\e[0m | \e[31m'*'\e[0m | \e[31m'/'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'*'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e[0m | \e[31m'+'\e\
    [0m | \e[31m'+'\e[0m"
  stdout: ''
  timestamp: 1659979993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    for(j <- 0 until str.length) {\n                if(str.charAt(j) match {\n\
    \                    case '0' => odds += 0\n                    case '1' => odds\
    \ += 1\n                    case '2' => odds += 2\n                    case '3'\
    \ => odds += 3\n                    case '4' => odds += 4\n                  \
    \  case '5' => odds += 5\n                    case '6' => odds += 6\n        \
    \            case '7' => odds += 7\n                    case '8' => odds += 8\n\
    \                    case '9' => odds += 9\n                    case 'a' => odds\
    \ += 10\n                    case 'b' => odds += 11\n                    case\
    \ 'c' => odds += 12\n                    case 'd' => odds += 13\n            \
    \        case 'e' => odds += 14\n                    case 'f' => odds += 15\n\
    \                    case 'A' => odds += 10\n                    case 'B' => odds\
    \ += 11\n                    case 'C' => odds += 12\n                    case\
    \ 'D' => odds += 13\n                    case 'E' => odds += 14\n            \
    \        case 'F' => odds += 15\n                    case '0' | '1' | '2' | '3'\
    \ | '4' | '5' | '6' | '7' | '8' | '9' => odds += 0\n                    case 'a'\
    \ | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds +=\
    \ 10\n                    case 'b' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' |\
    \ 'e' | 'i' | 'o' | 'u' => odds += 11\n                    case 'c' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds += 12\n      \
    \              case 'd' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i'\
    \ | 'o' | 'u' => odds += 13\n                    case 'e' | 't' | 'e' | 'i' |\
    \ 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds += 14\n              \
    \      case 'f' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' |\
    \ 'u' => odds += 15\n                    case '0' | '1' | '2' | '3' | '4' | '5'\
    \ | '6' | '7' | '8' | '9' => odds += 0\n                    case 'a' | 't' | 'e'\
    \ | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i' | 'o' | 'u' => odds += 10\n      \
    \              case 'b' | 't' | 'e' | 'i' | 'o' | 'u' | 'A' | 't' | 'e' | 'i'\
    \ | 'o' | '\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2qhyowbk.scala:45:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                    \e[33mcase\e[0m \e[31m'b'\e[0m |\
    \ \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e[0m | \e[31m'u'\e\
    [0m | \e[31m'A'\e[0m | \e[31m't'\e[0m | \e[31m'e'\e[0m | \e[31m'i'\e[0m | \e[31m'o'\e\
    [0m | '\n\e[31m\e[31m   |\e[0m                                               \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     unclosed character literal\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp2qhyowbk.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp2qhyowbk.scala:54:0 ----------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qhyowbk.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \ |\e[0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2qhyowbk.scala:46:4 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    Found:    Unit\n\e[31m   |\e[0m    Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmp2qhyowbk.scala:53:0 -----------------\e\
    [0m\e[0m\n\e[33m51 |\e[0m    }\n\e[33m52 |\e[0m}\n\e[33m\e[33m   |\e[0m     ^\e\
    [0m\n\e[33m   |\e[0mA pure expression does nothing in statement position; you\
    \ may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 warning found\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    def oddCount(lst : List[String]) : List[String] = {\n        val odds = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until lst.size) {\n            val str = lst(i)\n       \
    \     val digits = str.filter(_.isDigit)\n            val oddDigits = digits.filter(d\
    \ => d % 2 == 1)\n            odds.add(oddDigits.length)\n        }\n        odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1bewg04f.scala:9:19 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m  |\e[0m                   ^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                   Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979992
