language: scala
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        val result = shiftDigit + shiftDigits\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe88q7non.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpe88q7non.scala:10:42 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        val result = digits.substring(0,\
    \ shift) + shiftDigits\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpar1fs34q.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpar1fs34q.scala:10:41 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.substring(\e\
    [31m0\e[0m, shift) + shiftDigits\n\e[31m\e[31m   |\e[0m                      \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \           Found:    (shift : Long)\n\e[31m   |\e[0m                        \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        val result = shiftDigit + shiftDigits\n        result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjtvncs1s.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjtvncs1s.scala:10:42 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var shiftDigits = \"\"\
    \n        var shiftDigit = shift % 10\n        var shiftDigits = shiftDigit +\
    \ \"\"\n        var digit = x % 10\n        var digits = digit + \"\"\n      \
    \  var digits = digits + \"\"\n        var digits = digits + \"\"\n        var\
    \ digits = digits + \"\"\n        var digits = digits + \"\"\n        var digits\
    \ = digits + \"\"\n        var digits = digits + \"\"\n        var digits = digits\
    \ + \"\"\n        var digits = digits + \"\"\n        var digits = digits + \"\
    \"\n        var digits = digits + \"\"\n        var digits = digits + \"\"\n \
    \       var digits = digits + \"\"\n        var digits = digits + \"\"\n     \
    \   var digits = digits + \"\"\n        var digits = digits + \"\"\n        var\
    \ digits = digits + \"\"\n        var digits = digits + \"\"\n        var digits\
    \ = digits + \"\"\n        var digits = digits + \"\"\n        var digits = digits\
    \ + \"\"\n        var digits = digits + \"\"\n        var digits = digits + \"\
    \"\n        var digits = digits + \"\"\n        var digits = digits + \"\"\n \
    \       var digits = digits + \"\"\n        var digits = digits + \"\"\n     \
    \   var digits = digits + \"\"\n        var digits = digits + \"\"\n        var\
    \ digits = digits + \"\"\n        var digits = digits + \"\"\n        var digits\
    \ = digits + \"\"\n        var digits = digits + \"\"\n        var digits = digits\
    \ + \"\"\n        var digits = digits + \"\"\n        var digits = digits + \"\
    \"\n        var digits = digits + \"\"\n        var digits = digits + \"\"\n \
    \       var digits = digits + \"\"\n        var digits = digits + \"\"\n     \
    \   var digits = digits + \"\"\n        var digits = digits + \"\"\n        var\
    \ digits = digits + \"\"\n        var digits = digits + \"\"\n        var digits\
    \ = digits + \"\"\n        var digits = digits + \"\"\n        var digits = digits\
    \ + \"\"\n        var digits = digits + \"\"\n        var digits = digits + \"\
    \"\n        var digits = digits + \"\"\n        var digits = digits + \"\"\n \
    \       var digits = digits + \"\"\n        var digits = digits + \"\"\n     \
    \   var digits = digits + \"\"\n        var digits = digits + \"\"\n        var\
    \ digits = digits + \"\"\n        var digits = digits + \"\"\n        var digits\
    \ = digits + \"\"\n        var digits = digits + \"\"\n        var digits = digits\
    \ + \"\"\n        var digits = digits + \"\"\n        var digits = digits + \"\
    \"\n        var digits = digits + \"\"\n        var digits = digits + \"\"\n \
    \       var digits = digits + \"\"\n        var digits = digits + \"\"\n     \
    \   var digits = digits + \"\"\n        var digits = digits + \"\"\n        var\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpbwj1613u.scala:81:11 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpbwj1613u.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigits\e[0m = shiftDigit\
    \ + \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigits is already defined as \e[33mvariable\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbwj1613u.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mvar\e[0m \e[36mdigits\e[0m = digits + \e[31m\"\"\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdigits is already defined as \e[33mvariable\e[0m \e[35mdigits\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbwj1613u.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdigits\e[0m = digits + \e[31m\"\"\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigits\
    \ is already defined as \e[33mvariable\e[0m \e[35mdigits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbwj1613u.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdigits\e[0m = digits + \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvariable\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        var i = 0\n        while (i < digits.length &&\
    \ i < shift) {\n            result.append(digits(i))\n            i += 1\n   \
    \     }\n        if (i < digits.length) {\n            result.append(digits(i))\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq0aew7cw.scala:22)\n\tat Problem.main(tmpq0aew7cw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        val result = digits.substring(0,\
    \ shift)\n        result + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp24yviw5k.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp24yviw5k.scala:10:41 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.substring(\e\
    [31m0\e[0m, shift)\n\e[31m\e[31m   |\e[0m                                    \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                         Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                                         Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ap4o7sy.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0ap4o7sy.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var shiftDigits = shift\n\
    \        while (shiftDigits > 0) {\n            result += (x % 10).toChar\n  \
    \          x /= 10\n            shiftDigits -= 1\n        }\n        return result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp30ak1lhy.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var carry = 0\n     \
    \   var i = x.toInt\n        while (shift > 0) {\n            val digit = i /\
    \ 10\n            val digitShifted = digit + carry\n            val digitShiftedString\
    \ = digitShifted.toString.toChar\n            val digitShiftedStringLength = digitShiftedString.length\n\
    \            val digitShiftedStringReversed = digitShiftedString.reverse\n   \
    \         val digitShiftedStringReversedLength = digitShiftedStringReversed.length\n\
    \            val digitShiftedStringReversedChars = digitShiftedStringReversed.toCharArray\n\
    \            val digitShiftedStringReversedCharsLength = digitShiftedStringReversedChars.length\n\
    \            val digitShiftedStringReversedCharsReversed = digitShiftedStringReversedChars.reverse\n\
    \            val digitShiftedStringReversedCharsReversedLength = digitShiftedStringReversedCharsReversed.length\n\
    \            val digitShiftedStringReversedCharsReversedChars = digitShiftedStringReversedCharsReversed.toCharArray\n\
    \            val digitShiftedStringReversedCharsReversedCharsLength = digitShiftedStringReversedCharsReversedChars.length\n\
    \            val digitShiftedStringReversedCharsReversedCharsReversed = digitShiftedStringReversedCharsReversed.reverse\n\
    \            val digitShiftedStringReversedCharsReversedCharsReversedLength =\
    \ digitShiftedStringReversedCharsReversedCharsReversed.length\n            val\
    \ digitShiftedStringReversedCharsReversedCharsReversedChars = digitShiftedStringReversedCharsReversedCharsReversed.toCharArray\n\
    \            val digitShiftedStringReversedCharsReversedCharsReversedCharsLength\
    \ = digitShiftedStringReversedCharsReversedCharsReversedChars.length\n       \
    \     val digitShiftedStringReversedCharsReversedCharsReversedCharsReversed =\
    \ digitShiftedStringReversedCharsReversedCharsReversed.reverse\n            val\
    \ digitShiftedStringReversedCharsReversedCharsReversedCharsReversedLength = digitShiftedStringReversedCharsReversedCharsReversedCharsReversed.length\n\
    \            val digitShiftedStringReversedCharsReversedCharsReversedCharsReversedChars\
    \ = digitShiftedStringReversedCharsReversedCharsReversedCharsReversed.toCharArray\n\
    \            val digitShiftedStringReversedCharsReversedCharsReversedCharsReversedChars\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwvxlsc77.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwvxlsc77.scala:42:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpwvxlsc77.scala:14:59 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m            \e[33mval\e[0m \e[36mdigitShiftedString\e[0m = digitShifted.toString.toChar\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwvxlsc77.scala:41:1\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpwvxlsc77.scala:33:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m33 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse\n        var result\
    \ = \"\"\n        while (digits.length < shift) {\n            digits += \"0\"\
    \n        }\n        while (digits.length > shift) {\n            digits = digits.dropRight(1)\n\
    \        }\n        digits += digits.reverse\n        digits = digits.dropRight(shift)\n\
    \        digits += digits.reverse\n        result += digits\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7zrb05g3.scala:17:34\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        digits = digits.dropRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        if (shift > digits.length)\
    \ result + digits.reverse.mkString(\"\")\n        else result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4a_c3twk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp4a_c3twk.scala:10:51 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (shift > digits.length) result\
    \ + digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of Iterator[String] - did you mean digits.reversed?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5gg_qtyp.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5gg_qtyp.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m  |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a member of Iterator[String]\
    \ - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ \"\" else digits(digits.length - shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphletwd24.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmphletwd24.scala:10:53 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ \e[31m\"\"\e[0m \e[33melse\e[0m digits(digits.length - shift))\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = digits.foldLeft(\"\")( (acc, digit) => acc + digit.toString)\n\
    \        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9ub7qyk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m  |\e[0m   \
    \                                             ^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                                           Found:    (shift : Long)\n\e[31m \
    \ |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var remainder = x % 10\n\
    \        x /= 10\n        while (x > 0) {\n            result += (remainder %\
    \ 10) + \"\"\n            remainder /= 10\n            x -= 1\n        }\n   \
    \     if (shift > result.length) result.reverse\n        else result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4corf6lg.scala:10:10 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^\e[0m\n\e[31m   |\e[0m        value /= is not a member of Long - did\
    \ you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4corf6lg.scala:14:14\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            x -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var remainder = x % 10\n\
    \        var digit = x % 100\n        var shiftDigit = shift % 10\n        var\
    \ shiftRemainder = shift % 100\n        var shiftDigitRemainder = shiftRemainder\
    \ % 10\n        var shiftDigitRemainderRemainder = shiftRemainder % 100\n    \
    \    var shiftDigitRemainderRemainderRemainder = shiftRemainderRemainder % 10\n\
    \        var shiftDigitRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainder\
    \ % 100\n        var shiftDigitRemainderRemainderRemainderRemainderRemainder =\
    \ shiftRemainderRemainderRemainderRemainder % 10\n        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainder % 100\n        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 10\n\
    \        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 100\n        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 10\n        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 100\n        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 10\n        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 100\n        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % 10\n        var shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ = shiftRemainderRemainderRemainderRemainderRemainderRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotuft8b2.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpotuft8b2.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\e\
    [0m = shiftRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  shiftDigitRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNot"
  stdout: ''
  timestamp: 1660028898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shift\
    \ = shift % digits.length\n        val result = digits.reverse.take(shift) ++\
    \ digits.reverse.drop(shift)\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvygi93bv.scala:9:20 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m  |\e[0m                    ^\e[0m\n\e[31m  |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val newDigits\
    \ = mutable.ArrayBuffer.empty[String]\n        val shiftDigits = digits.dropRight(shift).toString.reverse\n\
    \        val shiftDigitCount = shiftDigits.length\n        val digitCount = digits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n   \
    \     val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n   \
    \     val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n   \
    \     val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n   \
    \     val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n   \
    \     val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n   \
    \     val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprhgvtp99.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprhgvtp99.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprhgvtp99.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprhgvtp99.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprhgvtp99.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^"
  stdout: ''
  timestamp: 1660028901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length).reverse\n        digits.substring(0,\
    \ shift) + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa03wmlps.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m  |\e[0m   \
    \                                        ^^^^^\e[0m\n\e[31m  |\e[0m          \
    \                                 Found:    (shift : Long)\n\e[31m  |\e[0m   \
    \                                        Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa03wmlps.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse\n        var result\
    \ = \"\"\n        while(digits.length >= shift) {\n            digits = digits.dropRight(shift).reverse\n\
    \            result += digits\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa28vxh0r.scala:11:38\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            digits = digits.dropRight(shift).reverse\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                      Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdumy7ueo.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m  |\e[0m   \
    \                                             ^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                                           Found:    (shift : Long)\n\e[31m \
    \ |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdumy7ueo.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[Int] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        digits + shiftDigits\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa02ts2sp.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigits + shiftDigit.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspt9ekbe.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpspt9ekbe.scala:10:42 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var remainder = x % 10\n\
    \        x /= 10\n        while (x > 0) {\n            result += (remainder %\
    \ 10 + shift) % 10\n            remainder /= 10\n            shift -= 1\n    \
    \    }\n        if (shift > 0) result reverse else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp70l6xzhu.scala:16:38 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (shift > \e[31m0\e[0m) result reverse\
    \ \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m                              \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                      expression\
    \ expected but \e[31melse\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp70l6xzhu.scala:10:10 ------------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^\e\
    [0m\n\e[31m   |\e[0m        value /= is not a member of Long - did you mean x.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp70l6xzhu.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            shift -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean shift.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ap4o7sy.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0ap4o7sy.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigit + shiftDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprbh_bdvc.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprbh_bdvc.scala:10:42 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var shiftDigits = shift\n\
    \        while (shiftDigits > 0) {\n            result += (x % 10).toChar\n  \
    \          x /= 10\n            shiftDigits -= 1\n        }\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwfx4334b.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ap4o7sy.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0ap4o7sy.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result : String = \"\"\n        var i = x\n\
    \        while(i >= 0) {\n            result += (i % 10 + shift)\n           \
    \ i /= 10\n        }\n        return result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6uuc3mdo.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).toList\n\e[31m\e[31m  |\e[0m         \
    \                                       ^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                                     Found:    (shift : Long)\n\e[31m  |\e[0m\
    \                                                Required: Int\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        digits.drop(shift).mkString(\"\
    \") + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdzte6bxr.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdzte6bxr.scala:10:20 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.drop(shift).mkString(\e[31m\"\"\e[0m)\
    \ + shiftDigits\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Found:    (shift : Long)\n\e[31m   |\e[0m       \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.map(_.mkString).reverse.mkString\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsr3m79gq.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpsr3m79gq.scala:9:44 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.map(_.mkString).reverse.mkString\n\
    \e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        val shiftDigits = digits.dropRight(shift)\n   \
    \     val shiftDigit = digits.dropRight(shift)\n        val shiftDigits = digits.dropRight(shift\
    \ + 1)\n        val shiftDigit = digits.dropRight(shift + 1)\n        val shiftDigits\
    \ = digits.dropRight(shift + 2)\n        val shiftDigit = digits.dropRight(shift\
    \ + 2)\n        val shiftDigits = digits.dropRight(shift + 3)\n        val shiftDigit\
    \ = digits.dropRight(shift + 3)\n        val shiftDigits = digits.dropRight(shift\
    \ + 4)\n        val shiftDigit = digits.dropRight(shift + 4)\n        val shiftDigits\
    \ = digits.dropRight(shift + 5)\n        val shiftDigit = digits.dropRight(shift\
    \ + 5)\n        val shiftDigits = digits.dropRight(shift + 6)\n        val shiftDigit\
    \ = digits.dropRight(shift + 6)\n        val shiftDigits = digits.dropRight(shift\
    \ + 7)\n        val shiftDigit = digits.dropRight(shift + 7)\n        val shiftDigits\
    \ = digits.dropRight(shift + 8)\n        val shiftDigit = digits.dropRight(shift\
    \ + 8)\n        val shiftDigits = digits.dropRight(shift + 9)\n        val shiftDigit\
    \ = digits.dropRight(shift + 9)\n        val shiftDigits = digits.dropRight(shift\
    \ + 10)\n        val shiftDigit = digits.dropRight(shift + 10)\n        val shiftDigits\
    \ = digits.dropRight(shift + 11)\n        val shiftDigit = digits.dropRight(shift\
    \ + 11)\n        val shiftDigits = digits.dropRight(shift + 12)\n        val shiftDigit\
    \ = digits.dropRight(shift + 12)\n        val shiftDigits = digits.dropRight(shift\
    \ + 13)\n        val shiftDigit = digits.dropRight(shift + 13)\n        val shiftDigits\
    \ = digits.dropRight(shift + 14)\n        val shiftDigit = digits.dropRight(shift\
    \ + 14)\n        val shiftDigits = digits.dropRight(shift + 15)\n        val shiftDigit\
    \ = digits.dropRight(shift + 15)\n        val shiftDigits = digits.dropRight(shift\
    \ + 16)\n        val shiftDigit = digits.dropRight(shift + 16)\n        val shiftDigits\
    \ = digits.dropRight(shift + 17)\n        val shiftDigit = digits.dropRight(shift\
    \ + 17)\n        val shiftDigits = digits.dropRight(shift + 18)\n        val shiftDigit\
    \ = digits.dropRight(shift + 18)\n        val shiftDigit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpccpap0vn.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpccpap0vn.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mshiftDigits\e[0m = digits.dropRight(shift + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpccpap0vn.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.dropRight(shift\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigit is already defined as \e[33mvalue\e[0m \e[35mshiftDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpccpap0vn.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.dropRight(shift\
    \ + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpccpap0vn.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.dropRight(shift\
    \ + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigit is already defined as \e[33mvalue\e[0m \e[35mshiftDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplev"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == 0)\n            result\n        else\n            result\
    \ + reversed\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3bq8f508.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3bq8f508.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > digits.length) \"\" else digits(shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8gz0rg7j.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8gz0rg7j.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ap4o7sy.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0ap4o7sy.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigitString = shiftDigits.mkString(\"\
    \")\n        digits.drop(shift).mkString(\"\") + shiftDigitString\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpacw05b5q.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpacw05b5q.scala:11:20 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        digits.drop(shift).mkString(\e[31m\"\"\e[0m) + shiftDigitString\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxpjm8n_d.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxpjm8n_d.scala:10:24 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + digits.reverse.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == 0) {\n            result\n        } else {\n       \
    \     result + reversed\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_d0gp1lt.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_d0gp1lt.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikl459or.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpikl459or.scala:10:15 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse\n        val shift\
    \ = shift % digits.length\n        val result = digits.reverse.take(digits.length\
    \ - shift)\n        result += digits.reverse.drop(digits.length - shift)\n   \
    \     result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpytqwk6x1.scala:9:20 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m  |\e[0m                    ^\e[0m\n\e[31m  |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpytqwk6x1.scala:11:15 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        result += digits.reverse.drop(digits.length -\
    \ shift)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value += is not a member of String - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028911
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var shiftDigits = shift\
    \ % 10\n        var shiftRemainder = shift / 10\n        var digits = x % 10\n\
    \        var digitsRemainder = x / 10\n        while (digits != 0) {\n       \
    \     result += (digits % 10) + shiftDigits\n            shiftDigits += shiftRemainder\n\
    \            digits /= 10\n            shiftRemainder /= 10\n        }\n     \
    \   if (shiftRemainder != 0) {\n            result += (digits % 10) + shiftDigits\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6vq7iw9.scala:25)\n\tat Problem.main(tmpk6vq7iw9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ap4o7sy.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0ap4o7sy.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > x.length)\
    \ \"\" else x.toString.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pm8mh35.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6pm8mh35.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var remainder = x % 10\n\
    \        var shiftRemainder = shift % 10\n        var shiftRemainderIndex = shift\
    \ / 10\n        var shiftRemainderDigit = remainder / 10\n        var shiftRemainderRemainder\
    \ = remainder % 10\n        var shiftRemainderRemainderIndex = shiftRemainder\
    \ / 10\n        var shiftRemainderRemainderDigit = shiftRemainderRemainder / 10\n\
    \        var shiftRemainderRemainderRemainder = shiftRemainderRemainder % 10\n\
    \        var shiftRemainderRemainderRemainderIndex = shiftRemainderRemainderIndex\
    \ / 10\n        var shiftRemainderRemainderRemainderDigit = shiftRemainderRemainderRemainder\
    \ / 10\n        var shiftRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainder\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderIndex = shiftRemainderRemainderRemainderIndex\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderDigit = shiftRemainderRemainderRemainderRemainder\
    \ / 10\n        var shiftRemainderRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainderRemainder\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderIndex = shiftRemainderRemainderRemainderIndex\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderDigit = shiftRemainderRemainderRemainderRemainder\
    \ / 10\n        var shiftRemainderRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainderRemainder\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderIndex = shiftRemainderRemainderRemainderIndex\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderDigit = shiftRemainderRemainderRemainderRemainder\
    \ / 10\n        var shiftRemainderRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainderRemainder\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderIndex = shiftRemainderRemainderRemainderIndex\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderDigit = shiftRemainderRemainderRemainderRemainder\
    \ / 10\n        var shiftRemainderRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainderRemainder\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderIndex = shiftRemainderRemainderRemainderIndex\
    \ % 10\n        var shiftRemainderRemainderRemainderRemainderDigit = shiftRemainderRemainderRemainderRemainder\
    \ / 10\n        var shiftRemainderRemainderRemainderRemainderRemainder = shiftRemainderRemainderRemainderRemainder\
    \ % 10\n        var shiftRemainderRemainderRemainderRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_5fq3ddr.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_5fq3ddr.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mshiftRemainderRemainderRemainderRemainderIndex\e[0m = shiftRemainderRemainderRemainderIndex\
    \ % \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftRemainderRemainderRemainderRemainderIndex is already\
    \ defined as \e[33mvariable\e[0m \e[35mshiftRemainderRemainderRemainderRemainderIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_5fq3ddr.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36mshiftRemainderRemainderRemainderRemainderDigit\e\
    [0m = shiftRemainderRemainderRemainderRemainder / \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftRemainderRemainderRemainderRemainderDigit is already\
    \ defined as \e[33mvariable\e[0m \e[35mshiftRemainderRemainderRemainderRemainderDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_5fq3ddr.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mvar\e[0m \e[36mshiftRemainderRemainderRemainderRemainderRemainder\e\
    [0m = shiftRemainderRemainderRemainderRemainder % \e[31m10\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftRemainderRemainderRemainderRemainderRemainder is already\
    \ defined as \e[33mvariable\e[0m \e[35mshiftRemainderRemainderRemainderRemainderRemainder\e\
    [0m\n\e[31m   |\e[0m\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikl459or.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpikl459or.scala:10:15 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pspd7v1.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmp2pspd7v1.scala:10:45 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.size % shift\
    \ > shift - 1 ? digits.reverse.mkString(\"\") : \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkkybp229.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkkybp229.scala:10:50 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (digits.size % shift > shift - \e[31m1\e\
    [0m ? digits.reverse.mkString(\e[31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^\e[0m\n\e[31m   |\e\
    [0m                                          value ? is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkkybp229.scala:10:59 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (digits.size % shift > shift - \e[31m1\e\
    [0m ? digits.reverse.mkString(\e[31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean digits.reversed?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        var shiftDigits = digits\n        var shiftDigit\
    \ = digits\n        var shiftDigitCount = shift\n        while (shiftDigitCount\
    \ > 0) {\n            shiftDigitCount -= 1\n            shiftDigit = digits.substring(shiftDigitCount)\n\
    \            result.append(shiftDigit)\n        }\n        result.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppmuwkd7i.scala:15:42\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            shiftDigit = digits.substring(shiftDigitCount)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      Found:    (shiftDigitCount\
    \ : Long)\n\e[31m   |\e[0m                                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).reverse\n        val result = digits + shiftDigits\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfl8y_yh2.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).reverse\n\e[31m\e[31m  |\e[0m                  \
    \                         ^^^^^\e[0m\n\e[31m  |\e[0m                         \
    \                  Found:    (shift : Long)\n\e[31m  |\e[0m                  \
    \                         Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var carry = 0\n     \
    \   var digit = 0\n        while (shift > 0) {\n            digit = x % 10\n \
    \           x /= 10\n            result += digit.toString\n            carry =\
    \ digit + carry\n            shift -= 1\n        }\n        if (carry > 0) {\n\
    \            result += \"0\"\n        }\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9xch2mmy.scala:12:20\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            digit = x % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9xch2mmy.scala:13:14\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            x /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp9xch2mmy.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            shift -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ shift.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shift\
    \ = shift % digits.length\n        val result = digits.reverse.take(digits.length\
    \ - shift) ++ digits.reverse.drop(digits.length - shift)\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_ajd7ufc.scala:9:20 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m  |\e[0m                    ^\e[0m\n\e[31m  |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigits + shiftDigit.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpspt9ekbe.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpspt9ekbe.scala:10:42 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        digits.drop(shift).take(shift).mkString(\"\
    \") + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6aoefpnz.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6aoefpnz.scala:10:20 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.drop(shift).take(shift).mkString(\e[31m\"\
    \"\e[0m) + shiftDigits\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6aoefpnz.scala:10:32 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        digits.drop(shift).take(shift).mkString(\e[31m\"\"\e[0m) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Found:    (shift : Long)\n\e[31m   |\e[0m \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        val shiftDigits = digits.substring(shift, digits.length)\n\
    \        for (i <- 0 until shiftDigits.length) result.append(digits(i))\n    \
    \    result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp52g3mk4g.scala:10:43\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var carry = 0\n     \
    \   var digit = 0\n        while (shift > 0) {\n            digit = x % 10\n \
    \           x /= 10\n            result += digit.toString\n            carry =\
    \ digit + carry\n            shift -= 1\n        }\n        if (carry > 0) {\n\
    \            result += \"1\"\n        }\n        result.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi402ua5h.scala:12:20\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            digit = x % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                 Found:    Long\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi402ua5h.scala:13:14\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m            x /= \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ /= is not a member of Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpi402ua5h.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            shift -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ shift.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var shiftDigits = shift\n\
    \        var digits = x\n        while (digits > 0) {\n            result += (digits\
    \ % 10).toChar\n            digits /= 10\n            shiftDigits -= 1\n     \
    \   }\n        if (shiftDigits > 0) {\n            result += (digits % 10).toChar\n\
    \            digits /= 10\n            while (shiftDigits > 0) {\n           \
    \     result += (digits % 10).toChar\n                digits /= 10\n         \
    \       shiftDigits -= 1\n            }\n        }\n        result.reverse\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp24bxa_ev.scala:28)\n\tat Problem.main(tmp24bxa_ev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift.toInt) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8q39i4ri.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmp8q39i4ri.scala:10:45 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift.toInt) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val result = shiftDigits.reverse.mkString(\"\
    \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4k2zfzp.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shift\
    \ = shift % digits.length\n        val result = new StringBuilder\n        var\
    \ i = 0\n        while (i < digits.length && i < shift) {\n            result.append(digits(i))\n\
    \            i += 1\n        }\n        while (i < digits.length) {\n        \
    \    result.append(digits(i))\n            i += 1\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuzxrk2mo.scala:9:20 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m  |\e[0m                    ^\e[0m\n\e[31m  |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028920
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var remainder = x % 10\n\
    \        var shiftRemainder = shift\n        var shiftRemainderDigit = 0\n   \
    \     while (shiftRemainder > 0) {\n            shiftRemainderDigit += 1\n   \
    \         shiftRemainder = shiftRemainder / 10\n        }\n        result += (x\
    \ % 10).toChar\n        while (shiftRemainder > 0) {\n            shiftRemainderDigit\
    \ -= 1\n            shiftRemainder = shiftRemainder / 10\n        }\n        result\
    \ += (x % 10).toChar\n        result += (x % 10).toChar\n        result += (x\
    \ % 10).toChar\n        result += (x % 10).toChar\n        result += (x % 10).toChar\n\
    \        result += (x % 10).toChar\n        result += (x % 10).toChar\n      \
    \  result += (x % 10).toChar\n        result += (x % 10).toChar\n        result\
    \ += (x % 10).toChar\n        result += (x % 10).toChar\n        result += (x\
    \ % 10).toChar\n        result += (x % 10).toChar\n        result += (x % 10).toChar\n\
    \        result += (x % 10).toChar\n        result += (x % 10).toChar\n      \
    \  result += (x % 10).toChar\n        result += (x % 10).toChar\n        result\
    \ += (x % 10).toChar\n        result += (x % 10).toChar\n        result += (x\
    \ % 10).toChar\n        result += (x % 10).toChar\n        result += (x % 10).toChar\n\
    \        result += (x % 10).toChar\n        result += (x % 10).toChar\n      \
    \  result += (x % 10).toChar\n        result += (x % 10).toChar\n        result\
    \ += (x % 10).toChar\n        result += (x % 10).toChar\n        result += (x\
    \ % 10).toChar\n        result += (x % 10).toChar\n        result += (x % 10).toChar\n\
    \        result += (x % 10).toChar\n        result += (x % 10).toChar\n      \
    \  result += (x % 10).toChar\n        result += (x % 10).toChar\n        result\
    \ += (x % 10).toChar\n        result += (x % 10).toChar\n        result += (x\
    \ % 10).toChar\n        result += (x % 10).toChar\n        result += (x % 10).toChar\n\
    \        result += (x % 10).toChar\n        result += (x % 10).toChar\n      \
    \  result += (x % 10).toChar\n        result += (x % 10).toChar\n        result\
    \ += (x % 10).toChar\n        result += (x % 10).toChar\n        result += (x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpru4b2wrq.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpru4b2wrq.scala:68:8 ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m\
    \        result += (x \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.lastOption.getOrElse(\"\
    \")).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyy9iwicr.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpyy9iwicr.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m)).reverse\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue lastOption is not a member of Iterator[String] - did\
    \ you mean digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigit + shiftDigits\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprbh_bdvc.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprbh_bdvc.scala:10:42 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028911
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikl459or.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpikl459or.scala:10:15 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        var i = 0\n        while (i < digits.length &&\
    \ i < shift) {\n            result.append(digits.charAt(i))\n            i +=\
    \ 1\n        }\n        if (i < digits.length) {\n            result.append(digits.charAt(i))\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuycncjyl.scala:22)\n\tat Problem.main(tmpuycncjyl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3x7adgpo.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3x7adgpo.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pspd7v1.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmp2pspd7v1.scala:10:45 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > x.length)\
    \ \"\" else x.toString.reverse.grouped(shift).mkString(\"\"))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeewksp04.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeewksp04.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeewksp04.scala:10:75 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9cggnkx.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9cggnkx.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m  |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a member of Iterator[String]\
    \ - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + digits.reverse.drop(shift).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplvyntt3o.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplvyntt3o.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shift\
    \ = shift % digits.length\n        val result = digits.substring(shift, digits.length)\n\
    \        result + digits.substring(0, shift)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6bio610k.scala:9:20 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m  |\e[0m                    ^\e[0m\n\e[31m  |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028921
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (digits.size % shift\
    \ != 0 ? \"0\" : \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwse5lkc5.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwse5lkc5.scala:10:43 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? \e[31m\"0\"\e[0m : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                value ? is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result : String = \"\"\n        var remainder\
    \ : Long = x % 10\n        var shift : Long = shift % 10\n        var shift :\
    \ Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ : Long = shift % 10\n        var shift : Long = shift % 10\n        var shift\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp89qyiylm.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89qyiylm.scala:11:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mshift\e[0m : \e[35mLong\e[0m = shift % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshift is already\
    \ defined as \e[33mvariable\e[0m \e[35mshift\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89qyiylm.scala:12:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mshift\e[0m : \e[35mLong\e[0m = shift % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshift is already\
    \ defined as \e[33mvariable\e[0m \e[35mshift\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89qyiylm.scala:13:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mshift\e[0m : \e[35mLong\e[0m = shift % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshift is already\
    \ defined as \e[33mvariable\e[0m \e[35mshift\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89qyiylm.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mshift\e[0m : \e[35mLong\e[0m = shift % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshift is already\
    \ defined as \e[33mvariable\e[0m \e[35mshift\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp89qyiylm.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m1"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse\n        var result\
    \ = \"\"\n        while(digits != \"\") {\n            val digit = digits.charAt(0)\n\
    \            digits = digits.substring(1)\n            result += digit\n     \
    \   }\n        val shift = shift % digits.length\n        val shiftDigits = digits.substring(shift)\n\
    \        result += shiftDigits\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcdayxgme.scala:15:20 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigitString = shiftDigits.mkString(\"\
    \")\n        val shiftDigitStringReversed = shiftDigitString.reverse\n       \
    \ val result = shiftDigitStringReversed + digits.takeRight(shift)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa6pzj_k8.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpa6pzj_k8.scala:12:65 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = shiftDigitStringReversed +\
    \ digits.takeRight(shift)\n\e[31m\e[31m   |\e[0m                             \
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikl459or.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpikl459or.scala:10:15 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse\n        var shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        var result = \"\"\n    \
    \    while(shiftDigits.length > 0) {\n            result += shiftDigits.take(shift).toString.reverse\n\
    \            shiftDigits = shiftDigits.drop(shift).toString.reverse\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw8mvwu2s.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpw8mvwu2s.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result += shiftDigits.take(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpw8mvwu2s.scala:12:39 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m            result += shiftDigits.take(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (shift : Long)\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw8mvwu2s.scala:13:43 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            shiftDigits = shiftDigits.drop(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                           Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                           Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660028933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        digits.drop(shift).take(shift).mkString(\"\
    \") + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6aoefpnz.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6aoefpnz.scala:10:20 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.drop(shift).take(shift).mkString(\e[31m\"\
    \"\e[0m) + shiftDigits\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6aoefpnz.scala:10:32 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        digits.drop(shift).take(shift).mkString(\e[31m\"\"\e[0m) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Found:    (shift : Long)\n\e[31m   |\e[0m \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > digits.length) digits else digits.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa477fdwe.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpa477fdwe.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdumy7ueo.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m  |\e[0m   \
    \                                             ^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                                           Found:    (shift : Long)\n\e[31m \
    \ |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdumy7ueo.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[Int] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        val shiftDigit = digits.charAt(shift)\n\
    \        val result = digits + shiftDigit + shiftDigits\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3arf1pls.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp3arf1pls.scala:10:39 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.charAt(shift)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (shift : Long)\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + digits.reverse.drop(shift).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplvyntt3o.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplvyntt3o.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.drop(shift).reverse\n\
    \        val result = shiftDigit + shiftDigits\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbjqmugyo.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbjqmugyo.scala:10:37 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.drop(shift).reverse\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                     Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).toList\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkhabqi8w.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).toList\n\e[31m\e[31m  |\e[0m         \
    \                                       ^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                                     Found:    (shift : Long)\n\e[31m  |\e[0m\
    \                                                Required: Int\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        var carry = 0\n        var i = digits.length -\
    \ shift\n        while (i >= 0) {\n            val digit = digits.charAt(i)\n\
    \            val newDigit = digit + carry\n            if (newDigit > '9') {\n\
    \                newDigit - '9' + '0'\n            } else {\n                newDigit\
    \ + '0'\n            }\n            result.append(newDigit)\n            carry\
    \ = newDigit / 10\n            i -= 1\n        }\n        result.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppul83oph.scala:13:38\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mval\e[0m \e\
    [36mdigit\e[0m = digits.charAt(i)\n\e[31m\e[31m   |\e[0m                     \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \  Found:    (i : Long)\n\e[31m   |\e[0m                                     \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var digits = x.toString.reverse\n\
    \        var shiftDigits = digits.substring(shift, digits.length)\n        var\
    \ shiftDigits = shiftDigits.reverse\n        for(i <- 0 until shiftDigits.length){\n\
    \            result += shiftDigits(i)\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx7kqgcph.scala:11:12 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigits\e[0m = shiftDigits.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mshiftDigits is already defined as \e[33mvariable\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpx7kqgcph.scala:10:43 --------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigits\e[0m = digits.substring(shift,\
    \ digits.length)\n\e[31m\e[31m   |\e[0m                                      \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                           Found:\
    \    (shift : Long)\n\e[31m   |\e[0m                                         \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5gg_qtyp.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5gg_qtyp.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m  |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a member of Iterator[String]\
    \ - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028901
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        digits.drop(shift).take(shift).mkString(\"\
    \") + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6aoefpnz.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6aoefpnz.scala:10:20 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.drop(shift).take(shift).mkString(\e[31m\"\
    \"\e[0m) + shiftDigits\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6aoefpnz.scala:10:32 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        digits.drop(shift).take(shift).mkString(\e[31m\"\"\e[0m) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Found:    (shift : Long)\n\e[31m   |\e[0m \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        var carry = 0\n        for (i <- 0 until digits.length\
    \ - 1) {\n            val digit = digits(i).toLong\n            val newDigit =\
    \ digit + carry + shift\n            carry = newDigit / 10\n            newDigit\
    \ % 10\n            result.append(newDigit)\n        }\n        if (shift > digits.length)\
    \ result.reverse\n        else result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79p0k4s1.scala:14:20\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            carry = newDigit\
    \ / \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Found:    Long\n\e[31m   |\e[0m           \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79p0k4s1.scala:18:42\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mif\e[0m (shift\
    \ > digits.length) result.reverse\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \         Found:    StringBuilder\n\e[31m   |\e[0m                           \
    \        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = mutable.ArrayBuffer.empty[String]\n        while(digits.nonEmpty)\
    \ {\n            val digit = digits.head\n            digits -= digit\n      \
    \      result += digit.toString\n        }\n        result.reverse\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppxz2v7cb.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mvar\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m  |\e[0m   \
    \                                             ^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                                           Found:    (shift : Long)\n\e[31m \
    \ |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppxz2v7cb.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                     Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppxz2v7cb.scala:11:31 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mval\e[0m \e[36mdigit\e[0m = digits.head\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ head is not a member of Iterator[Int] - did you mean Iterator[Int].find?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppxz2v7cb.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            digits -= digit\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue -= is not a member of Iterator[Int]\
    \ - did you mean Iterator[Int].!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reverse = digits.reverse.mkString(\"\
    \")\n        if (shift > digits.length) result + reverse\n        else result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc82knu3m.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc82knu3m.scala:10:29 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mreverse\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigits + shiftDigit\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpca40qfkj.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpca40qfkj.scala:10:42 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        digits.drop(shift).mkString\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp97gsyy3p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp97gsyy3p.scala:10:20 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.drop(shift).mkString + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > x.length)\
    \ \"\" else x.toString.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pm8mh35.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6pm8mh35.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ap4o7sy.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0ap4o7sy.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var shiftDigit = shift\
    \ % 10\n        var shiftDigitCount = shift / 10\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n        var digitCount = x.toString.length\n\
    \        var digit = x.toString.charAt(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn8811qaw.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mdigitCount\e[0m = x.toString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdigitCount is already defined as \e[33mvariable\e[0m \e[35mdigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn8811qaw.scala:14:12 ---------------------------\e[0m\e[0m\n\e\
    [31m14 |\e[0m        \e[33mvar\e[0m \e[36mdigit\e[0m = x.toString.charAt(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdigit is already defined as \e[33mvariable\e[0m \e[35mdigit\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn8811qaw.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdigitCount\e[0m = x.toString.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigitCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mdigitCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn8811qaw.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdigit\e[0m = x.toString.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigit is already\
    \ defined as \e[33mvariable\e[0m \e[35mdigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn8811qaw.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdigitCount\e[0m = x.toString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitCount is already defined as \e[33mvariable\e"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = digits.foldLeft(\"\")( (acc, digit) => acc + digit.toString)\n\
    \        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9ub7qyk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m  |\e[0m   \
    \                                             ^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                                           Found:    (shift : Long)\n\e[31m \
    \ |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > x.length) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3c2ma6v2.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m  |\e[0m   \
    \                                             ^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                                           Found:    (shift : Long)\n\e[31m \
    \ |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3c2ma6v2.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[Int] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        digits.drop(shift).reverse.mkString(\"\
    \") + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplmxu7bem.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplmxu7bem.scala:10:20 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.drop(shift).reverse.mkString(\e[31m\"\"\
    \e[0m) + shiftDigits\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > x.length)\
    \ \"\" else x.toString.reverse.grouped(shift).mkString(\"\"))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeewksp04.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeewksp04.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeewksp04.scala:10:75 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > x.length)\
    \ \"\" else x.toString.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pm8mh35.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6pm8mh35.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        val shift = shift % digits.length\n        for\
    \ (i <- 0 until digits.length - shift)\n            result.append(digits(i))\n\
    \        result.append(digits(digits.length - shift))\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpe8dwwbrx.scala:10:20 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var shiftDigits = \"\"\
    \n        var shiftDigit = \"\"\n        var shiftDigitCount = 1\n        var\
    \ digitCount = 1\n        var digit = x % 10\n        while (digit > 0) {\n  \
    \          shiftDigit = digit.toString\n            shiftDigitCount = shiftDigit.length\n\
    \            shiftDigits += shiftDigit\n            shiftDigitCount -= 1\n   \
    \         digitCount += 1\n            digit /= 10\n        }\n        shiftDigits\
    \ = shiftDigits.reverse\n        shiftDigitCount = shiftDigitCount - 1\n     \
    \   shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n        shiftDigitCount\
    \ = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigits.length\n        shiftDigits = shiftDigits.substring(0,shiftDigitCount)\n\
    \        shiftDigitCount = shiftDigit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsujh639c.scala:61:26\
    \ --------------------\e[0m\e[0m\n\e[31m61 |\e[0m        shiftDigitCount = shiftDigit\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Found:    (shiftDigit : String)\n\e[31m   |\e[0m  \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == digits.length) result else reversed\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2oern3zc.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2oern3zc.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > x.length)\
    \ \"\" else x.toString.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pm8mh35.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6pm8mh35.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigit = digits.dropRight(shift).reverse\n\
    \        digits = shiftDigits + shiftDigit\n        digits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdgjf39bz.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdgjf39bz.scala:10:42 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.dropRight(shift).reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        digits.drop(shift).reverse\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzblcw3rr.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m  |\e[0m         \
    \                                  ^^^^^\e[0m\n\e[31m  |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m  |\e[0m         \
    \                                  Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpzblcw3rr.scala:10:20 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.drop(shift).reverse + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikl459or.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpikl459or.scala:10:15 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        if (shift > digits.length)\
    \ result.reverse\n        else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxezmf4v4.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse.grouped(shift)\n\
    \        val result = mutable.StringBuilder()\n        for (i <- 0 until digits.size)\
    \ {\n            val digit = digits(i)\n            val digitString = digit.mkString(\"\
    \")\n            val newDigit = digitString.reverse\n            result.append(newDigit)\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lcaw_mr.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mvar\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0lcaw_mr.scala:9:21 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m  |\e[0m                     ^^^^^^^\e[0m\n\e[31m  |\e[0m        \
    \             Not found: mutable\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp0lcaw_mr.scala:11:24 -----------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m            \e[33mval\e[0m \e[36mdigit\e[0m = digits(i)\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \         \e[33mvariable\e[0m \e[35mdigits\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwsexij8.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).toList\n\e[31m\e[31m  |\e[0m         \
    \                                       ^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                                     Found:    (shift : Long)\n\e[31m  |\e[0m\
    \                                                Required: Int\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > digits.length) \"\" else digits(shift))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8gz0rg7j.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8gz0rg7j.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > x.length) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpen2tsu1g.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpen2tsu1g.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        val shiftDigit = digits.charAt(shift)\n\
    \        val result = shiftDigit + shiftDigits\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ktwj4i8.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9ktwj4i8.scala:10:39 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.charAt(shift)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (shift : Long)\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpikl459or.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpikl459or.scala:10:15 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse\n        var shiftDigits\
    \ = digits.dropRight(shift)\n        shiftDigits = shiftDigits.reverse\n     \
    \   digits ++= shiftDigits\n        digits.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps7so1isl.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shift\
    \ = shift % digits.length\n        val result = digits.reverse.take(shift).reverse.mkString(\"\
    \")\n        result + digits.reverse.take(digits.length - shift).reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3kta3gy7.scala:9:20 ----------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m  |\e[0m                    ^\e[0m\n\e[31m  |\e[0m               \
    \     Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pspd7v1.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmp2pspd7v1.scala:10:45 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028912
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift > digits.length) result else reversed\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplnnvrfxn.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplnnvrfxn.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var digits = x.toString.reverse\n        var shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits = digits.substring(0,\
    \ shift)\n        digits + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb6hx1hzb.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb6hx1hzb.scala:10:37 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits = digits.substring(\e[31m0\e[0m, shift)\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                     Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                                     Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == x.length) result else reversed\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg80jfgnw.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg80jfgnw.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg80jfgnw.scala:11:23\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mif\e[0m (shift\
    \ == x.length) result \e[33melse\e[0m reversed\n\e[31m\e[31m   |\e[0m        \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value length\
    \ is not a member of Long\n3 errors found\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val newDigits\
    \ = mutable.ArrayBuffer.empty[String]\n        var shiftDigits = mutable.ArrayBuffer.empty[String]\n\
    \        var carry = 0\n        var i = 0\n        while (i < digits.length) {\n\
    \            val digit = digits(i)\n            val shiftDigit = digits(i + shift)\n\
    \            val newDigit = digit + shiftDigit + carry\n            carry = (newDigit\
    \ / 10).toInt\n            newDigits.append(newDigit % 10)\n            shiftDigits.append(shiftDigit)\n\
    \            i += 1\n        }\n        if (shift > digits.length) newDigits.append(digits)\n\
    \        else newDigits.append(shiftDigits).reverse\n        newDigits.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ytyaldp.scala:9:24 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mnewDigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m  |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m  |\e[0m                        Not found: mutable\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2ytyaldp.scala:10:26 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mshiftDigits\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ytyaldp.scala:15:36 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits(i\
    \ + shift)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    Long\n\e[31m\
    \   |\e[0m                                    Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.dropRight(shift)\n        val shiftDigitString = shiftDigits.mkString(\"\
    \")\n        digits.drop(shift).mkString(\"\") + shiftDigitString\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpacw05b5q.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m  |\e[0m                          \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                                 \
    \          Found:    (shift : Long)\n\e[31m  |\e[0m                          \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpacw05b5q.scala:11:20 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        digits.drop(shift).mkString(\e[31m\"\"\e[0m) + shiftDigitString\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var shiftDigits = shift\n\
    \        var shiftRemainder = shift\n        while (shiftRemainder > 0) {\n  \
    \          result += (x % 10).toChar\n            x /= 10\n            shiftDigits\
    \ -= 1\n            shiftRemainder -= 1\n        }\n        if (shiftDigits ==\
    \ 0) {\n            result += (x % 10).toChar\n        }\n        return result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn00e4e_k.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9c003278.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9c003278.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        val result = digits.substring(0,\
    \ shift) + shiftDigits\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpar1fs34q.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpar1fs34q.scala:10:41 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.substring(\e\
    [31m0\e[0m, shift) + shiftDigits\n\e[31m\e[31m   |\e[0m                      \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \           Found:    (shift : Long)\n\e[31m   |\e[0m                        \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == digits.length) result else reversed\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2oern3zc.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2oern3zc.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028938
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.map(_.toString).mkString(\"\")\n        result +\
    \ (if (shift > x.length) \"\" else x.toString.reverse.grouped(shift).map(_.toString).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg07vuyb_.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg07vuyb_.scala:10:32 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).map(_.toString).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value length is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg07vuyb_.scala:10:75\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        result + (\e[33mif\e\
    [0m (shift > x.length) \e[31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).map(_.toString).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val shiftDigits\
    \ = digits.substring(shift, digits.length)\n        digits.substring(0, shift)\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:9:43\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m  |\e[0m           \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                         Found:    (shift : Long)\n\e[31m  |\e[0m           \
    \                                Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpb4vnox0p.scala:10:28 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).toList\n\
    \        val result = digits.reverse.mkString(\"\")\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphwsexij8.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).toList\n\e[31m\e[31m  |\e[0m         \
    \                                       ^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                                     Found:    (shift : Long)\n\e[31m  |\e[0m\
    \                                                Required: Int\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660028939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var remainder = x % 10\n\
    \        var shiftRemainder = shift\n        while(shiftRemainder > 0) {\n   \
    \         result += (x % 10) + remainder\n            x /= 10\n            remainder\
    \ = x % 10\n            shiftRemainder -= 1\n        }\n        if(shiftRemainder\
    \ == 0) {\n            result += (x % 10)\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5iboqrmj.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean x.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        var result = \"\"\n        var remainder = x % 10\n\
    \        var digit = x % 10\n        var shiftDigit = shift % 10\n        var\
    \ shiftRemainder = shift % 10\n        while(shift > 0) {\n            result\
    \ += digit\n            shift -= 1\n        }\n        while(shiftRemainder >\
    \ 0) {\n            result += digit\n            shiftRemainder -= 1\n       \
    \ }\n        result += digit\n        result += remainder\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrso4rro.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            shift -= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member\
    \ of Long - did you mean shift.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660028946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9cggnkx.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toString)\n\e[31m\e[31m  |\e[0m\
    \                                                ^^^^^\e[0m\n\e[31m  |\e[0m  \
    \                                              Found:    (shift : Long)\n\e[31m\
    \  |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9cggnkx.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString\n\e[31m\e[31m  |\e[0m\
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a member of Iterator[String]\
    \ - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = \"\"\n        val shiftDigits = digits.dropRight(shift)\n        val shiftDigit\
    \ = digits.takeRight(shift)\n        val shiftDigits = shiftDigit.mkString(\"\"\
    )\n        val shiftDigit = shiftDigits.mkString(\"\")\n        result += shiftDigits\n\
    \        result += shiftDigit\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy00f0vkl.scala:12:12 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = shiftDigit.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigits is already defined as \e[33mvalue\e[0m \e[35mshiftDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy00f0vkl.scala:13:12 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = shiftDigits.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigit is already defined as \e[33mvalue\e[0m \e[35mshiftDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpy00f0vkl.scala:10:43 --------------------\e[0m\e[0m\n\
    \e[31m10 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.dropRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                           Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                           Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy00f0vkl.scala:11:42 --------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy00f0vkl.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result += shiftDigits\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660028947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + (if (shift\
    \ > x.length) \"\" else \"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpen2tsu1g.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpen2tsu1g.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        val reversed = digits.reverse.mkString(\"\
    \")\n        if (shift == x.toString.length) result\n        else reversed\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz7vk1mfg.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpz7vk1mfg.scala:10:30 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift).map(_.toInt)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + digits.reverse.drop(shift).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpktu40gpr.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift).map(_.toInt)\n\e[31m\e[31m  |\e[0m   \
    \                                             ^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                                           Found:    (shift : Long)\n\e[31m \
    \ |\e[0m                                                Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpktu40gpr.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m  |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m  |\e[0mvalue reverse is not a member of Iterator[Int] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpab8h01gk.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpab8h01gk.scala:9:15 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0mvalue reverse is not a\
    \ member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        if (shift > digits.length)\
    \ result.reverse\n        else result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxezmf4v4.scala:8:48\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m  |\e[0m                \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                              Found:    (shift : Long)\n\e[31m  |\e[0m      \
    \                                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    def circularShift(x : Long, shift :\
    \ Long) : String = {\n        val digits = x.toString.reverse\n        val result\
    \ = new StringBuilder\n        val shiftDigits = digits.substring(shift, digits.length)\n\
    \        for (i <- 0 until shiftDigits.length)\n            result.append(digits(i).charAt(shiftDigits(i)))\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptwn1edo0.scala:10:43\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptwn1edo0.scala:12:36 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result.append(digits(i).charAt(shiftDigits(i)))\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value charAt is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028947
