name: HumanEval_98_count_upper
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string s, count the number of uppercase vowels in even indices.\n\
  \    // For example:\n    def countUpper(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpper((\"aBCdEf\"\
  )) == (1l));\n    assert(countUpper((\"abcdefg\")) == (0l));\n    assert(countUpper((\"\
  dBBE\")) == (0l));\n    assert(countUpper((\"B\")) == (0l));\n    assert(countUpper((\"\
  U\")) == (1l));\n    assert(countUpper((\"\")) == (0l));\n    assert(countUpper((\"\
  EEEE\")) == (2l));\n    }\n\n}\n"
completions: ["        var count = 0L\n        for (i <- 0 until s.length if s(i)\
    \ == 'A') {\n            count += 1\n        }\n        count", "        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 1\n      \
    \  for (i <- 0 until s.length if s(i) == 'E') count += 1\n        for (i <- 0\
    \ until s.length if s(i) == 'I') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 1\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 1\n        count", "        val vowels = \"AEIOUaeiou\".toCharArray\n\
    \        val evenIndices = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0\
    \ until s.length)\n            if (vowels(i) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.size", "        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')", "        val vowels = \"aeiouAEIOU\".toList\n   \
    \     val evenIndices = 0 until s.length\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val upperCounts = evenIndices.map(i => vowels.count(_ ==\
    \ s.charAt(i)))\n        evenIndices.foldLeft(0)((acc, i) => acc + upperCounts(i))",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i)\
    \ % 2 == 0)\n                count += 1\n        count", "        var count =\
    \ 0L\n        for (i <- 0 until s.length if i % 2 == 0) {\n            if (s.charAt(i)\
    \ == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' ||\
    \ s.charAt(i) == 'U') {\n                count += 1\n            }\n        }\n\
    \        count", "        var count = 0\n        for (i <- 0 until s.length if\
    \ i % 2 == 0) {\n            if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i)\
    \ == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count\
    \ += 1\n            }\n        }\n        count", "        val vowels = \"AEIOUaeiou\"\
    .toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n             \
    \   evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc, i) => acc +\
    \ s.charAt(i).toUpperCase == s.charAt(i).toLowerCase)", "        val vowels =\
    \ Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        var count = 0\n        for (i\
    \ <- 0 until s.length) count += vowels(s(i).toUpper)\n        count", "      \
    \  var count = 0\n        for (i <- 0 until s.length)\n            if (s(i) ==\
    \ 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n       \
    \     else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n              \
    \  count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) ==\
    \ 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        var count = 0\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(i).isUpper)\n                if (i % 2 ==\
    \ 0)\n                    count += 1\n        count", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (i % 2 == 0)\n          \
    \      evenIndices += i\n        evenIndices.foldLeft(0)((acc, i) => acc + (vowels(s(i))\
    \ - 'a' + 1))", "        var count = 0L\n        for (i <- 0 until s.length if\
    \ s(i) == 'A')\n            count += if (i%2 == 0) 1 else 0\n        count", " \
    \       val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n\
    \        evenIndices.foldLeft(0)((acc, i) => acc + (vowels(s(i)) - \"A\".toChar))",
  "        val vowels = \"aeiouAEIOU\".toList\n        var count = 0L\n        for\
    \ (i <- 0 until s.length if i % 2 == 0) {\n            if (vowels(i).toUpper ==\
    \ s.charAt(i).toUpper) {\n                count += 1\n            }\n        }\n\
    \        count", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i)\
    \ == 'U')\n                count += 1\n        count", "        var count = 0L\n\
    \        for (i <- 0 until s.length if s(i) == 'A') {\n            count += 1\n\
    \        }\n        count", "        var count = 0L\n        for (i <- 0 until\
    \ s.length if s(i) == 'A') count += 1\n        for (i <- 0 until s.length if s(i)\
    \ == 'E') count += 1\n        for (i <- 0 until s.length if s(i) == 'I') count\
    \ += 1\n        for (i <- 0 until s.length if s(i) == 'O') count += 1\n      \
    \  for (i <- 0 until s.length if s(i) == 'U') count += 1\n        count", "  \
    \      var count = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n\
    \            count += 1\n        }\n        count", "        val vowels = \"AEIOUaeiou\"\
    .toCharArray\n        var count = 0L\n        for (i <- 0 until s.length)\n  \
    \          if (vowels(i) % 2 == 0)\n                if (s(i) == s(i).toUpper)\n\
    \                    count += 1\n        count", "        var count = 0L\n   \
    \     for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A'\
    \ && s(i+2) == 'A')\n                count += 1\n        count", "        var\
    \ count = 0\n        for (i <- 0 until s.length if s(i) == 'A')\n            if\
    \ (s(i) == 'A' && s(i+1) == 'A')\n                count += 1\n        count",
  "        var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'A", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + (if (i % 2 == 0) vowels(s.charAt(i))\
    \ else 0))", "        var count = 0L\n        for (i <- 0 until s.length if s(i)\
    \ == 'A')\n            count += if (s(i) == 'A') 1 else 0\n        for (i <- 0\
    \ until s.length if s(i) == 'E')\n            count += if (s(i) == 'E') 1 else\
    \ 0\n        for (i <- 0 until s.length if s(i) == 'I')\n            count +=\
    \ if (s(i) == 'I') 1 else 0\n        for (i <- 0 until s.length if s(i) == 'O')\n\
    \            count += if (s(i) == 'O') 1 else 0\n        for (i <- 0 until s.length\
    \ if s(i) == 'U')\n            count += if (s(i) == 'U') 1 else 0\n        count",
  "        var count = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n\
    \            count += 1\n        }\n        count + (s.length % 2 == 0)", "  \
    \      val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        val evenIndicesWithVowels = evenIndices.map(i => if (vowels(i)) 1 else\
    \ 0)\n        evenIndicesWithVowels.sum", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n    \
    \    for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + (vowels(s(i)) - 'a' + 1))", "        var count = 0L\n        for\
    \ (i <- 0 until s.length if s(i).isUpper) count += 1\n        count", "      \
    \  val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.ListBuffer.empty[Int]\n        for (i <- 0 until s.length)\n     \
    \       if (i % 2 == 0)\n                evenIndices += i\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + (vowels(s(i)) - 'a' + 1))", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2\
    \ == 0)\n                evenIndices += i\n        evenIndices.toList.length",
  "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n       \
    \         if (i % 2 == 0)\n                    count += 1\n        count", " \
    \       val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until\
    \ s.length\n        evenIndices.map(i => if (i % 2 == 0) vowels.count(s.charAt(i))\
    \ else 0).sum", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum",
  "        var count = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n\
    \            count += 1\n        }\n        count", "        val vowels = \"AEIOUaeiou\"\
    .toList\n        val evenIndices = s grouped 2 map (_._2)\n        evenIndices\
    \ filter (vowels contains _) length", "        val vowels = \"AEIOUaeiou\"\n \
    \       val vowelCounts = mutable.HashMap[Char, Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n             \
    \   vowelCounts(s.charAt(i)) = vowelCounts(s.charAt(i) + 1) + 1\n        vowelCounts.filter(_._2\
    \ % 2 == 0).size", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foldLeft(0){ (count, index) =>\n   \
    \         if (index % 2 == 0) count + vowels(index.toInt)\n            else count\n\
    \        }", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(_ / 2).count(vowels.contains)",
  "        val vowels = \"aeiouAEIOU\"\n        val count = mutable.Map[Int, Int]()\n\
    \        for (i <- 0 until s.length) count(vowels.indexOf(s.charAt(i).toUpper))\
    \ += 1\n        count.filter(_._2 % 2 == 0).map(_._1).sum", "        var count\
    \ = 0L\n        var even = 0\n        for (i <- 0 until s.length)\n          \
    \  if (s.charAt(i).toUpper == 'A')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'E')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'I')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'O')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'U')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'a')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'e')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'i')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'o')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'u')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'A')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'E')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'I')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'O')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'U')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'a')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'e')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'i')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'o')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'u')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'A')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'E')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'I')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'O')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'U')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'a')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'e')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'i')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'o')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'u')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'A')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'E')\n                count += 1\n            else\
    \ if (s.charAt(i).toUpper == 'I')\n                count += 1\n            else\
    \ if (s.charAt(i", "        var count = 0\n        for (i <- 0 until s.length\
    \ if s(i) == 'A')\n            count += if (i % 2 == 0) 1 else 0\n        count",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for(i <- 0 until s.length)\n            if(vowels.indexOf(s.charAt(i))\
    \ > -1)\n                evenIndices += i\n        evenIndices.toList.filter(x\
    \ => x % 2 == 0).length", "        var count = 0L\n        for (i <- 0 until s.length\
    \ if s(i) == 'A') count += 2\n        for (i <- 0 until s.length if s(i) == 'E')\
    \ count += 2\n        for (i <- 0 until s.length if s(i) == 'I') count += 2\n\
    \        for (i <- 0 until s.length if s(i) == 'O') count += 2\n        for (i\
    \ <- 0 until s.length if s(i) == 'U') count += 2\n        count", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length) \n            if (i % 2 == 0) evenIndices\
    \ += i\n        evenIndices.toList.map(vowels.contains).sum", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        var count = 0\n        for (i <- 0 until s.length)\n            if (vowels(s(i))\
    \ && s(i) % 2 == 0)\n                count += 1\n        count", "        val\
    \ vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(s.length).count(s => vowels.contains(s.charAt(_)))",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <-\
    \ 0 until s.length) yield {\n            if (i % 2 == 0) i else s.length\n   \
    \     }\n        evenIndices.foldLeft(0)((acc, i) => acc + (vowels.count(vowels.indexOfChar(s.charAt(i))\
    \ > -1)))", "        var count = 0L\n        for (i <- 0 until s.length)\n   \
    \         if (s(i).isUpper)\n                if (s(i).isEven)\n              \
    \      count += 1\n        count", "        var count = 0L\n        for (i <-\
    \ 0 until s.length if s(i) == 'A') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'E') count += 1\n        for (i <- 0 until s.length if s(i) == 'I')\
    \ count += 1\n        for (i <- 0 until s.length if s(i) == 'O') count += 1\n\
    \        for (i <- 0 until s.length if s(i) == 'U') count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n       \
    \         if (i % 2 == 0)\n                    count += 1\n        count", " \
    \       val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        val evenIndices = List(0 until s.length).filter(i\
    \ => i % 2 == 0)\n        evenIndices.foldLeft(0)((acc, i) => acc + (vowels.indexOf(s.charAt(i))\
    \ match {\n            case -1 => 0\n            case _ => 1\n        }))", " \
    \       var count = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count\
    \ += 2\n        for (i <- 0 until s.length if s(i) == 'E') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'I') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'O') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'U') count += 2\n        count", "        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n      \
    \  evenIndices.toList.map(evenIndices => vowels.count(_ == s.charAt(evenIndices))).sum",
  "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum", "       \
    \ val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (i\
    \ % 2 == 0)\n                evenIndices += i\n        evenIndices.count(vowels.contains)",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length) \n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0 && i % 2 == 0) evenIndices += i\n        evenIndices.length", "       \
    \ var count = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count +=\
    \ 1\n        for (i <- 0 until s.length if s(i) == 'E') count += 1\n        for\
    \ (i <- 0 until s.length if s(i) == 'I') count += 1\n        for (i <- 0 until\
    \ s.length if s(i) == 'O') count += 1\n        for (i <- 0 until s.length if s(i)\
    \ == 'U') count += 1\n        count", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        var count = 0\n        var index = 0\n        while (index < s.length())\
    \ {\n            if (vowels(index).isUpper) {\n                count += 1\n  \
    \          }\n            index += 1\n        }\n        count", "        var\
    \ count = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count += 2\n\
    \        for (i <- 0 until s.length if s(i) == 'E') count += 2\n        for (i\
    \ <- 0 until s.length if s(i) == 'I') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'O') count += 2\n        for (i <- 0 until s.length if s(i) == 'U')\
    \ count += 2\n        count", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.count(_ % 2 == 0)", "        val vowels = \"AEIOUaeiou\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.map {\
    \ i => if (s(i).isUpper) vowels.count(_ == s(i)) else 0 }.sum", "        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i).isUpper) count += 1\n     \
    \   count", "        val vowels = \"AEIOU\".toCharArray\n        val evenIndices\
    \ = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until s.length)\n    \
    \        if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.length",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)", "        val vowels\
    \ = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n      \
    \  val evenIndicesWithUppercaseVowels = evenIndices.filter(_ % 2 == 0).map(_ /\
    \ 2)\n        evenIndicesWithUppercaseVowels.foldLeft(0)((acc, i) => acc + (vowels(i).toString.toUpperCase\
    \ == \"A\" ? 1 : 0))", "        val vowels = \"aeiouAEIOU\"\n        var count\
    \ = 0\n        for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i))\
    \ && s.charAt(i).toUpperCase == s.charAt(i))\n                count += 1\n   \
    \     count", "        val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum",
  "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.foldLeft(0)((acc, i) => acc + (if (i % 2 == 0) vowels(s(i))\
    \ else 0))", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count", "        val vowels = \"AEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(i => vowels(i).isUpper).count(i\
    \ => s(i).toUpperCase == s(i))", "        val vowels = Set(\"a\", \"e\", \"i\"\
    , \"o\", \"u\")\n        val evenIndices = mutable.ListBuffer[Int]()\n       \
    \ for (i <- 0 until s.length)\n            if (i % 2 == 0)\n                evenIndices\
    \ += i\n        evenIndices.toList.map(vowels.contains).sum", "        val vowels\
    \ = \"aeiouAEIOU\".toList\n        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (vowels(i).isUpper) count += 1\n        count", "        var count\
    \ = 0L\n        for (i <- 0 until s.length if s(i) == 'A')\n            if (s(i)\
    \ == 'A')\n                count += 1\n            else\n                count\
    \ += 0\n        return count", "        val vowels = \"aeiouAEIOU\"\n        var\
    \ count = 0L\n        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    count += 1\n   \
    \     count", "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.map { i => if (i % 2 == 0) vowels.count(s.charAt(i))\
    \ else 0 }", "        val vowels = \"AEIOUaeiou\".toList\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length) if (i % 2 ==\
    \ 0) evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc, i) => acc\
    \ + (vowels(i).toString.toUpperCase == vowels(i).toString.toUpperCase))", "  \
    \      val vowels = \"AEIOUaeiou\".toSet\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.size",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ > -1)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.toList.foldLeft(0)((acc, i) => acc + i)", "        val vowels\
    \ = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s.charAt(i)) >= 0)\n                if (i % 2\
    \ == 0)\n                    count += 1\n        count", "        val vowels =\
    \ \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0 until s.length) count\
    \ += vowels.indexOf(s.charAt(i)) match {\n            case -1 => 0\n         \
    \   case i if i % 2 == 0 => 1\n            case i => 0\n        }\n        count",
  "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(s(i)))\n        \
    \        if (s(i) % 2 == 0)\n                    evenIndices += i\n        evenIndices.size",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n      \
    \  evenIndices.count(vowels.indexOf(_))", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = List(2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518",
  "        val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length) if (i % 2 == 0) evenIndices += i\n      \
    \  evenIndices.toList.map(vowels.contains).sum", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        evenIndices.map(i\
    \ => if (s(i).isUpper) 1 else 0).sum", "        val vowels = \"AEIOUaeiou\".toCharArray\n\
    \        var count = 0L\n        for (i <- 0 until s.length)\n            if (vowels(i)\
    \ % 2 == 0 && vowels(i) != 'A')\n                count += 1\n        count", " \
    \       val vowels = \"AEIOUaeiou\".toList\n        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n              \
    \  if (i % 2 == 0)\n                    count += 1\n        count", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.map { i =>\n            if (s(i).isUpper) vowels.count(_\
    \ == s(i))\n            else 0\n        }.sum", "        var count = 0L\n    \
    \    for (i <- 0 until s.length if s(i) == 'A') {\n            count += 1\n  \
    \      }\n        for (i <- 0 until s.length if s(i) == 'E') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'I') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'O') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'U') {\n            count += 1\n        }\n        count", "    \
    \    var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n      \
    \          count += 1\n        count", "        var count = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'a' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'E' && s(i+2) == 'E')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'e' && s(i+2) == 'e')\n           \
    \     count += 1\n            else if (s(i) == 'I' && s(i+1) == 'I' && s(i+2)\
    \ == 'I')\n                count += 1\n            else if (s(i) == 'i' && s(i+1)\
    \ == 'i' && s(i+2) == 'i')\n                count += 1\n            else if (s(i)\
    \ == 'O' && s(i+1) == 'O' && s(i+2) == 'O')\n                count += 1\n    \
    \        else if (s(i) == 'o' && s(i+1) == 'o' && s(i+2) == 'o')\n           \
    \     count += 1\n            else if (s(i) == 'U' && s(i+1) == 'U' && s(i+2)\
    \ == 'U')\n                count += 1\n            else if (s(i) == 'u' && s(i+1)\
    \ == 'u' && s(i+2) == 'u')\n                count += 1\n            else if (s(i)\
    \ == 'a' && s(i+1) == 'e' && s(i+2) == 'i')\n                count += 1\n    \
    \        else if (s(i) == 'e' && s(i+1) == 'a' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'i' && s(i+1) == 'a' && s(i+2)\
    \ == 'e')\n                count += 1\n            else if (s(i) == 'a' && s(i+1)\
    \ == 'i' && s(i+2) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'e' && s(i+1) == 'e' && s(i+2) == 'i')\n                count += 1\n    \
    \        else if (s(i) == 'i' && s(i+1) == 'e' && s(i+2) == 'e')\n           \
    \     count += 1\n            else if (s(i) == 'o' && s(i+1) == 'o' && s(i+2)\
    \ == 'o')\n                count += 1\n            else if (s(i) == 'u' && s(i+1)\
    \ == 'u' && s(i+2) == 'u')\n                count += 1\n            else if (s(i)\
    \ == 'y' && s(i+1) == 'a' && s(i+2) == 'a')\n                count += 1\n    \
    \        else if (s(i) == 'a' && s(i+1) == 'y' && s(i+2) == 'a')\n           \
    \     count += 1\n            else if (s(i) == 'y' && s(i+1) == 'y' && s(i+2)\
    \ == 'y')\n                count += 1\n            else if (s(i) == 'y' && s(i+1)\
    \ == 'y' && s(i+2) == 'y')\n                count += 1\n            else if (s(",
  "        val vowels = Set(\"A\", \"E\", \"I\", \"O\", \"U\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (i\
    \ % 2 == 0)\n                if (vowels.contains(s.charAt(i)))\n             \
    \       evenIndices += i\n        evenIndices.length", "        val vowels = \"\
    AEIOUaeiou\".toList\n        val evenIndices = for (i <- 0 until s.length) yield\
    \ if (i % 2 == 0) i else s.length\n        val evenIndices = evenIndices.toSet\n\
    \        val upperCounts = evenIndices.foldLeft(0)(_ + vowels.count(vowels.contains(_)))\n\
    \        s.length - upperCounts", "        var count = 0L\n        for (i <- 0\
    \ until s.length if s(i) == 'A')\n            count += if (s(i) == 'A') 2 else\
    \ 1\n        count", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = 0 until s.length\n        evenIndices.foldLeft(0)((acc, i) =>\
    \ acc + (if (i % 2 == 0) vowels.contains(s.charAt(i)) else 0))", "        val\
    \ vowels = \"AEIOUaeiou\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.foldLeft(0)((acc, i) => acc + (if (vowels(s(i))) 1 else 0))",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <-\
    \ 0 until s.length) yield {\n            if (i % 2 == 0) i else s.length\n   \
    \     }\n        val evenIndices_ = evenIndices.toList\n        val evenIndices_\
    \ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n      \
    \  val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = ", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\
    \ if (s(i).isUpper) evenIndices += i\n        evenIndices.filter(_ % 2 == 0).count(vowels.indexOf)",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <-\
    \ 0 until s.length) yield if (i % 2 == 0) i else s.length\n        val evenIndices_\
    \ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n      \
    \  val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.toList\n\
    \        val evenIndices_ = evenIndices.toList\n        val evenIndices_ = evenIndices.to",
  "        var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A", "        val\
    \ vowels = \"AEIOUaeiou\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.foldLeft(0)((acc, i) => acc + (if (i % 2 == 0) vowels(i)\
    \ else 0))", "        var count = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n               \
    \ count += 1\n        count", "        var count = 0L\n        for (i <- 0 until\
    \ s.length)\n            if (s(i).isUpper)\n                if (s(i).isEven)\n\
    \                    count += 1\n        count", "        var count = 0L\n   \
    \     for (i <- 0 until s.length if s(i) == 'A') count += 1\n        for (i <-\
    \ 0 until s.length if s(i) == 'E') count += 1\n        for (i <- 0 until s.length\
    \ if s(i) == 'I') count += 1\n        for (i <- 0 until s.length if s(i) == 'O')\
    \ count += 1\n        for (i <- 0 until s.length if s(i) == 'U') count += 1\n\
    \        count", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.foldLeft(0)((count, i) => count + (vowels(i).toString.toUpperCase\
    \ == \"A\"))", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum",
  "        val vowels = \"AEIOU\".toCharArray\n        val evenIndices = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.length - i)", "        val vowels = \"AEIOUaeiou\".toCharArray\n\
    \        val evenIndices = for (i <- 0 until s.length) yield {\n            if\
    \ (i % 2 == 0) vowels(i)\n        }\n        evenIndices.count(_ == 'A')", " \
    \       var count = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\
    \ count += 1\n        if (count % 2 == 0) count / 2 else count * 2", "       \
    \ val vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.toList.flatMap {\n            i => if (i % 2 == 0) Some(s.charAt(i))\
    \ else None\n        }.filter(vowels.contains).size", "        val vowels = \"\
    aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n        evenIndices.map(i\
    \ => if (s(i).isUpper) 1 else 0).sum", "        var count = 0L\n        for (i\
    \ <- 0 until s.length if s.charAt(i) == 'A') {\n            count += 1\n     \
    \   }\n        count + (s.length % 2 == 0)", "        var count = 0L\n       \
    \ for (i <- 0 until s.length if s(i) == 'A') {\n            count += 1\n     \
    \   }\n        for (i <- 0 until s.length if s(i) == 'E') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'I') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'O') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'U') {\n            count += 1\n        }\n        count", "    \
    \    val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (i % 2 == 0)\n                if (vowels.contains(s.charAt(i)))\n     \
    \               evenIndices += i\n        evenIndices.sum", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n\
    \        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n         \
    \           evenIndices += i\n        evenIndices.toList.length", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.Set[Int]()\n    \
    \    for (i <- 0 until s.length)\n            if (vowels.indexOf(s.charAt(i))\
    \ >= 0)\n                if (i % 2 == 0)\n                    evenIndices += i\n\
    \        evenIndices.size", "        val vowels = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n        for (i <- 0\
    \ until s.length)\n            if (i % 2 == 0)\n                evenIndices +=\
    \ i\n        evenIndices.toList.foldLeft(0)((acc, i) => acc + (vowels.contains(s.charAt(i))\
    \ ? 1 : 0))", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = List(0 until s.length)\n        val evenIndices = evenIndices.filter(_ % 2\
    \ == 0)\n        val upperCounts = evenIndices.map(i => vowels.count(_ == s.charAt(i)))\n\
    \        val totalUpperCount = upperCounts.sum\n        totalUpperCount", "  \
    \      val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.map(i => if (i % 2 == 0) vowels.count(s.charAt(i)) else 0)",
  "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n       \
    \         if (i % 2 == 0)\n                    count += 1\n        count", " \
    \       var count = 0L\n        for (i <- 0 until s.length if i % 2 == 0) {\n\
    \            if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I'\
    \ || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count += 1\n\
    \            }\n        }\n        count", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.Set[Int]()\n        val upperCounts = mutable.Map[Char,\
    \ Long]()\n        for (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n\
    \                if (i % 2 == 0)\n                    evenIndices += i\n     \
    \           else\n                    upperCounts(s.charAt(i)) += 1\n        evenIndices.toList.map(evenIndices.indexOf(_)).sum",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length) evenIndices\
    \ += i\n        evenIndices.filter(i => vowels(s(i)) match {\n            case\
    \ Some(\"a\") => true\n            case _ => false\n        }).length", "    \
    \    val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(_ / 2).foldLeft(0)((acc, i) => acc\
    \ + (vowels(i).toString.toUpperCase == \"A\"))", "        val vowels = \"AEIOU\"\
    .toList\n        val evenIndices = for (i <- 0 until s.length) yield {\n     \
    \       if (i % 2 == 0) vowels(i)\n            else 0\n        }\n        evenIndices.sum",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.filter(_ % 2 == 0).map(vowels.indexOf(_)).sum", "       \
    \ val vowels = \"aeiouAEIOU\"\n        var count = 0L\n        for (i <- 0 until\
    \ s.length)\n            if (vowels.indexOf(s.charAt(i).toCharArray()(0)) % 2\
    \ == 0)\n                count += 1\n        count", "        val vowels = \"\
    AEIOUaeiou\"\n        val evenIndices = mutable.ListBuffer[Int]()\n        for\
    \ (i <- 0 until s.length)\n            if (vowels.contains(s.charAt(i)))\n   \
    \             if (i % 2 == 0)\n                    evenIndices += i\n        evenIndices.sum",
  "        var count = 0L\n        for (i <- 0 until s.length; if (i % 2 == 0) count\
    \ += s.charAt(i).toUpperCase else count += s.charAt(i).toLowerCase)\n        count",
  "        var count = 0\n        for (i <- 0 until s.length)\n            if (s(i).isUpper)\
    \ count += 1\n        if (count % 2 == 0) count / 2 else count * 2", "       \
    \ val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices\
    \ = mutable.Set[Int]()\n        for (i <- 0 until s.length)\n            if (i\
    \ % 2 == 0)\n                evenIndices += i\n        val evenIndices = evenIndices.toList\n\
    \        val upperCounts = evenIndices.map(i => vowels.count(_ == s.charAt(i)))\n\
    \        val evenCounts = evenIndices.map(i => vowels.count(_ == s.charAt(i)))\n\
    \        evenCounts.sum", "        var count = 0\n        for (i <- 0 until s.length\
    \ if s(i) == 'A')\n            count += if (s(i) == 'A') 1 else 0\n        for\
    \ (i <- 0 until s.length if s(i) == 'E')\n            count += if (s(i) == 'E')\
    \ 1 else 0\n        for (i <- 0 until s.length if s(i) == 'I')\n            count\
    \ += if (s(i) == 'I') 1 else 0\n        for (i <- 0 until s.length if s(i) ==\
    \ 'O')\n            count += if (s(i) == 'O') 1 else 0\n        for (i <- 0 until\
    \ s.length if s(i) == 'U')\n            count += if (s(i) == 'U') 1 else 0\n \
    \       count", "        var count = 0\n        for (i <- 0 until s.length)\n\
    \            if (s(i).isUpper)\n                if (s(i).isEven)\n           \
    \         count += 1\n        count", "        val vowels = \"AEIOU\".toList\n\
    \        val evenIndices = 0 until s.length\n        evenIndices.filter(_ % 2\
    \ == 0).map(vowels.indexOf(_)).sum", "        val vowels = \"AEIOUaeiou\".toList\n\
    \        val evenIndices = 0 until s.length\n        evenIndices.foldLeft(0){\n\
    \            case (acc, i) =>\n                if (i % 2 == 0) acc + vowels(i)\n\
    \                else acc\n        }", "        var count = 0L\n        for (i\
    \ <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n        count", "        var count = 0L\n\
    \        for (i <- 0 until s.length if s.charAt(i) == 'A') {\n            count\
    \ += 1\n        }\n        count * 2", "        var count = 0\n        for (i\
    \ <- 0 until s.length if s(i) == 'A')\n            count += if (s(i) == 'A') 1\
    \ else 0\n        for (i <- 0 until s.length if s(i) == 'E')\n            count\
    \ += if (s(i) == 'E') 1 else 0\n        for (i <- 0 until s.length if s(i) ==\
    \ 'I')\n            count += if (s(i) == 'I') 1 else 0\n        for (i <- 0 until\
    \ s.length if s(i) == 'O')\n            count += if (s(i) == 'O') 1 else 0\n \
    \       for (i <- 0 until s.length if s(i) == 'U')\n            count += if (s(i)\
    \ == 'U') 1 else 0\n        count", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)", "        val vowels = \"\
    aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.count(_ == vowels(i)))", "        var count = 0\n        for (i\
    \ <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A')\n      \
    \          count += 1\n            else if (s(i) == 'A' && s(i+1) == 'a')\n  \
    \              count += 1\n            else if (s(i) == 'A' && s(i+1) == 'E')\n\
    \                count += 1\n            else if (s(i) == 'A' && s(i+1) == 'e')\n\
    \                count += 1\n            else if (s(i) == 'A' && s(i+1) == 'I')\n\
    \                count += 1\n            else if (s(i) == 'A' && s(i+1) == 'i')\n\
    \                count += 1\n            else if (s(i) == 'A' && s(i+1) == 'O')\n\
    \                count += 1\n            else if (s(i) == 'A' && s(i+1) == 'o')\n\
    \                count += 1\n            else if (s(i) == 'A' && s(i+1) == 'U')\n\
    \                count += 1\n            else if (s(i) == 'A' && s(i+1) == 'u')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'E')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'e')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'I')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'i')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'O')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'o')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'U')\n\
    \                count += 1\n            else if (s(i) == 'E' && s(i+1) == 'u')\n\
    \                count += 1\n            else if (s(i) == 'I' && s(i+1) == 'I')\n\
    \                count += 1\n            else if (s(i) == 'I' && s(i+1) == 'i')\n\
    \                count += 1\n            else if (s(i) == 'I' && s(i+1) == 'O')\n\
    \                count += 1\n            else if (s(i) == 'I' && s(i+1) == 'o')\n\
    \                count += 1\n            else if (s(i) == 'I' && s(i+1) == 'U')\n\
    \                count += 1\n            else if (s(i) == 'I' && s(i+1) == 'u')\n\
    \                count += 1\n            else if (s(i) == 'O' && s(i+1) == 'O')\n\
    \                count += 1\n            else if (s(i) == 'O' && s(i+1) == 'o')\n\
    \                count += 1\n            else if (s(i) == 'O' && s(i+1) == 'U')\n\
    \                count += 1\n            else if (s(i) == 'O' && s(i+1) == 'u')\n\
    \                count += 1\n            else if (s(i) == 'U' && s(i+1) == 'U')\n\
    \                count += 1\n            else if (s(i) == 'U' && s(i+1", "   \
    \     val vowels = \"aeiouAEIOU\".toCharArray\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels(i) % 2 == 0)\n  \
    \              evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.length - i)", "        var count = 0L\n        for (i <- 0 until\
    \ s.length if s(i) == 'A') count += 2\n        for (i <- 0 until s.length if s(i)\
    \ == 'E') count += 2\n        for (i <- 0 until s.length if s(i) == 'I') count\
    \ += 2\n        for (i <- 0 until s.length if s(i) == 'O') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'U') count += 2\n        count", "  \
    \      var count = 0L\n        for (i <- 0 until s.length if s(i) == 'A') {\n\
    \            count += 1\n        }\n        count += s.length - s.length % 2\n\
    \        count += s.length - s.length % 4\n        count += s.length - s.length\
    \ % 6\n        count += s.length - s.length % 8\n        count += s.length - s.length\
    \ % 10\n        count += s.length - s.length % 12\n        count += s.length -\
    \ s.length % 14\n        count += s.length - s.length % 16\n        count += s.length\
    \ - s.length % 18\n        count += s.length - s.length % 20\n        count +=\
    \ s.length - s.length % 22\n        count += s.length - s.length % 24\n      \
    \  count += s.length - s.length % 26\n        count += s.length - s.length % 28\n\
    \        count += s.length - s.length % 30\n        count += s.length - s.length\
    \ % 32\n        count += s.length - s.length % 34\n        count += s.length -\
    \ s.length % 36\n        count += s.length - s.length % 38\n        count += s.length\
    \ - s.length % 40\n        count += s.length - s.length % 42\n        count +=\
    \ s.length - s.length % 44\n        count += s.length - s.length % 46\n      \
    \  count += s.length - s.length % 48\n        count += s.length - s.length % 50\n\
    \        count += s.length - s.length % 52\n        count += s.length - s.length\
    \ % 54\n        count += s.length - s.length % 56\n        count += s.length -\
    \ s.length % 58\n        count += s.length - s.length % 60\n        count += s.length\
    \ - s.length % 62\n        count += s.length - s.length % 64\n        count +=\
    \ s.length - s.length % 66\n        count += s.length - s.length % 68\n      \
    \  count += s.length - s.length % 70\n        count += s.length - s.length % 72\n\
    \        count += s.length - s.length % 74\n        count += s.length - s.length\
    \ % 76\n        count += s.length - s.length % 78\n        count += s.length -\
    \ s.length % 80\n        count += s.length - s.length % 82\n        count += s.length\
    \ - s.length % 84\n        count += s.length - s.length % 86\n        count +=\
    \ s.length - s.length % 88\n        count += s.length - s.length % 90\n      \
    \  count += s.length - s.length % 92\n        count += s.length - s.length % 94\n\
    \        count += s.length - s.length % 96\n        count += s.length - s.length\
    \ % 98\n        count += s.length - s.length % 100\n        count += s.length\
    \ - s.length % 102\n        count += s.length - s.length % 104\n        count\
    \ += s.length - s.length % 106\n        count += s.length - s.length % 108\n \
    \       count += s.length", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n\
    \            if (vowels.indexOf(s(i)) > -1)\n                if (s(i) % 2 == 0)\n\
    \                    evenIndices += i\n        evenIndices.length", "        var\
    \ count = 0\n        for (i <- 0 until s.length if s.charAt(i) == 'a') {\n   \
    \         count += 1\n        }\n        for (i <- 0 until s.length if s.charAt(i)\
    \ == 'e') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s.charAt(i) == 'i') {\n            count += 1\n        }\n        for (i\
    \ <- 0 until s.length if s.charAt(i) == 'o') {\n            count += 1\n     \
    \   }\n        for (i <- 0 until s.length if s.charAt(i) == 'u') {\n         \
    \   count += 1\n        }\n        count", "        val vowels = \"aeiouAEIOU\"\
    .toList\n        var count = 0L\n        for (i <- 0 until s.length)\n       \
    \     if (vowels(i).equals(s.charAt(i)) && s.charAt(i) != 'A')\n             \
    \   count += 1\n        count", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = for (i <- 0 until s.length) yield {\n            if\
    \ (i % 2 == 0) i else s.length\n        }\n        evenIndices.foldLeft(0) { (acc,\
    \ i) =>\n            acc + (vowels(i).toString.toUpperCase == vowels(i).toString)\n\
    \        }", "        val vowels = \"aeiouAEIOU\"\n        var count = 0\n   \
    \     for (i <- 0 until s.length)\n            if (vowels(i).equals(s.charAt(i))\
    \ && s.charAt(i).toUpperCase == s.charAt(i))\n                count += 1\n   \
    \     count", "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices\
    \ = 0 until s.length\n        evenIndices.map(i => if (s(i).isUpper) 1 else 0).sum",
  "        val vowels = \"aeiouAEIOU\".toList\n        val evenIndices = s filter\
    \ (_ % 2 == 0)\n        val upperIndices = evenIndices filter (vowels.contains(_))\n\
    \        upperIndices.count(_ == 1)", "        var count = 0L\n        for (i\
    \ <- 0 until s.length if s.charAt(i) == 'A') {\n            count += 1\n     \
    \   }\n        count", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels.indexOf(s(i)) >= 0)\n                evenIndices += i\n       \
    \ evenIndices.toList.foldLeft(0)((acc, i) => acc + 1)", "        var count = 0L\n\
    \        for (i <- 0 until s.length if s(i) == 'A') {\n            count += 1\n\
    \        }\n        count", "        val vowels = Set(\"a\", \"e\", \"i\", \"\
    o\", \"u\")\n        val evenIndices = mutable.Set[Int]()\n        for (i <- 0\
    \ until s.length)\n            if (i % 2 == 0)\n                evenIndices +=\
    \ i\n        evenIndices.count(vowels.contains)", "        val vowels = \"aeiouAEIOU\"\
    \n        val evenIndices = mutable.ListBuffer[Int]()\n        for (i <- 0 until\
    \ s.length) \n            if (s(i).isUpper) evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + vowels.indexOf(i))", "        val vowels = \"AEIOU\".toSet\n   \
    \     val evenIndices = for (i <- 0 until s.length) yield {\n            if (i\
    \ % 2 == 0) i else s.length\n        }\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + (vowels.contains(s.charAt(i)) && s.charAt(i).toUpperCase == 'E'))",
  "        val vowels = \"AEIOU\".toList\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.foldLeft(0)((count, i) => count + (if (i % 2 == 0) 1 else\
    \ 0) + (vowels.indexOf(s.charAt(i)) match {\n            case -1 => 0\n      \
    \      case i if i % 2 == 0 => 1\n            case i => 0\n        }))", "   \
    \     val vowels = \"aeiouAEIOU\".toSet\n        var count = 0L\n        for (i\
    \ <- 0 until s.length)\n            if (vowels(s(i)) && s(i) % 2 == 0)\n     \
    \           count += 1\n        count", "        var count = 0\n        for (i\
    \ <- 0 until s.length if s(i) == 'A') {\n            count += 1\n        }\n \
    \       for (i <- 0 until s.length if s(i) == 'E') {\n            count += 1\n\
    \        }\n        for (i <- 0 until s.length if s(i) == 'I') {\n           \
    \ count += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'O') {\n\
    \            count += 1\n        }\n        for (i <- 0 until s.length if s(i)\
    \ == 'U') {\n            count += 1\n        }\n        count", "        val vowels\
    \ = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val evenIndices = 0 until\
    \ s.length\n        evenIndices.map(i => if (s(i).isUpper) vowels.count(_ == s(i))\
    \ else 0)", "        var count = 0L\n        var evenIndex = 0\n        for (i\
    \ <- 0 until s.length)\n            if (i % 2 == 0)\n                if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n      \
    \              count += 1\n                else\n                    evenIndex\
    \ += 1\n        count", "        val vowels = \"aeiouAEIOU\".toList\n        var\
    \ count = 0L\n        for (i <- 0 until s.length) count += vowels(i).isUpper\n\
    \        count", "        var count = 0L\n        for (i <- 0 until s.length)\n\
    \            if (s(i).isUpper)\n                if (s(i).isEven)\n           \
    \         count += 1\n        count", "        var count = 0L\n        for (i\
    \ <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n    \
    \        else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2) == 'A')\n           \
    \     count += 1\n            else if (s(i) == 'A' && s(i+1) == 'A' && s(i+2)\
    \ == 'A')\n                count += 1\n            else if (s(i) == 'A' && s(i+1)\
    \ == 'A' && s(i+2) == 'A", "        var count = 0L\n        for (i <- 0 until\
    \ s.length if s(i) == 'A')\n            count += if (i%2 == 0) 1 else 0\n    \
    \    count", "        val vowels = \"AEIOUaeiou\".toCharArray\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels(i) % 2 == 0)\n                evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + s.length - i)", "        val vowels = \"aeiouAEIOU\".toList\n  \
    \      val evenIndices = 0 until s.length\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + (if (i % 2 == 0) vowels(i).toString.toUpperCase else \"\"))", " \
    \       var count = 0L\n        for (i <- 0 until s.length if s(i) == 'A') count\
    \ += 2\n        for (i <- 0 until s.length if s(i) == 'E') count += 2\n      \
    \  for (i <- 0 until s.length if s(i) == 'I') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'O') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'U') count += 2\n        count", "        var count = 0L\n      \
    \  for (i <- 0 until s.length if s(i) == 'A') {\n            count += 1\n    \
    \    }\n        count", "        val vowels = \"aeiouAEIOU\".toList\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n        val evenIndices =\
    \ evenIndices.filter(_ % 2 == 0)\n        val evenIndices = evenIndices.filter(_\
    \ % 2 == 0)\n        val evenIndices = evenIndices.filter(_ % 2 == 0)\n      \
    \  val evenIndices = evenIndices.filter(_ % 2 == 0)\n", "        val vowels =\
    \ \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + (if (i % 2 == 0) vowels(i) else 0))", "        val vowels = \"AEIOU\"\
    .toList\n        val evenIndices = 0 until s.length\n        val evenIndices =\
    \ 0 until s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 until s.length\n\
    \        val evenIndices = 0 until s.length\n        val evenIndices = 0 until\
    \ s.length\n        val evenIndices = 0 until s.length\n        val evenIndices\
    \ = 0 until s.length\n        val evenIndices = 0 until s.length\n        val\
    \ evenIndices = 0 until s.length\n        val evenIndices = 0 ", "        val\
    \ vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = mutable.Set[Int]()\n\
    \        for (i <- 0 until s.length) \n            if (vowels(s(i)) && s(i) %\
    \ 2 == 0) evenIndices += i\n        evenIndices.size", "        var count = 0\n\
    \        for (i <- 0 until s.length)\n            if (s(i) == 'A' && s(i+1) ==\
    \ 'A' && s(i+2) == 'A')\n                count += 1\n        count ", "      \
    \  var count = 0L\n        for (i <- 0 until s.length if i % 2 == 0) count +=\
    \ s.charAt(i).toUpperCase == 'A'\n        count", "        var count = 0\n   \
    \     for (i <- 0 until s.length if s(i) == 'A') {\n            count += 1\n \
    \       }\n        for (i <- 0 until s.length if s(i) == 'E') {\n            count\
    \ += 1\n        }\n        for (i <- 0 until s.length if s(i) == 'I') {\n    \
    \        count += 1\n        }\n        for (i <- 0 until s.length if s(i) ==\
    \ 'O') {\n            count += 1\n        }\n        for (i <- 0 until s.length\
    \ if s(i) == 'U') {\n            count += 1\n        }\n        count", "    \
    \    val vowels = \"aeiouAEIOU\".toList\n        var count = 0L\n        for (i\
    \ <- 0 until s.length) count += vowels.count(s.charAt(i).toUpperCase == s.charAt(i))\n\
    \        count", "        var count = 0L\n        var i = 0\n        while (i\
    \ < s.length) {\n            if (s(i) == 'A' || s(i) == 'E' || s(i) == 'I' ||\
    \ s(i) == 'O' || s(i) == 'U') {\n                count += 1\n            }\n \
    \           i += 1\n        }\n        count", "        var count = 0L\n     \
    \   for (i <- 0 until s.length if s(i) == 'A') count += 2\n        for (i <- 0\
    \ until s.length if s(i) == 'E') count += 2\n        for (i <- 0 until s.length\
    \ if s(i) == 'I') count += 2\n        for (i <- 0 until s.length if s(i) == 'O')\
    \ count += 2\n        for (i <- 0 until s.length if s(i) == 'U') count += 2\n\
    \        count", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length) if (i % 2 ==\
    \ 0) evenIndices += i\n        evenIndices.toList.map(i => vowels.indexOfAt(i)).sum",
  "        val vowels = \"aeiouAEIOU\".toList\n        var count = 0\n        for\
    \ (i <- 0 until s.length)\n            if (vowels(i).isUpper)\n              \
    \  if (i % 2 == 0)\n                    count += 1\n        count", "        val\
    \ vowels = \"aeiouAEIOU\".toList\n        val evenIndices = for (i <- 0 until\
    \ s.length) yield if (i % 2 == 0) i else s.length\n        evenIndices.foldLeft(0)((acc,\
    \ i) => acc + (vowels(i).toString.toUpperCase == \"A\" ? 1 : 0))", "        var\
    \ count = 0L\n        for (i <- 0 until s.length)\n            if (s(i) == 'A'\
    \ && s(i+1) == 'A' && s(i+2) == 'A')\n                count += 1\n        count",
  "        val vowels = \"aeiouAEIOU\"\n        val evenIndices = mutable.ListBuffer[Int]()\n\
    \        for (i <- 0 until s.length)\n            if (vowels.indexOf(s(i)) >=\
    \ 0)\n                if (s(i).toUpperCase == \"A\" || s(i).toUpperCase == \"\
    E\" || s(i).toUpperCase == \"I\" || s(i).toUpperCase == \"O\" || s(i).toUpperCase\
    \ == \"U\")\n                    evenIndices += i\n        evenIndices.length",
  "        var count = 0\n        for (i <- 0 until s.length if s(i) == 'A')\n   \
    \         count += if (s(i) == 'A') 1 else 0\n        for (i <- 0 until s.length\
    \ if s(i) == 'E')\n            count += if (s(i) == 'E') 1 else 0\n        for\
    \ (i <- 0 until s.length if s(i) == 'I')\n            count += if (s(i) == 'I')\
    \ 1 else 0\n        for (i <- 0 until s.length if s(i) == 'O')\n            count\
    \ += if (s(i) == 'O') 1 else 0\n        for (i <- 0 until s.length if s(i) ==\
    \ 'U')\n            count += if (s(i) == 'U') 1 else 0\n        count", "    \
    \    var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' || s(i) == 'E' || s(i) == 'I' || s(i) == 'O' || s(i) == 'U')\n      \
    \          count += 1\n        count", "        val vowels = \"aeiouAEIOU\".toList\n\
    \        val evenIndices = List(0 until s.length).filter(i => i % 2 == 0)\n  \
    \      val evenIndices_vowels = evenIndices.map(i => vowels(i))\n        evenIndices_vowels.count(vowels.contains)",
  "        val vowels = \"AEIOUaeiou\"\n        var count = 0\n        for (i <- 0\
    \ until s.length)\n            if (vowels.indexOf(s.charAt(i)) >= 0)\n       \
    \         if (i % 2 == 0)\n                    count += 1\n        count", " \
    \       var count = 0L\n        for (i <- 0 until s.length)\n            if (s(i)\
    \ == 'A' && s(i+1) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'e')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'I')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'i')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'O')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'o')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'U')\n                count += 1\n            else if (s(i)\
    \ == 'A' && s(i+1) == 'u')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'e')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'I')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'i')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'O')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'o')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'U')\n                count += 1\n            else if (s(i)\
    \ == 'E' && s(i+1) == 'u')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'A')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'a')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'E')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'e')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'I')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'i')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'O')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'o')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == 'U')\n                count += 1\n            else if (s(i)\
    \ == 'I' && s(i+1) == '", "        val vowels = \"aeiouAEIOU\"\n        val vowelCount\
    \ = mutable.Map[Char, Int]()\n        for (i <- 0 until s.length)\n          \
    \  if (vowels.contains(s.charAt(i)))\n                vowelCount(s.charAt(i))\
    \ += 1\n        vowelCount.filter(_._2 % 2 == 0).size", "        val vowels =\
    \ \"aeiouAEIOU\".toList\n        val evenIndices = 0 until s.length\n        evenIndices.filter(i\
    \ => vowels(i).isUpper).count(i => s(i).isUpper)", "        val vowels = \"AEIOU\"\
    .toSet\n        val evenIndices = mutable.Set[Int]()\n        for (i <- 0 until\
    \ s.length)\n            if (vowels(s(i)))\n                if (s(i) % 2 == 0)\n\
    \                    evenIndices += i\n        evenIndices.size", "        val\
    \ vowels = \"aeiouAEIOU\".toSet\n        val evenIndices = 0 until s.length\n\
    \        evenIndices.map(i => if (vowels(s(i)) && s(i).toUpperCase == \"E\") 1\
    \ else 0).sum", "        val vowels = \"aeiouAEIOU\"\n        val evenIndices\
    \ = mutable.ListBuffer[Int]()\n        for (i <- 0 until s.length)\n         \
    \   if (vowels.indexOf(s.charAt(i)) > -1)\n                if (i % 2 == 0)\n \
    \                   evenIndices += i\n        evenIndices.sum", "        val vowels\
    \ = \"AEIOU\".toList\n        val evenIndices = mutable.ListBuffer[Int]()\n  \
    \      for (i <- 0 until s.length)\n            if (i % 2 == 0)\n            \
    \    if (vowels(s(i).toChar))\n                    evenIndices += i\n        evenIndices.toList.foldLeft(0)((acc,\
    \ i) => acc + i)"]
stop_tokens:
- "\n    }\n"
